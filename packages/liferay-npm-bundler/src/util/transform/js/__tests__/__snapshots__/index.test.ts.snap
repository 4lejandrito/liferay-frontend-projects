// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`replace works for double transformation 1`] = `
Object {
  "ast": Node {
    "body": Array [
      Node {
        "end": 33,
        "expression": Node {
          "arguments": Array [
            Node {
              "end": 17,
              "raw": "'a-module'",
              "start": 7,
              "type": "Literal",
              "value": "a-module",
            },
            Node {
              "async": false,
              "body": Node {
                "body": Array [
                  Node {
                    "end": 12,
                    "expression": Node {
                      "end": 12,
                      "left": Node {
                        "end": 8,
                        "loc": SourceLocation {
                          "end": Position {
                            "column": 8,
                            "line": 1,
                          },
                          "start": Position {
                            "column": 0,
                            "line": 1,
                          },
                        },
                        "name": "a",
                        "start": 0,
                        "type": "Identifier",
                      },
                      "loc": SourceLocation {
                        "end": Position {
                          "column": 12,
                          "line": 1,
                        },
                        "start": Position {
                          "column": 0,
                          "line": 1,
                        },
                      },
                      "operator": "=",
                      "right": Node {
                        "end": 12,
                        "loc": SourceLocation {
                          "end": Position {
                            "column": 12,
                            "line": 1,
                          },
                          "start": Position {
                            "column": 11,
                            "line": 1,
                          },
                        },
                        "raw": "1",
                        "start": 11,
                        "type": "Literal",
                        "value": 1,
                      },
                      "start": 0,
                      "type": "AssignmentExpression",
                    },
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 12,
                        "line": 1,
                      },
                      "start": Position {
                        "column": 0,
                        "line": 1,
                      },
                    },
                    "start": 0,
                    "type": "ExpressionStatement",
                  },
                ],
                "end": 32,
                "start": 30,
                "type": "BlockStatement",
              },
              "end": 32,
              "expression": false,
              "generator": false,
              "id": null,
              "params": Array [],
              "start": 19,
              "type": "FunctionExpression",
            },
          ],
          "callee": Node {
            "end": 6,
            "name": "define",
            "start": 0,
            "type": "Identifier",
          },
          "end": 33,
          "start": 0,
          "type": "CallExpression",
        },
        "start": 0,
        "type": "ExpressionStatement",
      },
    ],
    "end": 12,
    "loc": SourceLocation {
      "end": Position {
        "column": 12,
        "line": 1,
      },
      "start": Position {
        "column": 0,
        "line": 1,
      },
    },
    "sourceType": "module",
    "start": 0,
    "type": "Program",
  },
  "code": "define('a-module', function () {
    a = 1;
});",
  "map": Object {
    "file": "<unknown>",
    "mappings": ";IAAAA,CAAAA,GAAA,CAAAA",
    "names": Array [
      "a",
    ],
    "sources": Array [
      "<unknown>",
    ],
    "sourcesContent": Array [
      "variable = 1",
    ],
    "version": 3,
  },
}
`;

exports[`replace works for single transformation 1`] = `
Object {
  "ast": Node {
    "body": Array [
      Node {
        "end": 12,
        "expression": Node {
          "end": 12,
          "left": Node {
            "end": 8,
            "loc": SourceLocation {
              "end": Position {
                "column": 8,
                "line": 1,
              },
              "start": Position {
                "column": 0,
                "line": 1,
              },
            },
            "name": "a",
            "start": 0,
            "type": "Identifier",
          },
          "loc": SourceLocation {
            "end": Position {
              "column": 12,
              "line": 1,
            },
            "start": Position {
              "column": 0,
              "line": 1,
            },
          },
          "operator": "=",
          "right": Node {
            "end": 12,
            "loc": SourceLocation {
              "end": Position {
                "column": 12,
                "line": 1,
              },
              "start": Position {
                "column": 11,
                "line": 1,
              },
            },
            "raw": "1",
            "start": 11,
            "type": "Literal",
            "value": 1,
          },
          "start": 0,
          "type": "AssignmentExpression",
        },
        "loc": SourceLocation {
          "end": Position {
            "column": 12,
            "line": 1,
          },
          "start": Position {
            "column": 0,
            "line": 1,
          },
        },
        "start": 0,
        "type": "ExpressionStatement",
      },
    ],
    "end": 12,
    "loc": SourceLocation {
      "end": Position {
        "column": 12,
        "line": 1,
      },
      "start": Position {
        "column": 0,
        "line": 1,
      },
    },
    "sourceType": "module",
    "start": 0,
    "type": "Program",
  },
  "code": "a = 1;",
  "map": Object {
    "file": "<unknown>",
    "mappings": "AAAAA,CAAA,GAAW,CAAX",
    "names": Array [
      "a",
    ],
    "sources": Array [
      "<unknown>",
    ],
    "sourcesContent": Array [
      "variable = 1",
    ],
    "version": 3,
  },
}
`;
