{"version":3,"sources":["App.js"],"names":["App","activeScreen","activePath","allowPreventNavigate","basePath","captureScrollPositionFromScrollEvent","defaultTitle","document","title","formSelector","linkSelector","loadingCssClass","nativeScrollRestorationSupported","window","history","isNavigationPending","pendingNavigate","popstateScrollLeft","popstateScrollTop","redirectPath","routes","screens","skipLoadPopstate","surfaces","updateScrollPosition","appEventHandlers_","add","on","onScroll_","bind","onLoad_","onPopstate_","onStartNavigate_","onBeforeNavigate_","onBeforeNavigateDefault_","setLinkSelector","setFormSelector","Array","isArray","forEach","route","path","handler","push","surface","isString","getId","url","getUrlPath","uri","isLinkSameOrigin_","getHostname","console","log","isSameBasePath_","findRoute","Object","keys","clearCache","removeScreen","screen","getHandler","isImplementedBy","prototype","clearScreensCache","formEventHandler_","removeListener","linkEventHandler_","removeAllListeners","navigate","getCurrentBrowserPath","opt_replaceHistory","beforeDeactivate","reject","CancellationError","stopPendingNavigate_","nextScreen","createScreenInstance","load","then","deactivate","prepareNavigateHistory_","prepareNavigateSurfaces_","extractParams","evaluateStyles","flip","evaluateScripts","syncScrollPositionSyncThenAsync_","finalizeNavigate_","catch","reason","handleNavigateError_","activate","isCacheable","capturedFormElement","lastIndexOf","isCurrentBrowserPath","getUrlPathWithoutHash","substr","length","i","matchesPath","err","thenAlways","hostname","location","indexOf","state","winner","switchScrollPositionRace","removeEventListener","scrollTo","scrollLeft","scrollTop","nextTick","addEventListener","nativeScrollRestoration_","scrollRestoration","href","event","canNavigate","navigateFailed","preventDefault","hash","anchorElement","getElementById","substring","offsetLeft","offsetTop","isHtml5HistorySupported","Error","emit","replaceHistory","form","altKey","ctrlKey","metaKey","shiftKey","button","maybeNavigate_","delegateTarget","method","action","setTimeout","maybeRepositionScrollToHashedAnchor","reloadPage","senna","lockHistoryScrollPosition_","saveHistoryCurrentPageScrollPosition_","maybeDisableNativeScrollRestoration","addClasses","documentElement","endNavigatePayload","doNavigate_","error","removeClasses","maybeRestoreNativeScrollRestoration","getTitle","getDefaultTitle","beforeUpdateHistoryPath","historyState","isDefAndNotNull","updateHistory_","beforeUpdateHistoryState","params","id","surfaceContent","getSurfaceContent","addContent","reload","remove","surfaceId","dispose","pageYOffset","pageXOffset","replaceState","delegate","onDocSubmitDelegate_","onDocClickDelegate_","cancel","sync","resolve","pushState"],"mappings":"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","file":"src/app/App.js","sourcesContent":["'use strict';\n\nimport { array, async, core } from 'metal';\nimport debounce from 'metal-debounce';\nimport dom from 'metal-dom';\nimport CancellablePromise from 'metal-promise';\nimport { EventEmitter, EventHandler } from 'metal-events';\nimport utils from '../utils/utils';\nimport globals from '../globals/globals';\nimport Route from '../route/Route';\nimport Screen from '../screen/Screen';\nimport Surface from '../surface/Surface';\nimport Uri from 'metal-uri';\n\nclass App extends EventEmitter {\n\n\t/**\n\t * App class that handle routes and screens lifecycle.\n\t * @constructor\n\t * @extends {EventEmitter}\n\t */\n\tconstructor() {\n\t\tsuper();\n\n\t\t/**\n\t\t * Holds the active screen.\n\t\t * @type {?Screen}\n\t\t * @protected\n\t\t */\n\t\tthis.activeScreen = null;\n\n\t\t/**\n\t\t * Holds the active path containing the query parameters.\n\t\t * @type {?string}\n\t\t * @protected\n\t\t */\n\t\tthis.activePath = null;\n\n\t\t/**\n\t\t * Allows prevent navigate from dom prevented event.\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t * @protected\n\t\t */\n\t\tthis.allowPreventNavigate = true;\n\n\t\t/**\n\t\t * Holds link base path.\n\t\t * @type {!string}\n\t\t * @default ''\n\t\t * @protected\n\t\t */\n\t\tthis.basePath = '';\n\n\t\t/**\n\t\t * Captures scroll position from scroll event.\n\t\t * @type {!boolean}\n\t\t * @default true\n\t\t * @protected\n\t\t */\n\t\tthis.captureScrollPositionFromScrollEvent = true;\n\n\t\t/**\n\t\t * Holds the default page title.\n\t\t * @type {string}\n\t\t * @default null\n\t\t * @protected\n\t\t */\n\t\tthis.defaultTitle = globals.document.title;\n\n\t\t/**\n\t\t * Holds the form selector to define forms that are routed.\n\t\t * @type {!string}\n\t\t * @default form[enctype=\"multipart/form-data\"]:not([data-senna-off])\n\t\t * @protected\n\t\t */\n\t\tthis.formSelector = 'form[enctype=\"multipart/form-data\"]:not([data-senna-off])';\n\n\t\t/**\n\t\t * Holds the link selector to define links that are routed.\n\t\t * @type {!string}\n\t\t * @default a:not([data-senna-off])\n\t\t * @protected\n\t\t */\n\t\tthis.linkSelector = 'a:not([data-senna-off])';\n\n\t\t/**\n\t\t * Holds the loading css class.\n\t\t * @type {!string}\n\t\t * @default senna-loading\n\t\t * @protected\n\t\t */\n\t\tthis.loadingCssClass = 'senna-loading';\n\n\t\t/**\n\t\t * Using the History API to manage your URLs is awesome and, as it happens,\n\t\t * a crucial feature of good web apps. One of its downsides, however, is\n\t\t * that scroll positions are stored and then, more importantly, restored\n\t\t * whenever you traverse the history. This often means unsightly jumps as\n\t\t * the scroll position changes automatically, and especially so if your app\n\t\t * does transitions, or changes the contents of the page in any way.\n\t\t * Ultimately this leads to an horrible user experience. The good news is,\n\t\t * however, that there’s a potential fix: history.scrollRestoration.\n\t\t * https://developers.google.com/web/updates/2015/09/history-api-scroll-restoration\n\t\t * @type {boolean}\n\t\t * @protected\n\t\t */\n\t\tthis.nativeScrollRestorationSupported = ('scrollRestoration' in globals.window.history);\n\n\t\t/**\n\t\t * When set to true there is a pendingNavigate that has not yet been\n\t\t * resolved or rejected.\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t * @protected\n\t\t */\n\t\tthis.isNavigationPending = false;\n\n\t\t/**\n\t\t * Holds a deferred with the current navigation.\n\t\t * @type {?CancellablePromise}\n\t\t * @default null\n\t\t * @protected\n\t\t */\n\t\tthis.pendingNavigate = null;\n\n\t\t/**\n\t\t * Holds the window horizontal scroll position when the navigation using\n\t\t * back or forward happens to be restored after the surfaces are updated.\n\t\t * @type {!Number}\n\t\t * @default 0\n\t\t * @protected\n\t\t */\n\t\tthis.popstateScrollLeft = 0;\n\n\t\t/**\n\t\t * Holds the window vertical scroll position when the navigation using\n\t\t * back or forward happens to be restored after the surfaces are updated.\n\t\t * @type {!Number}\n\t\t * @default 0\n\t\t * @protected\n\t\t */\n\t\tthis.popstateScrollTop = 0;\n\n\t\t/**\n\t\t * Holds the redirect path containing the query parameters.\n\t\t * @type {?string}\n\t\t * @protected\n\t\t */\n\t\tthis.redirectPath = null;\n\n\t\t/**\n\t\t * Holds the screen routes configuration.\n\t\t * @type {?Array}\n\t\t * @default []\n\t\t * @protected\n\t\t */\n\t\tthis.routes = [];\n\n\t\t/**\n\t\t * Maps the screen instances by the url containing the parameters.\n\t\t * @type {?Object}\n\t\t * @default {}\n\t\t * @protected\n\t\t */\n\t\tthis.screens = {};\n\n\t\t/**\n\t\t * When set to true the first erroneous popstate fired on page load will be\n\t\t * ignored, only if <code>globals.window.history.state</code> is also\n\t\t * <code>null</code>.\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t * @protected\n\t\t */\n\t\tthis.skipLoadPopstate = false;\n\n\t\t/**\n\t\t * Maps that index the surfaces instances by the surface id.\n\t\t * @type {?Object}\n\t\t * @default {}\n\t\t * @protected\n\t\t */\n\t\tthis.surfaces = {};\n\n\t\t/**\n\t\t * When set to true, moves the scroll position after popstate, or to the\n\t\t * top of the viewport for new navigation. If false, the browser will\n\t\t * take care of scroll restoration.\n\t\t * @type {!boolean}\n\t\t * @default true\n\t\t * @protected\n\t\t */\n\t\tthis.updateScrollPosition = true;\n\n\t\tthis.appEventHandlers_ = new EventHandler();\n\n\t\tthis.appEventHandlers_.add(\n\t\t\tdom.on(globals.window, 'scroll', debounce(this.onScroll_.bind(this), 100)),\n\t\t\tdom.on(globals.window, 'load', this.onLoad_.bind(this)),\n\t\t\tdom.on(globals.window, 'popstate', this.onPopstate_.bind(this))\n\t\t);\n\n\t\tthis.on('startNavigate', this.onStartNavigate_);\n\t\tthis.on('beforeNavigate', this.onBeforeNavigate_);\n\t\tthis.on('beforeNavigate', this.onBeforeNavigateDefault_, true);\n\n\t\tthis.setLinkSelector(this.linkSelector);\n\t\tthis.setFormSelector(this.formSelector);\n\t}\n\n\t/**\n\t * Adds one or more screens to the application.\n\t *\n\t * Example:\n\t *\n\t * <code>\n\t *   app.addRoutes({ path: '/foo', handler: FooScreen });\n\t *   or\n\t *   app.addRoutes([{ path: '/foo', handler: function(route) { return new FooScreen(); } }]);\n\t * </code>\n\t *\n\t * @param {Object} or {Array} routes Single object or an array of object.\n\t *     Each object should contain <code>path</code> and <code>screen</code>.\n\t *     The <code>path</code> should be a string or a regex that maps the\n\t *     navigation route to a screen class definition (not an instance), e.g:\n\t *         <code>{ path: \"/home:param1\", handler: MyScreen }</code>\n\t *         <code>{ path: /foo.+/, handler: MyScreen }</code>\n\t * @chainable\n\t */\n\taddRoutes(routes) {\n\t\tif (!Array.isArray(routes)) {\n\t\t\troutes = [routes];\n\t\t}\n\t\troutes.forEach((route) => {\n\t\t\tif (!(route instanceof Route)) {\n\t\t\t\troute = new Route(route.path, route.handler);\n\t\t\t}\n\t\t\tthis.routes.push(route);\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds one or more surfaces to the application.\n\t * @param {Surface|String|Array.<Surface|String>} surfaces\n\t *     Surface element id or surface instance. You can also pass an Array\n\t *     whichcontains surface instances or id. In case of ID, these should be\n\t *     the id of surface element.\n\t * @chainable\n\t */\n\taddSurfaces(surfaces) {\n\t\tif (!Array.isArray(surfaces)) {\n\t\t\tsurfaces = [surfaces];\n\t\t}\n\t\tsurfaces.forEach((surface) => {\n\t\t\tif (core.isString(surface)) {\n\t\t\t\tsurface = new Surface(surface);\n\t\t\t}\n\t\t\tthis.surfaces[surface.getId()] = surface;\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns if can navigate to path.\n\t * @param {!string} url\n\t * @return {boolean}\n\t */\n\tcanNavigate(url) {\n\t\tvar path = utils.getUrlPath(url);\n\t\tvar uri = new Uri(url);\n\n\t\tif (!this.isLinkSameOrigin_(uri.getHostname())) {\n\t\t\tconsole.log('Offsite link clicked');\n\t\t\treturn false;\n\t\t}\n\t\tif (!this.isSameBasePath_(path)) {\n\t\t\tconsole.log('Link clicked outside app\\'s base path');\n\t\t\treturn false;\n\t\t}\n\t\tif (!this.findRoute(path)) {\n\t\t\tconsole.log('No route for ' + path);\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Clear screens cache.\n\t * @chainable\n\t */\n\tclearScreensCache() {\n\t\tObject.keys(this.screens).forEach((path) => {\n\t\t\tif (path === this.activePath) {\n\t\t\t\tthis.activeScreen.clearCache();\n\t\t\t} else {\n\t\t\t\tthis.removeScreen(path);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Retrieves or create a screen instance to a path.\n\t * @param {!string} path Path containing the querystring part.\n\t * @return {Screen}\n\t */\n\tcreateScreenInstance(path, route) {\n\t\tif (!this.pendingNavigate && path === this.activePath) {\n\t\t\tconsole.log('Already at destination, refresh navigation');\n\t\t\treturn this.activeScreen;\n\t\t}\n\t\t/* jshint newcap: false */\n\t\tvar screen = this.screens[path];\n\t\tif (!screen) {\n\t\t\tvar handler = route.getHandler();\n\t\t\tif (handler === Screen || Screen.isImplementedBy(handler.prototype)) {\n\t\t\t\tscreen = new handler();\n\t\t\t} else {\n\t\t\t\tscreen = handler(route) || new Screen();\n\t\t\t}\n\t\t\tconsole.log('Create screen for [' + path + '] [' + screen + ']');\n\t\t}\n\t\treturn screen;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdisposeInternal() {\n\t\tif (this.activeScreen) {\n\t\t\tthis.removeScreen(this.activePath);\n\t\t}\n\t\tthis.clearScreensCache();\n\t\tthis.formEventHandler_.removeListener();\n\t\tthis.linkEventHandler_.removeListener();\n\t\tthis.appEventHandlers_.removeAllListeners();\n\t\tsuper.disposeInternal();\n\t}\n\n\t/**\n\t * Dispatches to the first route handler that matches the current path, if\n\t * any.\n\t * @return {CancellablePromise} Returns a pending request cancellable promise.\n\t */\n\tdispatch() {\n\t\treturn this.navigate(utils.getCurrentBrowserPath(), true);\n\t}\n\n\t/**\n\t * Starts navigation to a path.\n\t * @param {!string} path Path containing the querystring part.\n\t * @param {boolean=} opt_replaceHistory Replaces browser history.\n\t * @return {CancellablePromise} Returns a pending request cancellable promise.\n\t */\n\tdoNavigate_(path, opt_replaceHistory) {\n\t\tif (this.activeScreen && this.activeScreen.beforeDeactivate()) {\n\t\t\tthis.pendingNavigate = CancellablePromise.reject(new CancellablePromise.CancellationError('Cancelled by active screen'));\n\t\t\treturn this.pendingNavigate;\n\t\t}\n\n\t\tvar route = this.findRoute(path);\n\t\tif (!route) {\n\t\t\tthis.pendingNavigate = CancellablePromise.reject(new CancellablePromise.CancellationError('No route for ' + path));\n\t\t\treturn this.pendingNavigate;\n\t\t}\n\n\t\tconsole.log('Navigate to [' + path + ']');\n\n\t\tthis.stopPendingNavigate_();\n\t\tthis.isNavigationPending = true;\n\n\t\tvar nextScreen = this.createScreenInstance(path, route);\n\n\t\treturn nextScreen.load(path)\n\t\t\t.then(() => {\n\t\t\t\tif (this.activeScreen) {\n\t\t\t\t\tthis.activeScreen.deactivate();\n\t\t\t\t}\n\t\t\t\tthis.prepareNavigateHistory_(path, nextScreen, opt_replaceHistory);\n\t\t\t\tthis.prepareNavigateSurfaces_(\n\t\t\t\t\tnextScreen,\n\t\t\t\t\tthis.surfaces,\n\t\t\t\t\troute.extractParams(path)\n\t\t\t\t);\n\t\t\t})\n\t\t\t.then(() => nextScreen.evaluateStyles(this.surfaces))\n\t\t\t.then(() => nextScreen.flip(this.surfaces))\n\t\t\t.then(() => nextScreen.evaluateScripts(this.surfaces))\n\t\t\t.then(() => this.syncScrollPositionSyncThenAsync_())\n\t\t\t.then(() => this.finalizeNavigate_(path, nextScreen))\n\t\t\t.catch((reason) => {\n\t\t\t\tthis.isNavigationPending = false;\n\t\t\t\tthis.handleNavigateError_(path, nextScreen, reason);\n\t\t\t\tthrow reason;\n\t\t\t});\n\t}\n\n\t/**\n\t * Finalizes a screen navigation.\n\t * @param {!string} path Path containing the querystring part.\n\t * @param {!Screen} nextScreen\n\t * @protected\n\t */\n\tfinalizeNavigate_(path, nextScreen) {\n\t\tnextScreen.activate();\n\n\t\tif (this.activeScreen && !this.activeScreen.isCacheable()) {\n\t\t\tif (this.activeScreen !== nextScreen) {\n\t\t\t\tthis.removeScreen(this.activePath);\n\t\t\t}\n\t\t}\n\n\t\tthis.activePath = path;\n\t\tthis.activeScreen = nextScreen;\n\t\tthis.screens[path] = nextScreen;\n\t\tthis.isNavigationPending = false;\n\t\tthis.pendingNavigate = null;\n\t\tglobals.capturedFormElement = null;\n\t\tconsole.log('Navigation done');\n\t}\n\n\t/**\n\t * Finds a route for the test path. Returns true if matches has a route,\n\t * otherwise returns null.\n\t * @param {!string} path Path containing the querystring part.\n\t * @return {?Object} Route handler if match any or <code>null</code> if the\n\t *     path is the same as the current url and the path contains a fragment.\n\t */\n\tfindRoute(path) {\n\t\t// Prevents navigation if it's a hash change on the same url.\n\t\tif ((path.lastIndexOf('#') > -1) && utils.isCurrentBrowserPath(path)) {\n\t\t\treturn null;\n\t\t}\n\n\t\tpath = utils.getUrlPathWithoutHash(path);\n\n\t\t// Makes sure that the path substring will be in the expected format\n\t\t// (that is, will end with a \"/\").\n\t\tpath = utils.getUrlPathWithoutHash(path.substr(this.basePath.length));\n\n\t\tfor (var i = 0; i < this.routes.length; i++) {\n\t\t\tvar route = this.routes[i];\n\t\t\tif (route.matchesPath(path)) {\n\t\t\t\treturn route;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Gets allow prevent navigate.\n\t * @return {boolean}\n\t */\n\tgetAllowPreventNavigate() {\n\t\treturn this.allowPreventNavigate;\n\t}\n\n\t/**\n\t * Gets link base path.\n\t * @return {!string}\n\t */\n\tgetBasePath() {\n\t\treturn this.basePath;\n\t}\n\n\t/**\n\t * Gets the default page title.\n\t * @return {string} defaultTitle\n\t */\n\tgetDefaultTitle() {\n\t\treturn this.defaultTitle;\n\t}\n\n\t/**\n\t * Gets the form selector.\n\t * @return {!string}\n\t */\n\tgetFormSelector() {\n\t\treturn this.formSelector;\n\t}\n\n\t/**\n\t * Gets the link selector.\n\t * @return {!string}\n\t */\n\tgetLinkSelector() {\n\t\treturn this.linkSelector;\n\t}\n\n\t/**\n\t * Gets the loading css class.\n\t * @return {!string}\n\t */\n\tgetLoadingCssClass() {\n\t\treturn this.loadingCssClass;\n\t}\n\n\t/**\n\t * Gets the update scroll position value.\n\t * @return {boolean}\n\t */\n\tgetUpdateScrollPosition() {\n\t\treturn this.updateScrollPosition;\n\t}\n\n\t/**\n\t * Handle navigation error.\n\t * @param {!string} path Path containing the querystring part.\n\t * @param {!Screen} nextScreen\n\t * @param {!Error} error\n\t * @protected\n\t */\n\thandleNavigateError_(path, nextScreen, err) {\n\t\tconsole.log('Navigation error for [' + nextScreen + '] (' + err + ')');\n\t\tif (!utils.isCurrentBrowserPath(path)) {\n\t\t\tif (this.isNavigationPending && this.pendingNavigate) {\n\t\t\t\tthis.pendingNavigate.thenAlways(() => this.removeScreen(path), this);\n\t\t\t} else {\n\t\t\t\tthis.removeScreen(path);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Checks if app has routes.\n\t * @return {boolean}\n\t */\n\thasRoutes() {\n\t\treturn this.routes.length > 0;\n\t}\n\n\t/**\n\t * Tests if hostname is an offsite link.\n\t * @param {!string} hostname Link hostname to compare with\n\t *     <code>globals.window.location.hostname</code>.\n\t * @return {boolean}\n\t * @protected\n\t */\n\tisLinkSameOrigin_(hostname) {\n\t\treturn hostname === globals.window.location.hostname;\n\t}\n\n\t/**\n\t * Tests if link element has the same app's base path.\n\t * @param {!string} path Link path containing the querystring part.\n\t * @return {boolean}\n\t * @protected\n\t */\n\tisSameBasePath_(path) {\n\t\treturn path.indexOf(this.basePath) === 0;\n\t}\n\n\t/**\n\t * Lock the document scroll in order to avoid the browser native back and\n\t * forward navigation to change the scroll position. In the end of\n\t * navigation lifecycle scroll is repositioned.\n\t * @protected\n\t */\n\tlockHistoryScrollPosition_() {\n\t\tvar state = globals.window.history.state;\n\t\tif (!state) {\n\t\t\treturn;\n\t\t}\n\t\t// Browsers are inconsistent when re-positioning the scroll history on\n\t\t// popstate. At some browsers, history scroll happens before popstate, then\n\t\t// lock the scroll on the last known position as soon as possible after the\n\t\t// current JS execution context and capture the current value. Some others,\n\t\t// history scroll happens after popstate, in this case, we bind an once\n\t\t// scroll event to lock the las known position. Lastly, the previous two\n\t\t// behaviors can happen even on the same browser, hence the race will decide\n\t\t// the winner.\n\t\tvar winner = false;\n\t\tvar switchScrollPositionRace = function() {\n\t\t\tglobals.document.removeEventListener('scroll', switchScrollPositionRace, false);\n\t\t\tif (!winner) {\n\t\t\t\tglobals.window.scrollTo(state.scrollLeft, state.scrollTop);\n\t\t\t\twinner = true;\n\t\t\t}\n\t\t};\n\t\tasync.nextTick(switchScrollPositionRace);\n\t\tglobals.document.addEventListener('scroll', switchScrollPositionRace, false);\n\t}\n\n\t/**\n\t * If supported by the browser, disables native scroll restoration and\n\t * stores current value.\n\t */\n\tmaybeDisableNativeScrollRestoration() {\n\t\tif (this.nativeScrollRestorationSupported) {\n\t\t\tthis.nativeScrollRestoration_ = globals.window.history.scrollRestoration;\n\t\t\tglobals.window.history.scrollRestoration = 'manual';\n\t\t}\n\t}\n\n\t/**\n\t * Maybe navigate to a path.\n\t * @param {string} href Information about the link's href.\n\t * @param {Event} event Dom event that initiated the navigation.\n\t */\n\tmaybeNavigate_(href, event) {\n\t\tif (!this.canNavigate(href)) {\n\t\t\treturn;\n\t\t}\n\n\t\tglobals.capturedFormElement = event.capturedFormElement;\n\n\t\tvar navigateFailed = false;\n\t\ttry {\n\t\t\tthis.navigate(utils.getUrlPath(href));\n\t\t} catch (err) {\n\t\t\t// Do not prevent link navigation in case some synchronous error occurs\n\t\t\tnavigateFailed = true;\n\t\t}\n\n\t\tif (!navigateFailed) {\n\t\t\tevent.preventDefault();\n\t\t}\n\t}\n\n\t/**\n\t * Maybe reposition scroll to hashed anchor.\n\t */\n\tmaybeRepositionScrollToHashedAnchor() {\n\t\tvar hash = globals.window.location.hash;\n\t\tif (hash) {\n\t\t\tvar anchorElement = globals.document.getElementById(hash.substring(1));\n\t\t\tif (anchorElement) {\n\t\t\t\tglobals.window.scrollTo(anchorElement.offsetLeft, anchorElement.offsetTop);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * If supported by the browser, restores native scroll restoration to the\n\t * value captured by `maybeDisableNativeScrollRestoration`.\n\t */\n\tmaybeRestoreNativeScrollRestoration() {\n\t\tif (this.nativeScrollRestorationSupported && this.nativeScrollRestoration_) {\n\t\t\tglobals.window.history.scrollRestoration = this.nativeScrollRestoration_;\n\t\t}\n\t}\n\n\t/**\n\t * Navigates to the specified path if there is a route handler that matches.\n\t * @param {!string} path Path to navigate containing the base path.\n\t * @param {boolean=} opt_replaceHistory Replaces browser history.\n\t * @return {CancellablePromise} Returns a pending request cancellable promise.\n\t */\n\tnavigate(path, opt_replaceHistory) {\n\t\tif (!utils.isHtml5HistorySupported()) {\n\t\t\tthrow new Error('HTML5 History is not supported. Senna will not intercept navigation.');\n\t\t}\n\n\t\t// When reloading the same path do replaceState instead of pushState to\n\t\t// avoid polluting history with states with the same path.\n\t\tif (path === this.activePath) {\n\t\t\topt_replaceHistory = true;\n\t\t}\n\n\t\tthis.emit('beforeNavigate', {\n\t\t\tpath: path,\n\t\t\treplaceHistory: !!opt_replaceHistory\n\t\t});\n\n\t\treturn this.pendingNavigate;\n\t}\n\n\t/**\n\t * Befores navigation to a path.\n\t * @param {!Event} event Event facade containing <code>path</code> and\n\t *     <code>replaceHistory</code>.\n\t * @protected\n\t */\n\tonBeforeNavigate_(event) {\n\t\tif (globals.capturedFormElement) {\n\t\t\tevent.form = globals.capturedFormElement;\n\t\t}\n\t}\n\n\t/**\n\t * Befores navigation to a path. Runs after external listeners.\n\t * @param {!Event} event Event facade containing <code>path</code> and\n\t *     <code>replaceHistory</code>.\n\t * @protected\n\t */\n\tonBeforeNavigateDefault_(event) {\n\t\tif (this.pendingNavigate) {\n\t\t\tif (this.pendingNavigate.path === event.path) {\n\t\t\t\tconsole.log('Waiting...');\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tthis.emit('startNavigate', {\n\t\t\tform: event.form,\n\t\t\tpath: event.path,\n\t\t\treplaceHistory: event.replaceHistory\n\t\t});\n\t}\n\n\t/**\n\t * Intercepts document clicks and test link elements in order to decide\n\t * whether Surface app can navigate.\n\t * @param {!Event} event Event facade\n\t * @protected\n\t */\n\tonDocClickDelegate_(event) {\n\t\tif (event.altKey || event.ctrlKey || event.metaKey || event.shiftKey || event.button) {\n\t\t\tconsole.log('Navigate aborted, invalid mouse button or modifier key pressed.');\n\t\t\treturn;\n\t\t}\n\t\tthis.maybeNavigate_(event.delegateTarget.href, event);\n\t}\n\n\t/**\n\t * Intercepts document form submits and test action path in order to decide\n\t * whether Surface app can navigate.\n\t * @param {!Event} event Event facade\n\t * @protected\n\t */\n\tonDocSubmitDelegate_(event) {\n\t\tvar form = event.delegateTarget;\n\t\tif (form.method === 'get') {\n\t\t\tconsole.log('GET method not supported');\n\t\t\treturn;\n\t\t}\n\t\tevent.capturedFormElement = form;\n\t\tthis.maybeNavigate_(form.action, event);\n\t}\n\n\t/**\n\t * Listens to the window's load event in order to avoid issues with some browsers\n\t * that trigger popstate calls on the first load. For more information see\n\t * http://stackoverflow.com/questions/6421769/popstate-on-pages-load-in-chrome.\n\t * @protected\n\t */\n\tonLoad_() {\n\t\tthis.skipLoadPopstate = true;\n\t\tsetTimeout(() => {\n\t\t\t// The timeout ensures that popstate events will be unblocked right\n\t\t\t// after the load event occured, but not in the same event-loop cycle.\n\t\t\tthis.skipLoadPopstate = false;\n\t\t}, 0);\n\t\t// Try to reposition scroll to the hashed anchor when page loads.\n\t\tthis.maybeRepositionScrollToHashedAnchor();\n\t}\n\n\t/**\n\t * Handles browser history changes and fires app's navigation if the state\n\t * belows to us. If we detect a popstate and the state is <code>null</code>,\n\t * assume it is navigating to an external page or to a page we don't have\n\t * route, then <code>globals.window.location.reload()</code> is invoked in order to\n\t * reload the content to the current url.\n\t * @param {!Event} event Event facade\n\t * @protected\n\t */\n\tonPopstate_(event) {\n\t\tif (this.skipLoadPopstate) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar state = event.state;\n\n\t\tif (!state) {\n\t\t\tif (globals.window.location.hash) {\n\t\t\t\t// If senna is on an redirect path and a hash popstate happens\n\t\t\t\t// to a different url, reload the browser. This behavior doesn't\n\t\t\t\t// require senna to route hashed links and is closer to native\n\t\t\t\t// browser behavior.\n\t\t\t\tif (this.redirectPath && !utils.isCurrentBrowserPath(this.redirectPath)) {\n\t\t\t\t\tthis.reloadPage();\n\t\t\t\t}\n\t\t\t\t// Always try to reposition scroll to the hashed anchor when\n\t\t\t\t// hash popstate happens.\n\t\t\t\tthis.maybeRepositionScrollToHashedAnchor();\n\t\t\t} else {\n\t\t\t\tthis.reloadPage();\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\tif (state.senna) {\n\t\t\tconsole.log('History navigation to [' + state.path + ']');\n\t\t\tthis.popstateScrollTop = state.scrollTop;\n\t\t\tthis.popstateScrollLeft = state.scrollLeft;\n\t\t\tif (!this.nativeScrollRestorationSupported) {\n\t\t\t\tthis.lockHistoryScrollPosition_();\n\t\t\t}\n\t\t\tthis.navigate(state.path, true);\n\t\t}\n\t}\n\n\t/**\n\t * Listens document scroll changes in order to capture the possible lock\n\t * scroll position for history scrolling.\n\t * @protected\n\t */\n\tonScroll_() {\n\t\tif (this.captureScrollPositionFromScrollEvent) {\n\t\t\tthis.saveHistoryCurrentPageScrollPosition_();\n\t\t}\n\t}\n\n\t/**\n\t * Starts navigation to a path.\n\t * @param {!Event} event Event facade containing <code>path</code> and\n\t *     <code>replaceHistory</code>.\n\t * @protected\n\t */\n\tonStartNavigate_(event) {\n\t\tthis.maybeDisableNativeScrollRestoration();\n\t\tthis.captureScrollPositionFromScrollEvent = false;\n\t\tdom.addClasses(globals.document.documentElement, this.loadingCssClass);\n\n\t\tvar endNavigatePayload = {\n\t\t\tform: event.form,\n\t\t\tpath: event.path\n\t\t};\n\n\t\tthis.pendingNavigate = this.doNavigate_(event.path, event.replaceHistory)\n\t\t\t.catch((reason) => {\n\t\t\t\tendNavigatePayload.error = reason;\n\t\t\t\tthrow reason;\n\t\t\t})\n\t\t\t.thenAlways(() => {\n\t\t\t\tif (!this.pendingNavigate) {\n\t\t\t\t\tdom.removeClasses(globals.document.documentElement, this.loadingCssClass);\n\t\t\t\t\tthis.maybeRestoreNativeScrollRestoration();\n\t\t\t\t\tthis.captureScrollPositionFromScrollEvent = true;\n\t\t\t\t}\n\t\t\t\tthis.emit('endNavigate', endNavigatePayload);\n\t\t\t});\n\n\t\tthis.pendingNavigate.path = event.path;\n\t}\n\n\t/**\n\t * Prefetches the specified path if there is a route handler that matches.\n\t * @param {!string} path Path to navigate containing the base path.\n\t * @return {CancellablePromise} Returns a pending request cancellable promise.\n\t */\n\tprefetch(path) {\n\t\tvar route = this.findRoute(path);\n\t\tif (!route) {\n\t\t\treturn CancellablePromise.reject(new CancellablePromise.CancellationError('No route for ' + path));\n\t\t}\n\n\t\tconsole.log('Prefetching [' + path + ']');\n\n\t\tvar nextScreen = this.createScreenInstance(path, route);\n\n\t\treturn nextScreen.load(path)\n\t\t\t.then(() => this.screens[path] = nextScreen)\n\t\t\t.catch((reason) => {\n\t\t\t\tthis.handleNavigateError_(path, nextScreen, reason);\n\t\t\t\tthrow reason;\n\t\t\t});\n\t}\n\n\t/**\n\t * Prepares screen flip. Updates history state and surfaces content.\n\t * @param {!string} path Path containing the querystring part.\n\t * @param {!Screen} nextScreen\n\t * @param {boolean=} opt_replaceHistory Replaces browser history.\n\t */\n\tprepareNavigateHistory_(path, nextScreen, opt_replaceHistory) {\n\t\tvar title = nextScreen.getTitle();\n\t\tif (!core.isString(title)) {\n\t\t\ttitle = this.getDefaultTitle();\n\t\t}\n\t\tvar redirectPath = nextScreen.beforeUpdateHistoryPath(path);\n\t\tvar historyState = {\n\t\t\tform: core.isDefAndNotNull(globals.capturedFormElement),\n\t\t\tredirectPath: redirectPath,\n\t\t\tpath: path,\n\t\t\tsenna: true,\n\t\t\tscrollTop: 0,\n\t\t\tscrollLeft: 0\n\t\t};\n\t\tif (opt_replaceHistory) {\n\t\t\thistoryState.scrollTop = this.popstateScrollTop;\n\t\t\thistoryState.scrollLeft = this.popstateScrollLeft;\n\t\t}\n\t\tthis.updateHistory_(title, redirectPath, nextScreen.beforeUpdateHistoryState(historyState), opt_replaceHistory);\n\t\tthis.redirectPath = redirectPath;\n\t}\n\n\t/**\n\t * Prepares screen flip. Updates history state and surfaces content.\n\t * @param {!Screen} nextScreen\n\t * @param {!Object} surfaces Map of surfaces to flip keyed by surface id.\n\t * @param {!Object} params Params extracted from the current path.\n\t */\n\tprepareNavigateSurfaces_(nextScreen, surfaces, params) {\n\t\tObject.keys(surfaces).forEach((id) => {\n\t\t\tvar surfaceContent = nextScreen.getSurfaceContent(id, params);\n\t\t\tsurfaces[id].addContent(nextScreen.getId(), surfaceContent);\n\t\t\tconsole.log('Screen [' + nextScreen.getId() + '] add content to surface ' +\n\t\t\t\t'[' + surfaces[id] + '] [' + (core.isDefAndNotNull(surfaceContent) ? '...' : 'empty') + ']');\n\t\t});\n\t}\n\n\t/**\n\t * Reloads the page by performing `window.location.reload()`.\n\t */\n\treloadPage() {\n\t\tglobals.window.location.reload();\n\t}\n\n\t/**\n\t * Removes route instance from app routes.\n\t * @param {Route} route\n\t * @return {boolean} True if an element was removed.\n\t */\n\tremoveRoute(route) {\n\t\treturn array.remove(this.routes, route);\n\t}\n\n\t/**\n\t * Removes a screen.\n\t * @param {!string} path Path containing the querystring part.\n\t */\n\tremoveScreen(path) {\n\t\tvar screen = this.screens[path];\n\t\tif (screen) {\n\t\t\tObject.keys(this.surfaces).forEach((surfaceId) => this.surfaces[surfaceId].remove(screen.getId()));\n\t\t\tscreen.dispose();\n\t\t\tdelete this.screens[path];\n\t\t}\n\t}\n\n\t/**\n\t * Saves scroll position from page offset into history state.\n\t */\n\tsaveHistoryCurrentPageScrollPosition_() {\n\t\tvar state = globals.window.history.state;\n\t\tif (state && state.senna) {\n\t\t\tstate.scrollTop = globals.window.pageYOffset;\n\t\t\tstate.scrollLeft = globals.window.pageXOffset;\n\t\t\tglobals.window.history.replaceState(state, null, null);\n\t\t}\n\t}\n\n\t/**\n\t * Sets allow prevent navigate.\n\t * @param {boolean} allowPreventNavigate\n\t */\n\tsetAllowPreventNavigate(allowPreventNavigate) {\n\t\tthis.allowPreventNavigate = allowPreventNavigate;\n\t}\n\n\t/**\n\t * Sets link base path.\n\t * @param {!string} path\n\t */\n\tsetBasePath(basePath) {\n\t\tthis.basePath = basePath;\n\t}\n\n\t/**\n\t * Sets the default page title.\n\t * @param {string} defaultTitle\n\t */\n\tsetDefaultTitle(defaultTitle) {\n\t\tthis.defaultTitle = defaultTitle;\n\t}\n\n\t/**\n\t * Sets the form selector.\n\t * @param {!string} formSelector\n\t */\n\tsetFormSelector(formSelector) {\n\t\tthis.formSelector = formSelector;\n\t\tif (this.formEventHandler_) {\n\t\t\tthis.formEventHandler_.removeListener();\n\t\t}\n\t\tthis.formEventHandler_ = dom.delegate(document, 'submit', this.formSelector, this.onDocSubmitDelegate_.bind(this), this.allowPreventNavigate);\n\t}\n\n\t/**\n\t * Sets the link selector.\n\t * @param {!string} linkSelector\n\t */\n\tsetLinkSelector(linkSelector) {\n\t\tthis.linkSelector = linkSelector;\n\t\tif (this.linkEventHandler_) {\n\t\t\tthis.linkEventHandler_.removeListener();\n\t\t}\n\t\tthis.linkEventHandler_ = dom.delegate(document, 'click', this.linkSelector, this.onDocClickDelegate_.bind(this), this.allowPreventNavigate);\n\t}\n\n\t/**\n\t * Sets the loading css class.\n\t * @param {!string} loadingCssClass\n\t */\n\tsetLoadingCssClass(loadingCssClass) {\n\t\tthis.loadingCssClass = loadingCssClass;\n\t}\n\n\t/**\n\t * Sets the update scroll position value.\n\t * @param {boolean} updateScrollPosition\n\t */\n\tsetUpdateScrollPosition(updateScrollPosition) {\n\t\tthis.updateScrollPosition = updateScrollPosition;\n\t}\n\n\t/**\n\t * Cancels pending navigate with <code>Cancel pending navigation</code> error.\n\t * @protected\n\t */\n\tstopPendingNavigate_() {\n\t\tif (this.pendingNavigate) {\n\t\t\tthis.pendingNavigate.cancel('Cancel pending navigation');\n\t\t\tthis.pendingNavigate = null;\n\t\t}\n\t}\n\n\t/**\n\t * Sync document scroll position twice, the first one synchronous and then\n\t * one inside <code>async.nextTick</code>. Relevant to browsers that fires\n\t * scroll restoration asynchronously after popstate.\n\t * @protected\n\t * @return {?CancellablePromise=}\n\t */\n\tsyncScrollPositionSyncThenAsync_() {\n\t\tvar state = globals.window.history.state;\n\t\tif (!state) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar scrollTop = state.scrollTop;\n\t\tvar scrollLeft = state.scrollLeft;\n\n\t\tvar sync = () => {\n\t\t\tif (this.updateScrollPosition) {\n\t\t\t\tglobals.window.scrollTo(scrollLeft, scrollTop);\n\t\t\t}\n\t\t};\n\n\t\treturn new CancellablePromise((resolve) => sync() & async.nextTick(() => sync() & resolve()));\n\t}\n\n\t/**\n\t * Updates or replace browser history.\n\t * @param {?string} title Document title.\n\t * @param {!string} path Path containing the querystring part.\n\t * @param {!object} state\n\t * @param {boolean=} opt_replaceHistory Replaces browser history.\n\t * @protected\n\t */\n\tupdateHistory_(title, path, state, opt_replaceHistory) {\n\t\tif (opt_replaceHistory) {\n\t\t\tglobals.window.history.replaceState(state, title, path);\n\t\t} else {\n\t\t\tglobals.window.history.pushState(state, title, path);\n\t\t}\n\t\tglobals.document.title = title;\n\t}\n\n}\n\nexport default App;\n"],"sourceRoot":"/source/"}