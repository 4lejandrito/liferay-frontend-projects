{"version":3,"sources":["DomEventEmitterProxy.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;mBAoDe","file":"node_modules/metal-dom/src/DomEventEmitterProxy.js","sourcesContent":["'use strict';\n\nimport dom from './dom';\nimport { EventEmitterProxy } from 'metal-events';\n\n/**\n * DomEventEmitterProxy utility. It extends `EventEmitterProxy` to also accept\n * dom elements as origin emitters.\n * @extends {EventEmitterProxy}\n */\nclass DomEventEmitterProxy extends EventEmitterProxy {\n\t/**\n\t * Adds the proxy listener for the given event.\n\t * @param {string} event.\n\t * @protected\n\t * @override\n\t */\n\taddListener_(event) {\n\t\tif (this.originEmitter_.addEventListener) {\n\t\t\tdom.on(this.originEmitter_, event, this.proxiedEvents_[event]);\n\t\t} else {\n\t\t\tsuper.addListener_(event);\n\t\t}\n\t}\n\n\t/**\n\t * Removes the proxy listener for the given event.\n\t * @param {string} event\n\t * @protected\n\t * @override\n\t */\n\tremoveListener_(event) {\n\t\tif (this.originEmitter_.removeEventListener) {\n\t\t\tthis.originEmitter_.removeEventListener(event, this.proxiedEvents_[event]);\n\t\t} else {\n\t\t\tsuper.removeListener_(event);\n\t\t}\n\t}\n\n\t/**\n\t * Checks if the given event should be proxied.\n\t * @param {string} event\n\t * @return {boolean}\n\t * @protected\n\t * @override\n\t */\n\tshouldProxyEvent_(event) {\n\t\treturn super.shouldProxyEvent_(event) &&\n\t\t\t(!this.originEmitter_.addEventListener || dom.supportsEvent(this.originEmitter_, event));\n\t}\n}\n\nexport default DomEventEmitterProxy;\n"],"sourceRoot":"/source/"}