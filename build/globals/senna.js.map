{"version":3,"file":"senna.js","sources":["src/globals/globals.js","node_modules/metal/src/coreNamed.js","node_modules/metal/src/core.js","node_modules/metal/src/array/array.js","node_modules/metal/src/async/async.js","node_modules/metal/src/disposable/Disposable.js","node_modules/metal/src/object/object.js","node_modules/metal/src/string/string.js","node_modules/metal-uri/src/parseFromAnchor.js","node_modules/metal-uri/src/parse.js","node_modules/metal-structs/src/MultiMap.js","node_modules/metal-structs/src/TreeNode.js","node_modules/metal-uri/src/Uri.js","src/utils/utils.js","src/app/dataAttributes.js","node_modules/metal-dom/src/domData.js","node_modules/metal-events/src/EventHandle.js","node_modules/metal-events/src/EventEmitter.js","node_modules/metal-events/src/EventEmitterProxy.js","node_modules/metal-events/src/EventHandler.js","node_modules/metal-dom/src/DomDelegatedEventHandle.js","node_modules/metal-dom/src/DomEventHandle.js","node_modules/metal-dom/src/domNamed.js","node_modules/metal-dom/src/dom.js","node_modules/metal-dom/src/DomEventEmitterProxy.js","node_modules/metal-dom/src/features.js","node_modules/metal-dom/src/globalEval.js","node_modules/metal-dom/src/globalEvalStyles.js","node_modules/metal-dom/src/events.js","node_modules/metal-promise/src/promise/Promise.js","node_modules/metal-debounce/src/debounce.js","node_modules/metal-path-parser/src/pathParser.js","src/route/Route.js","src/cacheable/Cacheable.js","src/screen/Screen.js","src/surface/Surface.js","src/app/App.js","node_modules/metal-ajax/src/Ajax.js","src/errors/errors.js","node_modules/metal-useragent/src/UA.js","src/screen/RequestScreen.js","src/screen/HtmlScreen.js","src/app/AppDataAttributeHandler.js","src/app/dataAttributeHandler.js","src/app/version.js"],"sourcesContent":["var globals = globals || {};\n\nif (typeof window !== 'undefined') {\n\tglobals.window = window;\n}\n\nif (typeof document !== 'undefined') {\n\tglobals.document = document;\n}\n\nexport default globals;\n","'use strict';\n\n/**\n * A collection of core utility functions.\n * @const\n */\n\nlet compatibilityModeData_;\n\n/**\n * Counter for unique id.\n * @type {Number}\n * @private\n */\nlet uniqueIdCounter_ = 1;\n\n/**\n * Unique id property prefix.\n * @type {String}\n * @protected\n */\nexport const UID_PROPERTY = `core_${((Math.random() * 1e9) >>> 0)}`;\n\n/**\n * When defining a class Foo with an abstract method bar(), you can do:\n * Foo.prototype.bar = abstractMethod\n *\n * Now if a subclass of Foo fails to override bar(), an error will be thrown\n * when bar() is invoked.\n *\n * @type {!Function}\n * @throws {Error} when invoked to indicate the method should be overridden.\n */\nexport function abstractMethod() {\n\tthrow Error('Unimplemented abstract method');\n}\n\n/**\n * Disables Metal.js's compatibility mode.\n */\nexport function disableCompatibilityMode() {\n\tcompatibilityModeData_ = undefined;\n}\n\n/**\n * Enables Metal.js's compatibility mode with the following features from rc\n * and 1.x versions:\n *     - Using \"key\" to reference component instances. In the current version\n *       this should be done via \"ref\" instead. This allows old code still\n *       using \"key\" to keep working like before. NOTE: this may cause\n *       problems, since \"key\" is meant to be used differently. Only use this\n *       if it's not possible to upgrade the code to use \"ref\" instead.\n * @param {Object=} opt_data Optional object with data to specify more\n *     details, such as:\n *         - renderers {Array} the template renderers that should be in\n *           compatibility mode, either their constructors or strings\n *           representing them (e.g. 'soy' or 'jsx'). By default, all the ones\n *           that extend from IncrementalDomRenderer.\n * @type {Object}\n */\nexport function enableCompatibilityMode(opt_data = {}) {\n\tcompatibilityModeData_ = opt_data;\n}\n\n/**\n * Returns the data used for compatibility mode, or nothing if it hasn't been\n * enabled.\n * @return {Object}\n */\nexport function getCompatibilityModeData() {\n\t// Compatibility mode can be set via the __METAL_COMPATIBILITY__ global var.\n\tif (compatibilityModeData_ === undefined) {\n\t\tif (typeof window !== 'undefined' && window.__METAL_COMPATIBILITY__) {\n\t\t\tenableCompatibilityMode(window.__METAL_COMPATIBILITY__);\n\t\t}\n\t}\n\treturn compatibilityModeData_;\n}\n\n/**\n * Returns the first argument if it's truthy, or the second otherwise.\n * @param {*} a\n * @param {*} b\n * @return {*}\n * @protected\n */\nfunction getFirstTruthy_(a, b) {\n\treturn a || b;\n}\n\n/**\n * Gets the name of the given function. If the current browser doesn't\n * support the `name` property, this will calculate it from the function's\n * content string.\n * @param {!function()} fn\n * @return {string}\n */\nexport function getFunctionName(fn) {\n\tif (!fn.name) {\n\t\tconst str = fn.toString();\n\t\tfn.name = str.substring(9, str.indexOf('('));\n\t}\n\treturn fn.name;\n}\n\n/**\n * Gets the value of a static property in the given class. The value will be\n * inherited from ancestors as expected, unless a custom merge function is given,\n * which can change how the super classes' value for that property will be merged\n * together.\n * The final merged value will be stored in another property, so that it won't\n * be recalculated even if this function is called multiple times.\n * @param {!function()} ctor Class constructor.\n * @param {string} propertyName Property name to be merged.\n * @param {function(*, *):*=} opt_mergeFn Function that receives the merged\n *     value of the property so far and the next value to be merged to it.\n *     Should return these two merged together. If not passed the final property\n *     will be the first truthy value among ancestors.\n */\nexport function getStaticProperty(ctor, propertyName, opt_mergeFn) {\n\tconst mergedName = propertyName + '_MERGED';\n\tif (!ctor.hasOwnProperty(mergedName)) {\n\t\tlet merged = ctor.hasOwnProperty(propertyName) ? ctor[propertyName] : null;\n\t\tif (ctor.__proto__ && !ctor.__proto__.isPrototypeOf(Function)) {\n\t\t\tconst mergeFn = opt_mergeFn || getFirstTruthy_;\n\t\t\tmerged = mergeFn(\n\t\t\t\tmerged,\n\t\t\t\tgetStaticProperty(ctor.__proto__, propertyName, mergeFn)\n\t\t\t);\n\t\t}\n\t\tctor[mergedName] = merged;\n\t}\n\treturn ctor[mergedName];\n}\n\n/**\n * Gets an unique id. If `opt_object` argument is passed, the object is\n * mutated with an unique id. Consecutive calls with the same object\n * reference won't mutate the object again, instead the current object uid\n * returns. See {@link UID_PROPERTY}.\n * @param {Object=} opt_object Optional object to be mutated with the uid. If\n *     not specified this method only returns the uid.\n * @param {boolean=} opt_noInheritance Optional flag indicating if this\n *     object's uid property can be inherited from parents or not.\n * @throws {Error} when invoked to indicate the method should be overridden.\n */\nexport function getUid(opt_object, opt_noInheritance) {\n\tif (opt_object) {\n\t\tlet id = opt_object[UID_PROPERTY];\n\t\tif (opt_noInheritance && !opt_object.hasOwnProperty(UID_PROPERTY)) {\n\t\t\tid = null;\n\t\t}\n\t\treturn id || (opt_object[UID_PROPERTY] = uniqueIdCounter_++);\n\t}\n\treturn uniqueIdCounter_++;\n}\n\n/**\n * The identity function. Returns its first argument.\n * @param {*=} opt_returnValue The single value that will be returned.\n * @return {?} The first argument.\n */\nexport function identityFunction(opt_returnValue) {\n\treturn opt_returnValue;\n}\n\n/**\n * Returns true if the specified value is a boolean.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is boolean.\n */\nexport function isBoolean(val) {\n\treturn typeof val === 'boolean';\n}\n\n/**\n * Returns true if the specified value is not undefined.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is defined.\n */\nexport function isDef(val) {\n\treturn val !== undefined;\n}\n\n/**\n * Returns true if value is not undefined or null.\n * @param {*} val\n * @return {boolean}\n */\nexport function isDefAndNotNull(val) {\n\treturn isDef(val) && !isNull(val);\n}\n\n/**\n * Returns true if value is a document.\n * @param {*} val\n * @return {boolean}\n */\nexport function isDocument(val) {\n\treturn val && typeof val === 'object' && val.nodeType === 9;\n}\n\n/**\n * Returns true if value is a document-fragment.\n * @param {*} val\n * @return {boolean}\n */\nexport function isDocumentFragment(val) {\n\treturn val && typeof val === 'object' && val.nodeType === 11;\n}\n\n/**\n * Returns true if value is a dom element.\n * @param {*} val\n * @return {boolean}\n */\nexport function isElement(val) {\n\treturn val && typeof val === 'object' && val.nodeType === 1;\n}\n\n/**\n * Returns true if the specified value is a function.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is a function.\n */\nexport function isFunction(val) {\n\treturn typeof val === 'function';\n}\n\n/**\n * Returns true if value is null.\n * @param {*} val\n * @return {boolean}\n */\nexport function isNull(val) {\n\treturn val === null;\n}\n\n/**\n * Returns true if the specified value is a number.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is a number.\n */\nexport function isNumber(val) {\n\treturn typeof val === 'number';\n}\n\n/**\n * Returns true if value is a window.\n * @param {*} val\n * @return {boolean}\n */\nexport function isWindow(val) {\n\treturn val !== null && val === val.window;\n}\n\n/**\n * Returns true if the specified value is an object. This includes arrays\n * and functions.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is an object.\n */\nexport function isObject(val) {\n\tconst type = typeof val;\n\treturn type === 'object' && val !== null || type === 'function';\n}\n\n/**\n * Returns true if value is a Promise.\n * @param {*} val\n * @return {boolean}\n */\nexport function isPromise(val) {\n\treturn val && typeof val === 'object' && typeof val.then === 'function';\n}\n\n/**\n * Returns true if value is a string.\n * @param {*} val\n * @return {boolean}\n */\nexport function isString(val) {\n\treturn typeof val === 'string' || val instanceof String;\n}\n\n/**\n * Sets to true if running inside Node.js environment with extra check for\n * `process.browser` to skip Karma runner environment. Karma environment has\n * `process` defined even though it runs on the browser.\n * @return {boolean}\n */\nexport function isServerSide() {\n\treturn typeof process !== 'undefined' &&\n\t\ttypeof process.env !== 'undefined' &&\n\t\tprocess.env.NODE_ENV !== 'test' &&\n\t\t!process.browser;\n}\n\n/**\n * Null function used for default values of callbacks, etc.\n * @return {void} Nothing.\n */\nexport function nullFunction() {\n}\n","'use strict';\n\n// This file exists just for backwards compatibility, making sure that old\n// default imports for this file still work. It's best to use the named exports\n// for each function instead though, since that allows bundlers like Rollup to\n// reduce the bundle size by removing unused code.\nimport * as core from './coreNamed';\n\nexport default core;\nexport { core };\nexport * from './coreNamed';\n","'use strict';\n\nimport { isDef } from '../core';\n\nclass array {\n\t/**\n\t * Checks if the given arrays have the same content.\n\t * @param {!Array<*>} arr1\n\t * @param {!Array<*>} arr2\n\t * @return {boolean}\n\t */\n\tstatic equal(arr1, arr2) {\n\t\tif (arr1 === arr2) {\n\t\t\treturn true;\n\t\t}\n\t\tif (arr1.length !== arr2.length) {\n\t\t\treturn false;\n\t\t}\n\t\tfor (let i = 0; i < arr1.length; i++) {\n\t\t\tif (arr1[i] !== arr2[i]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Returns the first value in the given array that isn't undefined.\n\t * @param {!Array} arr\n\t * @return {*}\n\t */\n\tstatic firstDefinedValue(arr) {\n\t\tfor (let i = 0; i < arr.length; i++) {\n\t\t\tif (arr[i] !== undefined) {\n\t\t\t\treturn arr[i];\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Transforms the input nested array to become flat.\n\t * @param {Array.<*|Array.<*>>} arr Nested array to flatten.\n\t * @param {Array.<*>} opt_output Optional output array.\n\t * @return {Array.<*>} Flat array.\n\t */\n\tstatic flatten(arr, opt_output) {\n\t\tvar output = opt_output || [];\n\t\tfor (let i = 0; i < arr.length; i++) {\n\t\t\tif (Array.isArray(arr[i])) {\n\t\t\t\tarray.flatten(arr[i], output);\n\t\t\t} else {\n\t\t\t\toutput.push(arr[i]);\n\t\t\t}\n\t\t}\n\t\treturn output;\n\t}\n\n\t/**\n\t * Removes the first occurrence of a particular value from an array.\n\t * @param {Array.<T>} arr Array from which to remove value.\n\t * @param {T} obj Object to remove.\n\t * @return {boolean} True if an element was removed.\n\t * @template T\n\t */\n\tstatic remove(arr, obj) {\n\t\tconst i = arr.indexOf(obj);\n\t\tlet rv;\n\t\tif ( (rv = i >= 0) ) {\n\t\t\tarray.removeAt(arr, i);\n\t\t}\n\t\treturn rv;\n\t}\n\n\t/**\n\t * Removes from an array the element at index i\n\t * @param {Array} arr Array or array like object from which to remove value.\n\t * @param {number} i The index to remove.\n\t * @return {boolean} True if an element was removed.\n\t */\n\tstatic removeAt(arr, i) {\n\t\treturn Array.prototype.splice.call(arr, i, 1).length === 1;\n\t}\n\n\t/**\n\t * Slices the given array, just like Array.prototype.slice, but this\n\t * is faster and working on all array-like objects (like arguments).\n\t * @param {!Object} arr Array-like object to slice.\n\t * @param {number} start The index that should start the slice.\n\t * @param {number=} opt_end The index where the slice should end, not\n\t *   included in the final array. If not given, all elements after the\n\t *   start index will be included.\n\t * @return {!Array}\n\t */\n\tstatic slice(arr, start, opt_end) {\n\t\tconst sliced = [];\n\t\tconst end = isDef(opt_end) ? opt_end : arr.length;\n\t\tfor (let i = start; i < end; i++) {\n\t\t\tsliced.push(arr[i]);\n\t\t}\n\t\treturn sliced;\n\t}\n}\n\nexport default array;\n","/*!\n * Polyfill from Google's Closure Library.\n * Copyright 2013 The Closure Library Authors. All Rights Reserved.\n */\n\n'use strict';\n\nconst async = {};\n\n\n/**\n * Throw an item without interrupting the current execution context.  For\n * example, if processing a group of items in a loop, sometimes it is useful\n * to report an error while still allowing the rest of the batch to be\n * processed.\n * @param {*} exception\n */\nasync.throwException = function(exception) {\n\t// Each throw needs to be in its own context.\n\tasync.nextTick(function() {\n\t\tthrow exception;\n\t});\n};\n\n\n/**\n * Fires the provided callback just before the current callstack unwinds, or as\n * soon as possible after the current JS execution context.\n * @param {function(this:THIS)} callback\n * @param {THIS=} opt_context Object to use as the \"this value\" when calling\n *     the provided function.\n * @template THIS\n */\nasync.run = function(callback, opt_context) {\n\tif (!async.run.workQueueScheduled_) {\n\t\t// Nothing is currently scheduled, schedule it now.\n\t\tasync.nextTick(async.run.processWorkQueue);\n\t\tasync.run.workQueueScheduled_ = true;\n\t}\n\n\tasync.run.workQueue_.push(\n\t\tnew async.run.WorkItem_(callback, opt_context));\n};\n\n\n/** @private {boolean} */\nasync.run.workQueueScheduled_ = false;\n\n\n/** @private {!Array.<!async.run.WorkItem_>} */\nasync.run.workQueue_ = [];\n\n/**\n * Run any pending async.run work items. This function is not intended\n * for general use, but for use by entry point handlers to run items ahead of\n * async.nextTick.\n */\nasync.run.processWorkQueue = function() {\n\t// NOTE: additional work queue items may be pushed while processing.\n\twhile (async.run.workQueue_.length) {\n\t\t// Don't let the work queue grow indefinitely.\n\t\tconst workItems = async.run.workQueue_;\n\t\tasync.run.workQueue_ = [];\n\t\tfor (let i = 0; i < workItems.length; i++) {\n\t\t\tconst workItem = workItems[i];\n\t\t\ttry {\n\t\t\t\tworkItem.fn.call(workItem.scope);\n\t\t\t} catch (e) {\n\t\t\t\tasync.throwException(e);\n\t\t\t}\n\t\t}\n\t}\n\n\t// There are no more work items, reset the work queue.\n\tasync.run.workQueueScheduled_ = false;\n};\n\n\n/**\n * @constructor\n * @final\n * @struct\n * @private\n *\n * @param {function()} fn\n * @param {Object|null|undefined} scope\n */\nasync.run.WorkItem_ = function(fn, scope) {\n\t/** @const */\n\tthis.fn = fn;\n\t/** @const */\n\tthis.scope = scope;\n};\n\n\n/**\n * Fires the provided callbacks as soon as possible after the current JS\n * execution context. setTimeout(…, 0) always takes at least 5ms for legacy\n * reasons.\n * @param {function(this:SCOPE)} callback Callback function to fire as soon as\n *     possible.\n * @param {SCOPE=} opt_context Object in whose scope to call the listener.\n * @template SCOPE\n */\nasync.nextTick = function(callback, opt_context) {\n\tlet cb = callback;\n\tif (opt_context) {\n\t\tcb = callback.bind(opt_context);\n\t}\n\tcb = async.nextTick.wrapCallback_(cb);\n\t// Introduced and currently only supported by IE10.\n\t// Verify if variable is defined on the current runtime (i.e., node, browser).\n\t// Can't use typeof enclosed in a function (such as core.isFunction) or an\n\t// exception will be thrown when the function is called on an environment\n\t// where the variable is undefined.\n\tif (typeof setImmediate === 'function') {\n\t\tsetImmediate(cb);\n\t\treturn;\n\t}\n\t// Look for and cache the custom fallback version of setImmediate.\n\tif (!async.nextTick.setImmediate_) {\n\t\tasync.nextTick.setImmediate_ = async.nextTick.getSetImmediateEmulator_();\n\t}\n\tasync.nextTick.setImmediate_(cb);\n};\n\n\n/**\n * Cache for the setImmediate implementation.\n * @type {function(function())}\n * @private\n */\nasync.nextTick.setImmediate_ = null;\n\n\n/**\n * Determines the best possible implementation to run a function as soon as\n * the JS event loop is idle.\n * @return {function(function())} The \"setImmediate\" implementation.\n * @private\n */\nasync.nextTick.getSetImmediateEmulator_ = function() {\n\t// Create a private message channel and use it to postMessage empty messages\n\t// to ourselves.\n\tlet Channel;\n\n\t// Verify if variable is defined on the current runtime (i.e., node, browser).\n\t// Can't use typeof enclosed in a function (such as core.isFunction) or an\n\t// exception will be thrown when the function is called on an environment\n\t// where the variable is undefined.\n\tif (typeof MessageChannel === 'function') {\n\t\tChannel = MessageChannel;\n\t}\n\n\t// If MessageChannel is not available and we are in a browser, implement\n\t// an iframe based polyfill in browsers that have postMessage and\n\t// document.addEventListener. The latter excludes IE8 because it has a\n\t// synchronous postMessage implementation.\n\tif (typeof Channel === 'undefined' && typeof window !== 'undefined' &&\n\t\twindow.postMessage && window.addEventListener) {\n\t\t/** @constructor */\n\t\tChannel = function() {\n\t\t\t// Make an empty, invisible iframe.\n\t\t\tconst iframe = document.createElement('iframe');\n\t\t\tiframe.style.display = 'none';\n\t\t\tiframe.src = '';\n\t\t\tdocument.documentElement.appendChild(iframe);\n\t\t\tconst win = iframe.contentWindow;\n\t\t\tconst doc = win.document;\n\t\t\tdoc.open();\n\t\t\tdoc.write('');\n\t\t\tdoc.close();\n\t\t\tconst message = 'callImmediate' + Math.random();\n\t\t\tconst origin = win.location.protocol + '//' + win.location.host;\n\t\t\tconst onmessage = function(e) {\n\t\t\t\t// Validate origin and message to make sure that this message was\n\t\t\t\t// intended for us.\n\t\t\t\tif (e.origin !== origin && e.data !== message) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis.port1.onmessage();\n\t\t\t}.bind(this);\n\t\t\twin.addEventListener('message', onmessage, false);\n\t\t\tthis.port1 = {};\n\t\t\tthis.port2 = {\n\t\t\t\tpostMessage: function() {\n\t\t\t\t\twin.postMessage(message, origin);\n\t\t\t\t}\n\t\t\t};\n\t\t};\n\t}\n\tif (typeof Channel !== 'undefined') {\n\t\tconst channel = new Channel();\n\t\t// Use a fifo linked list to call callbacks in the right order.\n\t\tlet head = {};\n\t\tlet tail = head;\n\t\tchannel.port1.onmessage = function() {\n\t\t\thead = head.next;\n\t\t\tconst cb = head.cb;\n\t\t\thead.cb = null;\n\t\t\tcb();\n\t\t};\n\t\treturn function(cb) {\n\t\t\ttail.next = {\n\t\t\t\tcb: cb\n\t\t\t};\n\t\t\ttail = tail.next;\n\t\t\tchannel.port2.postMessage(0);\n\t\t};\n\t}\n\t// Implementation for IE6-8: Script elements fire an asynchronous\n\t// onreadystatechange event when inserted into the DOM.\n\tif (typeof document !== 'undefined' && 'onreadystatechange' in\n\t\tdocument.createElement('script')) {\n\t\treturn function(cb) {\n\t\t\tlet script = document.createElement('script');\n\t\t\tscript.onreadystatechange = function() {\n\t\t\t\t// Clean up and call the callback.\n\t\t\t\tscript.onreadystatechange = null;\n\t\t\t\tscript.parentNode.removeChild(script);\n\t\t\t\tscript = null;\n\t\t\t\tcb();\n\t\t\t\tcb = null;\n\t\t\t};\n\t\t\tdocument.documentElement.appendChild(script);\n\t\t};\n\t}\n\t// Fall back to setTimeout with 0. In browsers this creates a delay of 5ms\n\t// or more.\n\treturn function(cb) {\n\t\tsetTimeout(cb, 0);\n\t};\n};\n\n\n/**\n * Helper function that is overrided to protect callbacks with entry point\n * monitor if the application monitors entry points.\n * @param {function()} callback Callback function to fire as soon as possible.\n * @return {function()} The wrapped callback.\n * @private\n */\nasync.nextTick.wrapCallback_ = function(opt_returnValue) {\n\treturn opt_returnValue;\n};\n\nexport default async;\n","'use strict';\n\n/**\n * Disposable utility. When inherited provides the `dispose` function to its\n * subclass, which is responsible for disposing of any object references\n * when an instance won't be used anymore. Subclasses should override\n * `disposeInternal` to implement any specific disposing logic.\n * @constructor\n */\nclass Disposable {\n\tconstructor() {\n\t\t/**\n\t\t * Flag indicating if this instance has already been disposed.\n\t\t * @type {boolean}\n\t\t * @protected\n\t\t */\n\t\tthis.disposed_ = false;\n\t}\n\n\t/**\n\t * Disposes of this instance's object references. Calls `disposeInternal`.\n\t */\n\tdispose() {\n\t\tif (!this.disposed_) {\n\t\t\tthis.disposeInternal();\n\t\t\tthis.disposed_ = true;\n\t\t}\n\t}\n\n\t/**\n\t * Subclasses should override this method to implement any specific\n\t * disposing logic (like clearing references and calling `dispose` on other\n\t * disposables).\n\t */\n\tdisposeInternal() {}\n\n\t/**\n\t * Checks if this instance has already been disposed.\n\t * @return {boolean}\n\t */\n\tisDisposed() {\n\t\treturn this.disposed_;\n\t}\n}\n\nexport default Disposable;\n","'use strict';\n\nclass object {\n\t/**\n\t * Copies all the members of a source object to a target object.\n\t * @param {Object} target Target object.\n\t * @param {...Object} var_args The objects from which values will be copied.\n\t * @return {Object} Returns the target object reference.\n\t */\n\tstatic mixin(target) {\n\t\tlet key, source;\n\t\tfor (let i = 1; i < arguments.length; i++) {\n\t\t\tsource = arguments[i];\n\t\t\tfor (key in source) {\n\t\t\t\ttarget[key] = source[key];\n\t\t\t}\n\t\t}\n\t\treturn target;\n\t}\n\n\t/**\n\t * Returns an object based on its fully qualified external name.\n\t * @param {string} name The fully qualified name.\n\t * @param {object=} opt_obj The object within which to look; default is\n\t *     <code>window</code>.\n\t * @return {?} The value (object or primitive) or, if not found, undefined.\n\t */\n\tstatic getObjectByName(name, opt_obj) {\n\t\tconst scope = opt_obj || window;\n\t\tconst parts = name.split('.');\n\t\treturn parts.reduce((part, key) => part[key], scope);\n\t}\n\n\t/**\n\t * Returns a new object with the same keys as the given one, but with\n\t * their values set to the return values of the specified function.\n\t * @param {!Object} obj\n\t * @param {!function(string, *)} fn\n\t * @return {!Object}\n\t */\n\tstatic map(obj, fn) {\n\t\tconst mappedObj = {};\n\t\tconst keys = Object.keys(obj);\n\t\tfor (let i = 0; i < keys.length; i++) {\n\t\t\tmappedObj[keys[i]] = fn(keys[i], obj[keys[i]]);\n\t\t}\n\t\treturn mappedObj;\n\t}\n\n\t/**\n\t * Checks if the two given objects are equal. This is done via a shallow\n\t * check, including only the keys directly contained by the 2 objects.\n\t * @return {boolean}\n\t */\n\tstatic shallowEqual(obj1, obj2) {\n\t\tif (obj1 === obj2) {\n\t\t\treturn true;\n\t\t}\n\n\t\tconst keys1 = Object.keys(obj1);\n\t\tconst keys2 = Object.keys(obj2);\n\t\tif (keys1.length !== keys2.length) {\n\t\t\treturn false;\n\t\t}\n\n\t\tfor (let i = 0; i < keys1.length; i++) {\n\t\t\tif (obj1[keys1[i]] !== obj2[keys1[i]]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\n\nexport default object;\n","'use strict';\n\nclass string {\n\t/**\n\t * Compares the given strings without taking the case into account.\n\t * @param {string|number} str1\n\t * @param {string|number} str2\n\t * @return {number} Either -1, 0 or 1, according to if the first string is\n\t *     \"smaller\", equal or \"bigger\" than the second given string.\n\t */\n\tstatic caseInsensitiveCompare(str1, str2) {\n\t\tconst test1 = String(str1).toLowerCase();\n\t\tconst test2 = String(str2).toLowerCase();\n\n\t\tif (test1 < test2) {\n\t\t\treturn -1;\n\t\t} else if (test1 === test2) {\n\t\t\treturn 0;\n\t\t} else {\n\t\t\treturn 1;\n\t\t}\n\t}\n\n\t/**\n\t * Removes the breaking spaces from the left and right of the string and\n\t * collapses the sequences of breaking spaces in the middle into single spaces.\n\t * The original and the result strings render the same way in HTML.\n\t * @param {string} str A string in which to collapse spaces.\n\t * @return {string} Copy of the string with normalized breaking spaces.\n\t */\n\tstatic collapseBreakingSpaces(str) {\n\t\treturn str.replace(/[\\t\\r\\n ]+/g, ' ').replace(/^[\\t\\r\\n ]+|[\\t\\r\\n ]+$/g, '');\n\t}\n\n\t/**\n\t* Escapes characters in the string that are not safe to use in a RegExp.\n\t* @param {*} str The string to escape. If not a string, it will be casted\n\t*     to one.\n\t* @return {string} A RegExp safe, escaped copy of {@code s}.\n\t*/\n\tstatic escapeRegex(str) {\n\t\treturn String(str)\n\t\t\t.replace(/([-()\\[\\]{}+?*.$\\^|,:#<!\\\\])/g, '\\\\$1')\n\t\t\t.replace(/\\x08/g, '\\\\x08');\n\t}\n\n\t/**\n\t* Returns a string with at least 64-bits of randomness.\n\t* @return {string} A random string, e.g. sn1s7vb4gcic.\n\t*/\n\tstatic getRandomString() {\n\t\tconst x = 2147483648;\n\t\treturn Math.floor(Math.random() * x).toString(36) +\n\t\t\tMath.abs(Math.floor(Math.random() * x) ^ Date.now()).toString(36);\n\t}\n\n\t/**\n\t * Calculates the hashcode for a string. The hashcode value is computed by\n\t * the sum algorithm: s[0]*31^(n-1) + s[1]*31^(n-2) + ... + s[n-1]. A nice\n\t * property of using 31 prime is that the multiplication can be replaced by\n\t * a shift and a subtraction for better performance: 31*i == (i<<5)-i.\n\t * Modern VMs do this sort of optimization automatically.\n\t * @param {String} val Target string.\n\t * @return {Number} Returns the string hashcode.\n\t */\n\tstatic hashCode(val) {\n\t\tlet hash = 0;\n\t\tfor (let i = 0, len = val.length; i < len; i++) {\n\t\t\thash = 31 * hash + val.charCodeAt(i);\n\t\t\thash %= 0x100000000;\n\t\t}\n\t\treturn hash;\n\t}\n\n\t/**\n\t * Replaces interval into the string with specified value, e.g.\n\t * `replaceInterval(\"abcde\", 1, 4, \"\")` returns \"ae\".\n\t * @param {string} str The input string.\n\t * @param {Number} start Start interval position to be replaced.\n\t * @param {Number} end End interval position to be replaced.\n\t * @param {string} value The value that replaces the specified interval.\n\t * @return {string}\n\t */\n\tstatic replaceInterval(str, start, end, value) {\n\t\treturn str.substring(0, start) + value + str.substring(end);\n\t}\n}\n\nexport default string;\n","'use strict';\n\n/**\n * Parses the given uri string into an object.\n * @param {*=} opt_uri Optional string URI to parse\n */\nfunction parseFromAnchor(opt_uri) {\n\tvar link = document.createElement('a');\n\tlink.href = opt_uri;\n\n\tif(link.protocol === ':' || !/:/.test(link.href)) {\n\t\tthrow new TypeError(`${opt_uri} is not a valid URL`);\n\t}\n\n\treturn {\n\t\thash: link.hash,\n\t\thostname: link.hostname,\n\t\tpassword: link.password,\n\t\tpathname: link.pathname[0] === '/' ? link.pathname : '/' + link.pathname,\n\t\tport: link.port,\n\t\tprotocol: link.protocol,\n\t\tsearch: link.search,\n\t\tusername: link.username\n\t};\n}\n\nexport default parseFromAnchor;\n","'use strict';\n\nimport { isFunction } from 'metal';\nimport parseFromAnchor from './parseFromAnchor';\n\n/**\n * Parses the given uri string into an object. The URL function will be used\n * when present, otherwise we'll fall back to the anchor node element.\n * @param {*=} opt_uri Optional string URI to parse\n */\nfunction parse(opt_uri) {\n\tif (isFunction(URL) && URL.length) {\n\t\tconst url = new URL(opt_uri);\n\n\t\t// Safari Browsers will cap port to the max 16-bit unsigned integer (65535) instead\n\t\t// of throwing a TypeError as per spec. It will still keep the port number in the\n\t\t// href attribute, so we can use this mismatch to raise the expected exception.\n\t\tif (url.port && url.href.indexOf(url.port) === -1) {\n\t\t\tthrow new TypeError(`${opt_uri} is not a valid URL`);\n\t\t}\n\n\t\treturn url;\n\t} else {\n\t\treturn parseFromAnchor(opt_uri);\n\t}\n}\n\nexport default parse;\n","'use strict';\n\nimport { Disposable } from 'metal';\n\n/**\n * A cached reference to the create function.\n */\nvar create = Object.create;\n\n/**\n * Case insensitive string Multimap implementation. Allows multiple values for\n * the same key name.\n * @extends {Disposable}\n */\nclass MultiMap extends Disposable {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.keys = create(null);\n\t\tthis.values = create(null);\n\t}\n\n\t/**\n\t * Adds value to a key name.\n\t * @param {string} name\n\t * @param {*} value\n\t * @chainable\n\t */\n\tadd(name, value) {\n\t\tthis.keys[name.toLowerCase()] = name;\n\t\tthis.values[name.toLowerCase()] = this.values[name.toLowerCase()] || [];\n\t\tthis.values[name.toLowerCase()].push(value);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Clears map names and values.\n\t * @chainable\n\t */\n\tclear() {\n\t\tthis.keys = create(null);\n\t\tthis.values = create(null);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Checks if map contains a value to the key name.\n\t * @param {string} name\n\t * @return {boolean}\n\t * @chainable\n\t */\n\tcontains(name) {\n\t\treturn name.toLowerCase() in this.values;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdisposeInternal() {\n\t\tthis.values = null;\n\t}\n\n\t/**\n\t * Creates a `MultiMap` instance from the given object.\n\t * @param {!Object} obj\n\t * @return {!MultiMap}\n\t */\n\tstatic fromObject(obj) {\n\t\tvar map = new MultiMap();\n\t\tvar keys = Object.keys(obj);\n\t\tfor (var i = 0; i < keys.length; i++) {\n\t\t\tmap.set(keys[i], obj[keys[i]]);\n\t\t}\n\t\treturn map;\n\t}\n\n\t/**\n\t * Gets the first added value from a key name.\n\t * @param {string} name\n\t * @return {*}\n\t * @chainable\n\t */\n\tget(name) {\n\t\tvar values = this.values[name.toLowerCase()];\n\t\tif (values) {\n\t\t\treturn values[0];\n\t\t}\n\t}\n\n\t/**\n\t * Gets all values from a key name.\n\t * @param {string} name\n\t * @return {Array.<*>}\n\t */\n\tgetAll(name) {\n\t\treturn this.values[name.toLowerCase()];\n\t}\n\n\t/**\n\t * Returns true if the map is empty, false otherwise.\n\t * @return {boolean}\n\t */\n\tisEmpty() {\n\t\treturn this.size() === 0;\n\t}\n\n\t/**\n\t * Gets array of key names.\n\t * @return {Array.<string>}\n\t */\n\tnames() {\n\t\treturn Object.keys(this.values).map((key) => this.keys[key]);\n\t}\n\n\t/**\n\t * Removes all values from a key name.\n\t * @param {string} name\n\t * @chainable\n\t */\n\tremove(name) {\n\t\tdelete this.keys[name.toLowerCase()];\n\t\tdelete this.values[name.toLowerCase()];\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the value of a key name. Relevant to replace the current values with\n\t * a new one.\n\t * @param {string} name\n\t * @param {*} value\n\t * @chainable\n\t */\n\tset(name, value) {\n\t\tthis.keys[name.toLowerCase()] = name;\n\t\tthis.values[name.toLowerCase()] = [value];\n\t\treturn this;\n\t}\n\n\t/**\n\t * Gets the size of the map key names.\n\t * @return {number}\n\t */\n\tsize() {\n\t\treturn this.names().length;\n\t}\n\n\t/**\n\t * Returns the parsed values as a string.\n\t * @return {string}\n\t */\n\ttoString() {\n\t\treturn JSON.stringify(this.values);\n\t}\n}\n\nexport default MultiMap;\n","'use strict';\n\nimport { array } from 'metal';\n\n/**\n * Generic tree node data structure with arbitrary number of child nodes.\n * @param {V} value Value.\n * @constructor\n */\nclass TreeNode {\n\n\tconstructor(value) {\n\t\t/**\n\t\t * The value.\n\t\t * @private {V}\n\t\t */\n\t\tthis.value_ = value;\n\n\t\t/**\n\t\t * Reference to the parent node or null if it has no parent.\n\t\t * @private {TreeNode}\n\t\t */\n\t\tthis.parent_ = null;\n\n\t\t/**\n\t\t * Child nodes or null in case of leaf node.\n\t\t * @private {Array<!TreeNode>}\n\t\t */\n\t\tthis.children_ = null;\n\t}\n\n\t/**\n\t * Appends a child node to this node.\n\t * @param {!TreeNode} child Orphan child node.\n\t */\n\taddChild(child) {\n\t\tassertChildHasNoParent(child);\n\t\tchild.setParent(this);\n\t\tthis.children_ = this.children_ || [];\n\t\tthis.children_.push(child);\n\t}\n\n\t/**\n\t * Tells whether this node is the ancestor of the given node.\n\t * @param {!TreeNode} node A node.\n\t * @return {boolean} Whether this node is the ancestor of {@code node}.\n\t */\n\tcontains(node) {\n\t\tlet current = node.getParent();\n\t\twhile (current) {\n\t\t\tif (current === this) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tcurrent = current.getParent();\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * @return {!Array<TreeNode>} All ancestor nodes in bottom-up order.\n\t */\n\tgetAncestors() {\n\t\tlet ancestors = [];\n\t\tlet node = this.getParent();\n\t\twhile (node) {\n\t\t\tancestors.push(node);\n\t\t\tnode = node.getParent();\n\t\t}\n\t\treturn ancestors;\n\t}\n\n\t/**\n\t * Gets the child node of this node at the given index.\n\t * @param {number} index Child index.\n\t * @return {?TreeNode} The node at the given index\n\t * or null if not found.\n\t */\n\tgetChildAt(index) {\n\t\treturn this.getChildren()[index] || null;\n\t}\n\n\t/**\n\t * @return {?Array<!TreeNode>} Child nodes or null in case of leaf node.\n\t */\n\tgetChildren() {\n\t\treturn this.children_ || TreeNode.EMPTY_ARRAY;\n\t}\n\n\t/**\n\t * @return {number} The number of children.\n\t */\n\tgetChildCount() {\n\t\treturn this.getChildren().length;\n\t}\n\n\t/**\n\t * @return {number} The number of ancestors of the node.\n\t */\n\tgetDepth() {\n\t\tlet depth = 0;\n\t\tlet node = this;\n\t\twhile (node.getParent()) {\n\t\t\tdepth++;\n\t\t\tnode = node.getParent();\n\t\t}\n\t\treturn depth;\n\t}\n\n\t/**\n\t * @return {?TreeNode} Parent node or null if it has no parent.\n\t */\n\tgetParent() {\n\t\treturn this.parent_;\n\t}\n\n\t/**\n\t * @return {!TreeNode} The root of the tree structure, i.e. the farthest\n\t * ancestor of the node or the node itself if it has no parents.\n\t */\n\tgetRoot() {\n\t\tlet root = this;\n\t\twhile (root.getParent()) {\n\t\t\troot = root.getParent();\n\t\t}\n\t\treturn root;\n\t}\n\n\t/**\n\t * Gets the value.\n\t * @return {V} The value.\n\t */\n\tgetValue() {\n\t\treturn this.value_;\n\t}\n\n\t/**\n\t * @return {boolean} Whether the node is a leaf node.\n\t */\n\tisLeaf() {\n\t\treturn !this.getChildCount();\n\t}\n\n\t/**\n\t * Removes the given child node of this node.\n\t * @param {TreeNode} child The node to remove.\n\t * @return {TreeNode} The removed node if any, null otherwise.\n\t */\n\tremoveChild(child) {\n\t\tif (array.remove(this.getChildren(), child)) {\n\t\t\treturn child;\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * Sets the parent node of this node. The callers must ensure that the\n\t * parent node and only that has this node among its children.\n\t * @param {TreeNode} parent The parent to set. If null, the node will be\n\t * detached from the tree.\n\t * @protected\n\t */\n\tsetParent(parent) {\n\t\tthis.parent_ = parent;\n\t}\n\n\t/**\n\t * Traverses the subtree. The first callback starts with this node,\n\t * and visits the descendant nodes depth-first, in preorder.\n\t * The second callback, starts with deepest child then visits\n\t * the ancestor nodes depth-first, in postorder. E.g.\n\t *\n\t *  \t A\n\t *    / \\\n\t *   B   C\n\t *  /   / \\\n\t * D   E   F\n\t *\n\t * preorder -> ['A', 'B', 'D', 'C', 'E', 'F']\n\t * postorder -> ['D', 'B', 'E', 'F', 'C', 'A']\n\t *\n\t * @param {function=} opt_preorderFn The callback to execute when visiting a node.\n\t * @param {function=} opt_postorderFn The callback to execute before leaving a node.\n\t */\n\ttraverse(opt_preorderFn, opt_postorderFn) {\n\t\tif (opt_preorderFn) {\n\t\t\topt_preorderFn(this);\n\t\t}\n\t\tthis.getChildren().forEach((child) => child.traverse(opt_preorderFn, opt_postorderFn));\n\t\tif (opt_postorderFn) {\n\t\t\topt_postorderFn(this);\n\t\t}\n\t}\n\n}\n\n/**\n * Constant for empty array to avoid unnecessary allocations.\n * @private\n */\nTreeNode.EMPTY_ARRAY = [];\n\n/**\n * Asserts that child has no parent.\n * @param {TreeNode} child A child.\n * @private\n */\nconst assertChildHasNoParent = function(child) {\n\tif (child.getParent()) {\n\t\tthrow new Error('Cannot add child with parent.');\n\t}\n};\n\nexport default TreeNode;\n","'use strict';\n\nimport { isDef, string } from 'metal';\nimport parse from './parse';\nimport { MultiMap } from 'metal-structs';\n\nvar parseFn_ = parse;\n\nclass Uri {\n\n\t/**\n\t * This class contains setters and getters for the parts of the URI.\n\t * The following figure displays an example URIs and their component parts.\n\t *\n\t *                                  path\n\t *\t                             ┌───┴────┐\n\t *\t  abc://example.com:123/path/data?key=value#fragid1\n\t *\t  └┬┘   └────┬────┘ └┬┘           └───┬───┘ └──┬──┘\n\t * protocol  hostname  port            search    hash\n\t *          └──────┬───────┘\n\t *                host\n\t *\n\t * @param {*=} opt_uri Optional string URI to parse\n\t * @constructor\n\t */\n\tconstructor(opt_uri = '') {\n\t\tthis.url = Uri.parse(this.maybeAddProtocolAndHostname_(opt_uri));\n\t}\n\n\t/**\n\t * Adds parameters to uri from a <code>MultiMap</code> as source.\n\t * @param {MultiMap} multimap The <code>MultiMap</code> containing the\n\t *   parameters.\n\t * @protected\n\t * @chainable\n\t */\n\taddParametersFromMultiMap(multimap) {\n\t\tmultimap.names().forEach((name) => {\n\t\t\tmultimap.getAll(name).forEach((value) => {\n\t\t\t\tthis.addParameterValue(name, value);\n\t\t\t});\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds the value of the named query parameters.\n\t * @param {string} key The parameter to set.\n\t * @param {*} value The new value. Will be explicitly casted to String.\n\t * @chainable\n\t */\n\taddParameterValue(name, value) {\n\t\tthis.ensureQueryInitialized_();\n\t\tif (isDef(value)) {\n\t\t\tvalue = String(value);\n\t\t}\n\t\tthis.query.add(name, value);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds the values of the named query parameter.\n\t * @param {string} key The parameter to set.\n\t * @param {*} value The new value.\n\t * @chainable\n\t */\n\taddParameterValues(name, values) {\n\t\tvalues.forEach((value) => this.addParameterValue(name, value));\n\t\treturn this;\n\t}\n\n\t/**\n\t * Ensures query internal map is initialized and synced with initial value\n\t * extracted from URI search part.\n\t * @protected\n\t */\n\tensureQueryInitialized_() {\n\t\tif (this.query) {\n\t\t\treturn;\n\t\t}\n\t\tthis.query = new MultiMap();\n\t\tvar search = this.url.search;\n\t\tif (search) {\n\t\t\tsearch.substring(1).split('&').forEach((param) => {\n\t\t\t\tvar [key, value] = param.split('=');\n\t\t\t\tif (isDef(value)) {\n\t\t\t\t\tvalue = Uri.urlDecode(value);\n\t\t\t\t}\n\t\t\t\tthis.addParameterValue(key, value);\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Gets the hash part of uri.\n\t * @return {string}\n\t */\n\tgetHash() {\n\t\treturn this.url.hash || '';\n\t}\n\n\t/**\n\t * Gets the host part of uri. E.g. <code>[hostname]:[port]</code>.\n\t * @return {string}\n\t */\n\tgetHost() {\n\t\tvar host = this.getHostname();\n\t\tif (host) {\n\t\t\tvar port = this.getPort();\n\t\t\tif (port && port !== '80') {\n\t\t\t\thost += ':' + port;\n\t\t\t}\n\t\t}\n\t\treturn host;\n\t}\n\n\t/**\n\t * Gets the hostname part of uri without protocol and port.\n\t * @return {string}\n\t */\n\tgetHostname() {\n\t\tvar hostname = this.url.hostname;\n\t\tif (hostname === Uri.HOSTNAME_PLACEHOLDER) {\n\t\t\treturn '';\n\t\t}\n\t\treturn hostname;\n\t}\n\n\t/**\n\t * Gets the origin part of uri. E.g. <code>http://[hostname]:[port]</code>.\n\t * @return {string}\n\t */\n\tgetOrigin() {\n\t\tvar host = this.getHost();\n\t\tif (host) {\n\t\t\treturn this.getProtocol() + '//' + host;\n\t\t}\n\t\treturn '';\n\t}\n\n\t/**\n\t * Returns the first value for a given parameter or undefined if the given\n\t * parameter name does not appear in the query string.\n\t * @param {string} paramName Unescaped parameter name.\n\t * @return {string|undefined} The first value for a given parameter or\n\t *   undefined if the given parameter name does not appear in the query\n\t *   string.\n\t */\n\tgetParameterValue(name) {\n\t\tthis.ensureQueryInitialized_();\n\t\treturn this.query.get(name);\n\t}\n\n\t/**\n\t * Returns the value<b>s</b> for a given parameter as a list of decoded\n\t * query parameter values.\n\t * @param {string} name The parameter to get values for.\n\t * @return {!Array<?>} The values for a given parameter as a list of decoded\n\t *   query parameter values.\n\t */\n\tgetParameterValues(name) {\n\t\tthis.ensureQueryInitialized_();\n\t\treturn this.query.getAll(name);\n\t}\n\n\t/**\n\t * Returns the name<b>s</b> of the parameters.\n\t * @return {!Array<string>} The names for the parameters as a list of\n\t *   strings.\n\t */\n\tgetParameterNames() {\n\t\tthis.ensureQueryInitialized_();\n\t\treturn this.query.names();\n\t}\n\n\t/**\n\t * Gets the function currently being used to parse URIs.\n\t * @return {!function()}\n\t */\n\tstatic getParseFn() {\n\t\treturn parseFn_;\n\t}\n\n\t/**\n\t * Gets the pathname part of uri.\n\t * @return {string}\n\t */\n\tgetPathname() {\n\t\treturn this.url.pathname;\n\t}\n\n\t/**\n\t * Gets the port number part of uri as string.\n\t * @return {string}\n\t */\n\tgetPort() {\n\t\treturn this.url.port;\n\t}\n\n\t/**\n\t * Gets the protocol part of uri. E.g. <code>http:</code>.\n\t * @return {string}\n\t */\n\tgetProtocol() {\n\t\treturn this.url.protocol;\n\t}\n\n\t/**\n\t * Gets the search part of uri. Search value is retrieved from query\n\t * parameters.\n\t * @return {string}\n\t */\n\tgetSearch() {\n\t\tvar search = '';\n\t\tvar querystring = '';\n\t\tthis.getParameterNames().forEach((name) => {\n\t\t\tthis.getParameterValues(name).forEach((value) => {\n\t\t\t\tquerystring += name;\n\t\t\t\tif (isDef(value)) {\n\t\t\t\t\tquerystring += '=' + encodeURIComponent(value);\n\t\t\t\t}\n\t\t\t\tquerystring += '&';\n\t\t\t});\n\t\t});\n\t\tquerystring = querystring.slice(0, -1);\n\t\tif (querystring) {\n\t\t\tsearch += '?' + querystring;\n\t\t}\n\t\treturn search;\n\t}\n\n\t/**\n\t * Checks if uri contains the parameter.\n\t * @param {string} name\n\t * @return {boolean}\n\t */\n\thasParameter(name) {\n\t\tthis.ensureQueryInitialized_();\n\t\treturn this.query.contains(name);\n\t}\n\n\t/**\n\t * Makes this URL unique by adding a random param to it. Useful for avoiding\n\t * cache.\n\t */\n\tmakeUnique() {\n\t\tthis.setParameterValue(Uri.RANDOM_PARAM, string.getRandomString());\n\t\treturn this;\n\t}\n\n\t/**\n\t * Maybe adds protocol and a hostname placeholder on a parial URI if needed.\n\t * Relevent for compatibility with <code>URL</code> native object.\n\t * @param {string=} opt_uri\n\t * @return {string} URI with protocol and hostname placeholder.\n\t */\n\tmaybeAddProtocolAndHostname_(opt_uri) {\n\t\tvar url = opt_uri;\n\t\tif (opt_uri.indexOf('://') === -1 &&\n\t\t\topt_uri.indexOf('javascript:') !== 0) { // jshint ignore:line\n\n\t\t\turl = Uri.DEFAULT_PROTOCOL;\n\t\t\tif (opt_uri[0] !== '/' || opt_uri[1] !== '/') {\n\t\t\t\turl += '//';\n\t\t\t}\n\n\t\t\tswitch (opt_uri.charAt(0)) {\n\t\t\t\tcase '.':\n\t\t\t\tcase '?':\n\t\t\t\tcase '#':\n\t\t\t\t\turl += Uri.HOSTNAME_PLACEHOLDER;\n\t\t\t\t\turl += '/';\n\t\t\t\t\turl += opt_uri;\n\t\t\t\t\tbreak;\n\t\t\t\tcase '':\n\t\t\t\tcase '/':\n\t\t\t\t\tif (opt_uri[1] !== '/') {\n\t\t\t\t\t\turl += Uri.HOSTNAME_PLACEHOLDER;\n\t\t\t\t\t}\n\t\t\t\t\turl += opt_uri;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\turl += opt_uri;\n\t\t\t}\n\t\t}\n\t\treturn url;\n\t}\n\n\t/**\n\t * Parses the given uri string into an object.\n\t * @param {*=} opt_uri Optional string URI to parse\n\t */\n\tstatic parse(opt_uri) {\n\t\treturn parseFn_(opt_uri);\n\t}\n\n\t/**\n\t * Removes the named query parameter.\n\t * @param {string} name The parameter to remove.\n\t * @chainable\n\t */\n\tremoveParameter(name) {\n\t\tthis.ensureQueryInitialized_();\n\t\tthis.query.remove(name);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Removes uniqueness parameter of the uri.\n\t * @chainable\n\t */\n\tremoveUnique() {\n\t\tthis.removeParameter(Uri.RANDOM_PARAM);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the hash.\n\t * @param {string} hash\n\t * @chainable\n\t */\n\tsetHash(hash) {\n\t\tthis.url.hash = hash;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the hostname.\n\t * @param {string} hostname\n\t * @chainable\n\t */\n\tsetHostname(hostname) {\n\t\tthis.url.hostname = hostname;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the value of the named query parameters, clearing previous values\n\t * for that key.\n\t * @param {string} key The parameter to set.\n\t * @param {*} value The new value.\n\t * @chainable\n\t */\n\tsetParameterValue(name, value) {\n\t\tthis.removeParameter(name);\n\t\tthis.addParameterValue(name, value);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the values of the named query parameters, clearing previous values\n\t * for that key.\n\t * @param {string} key The parameter to set.\n\t * @param {*} value The new value.\n\t * @chainable\n\t */\n\tsetParameterValues(name, values) {\n\t\tthis.removeParameter(name);\n\t\tvalues.forEach((value) => this.addParameterValue(name, value));\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the pathname.\n\t * @param {string} pathname\n\t * @chainable\n\t */\n\tsetPathname(pathname) {\n\t\tthis.url.pathname = pathname;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the port number.\n\t * @param {*} port Port number.\n\t * @chainable\n\t */\n\tsetPort(port) {\n\t\tthis.url.port = port;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the function that will be used for parsing the original string uri\n\t * into an object.\n\t * @param {!function()} parseFn\n\t */\n\tstatic setParseFn(parseFn) {\n\t\tparseFn_ = parseFn;\n\t}\n\n\t/**\n\t * Sets the protocol. If missing <code>http:</code> is used as default.\n\t * @param {string} protocol\n\t * @chainable\n\t */\n\tsetProtocol(protocol) {\n\t\tthis.url.protocol = protocol;\n\t\tif (this.url.protocol[this.url.protocol.length - 1] !== ':') {\n\t\t\tthis.url.protocol += ':';\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * @return {string} The string form of the url.\n\t * @override\n\t */\n\ttoString() {\n\t\tvar href = '';\n\t\tvar host = this.getHost();\n\t\tif (host) {\n\t\t\thref += this.getProtocol() + '//';\n\t\t}\n\t\thref += host + this.getPathname() + this.getSearch() + this.getHash();\n\t\treturn href;\n\t}\n\n\t/**\n\t * Joins the given paths.\n\t * @param {string} basePath\n\t * @param {...string} ...paths Any number of paths to be joined with the base url.\n\t * @static\n\t */\n\tstatic joinPaths(basePath, ...paths) {\n\t\tif (basePath.charAt(basePath.length - 1) === '/') {\n\t\t\tbasePath = basePath.substring(0, basePath.length - 1);\n\t\t}\n\t\tpaths = paths.map(path => path.charAt(0) === '/' ? path.substring(1) : path);\n\t\treturn [basePath].concat(paths).join('/').replace(/\\/$/, '');\n\t}\n\n\t/**\n\t * URL-decodes the string. We need to specially handle '+'s because\n\t * the javascript library doesn't convert them to spaces.\n\t * @param {string} str The string to url decode.\n\t * @return {string} The decoded {@code str}.\n\t */\n\tstatic urlDecode(str) {\n\t\treturn decodeURIComponent(str.replace(/\\+/g, ' '));\n\t}\n\n}\n\n/**\n * Default protocol value.\n * @type {string}\n * @default http:\n * @static\n */\nconst isSecure = () =>\n\t(typeof window !== 'undefined' &&\n\t\twindow.location &&\n\t\twindow.location.protocol &&\n\t\twindow.location.protocol.indexOf('https') === 0);\n\nUri.DEFAULT_PROTOCOL = isSecure() ? 'https:' : 'http:';\n\n/**\n * Hostname placeholder. Relevant to internal usage only.\n * @type {string}\n * @static\n */\nUri.HOSTNAME_PLACEHOLDER = 'hostname' + Date.now();\n\n/**\n * Name used by the param generated by `makeUnique`.\n * @type {string}\n * @static\n */\nUri.RANDOM_PARAM = 'zx';\n\nexport default Uri;\n","'use strict';\n\nimport globals from '../globals/globals';\nimport Uri from 'metal-uri';\n\n/**\n * A collection of static utility functions.\n * @const\n */\nclass utils {\n\n\t/**\n\t * Copies attributes form source node to target node.\n\t * @return {void}\n\t * @static\n\t */\n\tstatic copyNodeAttributes(source, target) {\n\t\tArray.prototype.slice.call(source.attributes).forEach((attribute) => target.setAttribute(attribute.name, attribute.value));\n\t}\n\n\t/**\n\t * Gets the current browser path including hashbang.\n\t * @return {!string}\n\t * @static\n\t */\n\tstatic getCurrentBrowserPath() {\n\t\treturn this.getCurrentBrowserPathWithoutHash() + globals.window.location.hash;\n\t}\n\n\t/**\n\t * Gets the current browser path excluding hashbang.\n\t * @return {!string}\n\t * @static\n\t */\n\tstatic getCurrentBrowserPathWithoutHash() {\n\t\treturn globals.window.location.pathname + globals.window.location.search;\n\t}\n\n\t/**\n\t * Gets the given node offset coordinates.\n\t * @return {!object}\n\t * @static\n\t */\n\tstatic getNodeOffset(node) {\n\t\tlet [offsetLeft, offsetTop] = [0, 0];\n\t\tdo {\n\t\t\toffsetLeft += node.offsetLeft;\n\t\t\toffsetTop += node.offsetTop;\n\t\t\tnode = node.offsetParent;\n\t\t} while (node);\n\t\treturn {\n\t\t\toffsetLeft,\n\t\t\toffsetTop\n\t\t};\n\t}\n\n\t/**\n\t * Extracts the path part of an url.\n\t * @return {!string}\n\t * @static\n\t */\n\tstatic getUrlPath(url) {\n\t\tvar uri = new Uri(url);\n\t\treturn uri.getPathname() + uri.getSearch() + uri.getHash();\n\t}\n\n\t/**\n\t * Extracts the path part of an url without hashbang.\n\t * @return {!string}\n\t * @static\n\t */\n\tstatic getUrlPathWithoutHash(url) {\n\t\tvar uri = new Uri(url);\n\t\treturn uri.getPathname() + uri.getSearch();\n\t}\n\n\t/**\n\t * Extracts the path part of an url without hashbang and query search.\n\t * @return {!string}\n\t * @static\n\t */\n\tstatic getUrlPathWithoutHashAndSearch(url) {\n\t\tvar uri = new Uri(url);\n\t\treturn uri.getPathname();\n\t}\n\n\t/**\n\t * Checks if url is in the same browser current url excluding the hashbang.\n\t * @param  {!string} url\n\t * @return {boolean}\n\t * @static\n\t */\n\tstatic isCurrentBrowserPath(url) {\n\t\tif (url) {\n\t\t\tconst currentBrowserPath = this.getCurrentBrowserPathWithoutHash();\n\t\t\t// the getUrlPath will create a Uri and will normalize the path and\n\t\t\t// remove the trailling '/' for properly comparing paths.\n\t\t\treturn utils.getUrlPathWithoutHash(url) === this.getUrlPath(currentBrowserPath);\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Returns true if HTML5 History api is supported.\n\t * @return {boolean}\n\t * @static\n\t */\n\tstatic isHtml5HistorySupported() {\n\t\treturn !!(globals.window.history && globals.window.history.pushState);\n\t}\n\n\t/**\n\t * Checks if a given url is a valid http(s) uri and returns the formed Uri\n\t * or false if the parsing failed\n\t * @return {Uri|boolean}\n\t * @static\n\t */\n\tstatic isWebUri(url) {\n\t\ttry {\n\t\t\treturn new Uri(url);\n\t\t} catch (err) {\n\t\t\tconsole.error(`${err.message} ${url}`);\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * Removes all attributes form node.\n\t * @return {void}\n\t * @static\n\t */\n\tstatic clearNodeAttributes(node) {\n\t\tArray.prototype.slice.call(node.attributes).forEach((attribute) => node.removeAttribute(attribute.name));\n\t}\n\n\t/**\n\t* Removes trailing slash in path.\n\t* @param {!string}\n\t* @return {string}\n\t*/\n\tstatic removePathTrailingSlash(path) {\n\t\tvar length = path ? path.length : 0;\n\t\tif (length > 1 && path[length - 1] === '/') {\n\t\t\tpath = path.substr(0, length - 1);\n\t\t}\n\t\treturn path;\n\t}\n\n\t/**\n\t * Overrides document referrer\n\t * @param {string} referrer\n\t * @static\n\t */\n\tstatic setReferrer(referrer) {\n\t\tObject.defineProperty(globals.document, 'referrer', {\n\t\t\tconfigurable: true,\n\t\t\tget: function() {\n\t\t\t\treturn referrer;\n\t\t\t}\n\t\t});\n\t}\n}\n\nexport default utils;\n","'use strict';\n\nexport default {\n\tbasePath: 'data-senna-base-path',\n\tlinkSelector: 'data-senna-link-selector',\n\tloadingCssClass: 'data-senna-loading-css-class',\n\tsenna: 'data-senna',\n\tdispatch: 'data-senna-dispatch',\n\tsurface: 'data-senna-surface',\n\tupdateScrollPosition: 'data-senna-update-scroll-position'\n};","'use strict';\n\nconst METAL_DATA = '__metal_data__';\n\nclass domData {\n\t/**\n\t * Gets Metal.js's data for the given element.\n\t * @param {!Element} element\n\t * @param {string=} opt_name Optional property from the data to be returned.\n\t * @param {*} opt_initialVal Optinal value to the set the requested property\n\t *     to if it doesn't exist yet in the data.\n\t * @return {!Object}\n\t */\n\tstatic get(element, opt_name, opt_initialVal) {\n\t\tif (!element[METAL_DATA]) {\n\t\t\telement[METAL_DATA] = {};\n\t\t}\n\t\tif (!opt_name) {\n\t\t\treturn element[METAL_DATA];\n\t\t}\n\t\tif (!element[METAL_DATA][opt_name] && opt_initialVal) {\n\t\t\telement[METAL_DATA][opt_name] = opt_initialVal;\n\t\t}\n\t\treturn element[METAL_DATA][opt_name];\n\t}\n\n\t/**\n\t * Checks if the given element has data stored in it.\n\t * @param {!Element} element\n\t * @return {boolean}\n\t */\n\tstatic has(element) {\n\t\treturn !!element[METAL_DATA];\n\t}\n}\n\nexport default domData;\n","'use strict';\n\nimport { Disposable } from 'metal';\n\n/**\n * EventHandle utility. Holds information about an event subscription, and\n * allows removing them easily.\n * EventHandle is a Disposable, but it's important to note that the\n * EventEmitter that created it is not the one responsible for disposing it.\n * That responsibility is for the code that holds a reference to it.\n * @param {!EventEmitter} emitter Emitter the event was subscribed to.\n * @param {string} event The name of the event that was subscribed to.\n * @param {!Function} listener The listener subscribed to the event.\n * @constructor\n * @extends {Disposable}\n */\nclass EventHandle extends Disposable {\n\tconstructor(emitter, event, listener) {\n\t\tsuper();\n\n\t\t/**\n\t\t * The EventEmitter instance that the event was subscribed to.\n\t\t * @type {EventEmitter}\n\t\t * @protected\n\t\t */\n\t\tthis.emitter_ = emitter;\n\n\t\t/**\n\t\t * The name of the event that was subscribed to.\n\t\t * @type {string}\n\t\t * @protected\n\t\t */\n\t\tthis.event_ = event;\n\n\t\t/**\n\t\t * The listener subscribed to the event.\n\t\t * @type {Function}\n\t\t * @protected\n\t\t */\n\t\tthis.listener_ = listener;\n\t}\n\n\t/**\n\t * Disposes of this instance's object references.\n\t * @override\n\t */\n\tdisposeInternal() {\n\t\tthis.removeListener();\n\t\tthis.emitter_ = null;\n\t\tthis.listener_ = null;\n\t}\n\n\t/**\n\t * Removes the listener subscription from the emitter.\n\t */\n\tremoveListener() {\n\t\tif (!this.emitter_.isDisposed()) {\n\t\t\tthis.emitter_.removeListener(this.event_, this.listener_);\n\t\t}\n\t}\n}\n\nexport default EventHandle;\n","'use strict';\n\nimport { array, Disposable, isFunction, isString } from 'metal';\nimport EventHandle from './EventHandle';\n\nconst singleArray_ = [0];\n\n/**\n * EventEmitter utility.\n * @constructor\n * @extends {Disposable}\n */\nclass EventEmitter extends Disposable {\n\tconstructor() {\n\t\tsuper();\n\n\t\t/**\n\t\t * Holds event listeners scoped by event type.\n\t\t * @type {Object<string, !Array<!function()>>}\n\t\t * @protected\n\t\t */\n\t\tthis.events_ = null;\n\n\t\t/**\n\t\t * Handlers that are triggered when an event is listened to.\n\t\t * @type {Array}\n\t\t */\n\t\tthis.listenerHandlers_ = null;\n\n\t\t/**\n\t\t * Configuration option which determines if an event facade should be sent\n\t\t * as a param of listeners when emitting events. If set to true, the facade\n\t\t * will be passed as the first argument of the listener.\n\t\t * @type {boolean}\n\t\t * @protected\n\t\t */\n\t\tthis.shouldUseFacade_ = false;\n\t}\n\n\t/**\n\t * Adds a handler to given holder variable. If the holder doesn't have a\n\t * value yet, it will receive the handler directly. If the holder is an array,\n\t * the value will just be added to it. Otherwise, the holder will be set to a\n\t * new array containing its previous value plus the new handler.\n\t * @param {*} holder\n\t * @param {!function()|Object} handler\n\t * @return {*} The holder's new value.\n\t * @protected\n\t */\n\taddHandler_(holder, handler) {\n\t\tif (!holder) {\n\t\t\tholder = handler;\n\t\t} else {\n\t\t\tif (!Array.isArray(holder)) {\n\t\t\t\tholder = [holder];\n\t\t\t}\n\t\t\tholder.push(handler);\n\t\t}\n\t\treturn holder;\n\t}\n\n\t/**\n\t * Adds a listener to the end of the listeners array for the specified events.\n\t * @param {!(Array|string)} event\n\t * @param {!Function} listener\n\t * @param {boolean} opt_default Flag indicating if this listener is a default\n\t *   action for this event. Default actions are run last, and only if no previous\n\t *   listener call `preventDefault()` on the received event facade.\n\t * @return {!EventHandle} Can be used to remove the listener.\n\t */\n\taddListener(event, listener, opt_default) {\n\t\tthis.validateListener_(listener);\n\n\t\tconst events = this.toEventsArray_(event);\n\t\tfor (let i = 0; i < events.length; i++) {\n\t\t\tthis.addSingleListener_(events[i], listener, opt_default);\n\t\t}\n\n\t\treturn new EventHandle(this, event, listener);\n\t}\n\n\t/**\n\t * Adds a listener to the end of the listeners array for a single event.\n\t * @param {string} event\n\t * @param {!Function} listener\n\t * @param {boolean} opt_default Flag indicating if this listener is a default\n\t *   action for this event. Default actions are run last, and only if no previous\n\t *   listener call `preventDefault()` on the received event facade.\n\t * @return {!EventHandle} Can be used to remove the listener.\n\t * @param {Function=} opt_origin The original function that was added as a\n\t *   listener, if there is any.\n\t * @protected\n\t */\n\taddSingleListener_(event, listener, opt_default, opt_origin) {\n\t\tthis.runListenerHandlers_(event);\n\t\tif (opt_default || opt_origin) {\n\t\t\tlistener = {\n\t\t\t\tdefault: opt_default,\n\t\t\t\tfn: listener,\n\t\t\t\torigin: opt_origin\n\t\t\t};\n\t\t}\n\t\tthis.events_ = this.events_ || {};\n\t\tthis.events_[event] = this.addHandler_(this.events_[event], listener);\n\t}\n\n\t/**\n\t * Builds facade for the given event.\n\t * @param {string} event\n\t * @return {Object}\n\t * @protected\n\t */\n\tbuildFacade_(event) {\n\t\tif (this.getShouldUseFacade()) {\n\t\t\tconst facade = {\n\t\t\t\tpreventDefault: function() {\n\t\t\t\t\tfacade.preventedDefault = true;\n\t\t\t\t},\n\t\t\t\ttarget: this,\n\t\t\t\ttype: event\n\t\t\t};\n\t\t\treturn facade;\n\t\t}\n\t}\n\n\t/**\n\t * Disposes of this instance's object references.\n\t * @override\n\t */\n\tdisposeInternal() {\n\t\tthis.events_ = null;\n\t}\n\n\t/**\n\t * Execute each of the listeners in order with the supplied arguments.\n\t * @param {string} event\n\t * @param {*} opt_args [arg1], [arg2], [...]\n\t * @return {boolean} Returns true if event had listeners, false otherwise.\n\t */\n\temit(event) {\n\t\tconst listeners = this.getRawListeners_(event);\n\t\tif (listeners.length === 0) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst args = array.slice(arguments, 1);\n\t\tthis.runListeners_(listeners, args, this.buildFacade_(event));\n\t\treturn true;\n\t}\n\n\t/**\n\t * Gets the listener objects for the given event, if there are any.\n\t * @param {string} event\n\t * @return {!Array}\n\t * @protected\n\t */\n\tgetRawListeners_(event) {\n\t\tconst directListeners = toArray(this.events_ && this.events_[event]);\n\t\treturn directListeners.concat(toArray(this.events_ && this.events_['*']));\n\t}\n\n\t/**\n\t * Gets the configuration option which determines if an event facade should\n\t * be sent as a param of listeners when emitting events. If set to true, the\n\t * facade will be passed as the first argument of the listener.\n\t * @return {boolean}\n\t */\n\tgetShouldUseFacade() {\n\t\treturn this.shouldUseFacade_;\n\t}\n\n\t/**\n\t * Returns an array of listeners for the specified event.\n\t * @param {string} event\n\t * @return {Array} Array of listeners.\n\t */\n\tlisteners(event) {\n\t\treturn this.getRawListeners_(event).map(\n\t\t\tlistener => listener.fn ? listener.fn : listener\n\t\t);\n\t}\n\n\t/**\n\t * Adds a listener that will be invoked a fixed number of times for the\n\t * events. After each event is triggered the specified amount of times, the\n\t * listener is removed for it.\n\t * @param {!(Array|string)} event\n\t * @param {number} amount The amount of times this event should be listened\n\t * to.\n\t * @param {!Function} listener\n\t * @return {!EventHandle} Can be used to remove the listener.\n\t */\n\tmany(event, amount, listener) {\n\t\tconst events = this.toEventsArray_(event);\n\t\tfor (let i = 0; i < events.length; i++) {\n\t\t\tthis.many_(events[i], amount, listener);\n\t\t}\n\n\t\treturn new EventHandle(this, event, listener);\n\t}\n\n\t/**\n\t * Adds a listener that will be invoked a fixed number of times for a single\n\t * event. After the event is triggered the specified amount of times, the\n\t * listener is removed.\n\t * @param {string} event\n\t * @param {number} amount The amount of times this event should be listened\n\t * to.\n\t * @param {!Function} listener\n\t * @protected\n\t */\n\tmany_(event, amount, listener) {\n\t\tconst self = this;\n\n\t\tif (amount <= 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tfunction handlerInternal() {\n\t\t\tif (--amount === 0) {\n\t\t\t\tself.removeListener(event, handlerInternal);\n\t\t\t}\n\t\t\tlistener.apply(self, arguments);\n\t\t}\n\n\t\tself.addSingleListener_(event, handlerInternal, false, listener);\n\t}\n\n\t/**\n\t * Checks if a listener object matches the given listener function. To match,\n\t * it needs to either point to that listener or have it as its origin.\n\t * @param {!Object} listenerObj\n\t * @param {!Function} listener\n\t * @return {boolean}\n\t * @protected\n\t */\n\tmatchesListener_(listenerObj, listener) {\n\t\tconst fn = listenerObj.fn || listenerObj;\n\t\treturn fn === listener ||\n\t\t\t(listenerObj.origin && listenerObj.origin === listener);\n\t}\n\n\t/**\n\t * Removes a listener for the specified events.\n\t * Caution: changes array indices in the listener array behind the listener.\n\t * @param {!(Array|string)} events\n\t * @param {!Function} listener\n\t * @return {!Object} Returns emitter, so calls can be chained.\n\t */\n\toff(event, listener) {\n\t\tthis.validateListener_(listener);\n\t\tif (!this.events_) {\n\t\t\treturn this;\n\t\t}\n\n\t\tconst events = this.toEventsArray_(event);\n\t\tfor (let i = 0; i < events.length; i++) {\n\t\t\tthis.events_[events[i]] = this.removeMatchingListenerObjs_(\n\t\t\t\ttoArray(this.events_[events[i]]),\n\t\t\t\tlistener\n\t\t\t);\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds a listener to the end of the listeners array for the specified events.\n\t * @param {!(Array|string)} events\n\t * @param {!Function} listener\n\t * @return {!EventHandle} Can be used to remove the listener.\n\t */\n\ton() {\n\t\treturn this.addListener.apply(this, arguments);\n\t}\n\n\t/**\n\t * Adds handler that gets triggered when an event is listened to on this\n\t * instance.\n\t * @param {!function()}\n\t */\n\tonListener(handler) {\n\t\tthis.listenerHandlers_ = this.addHandler_(this.listenerHandlers_, handler);\n\t}\n\n\t/**\n\t * Adds a one time listener for the events. This listener is invoked only the\n\t * next time each event is fired, after which it is removed.\n\t * @param {!(Array|string)} events\n\t * @param {!Function} listener\n\t * @return {!EventHandle} Can be used to remove the listener.\n\t */\n\tonce(events, listener) {\n\t\treturn this.many(events, 1, listener);\n\t}\n\n\t/**\n\t * Removes all listeners, or those of the specified events. It's not a good\n\t * idea to remove listeners that were added elsewhere in the code,\n\t * especially when it's on an emitter that you didn't create.\n\t * @param {(Array|string)=} opt_events\n\t * @return {!Object} Returns emitter, so calls can be chained.\n\t */\n\tremoveAllListeners(opt_events) {\n\t\tif (this.events_) {\n\t\t\tif (opt_events) {\n\t\t\t\tconst events = this.toEventsArray_(opt_events);\n\t\t\t\tfor (let i = 0; i < events.length; i++) {\n\t\t\t\t\tthis.events_[events[i]] = null;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.events_ = null;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Removes all listener objects from the given array that match the given\n\t * listener function.\n\t * @param {Array.<Object>} listenerObjs\n\t * @param {!Function} listener\n\t * @return {Array.<Object>|Object} The new listeners array for this event.\n\t * @protected\n\t */\n\tremoveMatchingListenerObjs_(listenerObjs, listener) {\n\t\tconst finalListeners = [];\n\t\tfor (let i = 0; i < listenerObjs.length; i++) {\n\t\t\tif (!this.matchesListener_(listenerObjs[i], listener)) {\n\t\t\t\tfinalListeners.push(listenerObjs[i]);\n\t\t\t}\n\t\t}\n\t\treturn finalListeners.length > 0 ? finalListeners : null;\n\t}\n\n\t/**\n\t * Removes a listener for the specified events.\n\t * Caution: changes array indices in the listener array behind the listener.\n\t * @param {!(Array|string)} events\n\t * @param {!Function} listener\n\t * @return {!Object} Returns emitter, so calls can be chained.\n\t */\n\tremoveListener() {\n\t\treturn this.off.apply(this, arguments);\n\t}\n\n\t/**\n\t * Runs the handlers when an event is listened to.\n\t * @param {string} event\n\t * @protected\n\t */\n\trunListenerHandlers_(event) {\n\t\tlet handlers = this.listenerHandlers_;\n\t\tif (handlers) {\n\t\t\thandlers = toArray(handlers);\n\t\t\tfor (let i = 0; i < handlers.length; i++) {\n\t\t\t\thandlers[i](event);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Runs the given listeners.\n\t * @param {!Array} listeners\n\t * @param {!Array} args\n\t * @param (Object) facade\n\t * @protected\n\t */\n\trunListeners_(listeners, args, facade) {\n\t\tif (facade) {\n\t\t\targs.push(facade);\n\t\t}\n\n\t\tconst defaultListeners = [];\n\t\tfor (let i = 0; i < listeners.length; i++) {\n\t\t\tconst listener = listeners[i].fn || listeners[i];\n\t\t\tif (listeners[i].default) {\n\t\t\t\tdefaultListeners.push(listener);\n\t\t\t} else {\n\t\t\t\tlistener.apply(this, args);\n\t\t\t}\n\t\t}\n\t\tif (!facade || !facade.preventedDefault) {\n\t\t\tfor (let j = 0; j < defaultListeners.length; j++) {\n\t\t\t\tdefaultListeners[j].apply(this, args);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Sets the configuration option which determines if an event facade should\n\t * be sent as a param of listeners when emitting events. If set to true, the\n\t * facade will be passed as the first argument of the listener.\n\t * @param {boolean} shouldUseFacade\n\t * @return {!Object} Returns emitter, so calls can be chained.\n\t */\n\tsetShouldUseFacade(shouldUseFacade) {\n\t\tthis.shouldUseFacade_ = shouldUseFacade;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Converts the parameter to an array if only one event is given. Reuses the\n\t * same array each time this conversion is done, to avoid using more memory\n\t * than necessary.\n\t * @param  {!(Array|string)} events\n\t * @return {!Array}\n\t * @protected\n\t */\n\ttoEventsArray_(events) {\n\t\tif (isString(events)) {\n\t\t\tsingleArray_[0] = events;\n\t\t\tevents = singleArray_;\n\t\t}\n\t\treturn events;\n\t}\n\n\t/**\n\t * Checks if the given listener is valid, throwing an exception when it's not.\n\t * @param  {*} listener\n\t * @protected\n\t */\n\tvalidateListener_(listener) {\n\t\tif (!isFunction(listener)) {\n\t\t\tthrow new TypeError('Listener must be a function');\n\t\t}\n\t}\n}\n\nfunction toArray(val) {\n\tval = val || [];\n\treturn Array.isArray(val) ? val : [val];\n}\n\nexport default EventEmitter;\n","'use strict';\n\nimport { Disposable } from 'metal';\n\n/**\n * EventEmitterProxy utility. It's responsible for linking two EventEmitter\n * instances together, emitting events from the first emitter through the\n * second one. That means that listening to a supported event on the target\n * emitter will mean listening to it on the origin emitter as well.\n * @param {EventEmitter} originEmitter Events originated on this emitter\n *   will be fired for the target emitter's listeners as well.\n * @param {EventEmitter} targetEmitter Event listeners attached to this emitter\n *   will also be triggered when the event is fired by the origin emitter.\n * @param {Object} opt_blacklist Optional blacklist of events that should not be\n *   proxied.\n * @constructor\n * @extends {Disposable}\n */\nclass EventEmitterProxy extends Disposable {\n\tconstructor(originEmitter, targetEmitter, opt_blacklist, opt_whitelist) {\n\t\tsuper();\n\n\t\t/**\n\t\t * Map of events that should not be proxied.\n\t\t * @type {Object}\n\t\t * @protected\n\t\t */\n\t\tthis.blacklist_ = opt_blacklist;\n\n\t\t/**\n\t\t * The origin emitter. This emitter's events will be proxied through the\n\t\t * target emitter.\n\t\t * @type {EventEmitter}\n\t\t * @protected\n\t\t */\n\t\tthis.originEmitter_ = originEmitter;\n\n\t\t/**\n\t\t * A list of events that are pending to be listened by an actual origin\n\t\t * emitter. Events are stored here when the origin doesn't exist, so they\n\t\t * can be set on a new origin when one is set.\n\t\t * @type {Array}\n\t\t * @protected\n\t\t */\n\t\tthis.pendingEvents_ = null;\n\n\t\t/**\n\t\t * Holds a map of events from the origin emitter that are already being proxied.\n\t\t * @type {Object<string, !EventHandle>}\n\t\t * @protected\n\t\t */\n\t\tthis.proxiedEvents_ = null;\n\n\t\t/**\n\t\t * The target emitter. This emitter will emit all events that come from\n\t\t * the origin emitter.\n\t\t * @type {EventEmitter}\n\t\t * @protected\n\t\t */\n\t\tthis.targetEmitter_ = targetEmitter;\n\n\t\t/**\n\t\t * Map of events that should be proxied. If whitelist is set blacklist is ignored.\n\t\t * @type {Object}\n\t\t * @protected\n\t\t */\n\t\tthis.whitelist_ = opt_whitelist;\n\n\t\tthis.startProxy_();\n\t}\n\n\t/**\n\t * Adds the given listener for the given event.\n\t * @param {string} event\n\t * @param {!function()} listener\n\t * @return {!EventHandle} The listened event's handle.\n\t * @protected\n\t */\n\taddListener_(event, listener) {\n\t\treturn this.originEmitter_.on(event, listener);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdisposeInternal() {\n\t\tthis.removeListeners_();\n\t\tthis.proxiedEvents_ = null;\n\t\tthis.originEmitter_ = null;\n\t\tthis.targetEmitter_ = null;\n\t}\n\n\t/**\n\t * Emits the specified event type on the target emitter.\n\t * @protected\n\t */\n\temitOnTarget_() {\n\t\tthis.targetEmitter_.emit.apply(this.targetEmitter_, arguments);\n\t}\n\n\t/**\n\t * Proxies the given event from the origin to the target emitter.\n\t * @param {string} event\n\t */\n\tproxyEvent(event) {\n\t\tif (this.shouldProxyEvent_(event)) {\n\t\t\tthis.tryToAddListener_(event);\n\t\t}\n\t}\n\n\t/**\n\t * Removes the proxy listener for all events.\n\t * @protected\n\t */\n\tremoveListeners_() {\n\t\tif (this.proxiedEvents_) {\n\t\t\tconst events = Object.keys(this.proxiedEvents_);\n\t\t\tfor (let i = 0; i < events.length; i++) {\n\t\t\t\tthis.proxiedEvents_[events[i]].removeListener();\n\t\t\t}\n\t\t\tthis.proxiedEvents_ = null;\n\t\t}\n\t\tthis.pendingEvents_ = null;\n\t}\n\n\t/**\n\t * Changes the origin emitter. This automatically detaches any events that\n\t * were already being proxied from the previous emitter, and starts proxying\n\t * them on the new emitter instead.\n\t * @param {!EventEmitter} originEmitter\n\t */\n\tsetOriginEmitter(originEmitter) {\n\t\tconst events = this.originEmitter_ && this.proxiedEvents_ ?\n\t\t\tObject.keys(this.proxiedEvents_) :\n\t\t\tthis.pendingEvents_;\n\t\tthis.originEmitter_ = originEmitter;\n\t\tif (events) {\n\t\t\tthis.removeListeners_();\n\t\t\tevents.forEach(event => this.proxyEvent(event));\n\t\t}\n\t}\n\n\t/**\n\t * Checks if the given event should be proxied.\n\t * @param {string} event\n\t * @return {boolean}\n\t * @protected\n\t */\n\tshouldProxyEvent_(event) {\n\t\tif (this.whitelist_ && !this.whitelist_[event]) {\n\t\t\treturn false;\n\t\t}\n\t\tif (this.blacklist_ && this.blacklist_[event]) {\n\t\t\treturn false;\n\t\t}\n\t\treturn !this.proxiedEvents_ || !this.proxiedEvents_[event];\n\t}\n\n\t/**\n\t * Starts proxying all events from the origin to the target emitter.\n\t * @protected\n\t */\n\tstartProxy_() {\n\t\tthis.targetEmitter_.onListener(this.proxyEvent.bind(this));\n\t}\n\n\t/**\n\t * Adds a listener to the origin emitter, if it exists. Otherwise, stores\n\t * the pending listener so it can be used on a future origin emitter.\n\t * @param {string} event\n\t * @protected\n\t */\n\ttryToAddListener_(event) {\n\t\tif (this.originEmitter_) {\n\t\t\tthis.proxiedEvents_ = this.proxiedEvents_ || {};\n\t\t\tthis.proxiedEvents_[event] = this.addListener_(\n\t\t\t\tevent,\n\t\t\t\tthis.emitOnTarget_.bind(this, event)\n\t\t\t);\n\t\t} else {\n\t\t\tthis.pendingEvents_ = this.pendingEvents_ || [];\n\t\t\tthis.pendingEvents_.push(event);\n\t\t}\n\t}\n}\n\nexport default EventEmitterProxy;\n","'use strict';\n\nimport { Disposable } from 'metal';\n\n/**\n * EventHandler utility. It's useful for easily removing a group of\n * listeners from different EventEmitter instances.\n * @constructor\n * @extends {Disposable}\n */\nclass EventHandler extends Disposable {\n\tconstructor() {\n\t\tsuper();\n\n\t\t/**\n\t\t * An array that holds the added event handles, so the listeners can be\n\t\t * removed later.\n\t\t * @type {Array.<EventHandle>}\n\t\t * @protected\n\t\t */\n\t\tthis.eventHandles_ = [];\n\t}\n\n\t/**\n\t * Adds event handles to be removed later through the `removeAllListeners`\n\t * method.\n\t * @param {...(!EventHandle)} var_args\n\t */\n\tadd() {\n\t\tfor (let i = 0; i < arguments.length; i++) {\n\t\t\tthis.eventHandles_.push(arguments[i]);\n\t\t}\n\t}\n\n\t/**\n\t * Disposes of this instance's object references.\n\t * @override\n\t */\n\tdisposeInternal() {\n\t\tthis.eventHandles_ = null;\n\t}\n\n\t/**\n\t * Removes all listeners that have been added through the `add` method.\n\t */\n\tremoveAllListeners() {\n\t\tfor (let i = 0; i < this.eventHandles_.length; i++) {\n\t\t\tthis.eventHandles_[i].removeListener();\n\t\t}\n\n\t\tthis.eventHandles_ = [];\n\t}\n}\n\nexport default EventHandler;\n","'use strict';\n\nimport { array, isString } from 'metal';\nimport domData from './domData';\nimport { EventHandle } from 'metal-events';\n\n/**\n * This is a special EventHandle, that is responsible for dom delegated events\n * (only the ones that receive a target element, not a selector string).\n * @extends {EventHandle}\n */\nclass DomDelegatedEventHandle extends EventHandle {\n\t/**\n\t * The constructor for `DomDelegatedEventHandle`.\n\t * @param {!Event} emitter Element the event was subscribed to.\n\t * @param {string} event The name of the event that was subscribed to.\n\t * @param {!Function} listener The listener subscribed to the event.\n\t * @param {string=} opt_selector An optional selector used when delegating\n\t *     the event.\n\t * @constructor\n\t */\n\tconstructor(emitter, event, listener, opt_selector) {\n\t\tsuper(emitter, event, listener);\n\t\tthis.selector_ = opt_selector;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tremoveListener() {\n\t\tconst delegating = domData.get(this.emitter_, 'delegating', {});\n\t\tconst listeners = domData.get(this.emitter_, 'listeners', {});\n\t\tconst selector = this.selector_;\n\t\tconst arr = isString(selector) ? delegating[this.event_].selectors : listeners;\n\t\tconst key = isString(selector) ? selector : this.event_;\n\n\t\tarray.remove(arr[key] || [], this.listener_);\n\t\tif (arr[key] && arr[key].length === 0) {\n\t\t\tdelete arr[key];\n\t\t}\n\t}\n}\n\nexport default DomDelegatedEventHandle;\n","'use strict';\n\nimport { EventHandle } from 'metal-events';\n\n/**\n * This is a special EventHandle, that is responsible for dom events, instead\n * of EventEmitter events.\n * @extends {EventHandle}\n */\nclass DomEventHandle extends EventHandle {\n\t/**\n\t * The constructor for `DomEventHandle`.\n\t * @param {!EventEmitter} emitter Emitter the event was subscribed to.\n\t * @param {string} event The name of the event that was subscribed to.\n\t * @param {!Function} listener The listener subscribed to the event.\n\t * @param {boolean} opt_capture Flag indicating if listener should be triggered\n\t *   during capture phase, instead of during the bubbling phase. Defaults to false.\n\t * @constructor\n\t */\n\tconstructor(emitter, event, listener, opt_capture) {\n\t\tsuper(emitter, event, listener);\n\t\tthis.capture_ = opt_capture;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tremoveListener() {\n\t\tthis.emitter_.removeEventListener(this.event_, this.listener_, this.capture_);\n\t}\n}\n\nexport default DomEventHandle;\n","'use strict';\n\nimport { isDef, isDocument, isDocumentFragment, isElement, isObject, isString, object } from 'metal';\nimport domData from './domData';\nimport DomDelegatedEventHandle from './DomDelegatedEventHandle';\nimport DomEventHandle from './DomEventHandle';\n\nconst elementsByTag_ = {};\nconst supportCache_ = {};\nexport const customEvents = {};\n\nconst LAST_CONTAINER = '__metal_last_container__';\nconst USE_CAPTURE = {\n\tblur: true,\n\terror: true,\n\tfocus: true,\n\tinvalid: true,\n\tload: true,\n\tscroll: true\n};\n\n/**\n * Adds the requested CSS classes to an element.\n * @param {!Element|!Nodelist} elements The element or elements to add CSS classes to.\n * @param {string} classes CSS classes to add.\n */\nexport function addClasses(elements, classes) {\n\tif (!isObject(elements) || !isString(classes)) {\n\t\treturn;\n\t}\n\n\tif (!elements.length) {\n\t\telements = [elements];\n\t}\n\n\tfor (let i = 0; i < elements.length; i++) {\n\t\tif ('classList' in elements[i]) {\n\t\t\taddClassesWithNative_(elements[i], classes);\n\t\t} else {\n\t\t\taddClassesWithoutNative_(elements[i], classes);\n\t\t}\n\t}\n}\n\n/**\n * Adds the requested CSS classes to an element using classList.\n * @param {!Element} element The element to add CSS classes to.\n * @param {string} classes CSS classes to add.\n * @private\n */\nfunction addClassesWithNative_(element, classes) {\n\tclasses.split(' ').forEach(function(className) {\n\t\tif (className) {\n\t\t\telement.classList.add(className);\n\t\t}\n\t});\n}\n\n/**\n * Adds the requested CSS classes to an element without using classList.\n * @param {!Element} element The element to add CSS classes to.\n * @param {string} classes CSS classes to add.\n * @private\n */\nfunction addClassesWithoutNative_(element, classes) {\n\tconst elementClassName = ` ${element.className} `;\n\tlet classesToAppend = '';\n\n\tclasses = classes.split(' ');\n\n\tfor (let i = 0; i < classes.length; i++) {\n\t\tconst className = classes[i];\n\n\t\tif (elementClassName.indexOf(` ${className} `) === -1) {\n\t\t\tclassesToAppend += ` ${className}`;\n\t\t}\n\t}\n\n\tif (classesToAppend) {\n\t\telement.className = element.className + classesToAppend;\n\t}\n}\n\n/**\n * Adds an event listener to the given element, to be triggered via delegate.\n * @param {!Element} element\n * @param {string} eventName\n * @param {!function()} listener\n * @private\n */\nfunction addElementListener_(element, eventName, listener) {\n\taddToArr_(domData.get(element, 'listeners', {}), eventName, listener);\n}\n\n/**\n * Adds an event listener to the given element, to be triggered via delegate\n * selectors.\n * @param {!Element} element\n * @param {string} eventName\n * @param {string} selector\n * @param {!function()} listener\n * @private\n */\nfunction addSelectorListener_(element, eventName, selector, listener) {\n\tconst delegatingData = domData.get(element, 'delegating', {});\n\taddToArr_(delegatingData[eventName].selectors, selector, listener);\n}\n\n/**\n * Adds a value to an array inside an object, creating it first if it doesn't\n * yet exist.\n * @param {!Array} arr\n * @param {string} key\n * @param {*} value\n * @private\n */\nfunction addToArr_(arr, key, value) {\n\tif (!arr[key]) {\n\t\tarr[key] = [];\n\t}\n\tarr[key].push(value);\n}\n\n/**\n * Attaches a delegate listener, unless there's already one attached.\n * @param {!Element} element\n * @param {string} eventName\n * @private\n */\nfunction attachDelegateEvent_(element, eventName) {\n\tlet delegatingData = domData.get(element, 'delegating', {});\n\tif (!delegatingData[eventName]) {\n\t\tdelegatingData[eventName] = {\n\t\t\thandle: on(\n\t\t\t\telement,\n\t\t\t\teventName,\n\t\t\t\thandleDelegateEvent_,\n\t\t\t\t!!USE_CAPTURE[eventName]\n\t\t\t),\n\t\t\tselectors: {}\n\t\t};\n\t}\n}\n\n/**\n * Gets the closest element up the tree from the given element (including\n * itself) that matches the specified selector, or null if none match.\n * @param {Element} element\n * @param {string} selector\n * @return {Element}\n */\nexport function closest(element, selector) {\n\twhile (element && !match(element, selector)) {\n\t\telement = element.parentNode;\n\t}\n\treturn element;\n}\n\n/**\n * Appends a child node with text or other nodes to a parent node. If\n * child is a HTML string it will be automatically converted to a document\n * fragment before appending it to the parent.\n * @param {!Element} parent The node to append nodes to.\n * @param {!(Element|NodeList|string)} child The thing to append to the parent.\n * @return {!Element} The appended child.\n */\nexport function append(parent, child) {\n\tif (isString(child)) {\n\t\tchild = buildFragment(child);\n\t}\n\tif (child instanceof NodeList) {\n\t\tconst childArr = Array.prototype.slice.call(child);\n\t\tfor (let i = 0; i < childArr.length; i++) {\n\t\t\tparent.appendChild(childArr[i]);\n\t\t}\n\t} else {\n\t\tparent.appendChild(child);\n\t}\n\treturn child;\n}\n\n/**\n * Helper for converting a HTML string into a document fragment.\n * @param {string} htmlString The HTML string to convert.\n * @return {!Element} The resulting document fragment.\n */\nexport function buildFragment(htmlString) {\n\tconst tempDiv = document.createElement('div');\n\ttempDiv.innerHTML = `<br>${htmlString}`;\n\ttempDiv.removeChild(tempDiv.firstChild);\n\n\tconst fragment = document.createDocumentFragment();\n\twhile (tempDiv.firstChild) {\n\t\tfragment.appendChild(tempDiv.firstChild);\n\t}\n\treturn fragment;\n}\n\n/**\n * Checks if the first element contains the second one.\n * @param {!Element} element1\n * @param {!Element} element2\n * @return {boolean}\n */\nexport function contains(element1, element2) {\n\tif (isDocument(element1)) {\n\t\t// document.contains is not defined on IE9, so call it on documentElement instead.\n\t\treturn element1.documentElement.contains(element2);\n\t} else {\n\t\treturn element1.contains(element2);\n\t}\n}\n\n/**\n * Listens to the specified event on the given DOM element, but only calls the\n * given callback listener when it's triggered by elements that match the\n * given selector or target element.\n * @param {!Element} element The DOM element the event should be listened on.\n * @param {string} eventName The name of the event to listen to.\n * @param {!Element|string} selectorOrTarget Either an element or css selector\n *     that should match the event for the listener to be triggered.\n * @param {!function(!Object)} callback Function to be called when the event\n *     is triggered. It will receive the normalized event object.\n * @param {boolean=} opt_default Optional flag indicating if this is a default\n *     listener. That means that it would only be executed after all non\n *     default listeners, and only if the event isn't prevented via\n *     `preventDefault`.\n * @return {!EventHandle} Can be used to remove the listener.\n */\nexport function delegate(element, eventName, selectorOrTarget, callback, opt_default) {\n\tconst customConfig = customEvents[eventName];\n\tif (customConfig && customConfig.delegate) {\n\t\teventName = customConfig.originalEvent;\n\t\tcallback = customConfig.handler.bind(customConfig, callback);\n\t}\n\n\tif (opt_default) {\n\t\t// Wrap callback so we don't set property directly on it.\n\t\tcallback = callback.bind();\n\t\tcallback.defaultListener_ = true;\n\t}\n\n\tattachDelegateEvent_(element, eventName);\n\tif (isString(selectorOrTarget)) {\n\t\taddSelectorListener_(element, eventName, selectorOrTarget, callback);\n\t} else {\n\t\taddElementListener_(selectorOrTarget, eventName, callback);\n\t}\n\n\treturn new DomDelegatedEventHandle(\n\t\tisString(selectorOrTarget) ? element : selectorOrTarget,\n\t\teventName,\n\t\tcallback,\n\t\tisString(selectorOrTarget) ? selectorOrTarget : null\n\t);\n}\n\n/**\n * Verifies if the element is able to trigger the Click event,\n * simulating browsers behaviour, avoiding event listeners to be called by triggerEvent method.\n * @param {Element} node Element to be checked.\n * @param {string} eventName The event name.\n * @private\n */\nfunction isAbleToInteractWith_(node, eventName, opt_eventObj) {\n\tif (opt_eventObj && eventName === 'click' && opt_eventObj.button === 2) {\n\t\t// Firefox triggers \"click\" events on the document for right clicks. This\n\t\t// causes our delegate logic to trigger it for regular elements too, which\n\t\t// shouldn't happen. Ignoring them here.\n\t\treturn false;\n\t}\n\n\tconst matchesSelector = ['BUTTON', 'INPUT', 'SELECT', 'TEXTAREA', 'FIELDSET'];\n\tif (eventName === 'click' && matchesSelector.indexOf(node.tagName) > -1) {\n\t\treturn !(node.disabled || parent(node, 'fieldset[disabled]'));\n\t}\n\treturn true;\n}\n\n/**\n * Inserts node in document as last element.\n * @param {Element} node Element to remove children from.\n */\nexport function enterDocument(node) {\n\tnode && append(document.body, node);\n}\n\n/**\n * Removes node from document.\n * @param {Element} node Element to remove children from.\n */\nexport function exitDocument(node) {\n\tif (node && node.parentNode) {\n\t\tnode.parentNode.removeChild(node);\n\t}\n}\n\n/**\n * This is called when an event is triggered by a delegate listener. All\n * matching listeners of this event type from `target` to `currentTarget` will\n * be triggered.\n * @param {!Event} event The event payload.\n * @return {boolean} False if at least one of the triggered callbacks returns\n *     false, or true otherwise.\n * @private\n */\nfunction handleDelegateEvent_(event) {\n\tnormalizeDelegateEvent_(event);\n\tlet ret = true;\n\tconst container = event.currentTarget;\n\tconst defFns = [];\n\n\tret &= triggerDelegatedListeners_(container, event, defFns);\n\tret &= triggerDefaultDelegatedListeners_(defFns, event);\n\n\tevent.delegateTarget = null;\n\tevent[LAST_CONTAINER] = container;\n\treturn ret;\n}\n\n/**\n * Checks if the given element has the requested css class.\n * @param {!Element} element\n * @param {string} className\n * @return {boolean}\n */\nexport function hasClass(element, className) {\n\tif ('classList' in element) {\n\t\treturn hasClassWithNative_(element, className);\n\t} else {\n\t\treturn hasClassWithoutNative_(element, className);\n\t}\n}\n\n/**\n * Checks if the given element has the requested css class using classList.\n * @param {!Element} element\n * @param {string} className\n * @return {boolean}\n * @private\n */\nfunction hasClassWithNative_(element, className) {\n\treturn element.classList.contains(className);\n}\n\n/**\n * Checks if the given element has the requested css class without using classList.\n * @param {!Element} element\n * @param {string} className\n * @return {boolean}\n * @private\n */\nfunction hasClassWithoutNative_(element, className) {\n\treturn (` ${element.className} `).indexOf(` ${className} `) >= 0;\n}\n\n/**\n * Checks if the given element is empty or not.\n * @param {!Element} element\n * @return {boolean}\n */\nexport function isEmpty(element) {\n\treturn element.childNodes.length === 0;\n}\n\n/**\n * Check if an element matches a given selector.\n * @param {Element} element\n * @param {string} selector\n * @return {boolean}\n */\nexport function match(element, selector) {\n\tif (!element || element.nodeType !== 1) {\n\t\treturn false;\n\t}\n\n\tconst p = Element.prototype;\n\tconst m = p.matches || p.webkitMatchesSelector || p.mozMatchesSelector || p.msMatchesSelector || p.oMatchesSelector;\n\tif (m) {\n\t\treturn m.call(element, selector);\n\t}\n\n\treturn matchFallback_(element, selector);\n}\n\n/**\n * Check if an element matches a given selector, using an internal implementation\n * instead of calling existing javascript functions.\n * @param {Element} element\n * @param {string} selector\n * @return {boolean}\n * @private\n */\nfunction matchFallback_(element, selector) {\n\tconst nodes = document.querySelectorAll(selector, element.parentNode);\n\tfor (let i = 0; i < nodes.length; ++i) {\n\t\tif (nodes[i] === element) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n\n/**\n * Returns the next sibling of the given element that matches the specified\n * selector, or null if there is none.\n * @param {!Element} element\n * @param {?string} selector\n */\nexport function next(element, selector) {\n\tdo {\n\t\telement = element.nextSibling;\n\t\tif (element && match(element, selector)) {\n\t\t\treturn element;\n\t\t}\n\t} while (element);\n\treturn null;\n}\n\n/**\n * Normalizes the event payload for delegate listeners.\n * @param {!Event} event\n * @private\n */\nfunction normalizeDelegateEvent_(event) {\n\tevent.stopPropagation = stopPropagation_;\n\tevent.stopImmediatePropagation = stopImmediatePropagation_;\n}\n\n/**\n * Listens to the specified event on the given DOM element. This function normalizes\n * DOM event payloads and functions so they'll work the same way on all supported\n * browsers.\n * @param {!Element|string} element The DOM element to listen to the event on, or\n *   a selector that should be delegated on the entire document.\n * @param {string} eventName The name of the event to listen to.\n * @param {!function(!Object)} callback Function to be called when the event is\n *   triggered. It will receive the normalized event object.\n * @param {boolean} opt_capture Flag indicating if listener should be triggered\n *   during capture phase, instead of during the bubbling phase. Defaults to false.\n * @return {!DomEventHandle} Can be used to remove the listener.\n */\nexport function on(element, eventName, callback, opt_capture) {\n\tif (isString(element)) {\n\t\treturn delegate(document, eventName, element, callback);\n\t}\n\tconst customConfig = customEvents[eventName];\n\tif (customConfig && customConfig.event) {\n\t\teventName = customConfig.originalEvent;\n\t\tcallback = customConfig.handler.bind(customConfig, callback);\n\t}\n\telement.addEventListener(eventName, callback, opt_capture);\n\treturn new DomEventHandle(element, eventName, callback, opt_capture);\n}\n\n/**\n * Listens to the specified event on the given DOM element once. This\n * function normalizes DOM event payloads and functions so they'll work the\n * same way on all supported browsers.\n * @param {!Element} element The DOM element to listen to the event on.\n * @param {string} eventName The name of the event to listen to.\n * @param {!function(!Object)} callback Function to be called when the event\n *   is triggered. It will receive the normalized event object.\n * @return {!DomEventHandle} Can be used to remove the listener.\n */\nexport function once(element, eventName, callback) {\n\tconst domEventHandle = on(element, eventName, function() {\n\t\tdomEventHandle.removeListener();\n\t\treturn callback.apply(this, arguments);\n\t});\n\treturn domEventHandle;\n}\n\n/**\n * Gets the first parent from the given element that matches the specified\n * selector, or null if none match.\n * @param {!Element} element\n * @param {string} selector\n * @return {Element}\n */\nexport function parent(element, selector) {\n\treturn closest(element.parentNode, selector);\n}\n\n/**\n * Registers a custom event.\n * @param {string} eventName The name of the custom event.\n * @param {!Object} customConfig An object with information about how the event\n *   should be handled.\n */\nexport function registerCustomEvent(eventName, customConfig) {\n\tcustomEvents[eventName] = customConfig;\n}\n\n/**\n * Removes all the child nodes on a DOM node.\n * @param {Element} node Element to remove children from.\n */\nexport function removeChildren(node) {\n\tlet child;\n\twhile ((child = node.firstChild)) {\n\t\tnode.removeChild(child);\n\t}\n}\n\n/**\n * Removes the requested CSS classes from an element.\n * @param {!Element|!NodeList} elements The element or elements to remove CSS classes from.\n * @param {string} classes CSS classes to remove.\n */\nexport function removeClasses(elements, classes) {\n\tif (!isObject(elements) || !isString(classes)) {\n\t\treturn;\n\t}\n\n\tif (!elements.length) {\n\t\telements = [elements];\n\t}\n\n\tfor (let i = 0; i < elements.length; i++) {\n\t\tif ('classList' in elements[i]) {\n\t\t\tremoveClassesWithNative_(elements[i], classes);\n\t\t} else {\n\t\t\tremoveClassesWithoutNative_(elements[i], classes);\n\t\t}\n\t}\n}\n\n/**\n * Removes the requested CSS classes from an element using classList.\n * @param {!Element} element The element to remove CSS classes from.\n * @param {string} classes CSS classes to remove.\n * @private\n */\nfunction removeClassesWithNative_(element, classes) {\n\tclasses.split(' ').forEach(function(className) {\n\t\tif (className) {\n\t\t\telement.classList.remove(className);\n\t\t}\n\t});\n}\n\n/**\n * Removes the requested CSS classes from an element without using classList.\n * @param {!Element} element The element to remove CSS classes from.\n * @param {string} classes CSS classes to remove.\n * @private\n */\nfunction removeClassesWithoutNative_(element, classes) {\n\tlet elementClassName = ` ${element.className} `;\n\n\tclasses = classes.split(' ');\n\n\tfor (let i = 0; i < classes.length; i++) {\n\t\telementClassName = elementClassName.replace(` ${classes[i]} `, ' ');\n\t}\n\n\telement.className = elementClassName.trim();\n}\n\n/**\n * Replaces the first element with the second.\n * @param {Element} element1\n * @param {Element} element2\n */\nexport function replace(element1, element2) {\n\tif (element1 && element2 && element1 !== element2 && element1.parentNode) {\n\t\telement1.parentNode.insertBefore(element2, element1);\n\t\telement1.parentNode.removeChild(element1);\n\t}\n}\n\n/**\n * The function that replaces `stopImmediatePropagation_` for events.\n * @private\n */\nfunction stopImmediatePropagation_() {\n\tconst event = this; // eslint-disable-line\n\tevent.stopped = true;\n\tevent.stoppedImmediate = true;\n\tEvent.prototype.stopImmediatePropagation.call(event);\n}\n\n/**\n * The function that replaces `stopPropagation` for events.\n * @private\n */\nfunction stopPropagation_() {\n\tconst event = this; // eslint-disable-line\n\tevent.stopped = true;\n\tEvent.prototype.stopPropagation.call(event);\n}\n\n/**\n * Checks if the given element supports the given event type.\n * @param {!Element|string} element The DOM element or element tag name to check.\n * @param {string} eventName The name of the event to check.\n * @return {boolean}\n */\nexport function supportsEvent(element, eventName) {\n\tif (customEvents[eventName]) {\n\t\treturn true;\n\t}\n\n\tif (isString(element)) {\n\t\tif (!elementsByTag_[element]) {\n\t\t\telementsByTag_[element] = document.createElement(element);\n\t\t}\n\t\telement = elementsByTag_[element];\n\t}\n\n\tconst tag = element.tagName;\n\tif (!supportCache_[tag] || !supportCache_[tag].hasOwnProperty(eventName)) {\n\t\tsupportCache_[tag] = supportCache_[tag] || {};\n\t\tsupportCache_[tag][eventName] = 'on' + eventName in element;\n\t}\n\treturn supportCache_[tag][eventName];\n}\n\n/**\n * This triggers all default matched delegated listeners of a given event type.\n * @param {!Array} defaultFns Array to collect default listeners in, instead\n * @param {!Event} event\n * @return {boolean} False if at least one of the triggered callbacks returns\n *     false, or true otherwise.\n * @private\n */\nfunction triggerDefaultDelegatedListeners_(defFns, event) {\n\tlet ret = true;\n\n\tfor (let i = 0; i < defFns.length && !event.defaultPrevented; i++) {\n\t\tevent.delegateTarget = defFns[i].element;\n\t\tret &= defFns[i].fn(event);\n\t}\n\n\treturn ret;\n}\n\n/**\n * This triggers all matched delegated listeners of a given event type when its\n * delegated target is able to interact.\n * @param {!Element} container\n * @param {!Event} event\n * @param {!Array} defaultFns Array to collect default listeners in, instead\n *     of running them.\n * @return {boolean} False if at least one of the triggered callbacks returns\n *     false, or true otherwise.\n * @private\n */\nfunction triggerDelegatedListeners_(container, event, defaultFns) {\n\tlet ret = true;\n\tlet currElement = event.target;\n\tconst limit = container.parentNode;\n\n\twhile (currElement && currElement !== limit && !event.stopped) {\n\t\tif (isAbleToInteractWith_(currElement, event.type, event)) {\n\t\t\tevent.delegateTarget = currElement;\n\t\t\tret &= triggerElementListeners_(currElement, event, defaultFns);\n\t\t\tret &= triggerSelectorListeners_(container, currElement, event, defaultFns);\n\t\t}\n\t\tcurrElement = currElement.parentNode;\n\t}\n\n\treturn ret;\n}\n\n/**\n * Converts the given argument to a DOM element. Strings are assumed to\n * be selectors, and so a matched element will be returned. If the arg\n * is already a DOM element it will be the return value.\n * @param {string|Element|Document} selectorOrElement\n * @return {Element} The converted element, or null if none was found.\n */\nexport function toElement(selectorOrElement) {\n\tif (isElement(selectorOrElement) || isDocument(selectorOrElement) || isDocumentFragment(selectorOrElement)) {\n\t\treturn selectorOrElement;\n\t} else if (isString(selectorOrElement)) {\n\t\tif (selectorOrElement[0] === '#' && selectorOrElement.indexOf(' ') === -1) {\n\t\t\treturn document.getElementById(selectorOrElement.substr(1));\n\t\t} else {\n\t\t\treturn document.querySelector(selectorOrElement);\n\t\t}\n\t} else {\n\t\treturn null;\n\t}\n}\n\n/**\n * Adds or removes one or more classes from an element. If any of the classes\n * is present, it will be removed from the element, or added otherwise.\n * @param {!Element} element The element which classes will be toggled.\n * @param {string} classes The classes which have to added or removed from the element.\n */\nexport function toggleClasses(element, classes) {\n\tif (!isObject(element) || !isString(classes)) {\n\t\treturn;\n\t}\n\n\tif ('classList' in element) {\n\t\ttoggleClassesWithNative_(element, classes);\n\t} else {\n\t\ttoggleClassesWithoutNative_(element, classes);\n\t}\n}\n\n/**\n * Adds or removes one or more classes from an element using classList.\n * If any of the classes is present, it will be removed from the element,\n * or added otherwise.\n * @param {!Element} element The element which classes will be toggled.\n * @param {string} classes The classes which have to added or removed from the element.\n * @private\n */\nfunction toggleClassesWithNative_(element, classes) {\n\tclasses.split(' ').forEach(function(className) {\n\t\telement.classList.toggle(className);\n\t});\n}\n\n/**\n * Adds or removes one or more classes from an element without using classList.\n * If any of the classes is present, it will be removed from the element,\n * or added otherwise.\n * @param {!Element} element The element which classes will be toggled.\n * @param {string} classes The classes which have to added or removed from the element.\n * @private\n */\nfunction toggleClassesWithoutNative_(element, classes) {\n\tlet elementClassName = ` ${element.className} `;\n\n\tclasses = classes.split(' ');\n\n\tfor (let i = 0; i < classes.length; i++) {\n\t\tconst className = ` ${classes[i]} `;\n\t\tconst classIndex = elementClassName.indexOf(className);\n\n\t\tif (classIndex === -1) {\n\t\t\telementClassName = `${elementClassName}${classes[i]} `;\n\t\t} else {\n\t\t\tconst before = elementClassName.substring(0, classIndex);\n\t\t\tconst after = elementClassName.substring(classIndex + className.length);\n\t\t\telementClassName = `${before} ${after}`;\n\t\t}\n\t}\n\n\telement.className = elementClassName.trim();\n}\n\n/**\n * Triggers all listeners for the given event type that are stored in the\n * specified element.\n * @param {!Element} element\n * @param {!Event} event\n * @param {!Array} defaultFns Array to collect default listeners in, instead\n *     of running them.\n * @return {boolean} False if at least one of the triggered callbacks returns\n *     false, or true otherwise.\n * @private\n */\nfunction triggerElementListeners_(element, event, defaultFns) {\n\tconst lastContainer = event[LAST_CONTAINER];\n\tif (!isDef(lastContainer) || !contains(lastContainer, element)) {\n\t\tconst listeners = domData.get(element, 'listeners', {})[event.type];\n\t\treturn triggerListeners_(listeners, event, element, defaultFns);\n\t}\n\treturn true;\n}\n\n/**\n * Triggers the specified event on the given element.\n * NOTE: This should mostly be used for testing, not on real code.\n * @param {!Element} element The node that should trigger the event.\n * @param {string} eventName The name of the event to be triggred.\n * @param {Object=} opt_eventObj An object with data that should be on the\n *   triggered event's payload.\n */\nexport function triggerEvent(element, eventName, opt_eventObj) {\n\tif (isAbleToInteractWith_(element, eventName, opt_eventObj)) {\n\t\tconst eventObj = document.createEvent('HTMLEvents');\n\t\teventObj.initEvent(eventName, true, true);\n\t\tobject.mixin(eventObj, opt_eventObj);\n\t\telement.dispatchEvent(eventObj);\n\t}\n}\n\n/**\n * Triggers the given listeners array.\n * @param {Array<!function()>} listeners\n * @param {!Event} event\n * @param {!Element} element\n * @param {!Array} defaultFns Array to collect default listeners in, instead\n *     of running them.\n * @return {boolean} False if at least one of the triggered callbacks returns\n *     false, or true otherwise.\n * @private\n */\nfunction triggerListeners_(listeners, event, element, defaultFns) {\n\tlet ret = true;\n\tlisteners = listeners || [];\n\tfor (let i = 0; i < listeners.length && !event.stoppedImmediate; i++) {\n\t\tif (listeners[i].defaultListener_) {\n\t\t\tdefaultFns.push({\n\t\t\t\telement,\n\t\t\t\tfn: listeners[i]\n\t\t\t});\n\t\t} else {\n\t\t\tret &= listeners[i](event);\n\t\t}\n\t}\n\treturn ret;\n}\n\n/**\n * Triggers all selector listeners for the given event.\n * @param {!Element} container\n * @param {!Element} element\n * @param {!Event} event\n * @param {!Array} defaultFns Array to collect default listeners in, instead\n *     of running them.\n * @return {boolean} False if at least one of the triggered callbacks returns\n *     false, or true otherwise.\n * @private\n */\nfunction triggerSelectorListeners_(container, element, event, defaultFns) {\n\tlet ret = true;\n\tconst data = domData.get(container, 'delegating', {});\n\tconst map = data[event.type].selectors;\n\tconst selectors = Object.keys(map);\n\tfor (let i = 0; i < selectors.length && !event.stoppedImmediate; i++) {\n\t\tif (match(element, selectors[i])) {\n\t\t\tconst listeners = map[selectors[i]];\n\t\t\tret &= triggerListeners_(listeners, event, element, defaultFns);\n\t\t}\n\t}\n\treturn ret;\n}\n","'use strict';\n\n// This file exists just for backwards compatibility, making sure that old\n// default imports for this file still work. It's best to use the named exports\n// for each function instead though, since that allows bundlers like Rollup to\n// reduce the bundle size by removing unused code.\nimport * as dom from './domNamed';\n\nexport default dom;\nexport { dom };\nexport * from './domNamed';\n","'use strict';\n\nimport { delegate, on, supportsEvent } from './dom';\nimport { EventEmitterProxy } from 'metal-events';\n\n/**\n * DomEventEmitterProxy utility. It extends `EventEmitterProxy` to also accept\n * dom elements as origin emitters.\n * @extends {EventEmitterProxy}\n */\nclass DomEventEmitterProxy extends EventEmitterProxy {\n\t/**\n\t * Adds the given listener for the given event.\n\t * @param {string} event\n\t * @param {!function()} listener\n\t * @return {!EventHandle} The listened event's handle.\n\t * @protected\n\t * @override\n\t */\n\taddListener_(event, listener) {\n\t\tif (this.originEmitter_.addEventListener) {\n\t\t\tif (this.isDelegateEvent_(event)) {\n\t\t\t\tconst index = event.indexOf(':', 9);\n\t\t\t\tconst eventName = event.substring(9, index);\n\t\t\t\tconst selector = event.substring(index + 1);\n\t\t\t\treturn delegate(this.originEmitter_, eventName, selector, listener);\n\t\t\t} else {\n\t\t\t\treturn on(this.originEmitter_, event, listener);\n\t\t\t}\n\t\t} else {\n\t\t\treturn super.addListener_(event, listener);\n\t\t}\n\t}\n\n\t/**\n\t * Checks if the given event is of the delegate type.\n\t * @param {string} event\n\t * @return {boolean}\n\t * @protected\n\t */\n\tisDelegateEvent_(event) {\n\t\treturn event.substr(0, 9) === 'delegate:';\n\t}\n\n\t/**\n\t * Checks if the given event is supported by the origin element.\n\t * @param {string} event\n\t * @protected\n\t */\n\tisSupportedDomEvent_(event) {\n\t\tif (!this.originEmitter_ || !this.originEmitter_.addEventListener) {\n\t\t\treturn true;\n\t\t}\n\t\treturn (this.isDelegateEvent_(event) && event.indexOf(':', 9) !== -1) ||\n\t\t\tsupportsEvent(this.originEmitter_, event);\n\t}\n\n\t/**\n\t * Checks if the given event should be proxied.\n\t * @param {string} event\n\t * @return {boolean}\n\t * @protected\n\t * @override\n\t */\n\tshouldProxyEvent_(event) {\n\t\treturn super.shouldProxyEvent_(event) && this.isSupportedDomEvent_(event);\n\t}\n}\n\nexport default DomEventEmitterProxy;\n","'use strict';\n\nimport { append } from './dom';\nimport { string } from 'metal';\n\n/**\n * Class with static methods responsible for doing browser feature checks.\n */\nclass features {\n\t/**\n\t * Some browsers still supports prefixed animation events. This method can\n\t * be used to retrieve the current browser event name for both, animation\n\t * and transition.\n\t * @return {object}\n\t */\n\tstatic checkAnimationEventName() {\n\t\tif (features.animationEventName_ === undefined) {\n\t\t\tfeatures.animationEventName_ = {\n\t\t\t\tanimation: features.checkAnimationEventName_('animation'),\n\t\t\t\ttransition: features.checkAnimationEventName_('transition')\n\t\t\t};\n\t\t}\n\t\treturn features.animationEventName_;\n\t}\n\n\t/**\n\t * @protected\n\t * @param {string} type Type to test: animation, transition.\n\t * @return {string} Browser event name.\n\t */\n\tstatic checkAnimationEventName_(type) {\n\t\tconst prefixes = ['Webkit', 'MS', 'O', ''];\n\t\tconst typeTitleCase = string.replaceInterval(type, 0, 1, type.substring(0, 1).toUpperCase());\n\t\tconst suffixes = [`${typeTitleCase}End`, `${typeTitleCase}End`, `${typeTitleCase}End`, `${type}end`];\n\t\tfor (let i = 0; i < prefixes.length; i++) {\n\t\t\tif (features.animationElement_.style[prefixes[i] + typeTitleCase] !== undefined) {\n\t\t\t\treturn prefixes[i].toLowerCase() + suffixes[i];\n\t\t\t}\n\t\t}\n\t\treturn `${type}end`;\n\t}\n\n\t/**\n\t * Some browsers (like IE9) change the order of element attributes, when html\n\t * is rendered. This method can be used to check if this behavior happens on\n\t * the current browser.\n\t * @return {boolean}\n\t */\n\tstatic checkAttrOrderChange() {\n\t\tif (features.attrOrderChange_ === undefined) {\n\t\t\tconst originalContent = '<div data-component=\"\" data-ref=\"\"></div>';\n\t\t\tconst element = document.createElement('div');\n\t\t\tappend(element, originalContent);\n\t\t\tfeatures.attrOrderChange_ = originalContent !== element.innerHTML;\n\t\t}\n\t\treturn features.attrOrderChange_;\n\t}\n}\n\nfeatures.animationElement_ = document.createElement('div');\nfeatures.animationEventName_ = undefined;\nfeatures.attrOrderChange_ = undefined;\n\nexport default features;\n","'use strict';\n\nimport { async } from 'metal';\nimport { exitDocument, once } from './dom';\n\n/**\n * Utility functions for running javascript code in the global scope.\n */\nclass globalEval {\n\t/**\n\t * Evaluates the given string in the global scope.\n\t * @param {string} text\n\t * @param {function()=} opt_appendFn Optional function to append the node\n\t *   into document.\n\t * @return {Element} script\n\t */\n\tstatic run(text, opt_appendFn) {\n\t\tconst script = document.createElement('script');\n\t\tscript.text = text;\n\t\tif (opt_appendFn) {\n\t\t\topt_appendFn(script);\n\t\t} else {\n\t\t\tdocument.head.appendChild(script);\n\t\t}\n\t\texitDocument(script);\n\t\treturn script;\n\t}\n\n\t/**\n\t * Evaluates the given javascript file in the global scope.\n\t * @param {string} src The file's path.\n\t * @param {function()=} opt_callback Optional function to be called\n\t *   when the script has been run.\n\t * @param {function()=} opt_appendFn Optional function to append the node\n\t *   into document.\n\t * @return {Element} script\n\t */\n\tstatic runFile(src, opt_callback, opt_appendFn) {\n\t\tconst script = document.createElement('script');\n\t\tscript.src = src;\n\n\t\tconst callback = function() {\n\t\t\texitDocument(script);\n\t\t\topt_callback && opt_callback();\n\t\t};\n\t\tonce(script, 'load', callback);\n\t\tonce(script, 'error', callback);\n\n\t\tif (opt_appendFn) {\n\t\t\topt_appendFn(script);\n\t\t} else {\n\t\t\tdocument.head.appendChild(script);\n\t\t}\n\n\t\treturn script;\n\t}\n\n\t/**\n\t * Evaluates the code referenced by the given script element.\n\t * @param {!Element} script\n\t * @param {function()=} opt_callback Optional function to be called\n\t *   when the script has been run.\n\t * @param {function()=} opt_appendFn Optional function to append the node\n\t *   into document.\n\t * @return {Element} script\n\t */\n\tstatic runScript(script, opt_callback, opt_appendFn) {\n\t\tconst callback = function() {\n\t\t\topt_callback && opt_callback();\n\t\t};\n\t\tif (script.type && script.type !== 'text/javascript') {\n\t\t\tasync.nextTick(callback);\n\t\t\treturn;\n\t\t}\n\t\texitDocument(script);\n\t\tif (script.src) {\n\t\t\treturn globalEval.runFile(script.src, opt_callback, opt_appendFn);\n\t\t} else {\n\t\t\tasync.nextTick(callback);\n\t\t\treturn globalEval.run(script.text, opt_appendFn);\n\t\t}\n\t}\n\n\t/**\n\t * Evaluates any script tags present in the given element.\n\t * @param {!Element} element\n\t * @param {function()=} opt_callback Optional function to be called\n\t *   when the script has been run.\n\t * @param {function()=} opt_appendFn Optional function to append the node\n\t *   into document.\n\t */\n\tstatic runScriptsInElement(element, opt_callback, opt_appendFn) {\n\t\tconst scripts = element.querySelectorAll('script');\n\t\tif (scripts.length) {\n\t\t\tglobalEval.runScriptsInOrder(scripts, 0, opt_callback, opt_appendFn);\n\t\t} else if (opt_callback) {\n\t\t\tasync.nextTick(opt_callback);\n\t\t}\n\t}\n\n\t/**\n\t * Runs the given scripts elements in the order that they appear.\n\t * @param {!NodeList} scripts\n\t * @param {number} index\n\t * @param {function()=} opt_callback Optional function to be called\n\t *   when the script has been run.\n\t * @param {function()=} opt_appendFn Optional function to append the node\n\t *   into document.\n\t */\n\tstatic runScriptsInOrder(scripts, index, opt_callback, opt_appendFn) {\n\t\tglobalEval.runScript(scripts.item(index), function() {\n\t\t\tif (index < scripts.length - 1) {\n\t\t\t\tglobalEval.runScriptsInOrder(scripts, index + 1, opt_callback, opt_appendFn);\n\t\t\t} else if (opt_callback) {\n\t\t\t\tasync.nextTick(opt_callback);\n\t\t\t}\n\t\t}, opt_appendFn);\n\t}\n}\n\nexport default globalEval;\n","'use strict';\n\nimport { async } from 'metal';\nimport { once } from './dom';\n\n/**\n * Utility functions for running styles.\n */\nclass globalEvalStyles {\n\t/**\n\t * Evaluates the given style.\n\t * @param {string} text\n\t * @param {function()=} opt_appendFn Optional function to append the node\n\t *   into document.\n\t * @return {Element} style\n\t */\n\tstatic run(text, opt_appendFn) {\n\t\tconst style = document.createElement('style');\n\t\tstyle.innerHTML = text;\n\t\tif (opt_appendFn) {\n\t\t\topt_appendFn(style);\n\t\t} else {\n\t\t\tdocument.head.appendChild(style);\n\t\t}\n\t\treturn style;\n\t}\n\n\t/**\n\t * Evaluates the given style file.\n\t * @param {string} href The file's path.\n\t * @param {function()=} opt_callback Optional function to be called\n\t *   when the styles has been run.\n\t * @param {function()=} opt_appendFn Optional function to append the node\n\t *   into document.\n\t * @return {Element} style\n\t */\n\tstatic runFile(href, opt_callback, opt_appendFn) {\n\t\tconst link = document.createElement('link');\n\t\tlink.rel = 'stylesheet';\n\t\tlink.href = href;\n\t\tglobalEvalStyles.runStyle(link, opt_callback, opt_appendFn);\n\t\treturn link;\n\t}\n\n\t/**\n\t * Evaluates the code referenced by the given style/link element.\n\t * @param {!Element} style\n\t * @param {function()=} opt_callback Optional function to be called\n\t *   when the script has been run.\n\t * @param {function()=} opt_appendFn Optional function to append the node\n\t *   into document.\n\t *  @return {Element} style\n\t */\n\tstatic runStyle(style, opt_callback, opt_appendFn) {\n\t\tconst callback = function() {\n\t\t\topt_callback && opt_callback();\n\t\t};\n\t\tif (style.rel && style.rel !== 'stylesheet') {\n\t\t\tasync.nextTick(callback);\n\t\t\treturn;\n\t\t}\n\n\t\tif (style.tagName === 'STYLE') {\n\t\t\tasync.nextTick(callback);\n\t\t} else {\n\t\t\tonce(style, 'load', callback);\n\t\t\tonce(style, 'error', callback);\n\t\t}\n\n\t\tif (opt_appendFn) {\n\t\t\topt_appendFn(style);\n\t\t} else {\n\t\t\tdocument.head.appendChild(style);\n\t\t}\n\n\t\treturn style;\n\t}\n\n\t/**\n\t * Evaluates any style present in the given element.\n\t * @param {!Element} element\n\t * @param {function()=} opt_callback Optional function to be called when the\n\t *   style has been run.\n\t * @param {function()=} opt_appendFn Optional function to append the node\n\t *   into document.\n\t */\n\tstatic runStylesInElement(element, opt_callback, opt_appendFn) {\n\t\tconst styles = element.querySelectorAll('style,link');\n\t\tif (styles.length === 0 && opt_callback) {\n\t\t\tasync.nextTick(opt_callback);\n\t\t\treturn;\n\t\t}\n\n\t\tlet loadCount = 0;\n\t\tconst callback = function() {\n\t\t\tif (opt_callback && ++loadCount === styles.length) {\n\t\t\t\tasync.nextTick(opt_callback);\n\t\t\t}\n\t\t};\n\t\tfor (let i = 0; i < styles.length; i++) {\n\t\t\tglobalEvalStyles.runStyle(styles[i], callback, opt_appendFn);\n\t\t}\n\t}\n}\n\nexport default globalEvalStyles;\n","'use strict';\n\nimport { registerCustomEvent, contains } from './dom';\nimport features from './features';\n\nconst mouseEventMap = {\n\tmouseenter: 'mouseover',\n\tmouseleave: 'mouseout',\n\tpointerenter: 'pointerover',\n\tpointerleave: 'pointerout'\n};\nObject.keys(mouseEventMap).forEach(function(eventName) {\n\tregisterCustomEvent(eventName, {\n\t\tdelegate: true,\n\t\thandler: function(callback, event) {\n\t\t\tconst related = event.relatedTarget;\n\t\t\tconst target = event.delegateTarget;\n\t\t\tif (!related || (related !== target && !contains(target, related))) {\n\t\t\t\tevent.customType = eventName;\n\t\t\t\treturn callback(event);\n\t\t\t}\n\t\t},\n\t\toriginalEvent: mouseEventMap[eventName]\n\t});\n});\n\nconst animationEventMap = {\n\tanimation: 'animationend',\n\ttransition: 'transitionend'\n};\nObject.keys(animationEventMap).forEach(function(eventType) {\n\tconst eventName = animationEventMap[eventType];\n\tregisterCustomEvent(eventName, {\n\t\tevent: true,\n\t\tdelegate: true,\n\t\thandler: function(callback, event) {\n\t\t\tevent.customType = eventName;\n\t\t\treturn callback(event);\n\t\t},\n\t\toriginalEvent: features.checkAnimationEventName()[eventType]\n\t});\n});\n","/*!\n * Promises polyfill from Google's Closure Library.\n *\n *      Copyright 2013 The Closure Library Authors. All Rights Reserved.\n *\n * NOTE(eduardo): Promise support is not ready on all supported browsers,\n * therefore metal-promise is temporarily using Google's promises as polyfill.\n * It supports cancellable promises and has clean and fast implementation.\n */\n\n'use strict';\n\nimport { isDef, isFunction, isObject } from 'metal';\nimport { async } from 'metal';\n\n/**\n * Provides a more strict interface for Thenables in terms of\n * http://promisesaplus.com for interop with {@see CancellablePromise}.\n *\n * @interface\n * @extends {IThenable.<TYPE>}\n * @template TYPE\n */\nvar Thenable = function() {};\n\n/**\n * Adds callbacks that will operate on the result of the Thenable, returning a\n * new child Promise.\n *\n * If the Thenable is fulfilled, the {@code onFulfilled} callback will be\n * invoked with the fulfillment value as argument, and the child Promise will\n * be fulfilled with the return value of the callback. If the callback throws\n * an exception, the child Promise will be rejected with the thrown value\n * instead.\n *\n * If the Thenable is rejected, the {@code onRejected} callback will be invoked\n * with the rejection reason as argument, and the child Promise will be rejected\n * with the return value of the callback or thrown value.\n *\n * @param {?(function(this:THIS, TYPE):\n *             (RESULT|IThenable.<RESULT>|Thenable))=} opt_onFulfilled A\n *     function that will be invoked with the fulfillment value if the Promise\n *     is fullfilled.\n * @param {?(function(*): *)=} opt_onRejected A function that will be invoked\n *     with the rejection reason if the Promise is rejected.\n * @param {THIS=} opt_context An optional context object that will be the\n *     execution context for the callbacks. By default, functions are executed\n *     with the default this.\n * @return {!CancellablePromise.<RESULT>} A new Promise that will receive the\n *     result of the fulfillment or rejection callback.\n * @template RESULT,THIS\n */\nThenable.prototype.then = function() {};\n\n\n/**\n * An expando property to indicate that an object implements\n * {@code Thenable}.\n *\n * {@see addImplementation}.\n *\n * @const\n */\nThenable.IMPLEMENTED_BY_PROP = '$goog_Thenable';\n\n\n/**\n * Marks a given class (constructor) as an implementation of Thenable, so\n * that we can query that fact at runtime. The class must have already\n * implemented the interface.\n * Exports a 'then' method on the constructor prototype, so that the objects\n * also implement the extern {@see Thenable} interface for interop with\n * other Promise implementations.\n * @param {function(new:Thenable,...[?])} ctor The class constructor. The\n *     corresponding class must have already implemented the interface.\n */\nThenable.addImplementation = function(ctor) {\n  ctor.prototype.then = ctor.prototype.then;\n  ctor.prototype.$goog_Thenable = true;\n};\n\n\n/**\n * @param {*} object\n * @return {boolean} Whether a given instance implements {@code Thenable}.\n *     The class/superclass of the instance must call {@code addImplementation}.\n */\nThenable.isImplementedBy = function(object) {\n  if (!object) {\n    return false;\n  }\n  try {\n    return !!object.$goog_Thenable;\n  } catch (e) {\n    // Property access seems to be forbidden.\n    return false;\n  }\n};\n\n\n/**\n * Like bind(), except that a 'this object' is not required. Useful when the\n * target function is already bound.\n *\n * Usage:\n * var g = partial(f, arg1, arg2);\n * g(arg3, arg4);\n *\n * @param {Function} fn A function to partially apply.\n * @param {...*} var_args Additional arguments that are partially applied to fn.\n * @return {!Function} A partially-applied form of the function bind() was\n *     invoked as a method of.\n */\nvar partial = function(fn) {\n  var args = Array.prototype.slice.call(arguments, 1);\n  return function() {\n    // Clone the array (with slice()) and append additional arguments\n    // to the existing arguments.\n    var newArgs = args.slice();\n    newArgs.push.apply(newArgs, arguments);\n    return fn.apply(this, newArgs);\n  };\n};\n\n/**\n * Promises provide a result that may be resolved asynchronously. A Promise may\n * be resolved by being fulfilled or rejected with a value, which will be known\n * as the fulfillment value or the rejection reason. Whether fulfilled or\n * rejected, the Promise result is immutable once it is set.\n *\n * Promises may represent results of any type, including undefined. Rejection\n * reasons are typically Errors, but may also be of any type. Closure Promises\n * allow for optional type annotations that enforce that fulfillment values are\n * of the appropriate types at compile time.\n *\n * The result of a Promise is accessible by calling {@code then} and registering\n * {@code onFulfilled} and {@code onRejected} callbacks. Once the Promise\n * resolves, the relevant callbacks are invoked with the fulfillment value or\n * rejection reason as argument. Callbacks are always invoked in the order they\n * were registered, even when additional {@code then} calls are made from inside\n * another callback. A callback is always run asynchronously sometime after the\n * scope containing the registering {@code then} invocation has returned.\n *\n * If a Promise is resolved with another Promise, the first Promise will block\n * until the second is resolved, and then assumes the same result as the second\n * Promise. This allows Promises to depend on the results of other Promises,\n * linking together multiple asynchronous operations.\n *\n * This implementation is compatible with the Promises/A+ specification and\n * passes that specification's conformance test suite. A Closure Promise may be\n * resolved with a Promise instance (or sufficiently compatible Promise-like\n * object) created by other Promise implementations. From the specification,\n * Promise-like objects are known as \"Thenables\".\n *\n * @see http://promisesaplus.com/\n *\n * @param {function(\n *             this:RESOLVER_CONTEXT,\n *             function((TYPE|IThenable.<TYPE>|Thenable)),\n *             function(*)): void} resolver\n *     Initialization function that is invoked immediately with {@code resolve}\n *     and {@code reject} functions as arguments. The Promise is resolved or\n *     rejected with the first argument passed to either function.\n * @param {RESOLVER_CONTEXT=} opt_context An optional context for executing the\n *     resolver function. If unspecified, the resolver function will be executed\n *     in the default scope.\n * @constructor\n * @struct\n * @final\n * @implements {Thenable.<TYPE>}\n * @template TYPE,RESOLVER_CONTEXT\n */\nvar CancellablePromise = function(resolver, opt_context) {\n  /**\n   * The internal state of this Promise. Either PENDING, FULFILLED, REJECTED, or\n   * BLOCKED.\n   * @private {CancellablePromise.State_}\n   */\n  this.state_ = CancellablePromise.State_.PENDING;\n\n  /**\n   * The resolved result of the Promise. Immutable once set with either a\n   * fulfillment value or rejection reason.\n   * @private {*}\n   */\n  this.result_ = undefined;\n\n  /**\n   * For Promises created by calling {@code then()}, the originating parent.\n   * @private {CancellablePromise}\n   */\n  this.parent_ = null;\n\n  /**\n   * The list of {@code onFulfilled} and {@code onRejected} callbacks added to\n   * this Promise by calls to {@code then()}.\n   * @private {Array.<CancellablePromise.CallbackEntry_>}\n   */\n  this.callbackEntries_ = null;\n\n  /**\n   * Whether the Promise is in the queue of Promises to execute.\n   * @private {boolean}\n   */\n  this.executing_ = false;\n\n  if (CancellablePromise.UNHANDLED_REJECTION_DELAY > 0) {\n    /**\n     * A timeout ID used when the {@code UNHANDLED_REJECTION_DELAY} is greater\n     * than 0 milliseconds. The ID is set when the Promise is rejected, and\n     * cleared only if an {@code onRejected} callback is invoked for the\n     * Promise (or one of its descendants) before the delay is exceeded.\n     *\n     * If the rejection is not handled before the timeout completes, the\n     * rejection reason is passed to the unhandled rejection handler.\n     * @private {number}\n     */\n    this.unhandledRejectionId_ = 0;\n  } else if (CancellablePromise.UNHANDLED_REJECTION_DELAY === 0) {\n    /**\n     * When the {@code UNHANDLED_REJECTION_DELAY} is set to 0 milliseconds, a\n     * boolean that is set if the Promise is rejected, and reset to false if an\n     * {@code onRejected} callback is invoked for the Promise (or one of its\n     * descendants). If the rejection is not handled before the next timestep,\n     * the rejection reason is passed to the unhandled rejection handler.\n     * @private {boolean}\n     */\n    this.hadUnhandledRejection_ = false;\n  }\n\n  try {\n    var self = this;\n    resolver.call(\n      opt_context, function(value) {\n        self.resolve_(CancellablePromise.State_.FULFILLED, value);\n      }, function(reason) {\n        self.resolve_(CancellablePromise.State_.REJECTED, reason);\n      });\n  } catch (e) {\n    this.resolve_(CancellablePromise.State_.REJECTED, e);\n  }\n};\n\n/**\n * The delay in milliseconds before a rejected Promise's reason is passed to\n * the rejection handler. By default, the rejection handler rethrows the\n * rejection reason so that it appears in the developer console or\n * {@code window.onerror} handler.\n * Rejections are rethrown as quickly as possible by default. A negative value\n * disables rejection handling entirely.\n * @type {number}\n */\nCancellablePromise.UNHANDLED_REJECTION_DELAY = 0;\n\n\n/**\n * The possible internal states for a Promise. These states are not directly\n * observable to external callers.\n * @enum {number}\n * @private\n */\nCancellablePromise.State_ = {\n  /** The Promise is waiting for resolution. */\n  PENDING: 0,\n\n  /** The Promise is blocked waiting for the result of another Thenable. */\n  BLOCKED: 1,\n\n  /** The Promise has been resolved with a fulfillment value. */\n  FULFILLED: 2,\n\n  /** The Promise has been resolved with a rejection reason. */\n  REJECTED: 3\n};\n\n\n/**\n * Typedef for entries in the callback chain. Each call to {@code then},\n * {@code thenCatch}, or {@code thenAlways} creates an entry containing the\n * functions that may be invoked once the Promise is resolved.\n *\n * @typedef {{\n *   child: CancellablePromise,\n *   onFulfilled: function(*),\n *   onRejected: function(*)\n * }}\n * @private\n */\nCancellablePromise.CallbackEntry_ = null;\n\n\n/**\n * @param {(TYPE|Thenable.<TYPE>|Thenable)=} opt_value\n * @return {!CancellablePromise.<TYPE>} A new Promise that is immediately resolved\n *     with the given value.\n * @template TYPE\n */\nCancellablePromise.resolve = function(opt_value) {\n  return new CancellablePromise(function(resolve) {\n      resolve(opt_value);\n    });\n};\n\n\n/**\n * @param {*=} opt_reason\n * @return {!CancellablePromise} A new Promise that is immediately rejected with the\n *     given reason.\n */\nCancellablePromise.reject = function(opt_reason) {\n  return new CancellablePromise(function(resolve, reject) {\n      reject(opt_reason);\n    });\n};\n\n\n/**\n * @param {!Array.<!(Thenable.<TYPE>|Thenable)>} promises\n * @return {!CancellablePromise.<TYPE>} A Promise that receives the result of the\n *     first Promise (or Promise-like) input to complete.\n * @template TYPE\n */\nCancellablePromise.race = function(promises) {\n  return new CancellablePromise(function(resolve, reject) {\n      if (!promises.length) {\n        resolve(undefined);\n      }\n      for (var i = 0, promise; (promise = promises[i]); i++) {\n        promise.then(resolve, reject);\n      }\n    });\n};\n\n\n/**\n * @param {!Array.<!(Thenable.<TYPE>|Thenable)>} promises\n * @return {!CancellablePromise.<!Array.<TYPE>>} A Promise that receives a list of\n *     every fulfilled value once every input Promise (or Promise-like) is\n *     successfully fulfilled, or is rejected by the first rejection result.\n * @template TYPE\n */\nCancellablePromise.all = function(promises) {\n  return new CancellablePromise(function(resolve, reject) {\n      var toFulfill = promises.length;\n      var values = [];\n\n      if (!toFulfill) {\n        resolve(values);\n        return;\n      }\n\n      var onFulfill = function(index, value) {\n        toFulfill--;\n        values[index] = value;\n        if (toFulfill === 0) {\n          resolve(values);\n        }\n      };\n\n      var onReject = function(reason) {\n        reject(reason);\n      };\n\n      for (var i = 0, promise; (promise = promises[i]); i++) {\n        promise.then(partial(onFulfill, i), onReject);\n      }\n    });\n};\n\n\n/**\n * @param {!Array.<!(Thenable.<TYPE>|Thenable)>} promises\n * @return {!CancellablePromise.<TYPE>} A Promise that receives the value of\n *     the first input to be fulfilled, or is rejected with a list of every\n *     rejection reason if all inputs are rejected.\n * @template TYPE\n */\nCancellablePromise.firstFulfilled = function(promises) {\n  return new CancellablePromise(function(resolve, reject) {\n      var toReject = promises.length;\n      var reasons = [];\n\n      if (!toReject) {\n        resolve(undefined);\n        return;\n      }\n\n      var onFulfill = function(value) {\n        resolve(value);\n      };\n\n      var onReject = function(index, reason) {\n        toReject--;\n        reasons[index] = reason;\n        if (toReject === 0) {\n          reject(reasons);\n        }\n      };\n\n      for (var i = 0, promise; (promise = promises[i]); i++) {\n        promise.then(onFulfill, partial(onReject, i));\n      }\n    });\n};\n\n\n/**\n * Adds callbacks that will operate on the result of the Promise, returning a\n * new child Promise.\n *\n * If the Promise is fulfilled, the {@code onFulfilled} callback will be invoked\n * with the fulfillment value as argument, and the child Promise will be\n * fulfilled with the return value of the callback. If the callback throws an\n * exception, the child Promise will be rejected with the thrown value instead.\n *\n * If the Promise is rejected, the {@code onRejected} callback will be invoked\n * with the rejection reason as argument, and the child Promise will be rejected\n * with the return value (or thrown value) of the callback.\n *\n * @override\n */\nCancellablePromise.prototype.then = function(opt_onFulfilled, opt_onRejected, opt_context) {\n  return this.addChildPromise_(\n    isFunction(opt_onFulfilled) ? opt_onFulfilled : null,\n    isFunction(opt_onRejected) ? opt_onRejected : null,\n    opt_context);\n};\nThenable.addImplementation(CancellablePromise);\n\n\n/**\n * Adds a callback that will be invoked whether the Promise is fulfilled or\n * rejected. The callback receives no argument, and no new child Promise is\n * created. This is useful for ensuring that cleanup takes place after certain\n * asynchronous operations. Callbacks added with {@code thenAlways} will be\n * executed in the same order with other calls to {@code then},\n * {@code thenAlways}, or {@code thenCatch}.\n *\n * Since it does not produce a new child Promise, cancellation propagation is\n * not prevented by adding callbacks with {@code thenAlways}. A Promise that has\n * a cleanup handler added with {@code thenAlways} will be canceled if all of\n * its children created by {@code then} (or {@code thenCatch}) are canceled.\n *\n * @param {function(this:THIS): void} onResolved A function that will be invoked\n *     when the Promise is resolved.\n * @param {THIS=} opt_context An optional context object that will be the\n *     execution context for the callbacks. By default, functions are executed\n *     in the global scope.\n * @return {!CancellablePromise.<TYPE>} This Promise, for chaining additional calls.\n * @template THIS\n */\nCancellablePromise.prototype.thenAlways = function(onResolved, opt_context) {\n  var callback = function() {\n    try {\n      // Ensure that no arguments are passed to onResolved.\n      onResolved.call(opt_context);\n    } catch (err) {\n      CancellablePromise.handleRejection_.call(null, err);\n    }\n  };\n\n  this.addCallbackEntry_({\n    child: null,\n    onRejected: callback,\n    onFulfilled: callback\n  });\n  return this;\n};\n\n\n/**\n * Adds a callback that will be invoked only if the Promise is rejected. This\n * is equivalent to {@code then(null, onRejected)}.\n *\n * @param {!function(this:THIS, *): *} onRejected A function that will be\n *     invoked with the rejection reason if the Promise is rejected.\n * @param {THIS=} opt_context An optional context object that will be the\n *     execution context for the callbacks. By default, functions are executed\n *     in the global scope.\n * @return {!CancellablePromise} A new Promise that will receive the result of the\n *     callback.\n * @template THIS\n */\nCancellablePromise.prototype.thenCatch = function(onRejected, opt_context) {\n  return this.addChildPromise_(null, onRejected, opt_context);\n};\n\n/**\n * Alias of {@link CancellablePromise.prototype.thenCatch}\n */\nCancellablePromise.prototype.catch = CancellablePromise.prototype.thenCatch;\n\n\n/**\n * Cancels the Promise if it is still pending by rejecting it with a cancel\n * Error. No action is performed if the Promise is already resolved.\n *\n * All child Promises of the canceled Promise will be rejected with the same\n * cancel error, as with normal Promise rejection. If the Promise to be canceled\n * is the only child of a pending Promise, the parent Promise will also be\n * canceled. Cancellation may propagate upward through multiple generations.\n *\n * @param {string=} opt_message An optional debugging message for describing the\n *     cancellation reason.\n */\nCancellablePromise.prototype.cancel = function(opt_message) {\n  if (this.state_ === CancellablePromise.State_.PENDING) {\n    async.run(function() {\n      var err = new CancellablePromise.CancellationError(opt_message);\n      err.IS_CANCELLATION_ERROR = true;\n      this.cancelInternal_(err);\n    }, this);\n  }\n};\n\n\n/**\n * Cancels this Promise with the given error.\n *\n * @param {!Error} err The cancellation error.\n * @private\n */\nCancellablePromise.prototype.cancelInternal_ = function(err) {\n  if (this.state_ === CancellablePromise.State_.PENDING) {\n    if (this.parent_) {\n      // Cancel the Promise and remove it from the parent's child list.\n      this.parent_.cancelChild_(this, err);\n    } else {\n      this.resolve_(CancellablePromise.State_.REJECTED, err);\n    }\n  }\n};\n\n\n/**\n * Cancels a child Promise from the list of callback entries. If the Promise has\n * not already been resolved, reject it with a cancel error. If there are no\n * other children in the list of callback entries, propagate the cancellation\n * by canceling this Promise as well.\n *\n * @param {!CancellablePromise} childPromise The Promise to cancel.\n * @param {!Error} err The cancel error to use for rejecting the Promise.\n * @private\n */\nCancellablePromise.prototype.cancelChild_ = function(childPromise, err) {\n  if (!this.callbackEntries_) {\n    return;\n  }\n  var childCount = 0;\n  var childIndex = -1;\n\n  // Find the callback entry for the childPromise, and count whether there are\n  // additional child Promises.\n  for (var i = 0, entry; (entry = this.callbackEntries_[i]); i++) {\n    var child = entry.child;\n    if (child) {\n      childCount++;\n      if (child === childPromise) {\n        childIndex = i;\n      }\n      if (childIndex >= 0 && childCount > 1) {\n        break;\n      }\n    }\n  }\n\n  // If the child Promise was the only child, cancel this Promise as well.\n  // Otherwise, reject only the child Promise with the cancel error.\n  if (childIndex >= 0) {\n    if (this.state_ === CancellablePromise.State_.PENDING && childCount === 1) {\n      this.cancelInternal_(err);\n    } else {\n      var callbackEntry = this.callbackEntries_.splice(childIndex, 1)[0];\n      this.executeCallback_(\n        callbackEntry, CancellablePromise.State_.REJECTED, err);\n    }\n  }\n};\n\n\n/**\n * Adds a callback entry to the current Promise, and schedules callback\n * execution if the Promise has already been resolved.\n *\n * @param {CancellablePromise.CallbackEntry_} callbackEntry Record containing\n *     {@code onFulfilled} and {@code onRejected} callbacks to execute after\n *     the Promise is resolved.\n * @private\n */\nCancellablePromise.prototype.addCallbackEntry_ = function(callbackEntry) {\n  if ((!this.callbackEntries_ || !this.callbackEntries_.length) &&\n    (this.state_ === CancellablePromise.State_.FULFILLED ||\n    this.state_ === CancellablePromise.State_.REJECTED)) {\n    this.scheduleCallbacks_();\n  }\n  if (!this.callbackEntries_) {\n    this.callbackEntries_ = [];\n  }\n  this.callbackEntries_.push(callbackEntry);\n};\n\n\n/**\n * Creates a child Promise and adds it to the callback entry list. The result of\n * the child Promise is determined by the state of the parent Promise and the\n * result of the {@code onFulfilled} or {@code onRejected} callbacks as\n * specified in the Promise resolution procedure.\n *\n * @see http://promisesaplus.com/#the__method\n *\n * @param {?function(this:THIS, TYPE):\n *          (RESULT|CancellablePromise.<RESULT>|Thenable)} onFulfilled A callback that\n *     will be invoked if the Promise is fullfilled, or null.\n * @param {?function(this:THIS, *): *} onRejected A callback that will be\n *     invoked if the Promise is rejected, or null.\n * @param {THIS=} opt_context An optional execution context for the callbacks.\n *     in the default calling context.\n * @return {!CancellablePromise} The child Promise.\n * @template RESULT,THIS\n * @private\n */\nCancellablePromise.prototype.addChildPromise_ = function(\nonFulfilled, onRejected, opt_context) {\n\n  var callbackEntry = {\n    child: null,\n    onFulfilled: null,\n    onRejected: null\n  };\n\n  callbackEntry.child = new CancellablePromise(function(resolve, reject) {\n    // Invoke onFulfilled, or resolve with the parent's value if absent.\n    callbackEntry.onFulfilled = onFulfilled ? function(value) {\n      try {\n        var result = onFulfilled.call(opt_context, value);\n        resolve(result);\n      } catch (err) {\n        reject(err);\n      }\n    } : resolve;\n\n    // Invoke onRejected, or reject with the parent's reason if absent.\n    callbackEntry.onRejected = onRejected ? function(reason) {\n      try {\n        var result = onRejected.call(opt_context, reason);\n        if (!isDef(result) && reason.IS_CANCELLATION_ERROR) {\n          // Propagate cancellation to children if no other result is returned.\n          reject(reason);\n        } else {\n          resolve(result);\n        }\n      } catch (err) {\n        reject(err);\n      }\n    } : reject;\n  });\n\n  callbackEntry.child.parent_ = this;\n  this.addCallbackEntry_(\n    /** @type {CancellablePromise.CallbackEntry_} */ (callbackEntry));\n  return callbackEntry.child;\n};\n\n\n/**\n * Unblocks the Promise and fulfills it with the given value.\n *\n * @param {TYPE} value\n * @private\n */\nCancellablePromise.prototype.unblockAndFulfill_ = function(value) {\n  if (this.state_ !== CancellablePromise.State_.BLOCKED) {\n    throw new Error('CancellablePromise is not blocked.');\n  }\n  this.state_ = CancellablePromise.State_.PENDING;\n  this.resolve_(CancellablePromise.State_.FULFILLED, value);\n};\n\n\n/**\n * Unblocks the Promise and rejects it with the given rejection reason.\n *\n * @param {*} reason\n * @private\n */\nCancellablePromise.prototype.unblockAndReject_ = function(reason) {\n  if (this.state_ !== CancellablePromise.State_.BLOCKED) {\n    throw new Error('CancellablePromise is not blocked.');\n  }\n  this.state_ = CancellablePromise.State_.PENDING;\n  this.resolve_(CancellablePromise.State_.REJECTED, reason);\n};\n\n\n/**\n * Attempts to resolve a Promise with a given resolution state and value. This\n * is a no-op if the given Promise has already been resolved.\n *\n * If the given result is a Thenable (such as another Promise), the Promise will\n * be resolved with the same state and result as the Thenable once it is itself\n * resolved.\n *\n * If the given result is not a Thenable, the Promise will be fulfilled or\n * rejected with that result based on the given state.\n *\n * @see http://promisesaplus.com/#the_promise_resolution_procedure\n *\n * @param {CancellablePromise.State_} state\n * @param {*} x The result to apply to the Promise.\n * @private\n */\nCancellablePromise.prototype.resolve_ = function(state, x) {\n  if (this.state_ !== CancellablePromise.State_.PENDING) {\n    return;\n  }\n\n  if (this === x) {\n    state = CancellablePromise.State_.REJECTED;\n    x = new TypeError('CancellablePromise cannot resolve to itself');\n\n  } else if (Thenable.isImplementedBy(x)) {\n    x = /** @type {!Thenable} */ (x);\n    this.state_ = CancellablePromise.State_.BLOCKED;\n    x.then(this.unblockAndFulfill_, this.unblockAndReject_, this);\n    return;\n\n  } else if (isObject(x)) {\n    try {\n      var then = x.then;\n      if (isFunction(then)) {\n        this.tryThen_(x, then);\n        return;\n      }\n    } catch (e) {\n      state = CancellablePromise.State_.REJECTED;\n      x = e;\n    }\n  }\n\n  this.result_ = x;\n  this.state_ = state;\n  this.scheduleCallbacks_();\n\n  if (state === CancellablePromise.State_.REJECTED && !x.IS_CANCELLATION_ERROR) {\n    CancellablePromise.addUnhandledRejection_(this, x);\n  }\n};\n\n\n/**\n * Attempts to call the {@code then} method on an object in the hopes that it is\n * a Promise-compatible instance. This allows interoperation between different\n * Promise implementations, however a non-compliant object may cause a Promise\n * to hang indefinitely. If the {@code then} method throws an exception, the\n * dependent Promise will be rejected with the thrown value.\n *\n * @see http://promisesaplus.com/#point-70\n *\n * @param {Thenable} thenable An object with a {@code then} method that may be\n *     compatible with the Promise/A+ specification.\n * @param {!Function} then The {@code then} method of the Thenable object.\n * @private\n */\nCancellablePromise.prototype.tryThen_ = function(thenable, then) {\n  this.state_ = CancellablePromise.State_.BLOCKED;\n  var promise = this;\n  var called = false;\n\n  var resolve = function(value) {\n    if (!called) {\n      called = true;\n      promise.unblockAndFulfill_(value);\n    }\n  };\n\n  var reject = function(reason) {\n    if (!called) {\n      called = true;\n      promise.unblockAndReject_(reason);\n    }\n  };\n\n  try {\n    then.call(thenable, resolve, reject);\n  } catch (e) {\n    reject(e);\n  }\n};\n\n\n/**\n * Executes the pending callbacks of a resolved Promise after a timeout.\n *\n * Section 2.2.4 of the Promises/A+ specification requires that Promise\n * callbacks must only be invoked from a call stack that only contains Promise\n * implementation code, which we accomplish by invoking callback execution after\n * a timeout. If {@code startExecution_} is called multiple times for the same\n * Promise, the callback chain will be evaluated only once. Additional callbacks\n * may be added during the evaluation phase, and will be executed in the same\n * event loop.\n *\n * All Promises added to the waiting list during the same browser event loop\n * will be executed in one batch to avoid using a separate timeout per Promise.\n *\n * @private\n */\nCancellablePromise.prototype.scheduleCallbacks_ = function() {\n  if (!this.executing_) {\n    this.executing_ = true;\n    async.run(this.executeCallbacks_, this);\n  }\n};\n\n\n/**\n * Executes all pending callbacks for this Promise.\n *\n * @private\n */\nCancellablePromise.prototype.executeCallbacks_ = function() {\n  while (this.callbackEntries_ && this.callbackEntries_.length) {\n    var entries = this.callbackEntries_;\n    this.callbackEntries_ = [];\n\n    for (var i = 0; i < entries.length; i++) {\n      this.executeCallback_(entries[i], this.state_, this.result_);\n    }\n  }\n  this.executing_ = false;\n};\n\n\n/**\n * Executes a pending callback for this Promise. Invokes an {@code onFulfilled}\n * or {@code onRejected} callback based on the resolved state of the Promise.\n *\n * @param {!CancellablePromise.CallbackEntry_} callbackEntry An entry containing the\n *     onFulfilled and/or onRejected callbacks for this step.\n * @param {CancellablePromise.State_} state The resolution status of the Promise,\n *     either FULFILLED or REJECTED.\n * @param {*} result The resolved result of the Promise.\n * @private\n */\nCancellablePromise.prototype.executeCallback_ = function(\ncallbackEntry, state, result) {\n  if (state === CancellablePromise.State_.FULFILLED) {\n    callbackEntry.onFulfilled(result);\n  } else {\n    this.removeUnhandledRejection_();\n    callbackEntry.onRejected(result);\n  }\n};\n\n\n/**\n * Marks this rejected Promise as having being handled. Also marks any parent\n * Promises in the rejected state as handled. The rejection handler will no\n * longer be invoked for this Promise (if it has not been called already).\n *\n * @private\n */\nCancellablePromise.prototype.removeUnhandledRejection_ = function() {\n  var p;\n  if (CancellablePromise.UNHANDLED_REJECTION_DELAY > 0) {\n    for (p = this; p && p.unhandledRejectionId_; p = p.parent_) {\n      clearTimeout(p.unhandledRejectionId_);\n      p.unhandledRejectionId_ = 0;\n    }\n  } else if (CancellablePromise.UNHANDLED_REJECTION_DELAY === 0) {\n    for (p = this; p && p.hadUnhandledRejection_; p = p.parent_) {\n      p.hadUnhandledRejection_ = false;\n    }\n  }\n};\n\n\n/**\n * Marks this rejected Promise as unhandled. If no {@code onRejected} callback\n * is called for this Promise before the {@code UNHANDLED_REJECTION_DELAY}\n * expires, the reason will be passed to the unhandled rejection handler. The\n * handler typically rethrows the rejection reason so that it becomes visible in\n * the developer console.\n *\n * @param {!CancellablePromise} promise The rejected Promise.\n * @param {*} reason The Promise rejection reason.\n * @private\n */\nCancellablePromise.addUnhandledRejection_ = function(promise, reason) {\n  if (CancellablePromise.UNHANDLED_REJECTION_DELAY > 0) {\n    promise.unhandledRejectionId_ = setTimeout(function() {\n      CancellablePromise.handleRejection_.call(null, reason);\n    }, CancellablePromise.UNHANDLED_REJECTION_DELAY);\n\n  } else if (CancellablePromise.UNHANDLED_REJECTION_DELAY === 0) {\n    promise.hadUnhandledRejection_ = true;\n    async.run(function() {\n      if (promise.hadUnhandledRejection_) {\n        CancellablePromise.handleRejection_.call(null, reason);\n      }\n    });\n  }\n};\n\n\n/**\n * A method that is invoked with the rejection reasons for Promises that are\n * rejected but have no {@code onRejected} callbacks registered yet.\n * @type {function(*)}\n * @private\n */\nCancellablePromise.handleRejection_ = async.throwException;\n\n\n/**\n * Sets a handler that will be called with reasons from unhandled rejected\n * Promises. If the rejected Promise (or one of its descendants) has an\n * {@code onRejected} callback registered, the rejection will be considered\n * handled, and the rejection handler will not be called.\n *\n * By default, unhandled rejections are rethrown so that the error may be\n * captured by the developer console or a {@code window.onerror} handler.\n *\n * @param {function(*)} handler A function that will be called with reasons from\n *     rejected Promises. Defaults to {@code async.throwException}.\n */\nCancellablePromise.setUnhandledRejectionHandler = function(handler) {\n  CancellablePromise.handleRejection_ = handler;\n};\n\n\n\n/**\n * Error used as a rejection reason for canceled Promises.\n *\n * @param {string=} opt_message\n * @constructor\n * @extends {Error}\n * @final\n */\nCancellablePromise.CancellationError = class extends Error {\n  constructor(opt_message) {\n     super(opt_message);\n\n     if (opt_message) {\n       this.message = opt_message;\n     }\n   }\n};\n\n/** @override */\nCancellablePromise.CancellationError.prototype.name = 'cancel';\n\nexport {CancellablePromise};\nexport default CancellablePromise;\n","'use strict';\n\n/**\n  * Debounces function execution.\n  * @param {!function()} fn\n  * @param {number} delay\n  * @return {!function()}\n  */\nfunction debounce(fn, delay) {\n\treturn function debounced() {\n\t\tvar args = arguments;\n\t\tcancelDebounce(debounced);\n\t\tdebounced.id = setTimeout(function() {\n\t\t\tfn.apply(null, args);\n\t\t}, delay);\n\t};\n}\n\n/**\n * Cancels the scheduled debounced function.\n */\nfunction cancelDebounce(debounced) {\n\tclearTimeout(debounced.id);\n}\n\nexport default debounce;\nexport { cancelDebounce, debounce };\n","'use strict';\n\nimport core from 'metal';\n\nconst REGEX = /([\\/])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])*)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?)/g;\n\n/**\n * Converts the given array of regex matches to a more readable object format.\n * @param {!Array<string>} matches\n * @return {!Object}\n */\nfunction convertMatchesToObj(matches) {\n\treturn {\n\t\tmatch: matches[0],\n\t\tprefix: matches[1],\n\t\tname: matches[2],\n\t\tparamPattern: matches[3],\n\t\tunnamedPattern: matches[4],\n\t\tmodifier: matches[5]\n\t};\n}\n\n/**\n * Converts the given tokens parsed from a route format string to a regex.\n * @param {!Array<string|!Object>} tokens\n * @return {!RegExp}\n */\nfunction convertTokensToRegex(tokens) {\n\tlet regex = '';\n\tfor (let i = 0; i < tokens.length; i++) {\n\t\tif (core.isString(tokens[i])) {\n\t\t\tregex += escape(tokens[i]);\n\t\t} else {\n\t\t\tlet capture = encloseNonCapturingGroup(tokens[i].pattern);\n\t\t\tif (tokens[i].repeat) {\n\t\t\t\tcapture += encloseNonCapturingGroup('\\\\/' + capture) + '*';\n\t\t\t}\n\t\t\tcapture = escape(tokens[i].prefix) + `(${capture})`;\n\t\t\tif (tokens[i].optional) {\n\t\t\t\tif (!tokens[i].partial) {\n\t\t\t\t\tcapture = encloseNonCapturingGroup(capture);\n\t\t\t\t}\n\t\t\t\tcapture += '?';\n\t\t\t}\n\t\t\tregex += capture;\n\t\t}\n\t}\n\treturn new RegExp('^' + makeTrailingSlashOptional(regex) + '$');\n}\n\n/**\n * Encloses the given regex pattern into a non capturing group.\n * @param {string} pattern\n * @return {string}\n */\nfunction encloseNonCapturingGroup(pattern) {\n\treturn `(?:${pattern})`;\n}\n\n/**\n * Escapes the given string to show up in the path regex.\n * @param {string} str\n * @return {string}\n */\nfunction escape(str) {\n\treturn str.replace(/([.+*?=^!:${}()[\\]|\\/\\\\])/g, '\\\\$1');\n}\n\n/**\n * Makes trailing slash optional on paths.\n * @param {string} regex\n * @param {string}\n */\nfunction makeTrailingSlashOptional(regex) {\n\tif (/\\/$/.test(regex)) {\n\t\tregex += '?';\n\t} else {\n\t\tregex += '\\\\/?';\n\t}\n\treturn regex;\n}\n\n/**\n * Parses the given route format string into tokens representing its contents.\n * @param {!Array|string} routeOrTokens Either a route format string or tokens\n *     previously parsed via the `parse` function.\n * @return {!Array<string|!Object>} An array of tokens that can be either plain\n *     strings (part of the route) or objects containing informations on params.\n */\nexport function parse(routeOrTokens) {\n\tif (!core.isString(routeOrTokens)) {\n\t\treturn routeOrTokens;\n\t}\n\n\tconst route = routeOrTokens;\n\tlet unnamedCount = 0;\n\tconst tokens = [];\n\tlet currPath = '';\n\tlet index = 0;\n\n\tlet matches = REGEX.exec(route);\n\twhile (matches) {\n\t\tconst data = convertMatchesToObj(matches);\n\n\t\tcurrPath = route.slice(index, matches.index);\n\t\tindex = matches.index + data.match.length;\n\t\ttokens.push(currPath);\n\n\t\ttokens.push({\n\t\t\tname: data.name ? data.name : '' + unnamedCount++,\n\t\t\tpartial: route[index] && route[index] !== data.prefix,\n\t\t\tprefix: data.prefix || '',\n\t\t\tpattern: data.paramPattern || data.unnamedPattern || '[^\\\\/]+',\n\t\t\trepeat: data.modifier === '*' || data.modifier === '+',\n\t\t\toptional: data.modifier === '*' || data.modifier === '?'\n\t\t});\n\n\t\tmatches = REGEX.exec(route);\n\t}\n\n\tif (index < route.length) {\n\t\ttokens.push(route.substr(index));\n\t}\n\treturn tokens;\n}\n\n/**\n * Converts the given route format string to a regex that can extract param\n * data from paths matching it.\n * @param {!Array|string} routeOrTokens Either a route format string or tokens\n *     previously parsed via the `parse` function.\n * @return {!RegExp}\n */\nexport function toRegex(routeOrTokens) {\n\treturn convertTokensToRegex(parse(routeOrTokens));\n}\n\n/**\n * Extracts data from the given path according to the specified route format.\n * @param {!Array|string} routeOrTokens Either a route format string or tokens\n *     previously parsed via the `parse` function.\n * @param {string} The path to extract param data from.\n * @return {Object<string, string>} The data object, or null if the path doesn't\n *     match the given format.\n */\nexport function extractData(routeOrTokens, path) {\n\tconst data = {};\n\tconst tokens = parse(routeOrTokens);\n\tconst match = path.match(convertTokensToRegex(tokens));\n\n\tif (!match) {\n\t\treturn null;\n\t}\n\n\tlet paramIndex = 1;\n\tfor (let i = 0; i < tokens.length; i++) {\n\t\tif (!core.isString(tokens[i])) {\n\t\t\tlet value = match[paramIndex++];\n\t\t\tif (core.isDef(value)) {\n\t\t\t\tif (tokens[i].repeat) {\n\t\t\t\t\tvalue = value.split('/');\n\t\t\t\t}\n\t\t\t\tdata[tokens[i].name] = value;\n\t\t\t}\n\t\t}\n\t}\n\treturn data;\n}\n","'use strict';\n\nimport { isDefAndNotNull, isFunction, isString } from 'metal';\nimport { extractData, parse, toRegex } from 'metal-path-parser';\n\nclass Route {\n\n\t/**\n\t * Route class.\n\t * @param {!string|RegExp|Function} path\n\t * @param {!Function} handler\n\t * @constructor\n\t */\n\tconstructor(path, handler) {\n\t\tif (!isDefAndNotNull(path)) {\n\t\t\tthrow new Error('Route path not specified.');\n\t\t}\n\t\tif (!isFunction(handler)) {\n\t\t\tthrow new Error('Route handler is not a function.');\n\t\t}\n\n\t\t/**\n\t\t * Defines the handler which will execute once a URL in the application\n\t\t * matches the path.\n\t\t * @type {!Function}\n\t\t * @protected\n\t\t */\n\t\tthis.handler = handler;\n\n\t\t/**\n\t\t * Defines the path which will trigger the route handler.\n\t\t * @type {!string|RegExp|Function}\n\t\t * @protected\n\t\t */\n\t\tthis.path = path;\n\t}\n\n\t/**\n\t* Builds parsed data (regex and tokens) for this route.\n\t* @return {!Object}\n\t* @protected\n\t*/\n\tbuildParsedData_() {\n\t\tif (!this.parsedData_) {\n\t\t\tvar tokens = parse(this.path);\n\t\t\tvar regex = toRegex(tokens);\n\t\t\tthis.parsedData_ = {\n\t\t\t\tregex,\n\t\t\t\ttokens\n\t\t\t};\n\t\t}\n\t\treturn this.parsedData_;\n\t}\n\n\t/**\n\t * Extracts param data from the given path, according to this route.\n\t * @param {string} path The url path to extract params from.\n\t * @return {Object} The extracted data, if the path matches this route, or\n\t *     null otherwise.\n\t */\n\textractParams(path) {\n\t\tif (isString(this.path)) {\n\t\t\treturn extractData(this.buildParsedData_().tokens, path);\n\t\t}\n\t\treturn {};\n\t}\n\n\t/**\n\t * Gets the route handler.\n\t * @return {!Function}\n\t */\n\tgetHandler() {\n\t\treturn this.handler;\n\t}\n\n\t/**\n\t * Gets the route path.\n\t * @return {!string|RegExp|Function}\n\t */\n\tgetPath() {\n\t\treturn this.path;\n\t}\n\n\t/**\n \t * Matches if the router can handle the tested path.\n \t * @param {!string} value Path to test (may contain the querystring part).\n\t * @return {boolean} Returns true if matches any route.\n\t */\n\tmatchesPath(value) {\n\t\tvar path = this.path;\n\n\t\tif (isFunction(path)) {\n\t\t\treturn path(value);\n\t\t}\n\t\tif (isString(path)) {\n\t\t\tpath = this.buildParsedData_().regex;\n\t\t}\n\t\tif (path instanceof RegExp) {\n\t\t\treturn value.search(path) > -1;\n\t\t}\n\n\t\treturn false;\n\t}\n\n}\n\nexport default Route;\n","'use strict';\n\nimport { Disposable } from 'metal';\n\nclass Cacheable extends Disposable {\n\n\t/**\n\t * Abstract class for defining cacheable behavior.\n\t * @constructor\n\t */\n\tconstructor() {\n\t\tsuper();\n\n\t\t/**\n\t\t * Holds the cached data.\n\t\t * @type {!Object}\n\t\t * @default null\n\t\t * @protected\n\t\t */\n\t\tthis.cache = null;\n\n\t\t/**\n\t\t * Holds whether class is cacheable.\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t * @protected\n\t\t */\n\t\tthis.cacheable = false;\n\t}\n\n\t/**\n\t * Adds content to the cache.\n\t * @param {string} content Content to be cached.\n\t * @chainable\n\t */\n\taddCache(content) {\n\t\tif (this.cacheable) {\n\t\t\tthis.cache = content;\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Clears the cache.\n\t * @chainable\n\t */\n\tclearCache() {\n\t\tthis.cache = null;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Disposes of this instance's object references.\n\t * @override\n\t */\n\tdisposeInternal() {\n\t\tthis.clearCache();\n\t}\n\n\t/**\n\t * Gets the cached content.\n\t * @return {Object} Cached content.\n\t * @protected\n\t */\n\tgetCache() {\n\t\treturn this.cache;\n\t}\n\n\t/**\n\t * Whether the class is cacheable.\n\t * @return {boolean} Returns true when class is cacheable, false otherwise.\n\t */\n\tisCacheable() {\n\t\treturn this.cacheable;\n\t}\n\n\t/**\n\t * Sets whether the class is cacheable.\n\t * @param {boolean} cacheable\n\t */\n\tsetCacheable(cacheable) {\n\t\tif (!cacheable) {\n\t\t\tthis.clearCache();\n\t\t}\n\t\tthis.cacheable = cacheable;\n\t}\n\n}\n\nexport default Cacheable;\n","'use strict';\n\nimport { getUid } from 'metal';\nimport { globalEval } from 'metal-dom';\nimport Cacheable from '../cacheable/Cacheable';\nimport CancellablePromise from 'metal-promise';\n\nclass Screen extends Cacheable {\n\n\t/**\n\t * Screen class is a special type of route handler that provides helper\n\t * utilities that adds lifecycle and methods to provide content to each\n\t * registered surface.\n\t * @constructor\n\t * @extends {Cacheable}\n\t */\n\tconstructor() {\n\t\tsuper();\n\n\t\t/**\n\t\t * Holds the screen id.\n\t\t * @type {string}\n\t\t * @protected\n\t\t */\n\t\tthis.id = this.makeId_(getUid());\n\n\t\t/**\n\t\t * Holds the screen title. Relevant when the page title should be\n\t\t * upadated when screen is rendered.\n\t\t * @type {?string=}\n\t\t * @default null\n\t\t * @protected\n\t\t */\n\t\tthis.title = null;\n\t}\n\n\t/**\n\t * Fires when the screen is active. Allows a screen to perform any setup\n\t * that requires its DOM to be visible. Lifecycle.\n\t */\n\tactivate() {\n\t\tconsole.log('Screen [' + this + '] activate');\n\t}\n\n\t/**\n\t * Gives the Screen a chance to cancel the navigation and stop itself from\n\t * activating. Can be used, for example, to prevent navigation if a user\n\t * is not authenticated. Lifecycle.\n\t * @return {boolean=|?CancellablePromise=} If returns or resolves to true,\n\t *     the current screen is locked and the next nagivation interrupted.\n\t */\n\tbeforeActivate() {\n\t\tconsole.log('Screen [' + this + '] beforeActivate');\n\t}\n\n\t/**\n\t * Gives the Screen a chance to cancel the navigation and stop itself from\n\t * being deactivated. Can be used, for example, if the screen has unsaved\n\t * state. Lifecycle. Clean-up should not be preformed here, since the\n\t * navigation may still be cancelled. Do clean-up in deactivate.\n\t * @return {boolean=|?CancellablePromise=} If returns or resolves to true,\n\t *     the current screen is locked and the next nagivation interrupted.\n\t */\n\tbeforeDeactivate() {\n\t\tconsole.log('Screen [' + this + '] beforeDeactivate');\n\t}\n\n\t/**\n\t * Gives the Screen a chance format the path before history update.\n\t * @path {!string} path Navigation path.\n\t * @return {!string} Navigation path to use on history.\n\t */\n\tbeforeUpdateHistoryPath(path) {\n\t\treturn path;\n\t}\n\n\t/**\n\t * Gives the Screen a chance format the state before history update.\n\t * @path {!object} state History state.\n\t * @return {!object} History state to use on history.\n\t */\n\tbeforeUpdateHistoryState(state) {\n\t\treturn state;\n\t}\n\n\t/**\n\t * Allows a screen to do any cleanup necessary after it has been\n\t * deactivated, for example cancelling outstanding requests or stopping\n\t * timers. Lifecycle.\n\t */\n\tdeactivate() {\n\t\tconsole.log('Screen [' + this + '] deactivate');\n\t}\n\n\t/**\n\t * Dispose a screen, either after it is deactivated (in the case of a\n\t * non-cacheable view) or when the App is itself disposed for whatever\n\t * reason. Lifecycle.\n\t */\n\tdisposeInternal() {\n\t\tsuper.disposeInternal();\n\t\tconsole.log('Screen [' + this + '] dispose');\n\t}\n\n\t/**\n\t * Allows a screen to evaluate scripts before the element is made visible.\n\t * Lifecycle.\n\t * @param {!object} surfaces Map of surfaces to flip keyed by surface id.\n\t * @return {?CancellablePromise=} This can return a promise, which will\n\t *     pause the navigation until it is resolved.\n\t */\n\tevaluateScripts(surfaces) {\n\t\tObject.keys(surfaces).forEach(sId => {\n\t\t\tif (surfaces[sId].activeChild) {\n\t\t\t\tglobalEval.runScriptsInElement(surfaces[sId].activeChild);\n\t\t\t}\n\t\t});\n\t\treturn CancellablePromise.resolve();\n\t}\n\n\t/**\n\t * Allows a screen to evaluate styles before the element is made visible.\n\t * Lifecycle.\n\t * @param {!object} surfaces Map of surfaces to flip keyed by surface id.\n\t * @return {?CancellablePromise=} This can return a promise, which will\n\t *     pause the navigation until it is resolved.\n\t */\n\tevaluateStyles() {\n\t\treturn CancellablePromise.resolve();\n\t}\n\n\t/**\n\t * Allows a screen to perform any setup immediately before the element is\n\t * made visible. Lifecycle.\n\t * @param {!object} surfaces Map of surfaces to flip keyed by surface id.\n\t * @return {?CancellablePromise=} This can return a promise, which will pause the\n\t *     navigation until it is resolved.\n\t */\n\tflip(surfaces) {\n\t\tconsole.log('Screen [' + this + '] flip');\n\n\t\tvar transitions = [];\n\n\t\tObject.keys(surfaces).forEach(sId => {\n\t\t\tvar surface = surfaces[sId];\n\t\t\tvar deferred = surface.show(this.id);\n\t\t\ttransitions.push(deferred);\n\t\t});\n\n\t\treturn CancellablePromise.all(transitions);\n\t}\n\n\t/**\n\t * Gets the screen id.\n\t * @return {string}\n\t */\n\tgetId() {\n\t\treturn this.id;\n\t}\n\n\t/**\n\t * Returns the content for the given surface, or null if the surface isn't\n\t * used by this screen. This will be called when a screen is initially\n\t * constructed or, if a screen is non-cacheable, when navigated.\n\t * @param {!string} surfaceId The id of the surface DOM element.\n\t * @param {!Object} params Params extracted from the current path.\n\t * @return {?string|Element=} This can return a string or node representing\n\t *     the content of the surface. If returns falsy values surface default\n\t *     content is restored.\n\t */\n\tgetSurfaceContent() {\n\t\tconsole.log('Screen [' + this + '] getSurfaceContent');\n\t}\n\n\t/**\n\t * Gets the screen title.\n\t * @return {?string=}\n\t */\n\tgetTitle() {\n\t\treturn this.title;\n\t}\n\n\t/**\n\t * Returns all contents for the surfaces. This will pass the loaded content\n\t * to <code>Screen.load</code> with all information you\n\t * need to fulfill the surfaces. Lifecycle.\n\t * @param {!string=} path The requested path.\n\t * @return {!CancellablePromise} This can return a string representing the\n\t *     contents of the surfaces or a promise, which will pause the navigation\n\t *     until it is resolved. This is useful for loading async content.\n\t */\n\tload() {\n\t\tconsole.log('Screen [' + this + '] load');\n\t\treturn CancellablePromise.resolve();\n\t}\n\n\t/**\n\t * Makes the id for the screen.\n\t * @param {!string} id The screen id the content belongs too.\n\t * @return {string}\n\t * @private\n\t */\n\tmakeId_(id) {\n\t\treturn 'screen_' + id;\n\t}\n\n\t/**\n\t * Sets the screen id.\n\t * @param {!string} id\n\t */\n\tsetId(id) {\n\t\tthis.id = id;\n\t}\n\n\t/**\n\t * Sets the screen title.\n\t * @param {?string=} title\n\t */\n\tsetTitle(title) {\n\t\tthis.title = title;\n\t}\n\n\t/**\n\t * @return {string}\n\t */\n\ttoString() {\n\t\treturn this.id;\n\t}\n\n}\n\n/**\n * @param {*} object\n * @return {boolean} Whether a given instance implements\n * <code>Screen</code>.\n */\nScreen.isImplementedBy = function(object) {\n\treturn object instanceof Screen;\n};\n\nexport default Screen;\n","'use strict';\n\nimport globals from '../globals/globals';\nimport { Disposable, isDefAndNotNull } from 'metal';\nimport { append, removeChildren, exitDocument } from 'metal-dom';\nimport CancellablePromise from 'metal-promise';\n\nclass Surface extends Disposable {\n\n\t/**\n\t * Surface class representing the references to elements on the page that\n\t * can potentially be updated by <code>App</code>.\n\t * @param {string} id\n\t * @constructor\n\t */\n\tconstructor(id) {\n\t\tsuper();\n\n\t\tif (!id) {\n\t\t\tthrow new Error('Surface element id not specified. A surface element requires a valid id.');\n\t\t}\n\n\t\t/**\n\t\t * Holds the active child element.\n\t\t * @type {Element}\n\t\t * @default null\n\t\t * @protected\n\t\t */\n\t\tthis.activeChild = null;\n\n\t\t/**\n\t\t * Holds the default child element.\n\t\t * @type {Element}\n\t\t * @default null\n\t\t * @protected\n\t\t */\n\t\tthis.defaultChild = null;\n\n\t\t/**\n\t\t * Holds the element with the specified surface id, if not found creates a\n\t\t * new element with the specified id.\n\t\t * @type {Element}\n\t\t * @default null\n\t\t * @protected\n\t\t */\n\t\tthis.element = null;\n\n\t\t/**\n\t\t * Holds the surface id.\n\t\t * @type {String}\n\t\t * @default null\n\t\t * @protected\n\t\t */\n\t\tthis.id = id;\n\n\t\t/**\n\t\t * Holds the default transitionFn for the surfaces.\n\t\t * @param {?Element=} from The visible surface element.\n\t\t * @param {?Element=} to The surface element to be flipped.\n\t\t * @default null\n\t\t */\n\t\tthis.transitionFn = null;\n\n\t\tthis.defaultChild = this.getChild(Surface.DEFAULT);\n\t\tthis.maybeWrapContentAsDefault_();\n\t\tthis.activeChild = this.defaultChild;\n\t}\n\n\t/**\n\t * Adds screen content to a surface. If content hasn't been passed, see if\n\t * an element exists in the DOM that matches the id. By convention, the\n\t * element should already be nested in the right element and should have an\n\t * id that is a concatentation of the surface id + '-' + the screen id.\n\t * @param {!string} screenId The screen id the content belongs too.\n\t * @param {?string|Element=} opt_content The string content or element to\n\t *     add be added as surface content.\n\t * @return {Element}\n\t */\n\taddContent(screenId, opt_content) {\n\t\tvar child = this.defaultChild;\n\n\t\tif (isDefAndNotNull(opt_content)) {\n\t\t\tchild = this.getChild(screenId);\n\t\t\tif (child) {\n\t\t\t\tremoveChildren(child);\n\t\t\t} else {\n\t\t\t\tchild = this.createChild(screenId);\n\t\t\t\tthis.transition(child, null);\n\t\t\t}\n\t\t\tappend(child, opt_content);\n\t\t}\n\n\t\tvar element = this.getElement();\n\n\t\tif (element && child) {\n\t\t\tappend(element, child);\n\t\t}\n\n\t\treturn child;\n\t}\n\n\t/**\n\t * Creates child node for the surface.\n\t * @param {!string} screenId The screen id.\n\t * @return {Element}\n\t */\n\tcreateChild(screenId) {\n\t\tvar child = globals.document.createElement('div');\n\t\tchild.setAttribute('id', this.makeId_(screenId));\n\t\treturn child;\n\t}\n\n\t/**\n\t * Gets child node of the surface.\n\t * @param {!string} screenId The screen id.\n\t * @return {?Element}\n\t */\n\tgetChild(screenId) {\n\t\treturn globals.document.getElementById(this.makeId_(screenId));\n\t}\n\n\t/**\n\t * Gets the surface element from element, and sets it to the el property of\n\t * the current instance.\n\t * <code>this.element</code> will be used.\n\t * @return {?Element} The current surface element.\n\t */\n\tgetElement() {\n\t\tif (this.element) {\n\t\t\treturn this.element;\n\t\t}\n\t\tthis.element = globals.document.getElementById(this.id);\n\t\treturn this.element;\n\t}\n\n\t/**\n\t * Gets the surface id.\n\t * @return {String}\n\t */\n\tgetId() {\n\t\treturn this.id;\n\t}\n\n\t/**\n\t * Gets the surface transition function.\n\t * See <code>Surface.defaultTransition</code>.\n\t * @return {?Function=} The transition function.\n\t */\n\tgetTransitionFn() {\n\t\treturn this.transitionFn;\n\t}\n\n\t/**\n\t * Makes the id for the element that holds content for a screen.\n\t * @param {!string} screenId The screen id the content belongs too.\n\t * @return {String}\n\t * @private\n\t */\n\tmakeId_(screenId) {\n\t\treturn this.id + '-' + screenId;\n\t}\n\n\t/**\n\t * If default child is missing, wraps surface content as default child. If\n\t * surface have static content, make sure to place a\n\t * <code>surfaceId-default</code> element inside surface, only contents\n\t * inside the default child will be replaced by navigation.\n\t */\n\tmaybeWrapContentAsDefault_() {\n\t\tvar element = this.getElement();\n\t\tif (element && !this.defaultChild) {\n\t\t\tvar fragment = globals.document.createDocumentFragment();\n\t\t\twhile (element.firstChild) {\n\t\t\t\tfragment.appendChild(element.firstChild);\n\t\t\t}\n\t\t\tthis.defaultChild = this.addContent(Surface.DEFAULT, fragment);\n\t\t\tthis.transition(null, this.defaultChild);\n\t\t}\n\t}\n\n\t/**\n\t * Sets the surface id.\n\t * @param {!string} id\n\t */\n\tsetId(id) {\n\t\tthis.id = id;\n\t}\n\n\t/**\n\t * Sets the surface transition function.\n\t * See <code>Surface.defaultTransition</code>.\n\t * @param {?Function=} transitionFn The transition function.\n\t */\n\tsetTransitionFn(transitionFn) {\n\t\tthis.transitionFn = transitionFn;\n\t}\n\n\t/**\n\t * Shows screen content from a surface.\n\t * @param {String} screenId The screen id to show.\n\t * @return {CancellablePromise} Pauses the navigation until it is resolved.\n\t */\n\tshow(screenId) {\n\t\tvar from = this.activeChild;\n\t\tvar to = this.getChild(screenId);\n\t\tif (!to) {\n\t\t\tto = this.defaultChild;\n\t\t}\n\t\tthis.activeChild = to;\n\t\treturn this.transition(from, to).thenAlways(() => {\n\t\t\tif (from && from !== to) {\n\t\t\t\texitDocument(from);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Removes screen content from a surface.\n\t * @param {!string} screenId The screen id to remove.\n\t */\n\tremove(screenId) {\n\t\tvar child = this.getChild(screenId);\n\t\tif (child) {\n\t\t\texitDocument(child);\n\t\t}\n\t}\n\n\t/**\n\t * @return {String}\n\t */\n\ttoString() {\n\t\treturn this.id;\n\t}\n\n\t/**\n\t * Invokes the transition function specified on <code>transition</code> attribute.\n\t * @param {?Element=} from\n\t * @param {?Element=} to\n\t * @return {?CancellablePromise=} This can return a promise, which will pause the\n\t *     navigation until it is resolved.\n\t */\n\ttransition(from, to) {\n\t\tvar transitionFn = this.transitionFn || Surface.defaultTransition;\n\t\treturn CancellablePromise.resolve(transitionFn.call(this, from, to));\n\t}\n\n}\n\n/**\n   * Holds the default surface name. Elements on the page must contain a child\n   * element containing the default content, this element must be as following:\n   *\n   * Example:\n   * <code>\n   *   <div id=\"mysurface\">\n   *     <div id=\"mysurface-default\">Default surface content.</div>\n   *   </div>\n   * </code>\n   *\n   * The default content is relevant for the initial page content. When a\n   * screen doesn't provide content for the surface the default content is\n   * restored into the page.\n   *\n   * @type {!String}\n   * @default default\n   * @static\n   */\nSurface.DEFAULT = 'default';\n\n/**\n * Holds the default transition for all surfaces. Each surface could have its\n * own transition.\n *\n * Example:\n *\n * <code>\n * surface.setTransitionFn(function(from, to) {\n *   if (from) {\n *     from.style.display = 'none';\n *     from.classList.remove('flipped');\n *   }\n *   if (to) {\n *     to.style.display = 'block';\n *     to.classList.add('flipped');\n *   }\n *   return null;\n * });\n * </code>\n *\n * @param {?Element=} from The visible surface element.\n * @param {?Element=} to The surface element to be flipped.\n * @static\n */\nSurface.defaultTransition = function(from, to) {\n\tif (from) {\n\t\tfrom.style.display = 'none';\n\t\tfrom.classList.remove('flipped');\n\t}\n\tif (to) {\n\t\tto.style.display = 'block';\n\t\tto.classList.add('flipped');\n\t}\n};\n\nexport default Surface;\n","'use strict';\n\nimport { addClasses, delegate, match, on, removeClasses } from 'metal-dom';\nimport { array, async, isDefAndNotNull, isString } from 'metal';\nimport { EventEmitter, EventHandler } from 'metal-events';\nimport CancellablePromise from 'metal-promise';\nimport debounce from 'metal-debounce';\nimport globals from '../globals/globals';\nimport Route from '../route/Route';\nimport Screen from '../screen/Screen';\nimport Surface from '../surface/Surface';\nimport Uri from 'metal-uri';\nimport utils from '../utils/utils';\n\nclass App extends EventEmitter {\n\n\t/**\n\t * App class that handle routes and screens lifecycle.\n\t * @constructor\n\t * @extends {EventEmitter}\n\t */\n\tconstructor() {\n\t\tsuper();\n\n\t\t/**\n\t\t * Holds the active screen.\n\t\t * @type {?Screen}\n\t\t * @protected\n\t\t */\n\t\tthis.activeScreen = null;\n\n\t\t/**\n\t\t * Holds the active path containing the query parameters.\n\t\t * @type {?string}\n\t\t * @protected\n\t\t */\n\t\tthis.activePath = null;\n\n\t\t/**\n\t\t * Allows prevent navigate from dom prevented event.\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t * @protected\n\t\t */\n\t\tthis.allowPreventNavigate = true;\n\n\t\t/**\n\t\t * Holds link base path.\n\t\t * @type {!string}\n\t\t * @default ''\n\t\t * @protected\n\t\t */\n\t\tthis.basePath = '';\n\n\t\t/**\n\t\t * Holds the value of the browser path before a navigation is performed.\n\t\t * @type {!string}\n\t\t * @default the current browser path.\n\t\t * @protected\n\t\t */\n\t\tthis.browserPathBeforeNavigate = utils.getCurrentBrowserPathWithoutHash();\n\n\t\t/**\n\t\t * Captures scroll position from scroll event.\n\t\t * @type {!boolean}\n\t\t * @default true\n\t\t * @protected\n\t\t */\n\t\tthis.captureScrollPositionFromScrollEvent = true;\n\n\t\t/**\n\t\t * Holds the default page title.\n\t\t * @type {string}\n\t\t * @default null\n\t\t * @protected\n\t\t */\n\t\tthis.defaultTitle = globals.document.title;\n\n\t\t/**\n\t\t * Holds the form selector to define forms that are routed.\n\t\t * @type {!string}\n\t\t * @default form[enctype=\"multipart/form-data\"]:not([data-senna-off])\n\t\t * @protected\n\t\t */\n\t\tthis.formSelector = 'form[enctype=\"multipart/form-data\"]:not([data-senna-off])';\n\n\t\t/**\n\t\t * When enabled, the route matching ignores query string from the path.\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t * @protected\n\t\t */\n\t\tthis.ignoreQueryStringFromRoutePath = false;\n\n\t\t/**\n\t\t * Holds the link selector to define links that are routed.\n\t\t * @type {!string}\n\t\t * @default a:not([data-senna-off])\n\t\t * @protected\n\t\t */\n\t\tthis.linkSelector = 'a:not([data-senna-off]):not([target=\"_blank\"])';\n\n\t\t/**\n\t\t * Holds the loading css class.\n\t\t * @type {!string}\n\t\t * @default senna-loading\n\t\t * @protected\n\t\t */\n\t\tthis.loadingCssClass = 'senna-loading';\n\n\t\t/**\n\t\t * Using the History API to manage your URLs is awesome and, as it happens,\n\t\t * a crucial feature of good web apps. One of its downsides, however, is\n\t\t * that scroll positions are stored and then, more importantly, restored\n\t\t * whenever you traverse the history. This often means unsightly jumps as\n\t\t * the scroll position changes automatically, and especially so if your app\n\t\t * does transitions, or changes the contents of the page in any way.\n\t\t * Ultimately this leads to an horrible user experience. The good news is,\n\t\t * however, that there’s a potential fix: history.scrollRestoration.\n\t\t * https://developers.google.com/web/updates/2015/09/history-api-scroll-restoration\n\t\t * @type {boolean}\n\t\t * @protected\n\t\t */\n\t\tthis.nativeScrollRestorationSupported = ('scrollRestoration' in globals.window.history);\n\n\t\t/**\n\t\t * When set to true there is a pendingNavigate that has not yet been\n\t\t * resolved or rejected.\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t * @protected\n\t\t */\n\t\tthis.isNavigationPending = false;\n\n\t\t/**\n\t\t * Holds a deferred with the current navigation.\n\t\t * @type {?CancellablePromise}\n\t\t * @default null\n\t\t * @protected\n\t\t */\n\t\tthis.pendingNavigate = null;\n\n\t\t/**\n\t\t * Holds the window horizontal scroll position when the navigation using\n\t\t * back or forward happens to be restored after the surfaces are updated.\n\t\t * @type {!Number}\n\t\t * @default 0\n\t\t * @protected\n\t\t */\n\t\tthis.popstateScrollLeft = 0;\n\n\t\t/**\n\t\t * Holds the window vertical scroll position when the navigation using\n\t\t * back or forward happens to be restored after the surfaces are updated.\n\t\t * @type {!Number}\n\t\t * @default 0\n\t\t * @protected\n\t\t */\n\t\tthis.popstateScrollTop = 0;\n\n\t\t/**\n\t\t * Holds the redirect path containing the query parameters.\n\t\t * @type {?string}\n\t\t * @protected\n\t\t */\n\t\tthis.redirectPath = null;\n\n\t\t/**\n\t\t * Holds the screen routes configuration.\n\t\t * @type {?Array}\n\t\t * @default []\n\t\t * @protected\n\t\t */\n\t\tthis.routes = [];\n\n\t\t/**\n\t\t * Maps the screen instances by the url containing the parameters.\n\t\t * @type {?Object}\n\t\t * @default {}\n\t\t * @protected\n\t\t */\n\t\tthis.screens = {};\n\n\t\t/**\n\t\t * When set to true the first erroneous popstate fired on page load will be\n\t\t * ignored, only if <code>globals.window.history.state</code> is also\n\t\t * <code>null</code>.\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t * @protected\n\t\t */\n\t\tthis.skipLoadPopstate = false;\n\n\t\t/**\n\t\t * Maps that index the surfaces instances by the surface id.\n\t\t * @type {?Object}\n\t\t * @default {}\n\t\t * @protected\n\t\t */\n\t\tthis.surfaces = {};\n\n\t\t/**\n\t\t * When set to true, moves the scroll position after popstate, or to the\n\t\t * top of the viewport for new navigation. If false, the browser will\n\t\t * take care of scroll restoration.\n\t\t * @type {!boolean}\n\t\t * @default true\n\t\t * @protected\n\t\t */\n\t\tthis.updateScrollPosition = true;\n\n\t\tthis.appEventHandlers_ = new EventHandler();\n\n\t\tthis.appEventHandlers_.add(\n\t\t\ton(globals.window, 'scroll', debounce(this.onScroll_.bind(this), 100)),\n\t\t\ton(globals.window, 'load', this.onLoad_.bind(this)),\n\t\t\ton(globals.window, 'popstate', this.onPopstate_.bind(this))\n\t\t);\n\n\t\tthis.on('startNavigate', this.onStartNavigate_);\n\t\tthis.on('beforeNavigate', this.onBeforeNavigate_);\n\t\tthis.on('beforeNavigate', this.onBeforeNavigateDefault_, true);\n\t\tthis.on('beforeUnload', this.onBeforeUnloadDefault_);\n\n\t\tthis.setLinkSelector(this.linkSelector);\n\t\tthis.setFormSelector(this.formSelector);\n\n\t\tthis.maybeOverloadBeforeUnload_();\n\t}\n\n\t/**\n\t * Adds one or more screens to the application.\n\t *\n\t * Example:\n\t *\n\t * <code>\n\t *   app.addRoutes({ path: '/foo', handler: FooScreen });\n\t *   or\n\t *   app.addRoutes([{ path: '/foo', handler: function(route) { return new FooScreen(); } }]);\n\t * </code>\n\t *\n\t * @param {Object} or {Array} routes Single object or an array of object.\n\t *     Each object should contain <code>path</code> and <code>screen</code>.\n\t *     The <code>path</code> should be a string or a regex that maps the\n\t *     navigation route to a screen class definition (not an instance), e.g:\n\t *         <code>{ path: \"/home:param1\", handler: MyScreen }</code>\n\t *         <code>{ path: /foo.+/, handler: MyScreen }</code>\n\t * @chainable\n\t */\n\taddRoutes(routes) {\n\t\tif (!Array.isArray(routes)) {\n\t\t\troutes = [routes];\n\t\t}\n\t\troutes.forEach((route) => {\n\t\t\tif (!(route instanceof Route)) {\n\t\t\t\troute = new Route(route.path, route.handler);\n\t\t\t}\n\t\t\tthis.routes.push(route);\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds one or more surfaces to the application.\n\t * @param {Surface|String|Array.<Surface|String>} surfaces\n\t *     Surface element id or surface instance. You can also pass an Array\n\t *     whichcontains surface instances or id. In case of ID, these should be\n\t *     the id of surface element.\n\t * @chainable\n\t */\n\taddSurfaces(surfaces) {\n\t\tif (!Array.isArray(surfaces)) {\n\t\t\tsurfaces = [surfaces];\n\t\t}\n\t\tsurfaces.forEach((surface) => {\n\t\t\tif (isString(surface)) {\n\t\t\t\tsurface = new Surface(surface);\n\t\t\t}\n\t\t\tthis.surfaces[surface.getId()] = surface;\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns if can navigate to path.\n\t * @param {!string} url\n\t * @return {boolean}\n\t */\n\tcanNavigate(url) {\n\t\tconst uri = utils.isWebUri(url);\n\n\t\tif (!uri) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst path = utils.getUrlPath(url);\n\n\t\tif (!this.isLinkSameOrigin_(uri.getHost())) {\n\t\t\tconsole.log('Offsite link clicked');\n\t\t\treturn false;\n\t\t}\n\t\tif (!this.isSameBasePath_(path)) {\n\t\t\tconsole.log('Link clicked outside app\\'s base path');\n\t\t\treturn false;\n\t\t}\n\t\t// Prevents navigation if it's a hash change on the same url.\n\t\tif (uri.getHash() && utils.isCurrentBrowserPath(path)) {\n\t\t\treturn false;\n\t\t}\n\t\tif (!this.findRoute(path)) {\n\t\t\tconsole.log('No route for ' + path);\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Clear screens cache.\n\t * @chainable\n\t */\n\tclearScreensCache() {\n\t\tObject.keys(this.screens).forEach((path) => {\n\t\t\tif (path === this.activePath) {\n\t\t\t\tthis.activeScreen.clearCache();\n\t\t\t} else {\n\t\t\t\tthis.removeScreen(path);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Retrieves or create a screen instance to a path.\n\t * @param {!string} path Path containing the querystring part.\n\t * @return {Screen}\n\t */\n\tcreateScreenInstance(path, route) {\n\t\tif (!this.pendingNavigate && path === this.activePath) {\n\t\t\tconsole.log('Already at destination, refresh navigation');\n\t\t\treturn this.activeScreen;\n\t\t}\n\t\t/* jshint newcap: false */\n\t\tvar screen = this.screens[path];\n\t\tif (!screen) {\n\t\t\tvar handler = route.getHandler();\n\t\t\tif (handler === Screen || Screen.isImplementedBy(handler.prototype)) {\n\t\t\t\tscreen = new handler();\n\t\t\t} else {\n\t\t\t\tscreen = handler(route) || new Screen();\n\t\t\t}\n\t\t\tconsole.log('Create screen for [' + path + '] [' + screen + ']');\n\t\t}\n\t\treturn screen;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdisposeInternal() {\n\t\tif (this.activeScreen) {\n\t\t\tthis.removeScreen(this.activePath);\n\t\t}\n\t\tthis.clearScreensCache();\n\t\tthis.formEventHandler_.removeListener();\n\t\tthis.linkEventHandler_.removeListener();\n\t\tthis.appEventHandlers_.removeAllListeners();\n\t\tsuper.disposeInternal();\n\t}\n\n\t/**\n\t * Dispatches to the first route handler that matches the current path, if\n\t * any.\n\t * @return {CancellablePromise} Returns a pending request cancellable promise.\n\t */\n\tdispatch() {\n\t\treturn this.navigate(utils.getCurrentBrowserPath(), true);\n\t}\n\n\t/**\n\t * Starts navigation to a path.\n\t * @param {!string} path Path containing the querystring part.\n\t * @param {boolean=} opt_replaceHistory Replaces browser history.\n\t * @return {CancellablePromise} Returns a pending request cancellable promise.\n\t */\n\tdoNavigate_(path, opt_replaceHistory) {\n\t\tvar route = this.findRoute(path);\n\t\tif (!route) {\n\t\t\tthis.pendingNavigate = CancellablePromise.reject(new CancellablePromise.CancellationError('No route for ' + path));\n\t\t\treturn this.pendingNavigate;\n\t\t}\n\n\t\tconsole.log('Navigate to [' + path + ']');\n\n\t\tthis.stopPendingNavigate_();\n\t\tthis.isNavigationPending = true;\n\n\t\tvar nextScreen = this.createScreenInstance(path, route);\n\n\t\treturn this.maybePreventDeactivate_()\n\t\t\t.then(() => this.maybePreventActivate_(nextScreen))\n\t\t\t.then(() => nextScreen.load(path))\n\t\t\t.then(() => {\n\t\t\t\tif (this.activeScreen) {\n\t\t\t\t\tthis.activeScreen.deactivate();\n\t\t\t\t}\n\t\t\t\tthis.prepareNavigateHistory_(path, nextScreen, opt_replaceHistory);\n\t\t\t\tthis.prepareNavigateSurfaces_(\n\t\t\t\t\tnextScreen,\n\t\t\t\t\tthis.surfaces,\n\t\t\t\t\tthis.extractParams(route, path)\n\t\t\t\t);\n\t\t\t})\n\t\t\t.then(() => nextScreen.evaluateStyles(this.surfaces))\n\t\t\t.then(() => nextScreen.flip(this.surfaces))\n\t\t\t.then(() => nextScreen.evaluateScripts(this.surfaces))\n\t\t\t.then(() => this.maybeUpdateScrollPositionState_())\n\t\t\t.then(() => this.syncScrollPositionSyncThenAsync_())\n\t\t\t.then(() => this.finalizeNavigate_(path, nextScreen))\n\t\t\t.then(() => this.maybeOverloadBeforeUnload_())\n\t\t\t.catch((reason) => {\n\t\t\t\tthis.isNavigationPending = false;\n\t\t\t\tthis.handleNavigateError_(path, nextScreen, reason);\n\t\t\t\tthrow reason;\n\t\t\t});\n\t}\n\n\t/**\n\t * Extracts params according to the given path and route.\n\t * @param {!Route} route\n\t * @param {string} path\n\t * @param {!Object}\n\t */\n\textractParams(route, path) {\n\t\treturn route.extractParams(this.getRoutePath(path));\n\t}\n\n\t/**\n\t * Finalizes a screen navigation.\n\t * @param {!string} path Path containing the querystring part.\n\t * @param {!Screen} nextScreen\n\t * @protected\n\t */\n\tfinalizeNavigate_(path, nextScreen) {\n\t\tnextScreen.activate();\n\n\t\tif (this.activeScreen && !this.activeScreen.isCacheable()) {\n\t\t\tif (this.activeScreen !== nextScreen) {\n\t\t\t\tthis.removeScreen(this.activePath);\n\t\t\t}\n\t\t}\n\n\t\tthis.activePath = path;\n\t\tthis.activeScreen = nextScreen;\n\t\tthis.browserPathBeforeNavigate = utils.getCurrentBrowserPathWithoutHash();\n\t\tthis.screens[path] = nextScreen;\n\t\tthis.isNavigationPending = false;\n\t\tthis.pendingNavigate = null;\n\t\tglobals.capturedFormElement = null;\n\t\tglobals.capturedFormButtonElement = null;\n\t\tconsole.log('Navigation done');\n\t}\n\n\t/**\n\t * Finds a route for the test path. Returns true if matches has a route,\n\t * otherwise returns null.\n\t * @param {!string} path Path containing the querystring part.\n\t * @return {?Object} Route handler if match any or <code>null</code> if the\n\t *     path is the same as the current url and the path contains a fragment.\n\t */\n\tfindRoute(path) {\n\t\tpath = this.getRoutePath(path);\n\t\tfor (var i = 0; i < this.routes.length; i++) {\n\t\t\tvar route = this.routes[i];\n\t\t\tif (route.matchesPath(path)) {\n\t\t\t\treturn route;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Gets allow prevent navigate.\n\t * @return {boolean}\n\t */\n\tgetAllowPreventNavigate() {\n\t\treturn this.allowPreventNavigate;\n\t}\n\n\t/**\n\t * Gets link base path.\n\t * @return {!string}\n\t */\n\tgetBasePath() {\n\t\treturn this.basePath;\n\t}\n\n\t/**\n\t * Gets the default page title.\n\t * @return {string} defaultTitle\n\t */\n\tgetDefaultTitle() {\n\t\treturn this.defaultTitle;\n\t}\n\n\t/**\n\t * Gets the form selector.\n\t * @return {!string}\n\t */\n\tgetFormSelector() {\n\t\treturn this.formSelector;\n\t}\n\n\t/**\n\t * Check if route matching is ignoring query string from the route path.\n\t * @return {boolean}\n\t */\n\tgetIgnoreQueryStringFromRoutePath() {\n\t\treturn this.ignoreQueryStringFromRoutePath;\n\t}\n\n\t/**\n\t * Gets the link selector.\n\t * @return {!string}\n\t */\n\tgetLinkSelector() {\n\t\treturn this.linkSelector;\n\t}\n\n\t/**\n\t * Gets the loading css class.\n\t * @return {!string}\n\t */\n\tgetLoadingCssClass() {\n\t\treturn this.loadingCssClass;\n\t}\n\n\t/**\n\t * Returns the given path formatted to be matched by a route. This will,\n\t * for example, remove the base path from it, but make sure it will end\n\t * with a '/'.\n\t * @param {string} path\n\t * @return {string}\n\t */\n\tgetRoutePath(path) {\n\t\tif (this.getIgnoreQueryStringFromRoutePath()) {\n\t\t\tpath = utils.getUrlPathWithoutHashAndSearch(path);\n\t\t\treturn utils.getUrlPathWithoutHashAndSearch(path.substr(this.basePath.length));\n\t\t}\n\n\t\tpath = utils.getUrlPathWithoutHash(path);\n\t\treturn utils.getUrlPathWithoutHash(path.substr(this.basePath.length));\n\t}\n\n\t/**\n\t * Gets the update scroll position value.\n\t * @return {boolean}\n\t */\n\tgetUpdateScrollPosition() {\n\t\treturn this.updateScrollPosition;\n\t}\n\n\t/**\n\t * Handle navigation error.\n\t * @param {!string} path Path containing the querystring part.\n\t * @param {!Screen} nextScreen\n\t * @param {!Error} error\n\t * @protected\n\t */\n\thandleNavigateError_(path, nextScreen, error) {\n\t\tconsole.log('Navigation error for [' + nextScreen + '] (' + error + ')');\n\t\tthis.emit('navigationError', {\n\t\t\terror,\n\t\t\tnextScreen,\n\t\t\tpath\n\t\t});\n\t\tif (!utils.isCurrentBrowserPath(path)) {\n\t\t\tif (this.isNavigationPending && this.pendingNavigate) {\n\t\t\t\tthis.pendingNavigate.thenAlways(() => this.removeScreen(path), this);\n\t\t\t} else {\n\t\t\t\tthis.removeScreen(path);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Checks if app has routes.\n\t * @return {boolean}\n\t */\n\thasRoutes() {\n\t\treturn this.routes.length > 0;\n\t}\n\n\t/**\n\t * Tests if host is an offsite link.\n\t * @param {!string} host Link host to compare with\n\t *     <code>globals.window.location.host</code>.\n\t * @return {boolean}\n\t * @protected\n\t */\n\tisLinkSameOrigin_(host) {\n\t\treturn host === globals.window.location.host;\n\t}\n\n\t/**\n\t * Tests if link element has the same app's base path.\n\t * @param {!string} path Link path containing the querystring part.\n\t * @return {boolean}\n\t * @protected\n\t */\n\tisSameBasePath_(path) {\n\t\treturn path.indexOf(this.basePath) === 0;\n\t}\n\n\t/**\n\t * Lock the document scroll in order to avoid the browser native back and\n\t * forward navigation to change the scroll position. In the end of\n\t * navigation lifecycle scroll is repositioned.\n\t * @protected\n\t */\n\tlockHistoryScrollPosition_() {\n\t\tvar state = globals.window.history.state;\n\t\tif (!state) {\n\t\t\treturn;\n\t\t}\n\t\t// Browsers are inconsistent when re-positioning the scroll history on\n\t\t// popstate. At some browsers, history scroll happens before popstate, then\n\t\t// lock the scroll on the last known position as soon as possible after the\n\t\t// current JS execution context and capture the current value. Some others,\n\t\t// history scroll happens after popstate, in this case, we bind an once\n\t\t// scroll event to lock the las known position. Lastly, the previous two\n\t\t// behaviors can happen even on the same browser, hence the race will decide\n\t\t// the winner.\n\t\tvar winner = false;\n\t\tvar switchScrollPositionRace = function() {\n\t\t\tglobals.document.removeEventListener('scroll', switchScrollPositionRace, false);\n\t\t\tif (!winner) {\n\t\t\t\tglobals.window.scrollTo(state.scrollLeft, state.scrollTop);\n\t\t\t\twinner = true;\n\t\t\t}\n\t\t};\n\t\tasync.nextTick(switchScrollPositionRace);\n\t\tglobals.document.addEventListener('scroll', switchScrollPositionRace, false);\n\t}\n\n\t/**\n\t * If supported by the browser, disables native scroll restoration and\n\t * stores current value.\n\t */\n\tmaybeDisableNativeScrollRestoration() {\n\t\tif (this.nativeScrollRestorationSupported) {\n\t\t\tthis.nativeScrollRestoration_ = globals.window.history.scrollRestoration;\n\t\t\tglobals.window.history.scrollRestoration = 'manual';\n\t\t}\n\t}\n\n\t/**\n\t * Maybe navigate to a path.\n\t * @param {string} href Information about the link's href.\n\t * @param {Event} event Dom event that initiated the navigation.\n\t */\n\tmaybeNavigate_(href, event) {\n\t\tif (!this.canNavigate(href)) {\n\t\t\treturn;\n\t\t}\n\n\t\tglobals.capturedFormElement = event.capturedFormElement;\n\t\tglobals.capturedFormButtonElement = event.capturedFormButtonElement;\n\n\t\tvar navigateFailed = false;\n\t\ttry {\n\t\t\tthis.navigate(utils.getUrlPath(href), false, event);\n\t\t} catch (err) {\n\t\t\t// Do not prevent link navigation in case some synchronous error occurs\n\t\t\tnavigateFailed = true;\n\t\t}\n\n\t\tif (!navigateFailed) {\n\t\t\tevent.preventDefault();\n\t\t}\n\t}\n\n\t/**\n\t * Checks whether the onbeforeunload global event handler is overloaded\n\t * by client code. If so, it replaces with a function that halts the normal\n\t * event flow in relation with the client onbeforeunload function.\n\t * This can be in most part used to prematurely terminate navigation to other pages\n\t * according to the given constrait(s).\n\t * @protected\n\t */\n\tmaybeOverloadBeforeUnload_() {\n\t\tif ('function' === typeof window.onbeforeunload) {\n\t\t\twindow._onbeforeunload = window.onbeforeunload;\n\n\t\t\twindow.onbeforeunload = event => {\n\t\t\t\tthis.emit('beforeUnload', event);\n\t\t\t\tif (event && event.defaultPrevented) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t// mark the updated handler due unwanted recursion\n\t\t\twindow.onbeforeunload._overloaded = true;\n\t\t}\n\t}\n\n\t/**\n\t * Cancels navigation if nextScreen's beforeActivate lifecycle method\n\t * resolves to true.\n\t * @param {!Screen} nextScreen\n\t * @return {!CancellablePromise}\n\t */\n\tmaybePreventActivate_(nextScreen) {\n\t\treturn CancellablePromise.resolve()\n\t\t\t.then(() => {\n\t\t\t\treturn nextScreen.beforeActivate();\n\t\t\t})\n\t\t\t.then(prevent => {\n\t\t\t\tif (prevent) {\n\t\t\t\t\tthis.pendingNavigate = CancellablePromise.reject(new CancellablePromise.CancellationError('Cancelled by next screen'));\n\t\t\t\t\treturn this.pendingNavigate;\n\t\t\t\t}\n\t\t\t});\n\t}\n\n\t/**\n\t * Cancels navigation if activeScreen's beforeDeactivate lifecycle\n\t * method resolves to true.\n\t * @return {!CancellablePromise}\n\t */\n\tmaybePreventDeactivate_() {\n\t\treturn CancellablePromise.resolve()\n\t\t\t.then(() => {\n\t\t\t\tif (this.activeScreen) {\n\t\t\t\t\treturn this.activeScreen.beforeDeactivate();\n\t\t\t\t}\n\t\t\t})\n\t\t\t.then(prevent => {\n\t\t\t\tif (prevent) {\n\t\t\t\t\tthis.pendingNavigate = CancellablePromise.reject(new CancellablePromise.CancellationError('Cancelled by active screen'));\n\t\t\t\t\treturn this.pendingNavigate;\n\t\t\t\t}\n\t\t\t});\n\t}\n\n\t/**\n\t * Maybe reposition scroll to hashed anchor.\n\t */\n\tmaybeRepositionScrollToHashedAnchor() {\n\t\tconst hash = globals.window.location.hash;\n\t\tif (hash) {\n\t\t\tlet anchorElement = globals.document.getElementById(hash.substring(1));\n\t\t\tif (anchorElement) {\n\t\t\t\tconst {offsetLeft, offsetTop} = utils.getNodeOffset(anchorElement);\n\t\t\t\tglobals.window.scrollTo(offsetLeft, offsetTop);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * If supported by the browser, restores native scroll restoration to the\n\t * value captured by `maybeDisableNativeScrollRestoration`.\n\t */\n\tmaybeRestoreNativeScrollRestoration() {\n\t\tif (this.nativeScrollRestorationSupported && this.nativeScrollRestoration_) {\n\t\t\tglobals.window.history.scrollRestoration = this.nativeScrollRestoration_;\n\t\t}\n\t}\n\n\t/**\n\t * Maybe restore redirected path hash in case both the current path and\n\t * the given path are the same.\n\t * @param {!string} path Path before navigation.\n\t * @param {!string} redirectPath Path after navigation.\n\t * @param {!string} hash Hash to be added to the path.\n\t * @return {!string} Returns the path with the hash restored.\n\t */\n\tmaybeRestoreRedirectPathHash_(path, redirectPath, hash) {\n\t\tif (redirectPath === utils.getUrlPathWithoutHash(path)) {\n\t\t\treturn redirectPath + hash;\n\t\t}\n\t\treturn redirectPath;\n\t}\n\n\t/**\n\t * Maybe update scroll position in history state to anchor on path.\n\t * @param {!string} path Path containing anchor\n\t */\n\tmaybeUpdateScrollPositionState_() {\n\t\tvar hash = globals.window.location.hash;\n\t\tvar anchorElement = globals.document.getElementById(hash.substring(1));\n\t\tif (anchorElement) {\n\t\t\tconst {offsetLeft, offsetTop} = utils.getNodeOffset(anchorElement);\n\t\t\tthis.saveHistoryCurrentPageScrollPosition_(offsetTop, offsetLeft);\n\t\t}\n\t}\n\n\t/**\n\t * Navigates to the specified path if there is a route handler that matches.\n\t * @param {!string} path Path to navigate containing the base path.\n\t * @param {boolean=} opt_replaceHistory Replaces browser history.\n\t * @param {Event=} event Optional event object that triggered the navigation.\n\t * @return {CancellablePromise} Returns a pending request cancellable promise.\n\t */\n\tnavigate(path, opt_replaceHistory, opt_event) {\n\t\tif (!utils.isHtml5HistorySupported()) {\n\t\t\tthrow new Error('HTML5 History is not supported. Senna will not intercept navigation.');\n\t\t}\n\n\t\t// When reloading the same path do replaceState instead of pushState to\n\t\t// avoid polluting history with states with the same path.\n\t\tif (path === this.activePath) {\n\t\t\topt_replaceHistory = true;\n\t\t}\n\n\t\tthis.emit('beforeNavigate', {\n\t\t\tevent: opt_event,\n\t\t\tpath: path,\n\t\t\treplaceHistory: !!opt_replaceHistory\n\t\t});\n\n\t\treturn this.pendingNavigate;\n\t}\n\n\t/**\n\t * Befores navigation to a path.\n\t * @param {!Event} event Event facade containing <code>path</code> and\n\t *     <code>replaceHistory</code>.\n\t * @protected\n\t */\n\tonBeforeNavigate_(event) {\n\t\tif (globals.capturedFormElement) {\n\t\t\tevent.form = globals.capturedFormElement;\n\t\t}\n\t}\n\n\t/**\n\t * Befores navigation to a path. Runs after external listeners.\n\t * @param {!Event} event Event facade containing <code>path</code> and\n\t *     <code>replaceHistory</code>.\n\t * @protected\n\t */\n\tonBeforeNavigateDefault_(event) {\n\t\tif (this.pendingNavigate) {\n\t\t\tif (this.pendingNavigate.path === event.path) {\n\t\t\t\tconsole.log('Waiting...');\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tthis.emit('beforeUnload', event);\n\n\t\tthis.emit('startNavigate', {\n\t\t\tform: event.form,\n\t\t\tpath: event.path,\n\t\t\treplaceHistory: event.replaceHistory\n\t\t});\n\t}\n\n\t/**\n\t * Custom event handler that executes the original listener that has been\n\t * added by the client code and terminates the navigation accordingly.\n\t * @param {!Event} event original Event facade.\n\t * @protected\n\t */\n\tonBeforeUnloadDefault_(event) {\n\t\tvar func = window._onbeforeunload;\n\t\tif (func && !func._overloaded && func()) {\n\t\t\tevent.preventDefault();\n\t\t}\n\t}\n\n\t/**\n\t * Intercepts document clicks and test link elements in order to decide\n\t * whether Surface app can navigate.\n\t * @param {!Event} event Event facade\n\t * @protected\n\t */\n\tonDocClickDelegate_(event) {\n\t\tif (event.altKey || event.ctrlKey || event.metaKey || event.shiftKey || event.button) {\n\t\t\tconsole.log('Navigate aborted, invalid mouse button or modifier key pressed.');\n\t\t\treturn;\n\t\t}\n\t\tthis.maybeNavigate_(event.delegateTarget.href, event);\n\t}\n\n\t/**\n\t * Intercepts document form submits and test action path in order to decide\n\t * whether Surface app can navigate.\n\t * @param {!Event} event Event facade\n\t * @protected\n\t */\n\tonDocSubmitDelegate_(event) {\n\t\tvar form = event.delegateTarget;\n\t\tif (form.method === 'get') {\n\t\t\tconsole.log('GET method not supported');\n\t\t\treturn;\n\t\t}\n\t\tevent.capturedFormElement = form;\n\t\tconst buttonSelector = 'button:not([type]),button[type=submit],input[type=submit]';\n\t\tif (match(globals.document.activeElement, buttonSelector)) {\n\t\t\tevent.capturedFormButtonElement = globals.document.activeElement;\n\t\t} else {\n\t\t\tevent.capturedFormButtonElement = form.querySelector(buttonSelector);\n\t\t}\n\t\tthis.maybeNavigate_(form.action, event);\n\t}\n\n\t/**\n\t * Listens to the window's load event in order to avoid issues with some browsers\n\t * that trigger popstate calls on the first load. For more information see\n\t * http://stackoverflow.com/questions/6421769/popstate-on-pages-load-in-chrome.\n\t * @protected\n\t */\n\tonLoad_() {\n\t\tthis.skipLoadPopstate = true;\n\t\tsetTimeout(() => {\n\t\t\t// The timeout ensures that popstate events will be unblocked right\n\t\t\t// after the load event occured, but not in the same event-loop cycle.\n\t\t\tthis.skipLoadPopstate = false;\n\t\t}, 0);\n\t\t// Try to reposition scroll to the hashed anchor when page loads.\n\t\tthis.maybeRepositionScrollToHashedAnchor();\n\t}\n\n\t/**\n\t * Handles browser history changes and fires app's navigation if the state\n\t * belows to us. If we detect a popstate and the state is <code>null</code>,\n\t * assume it is navigating to an external page or to a page we don't have\n\t * route, then <code>globals.window.location.reload()</code> is invoked in order to\n\t * reload the content to the current url.\n\t * @param {!Event} event Event facade\n\t * @protected\n\t */\n\tonPopstate_(event) {\n\t\tif (this.skipLoadPopstate) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Do not navigate if the popstate was triggered by a hash change.\n\t\tif (utils.isCurrentBrowserPath(this.browserPathBeforeNavigate)) {\n\t\t\tthis.maybeRepositionScrollToHashedAnchor();\n\t\t\treturn;\n\t\t}\n\n\t\tvar state = event.state;\n\n\t\tif (!state) {\n\t\t\tif (globals.window.location.hash) {\n\t\t\t\t// If senna is on an redirect path and a hash popstate happens\n\t\t\t\t// to a different url, reload the browser. This behavior doesn't\n\t\t\t\t// require senna to route hashed links and is closer to native\n\t\t\t\t// browser behavior.\n\t\t\t\tif (this.redirectPath && !utils.isCurrentBrowserPath(this.redirectPath)) {\n\t\t\t\t\tthis.reloadPage();\n\t\t\t\t}\n\t\t\t\t// Always try to reposition scroll to the hashed anchor when\n\t\t\t\t// hash popstate happens.\n\t\t\t\tthis.maybeRepositionScrollToHashedAnchor();\n\t\t\t} else {\n\t\t\t\tthis.reloadPage();\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\tif (state.senna) {\n\t\t\tconsole.log('History navigation to [' + state.path + ']');\n\t\t\tthis.popstateScrollTop = state.scrollTop;\n\t\t\tthis.popstateScrollLeft = state.scrollLeft;\n\t\t\tif (!this.nativeScrollRestorationSupported) {\n\t\t\t\tthis.lockHistoryScrollPosition_();\n\t\t\t}\n\t\t\tthis.once('endNavigate', () => {\n\t\t\t\tif (state.referrer) {\n\t\t\t\t\tutils.setReferrer(state.referrer);\n\t\t\t\t}\n\t\t\t});\n\t\t\tthis.navigate(state.path, true);\n\t\t}\n\t}\n\n\t/**\n\t * Listens document scroll changes in order to capture the possible lock\n\t * scroll position for history scrolling.\n\t * @protected\n\t */\n\tonScroll_() {\n\t\tif (this.captureScrollPositionFromScrollEvent) {\n\t\t\tthis.saveHistoryCurrentPageScrollPosition_(globals.window.pageYOffset, globals.window.pageXOffset);\n\t\t}\n\t}\n\n\t/**\n\t * Starts navigation to a path.\n\t * @param {!Event} event Event facade containing <code>path</code> and\n\t *     <code>replaceHistory</code>.\n\t * @protected\n\t */\n\tonStartNavigate_(event) {\n\t\tthis.maybeDisableNativeScrollRestoration();\n\t\tthis.captureScrollPositionFromScrollEvent = false;\n\t\taddClasses(globals.document.documentElement, this.loadingCssClass);\n\n\t\tvar endNavigatePayload = {\n\t\t\tform: event.form,\n\t\t\tpath: event.path\n\t\t};\n\n\t\tthis.pendingNavigate = this.doNavigate_(event.path, event.replaceHistory)\n\t\t\t.catch((reason) => {\n\t\t\t\tendNavigatePayload.error = reason;\n\t\t\t\tthrow reason;\n\t\t\t})\n\t\t\t.thenAlways(() => {\n\t\t\t\tif (!this.pendingNavigate) {\n\t\t\t\t\tremoveClasses(globals.document.documentElement, this.loadingCssClass);\n\t\t\t\t\tthis.maybeRestoreNativeScrollRestoration();\n\t\t\t\t\tthis.captureScrollPositionFromScrollEvent = true;\n\t\t\t\t}\n\t\t\t\tthis.emit('endNavigate', endNavigatePayload);\n\t\t\t});\n\n\t\tthis.pendingNavigate.path = event.path;\n\t}\n\n\t/**\n\t * Prefetches the specified path if there is a route handler that matches.\n\t * @param {!string} path Path to navigate containing the base path.\n\t * @return {CancellablePromise} Returns a pending request cancellable promise.\n\t */\n\tprefetch(path) {\n\t\tvar route = this.findRoute(path);\n\t\tif (!route) {\n\t\t\treturn CancellablePromise.reject(new CancellablePromise.CancellationError('No route for ' + path));\n\t\t}\n\n\t\tconsole.log('Prefetching [' + path + ']');\n\n\t\tvar nextScreen = this.createScreenInstance(path, route);\n\n\t\treturn nextScreen.load(path)\n\t\t\t.then(() => this.screens[path] = nextScreen)\n\t\t\t.catch((reason) => {\n\t\t\t\tthis.handleNavigateError_(path, nextScreen, reason);\n\t\t\t\tthrow reason;\n\t\t\t});\n\t}\n\n\t/**\n\t * Prepares screen flip. Updates history state and surfaces content.\n\t * @param {!string} path Path containing the querystring part.\n\t * @param {!Screen} nextScreen\n\t * @param {boolean=} opt_replaceHistory Replaces browser history.\n\t */\n\tprepareNavigateHistory_(path, nextScreen, opt_replaceHistory) {\n\t\tlet title = nextScreen.getTitle();\n\t\tif (!isString(title)) {\n\t\t\ttitle = this.getDefaultTitle();\n\t\t}\n\t\tlet redirectPath = nextScreen.beforeUpdateHistoryPath(path);\n\t\tconst historyState = {\n\t\t\tform: isDefAndNotNull(globals.capturedFormElement),\n\t\t\tpath,\n\t\t\tredirectPath,\n\t\t\tscrollLeft: 0,\n\t\t\tscrollTop: 0,\n\t\t\tsenna: true\n\t\t};\n\t\tif (opt_replaceHistory) {\n\t\t\thistoryState.scrollTop = this.popstateScrollTop;\n\t\t\thistoryState.scrollLeft = this.popstateScrollLeft;\n\t\t}\n\t\tconst hash = new Uri(path).getHash();\n\t\tredirectPath = this.maybeRestoreRedirectPathHash_(path, redirectPath, hash);\n\t\tthis.updateHistory_(title, redirectPath, nextScreen.beforeUpdateHistoryState(historyState), opt_replaceHistory);\n\t\tthis.redirectPath = redirectPath;\n\t}\n\n\t/**\n\t * Prepares screen flip. Updates history state and surfaces content.\n\t * @param {!Screen} nextScreen\n\t * @param {!Object} surfaces Map of surfaces to flip keyed by surface id.\n\t * @param {!Object} params Params extracted from the current path.\n\t */\n\tprepareNavigateSurfaces_(nextScreen, surfaces, params) {\n\t\tObject.keys(surfaces).forEach((id) => {\n\t\t\tvar surfaceContent = nextScreen.getSurfaceContent(id, params);\n\t\t\tsurfaces[id].addContent(nextScreen.getId(), surfaceContent);\n\t\t\tconsole.log('Screen [' + nextScreen.getId() + '] add content to surface ' +\n\t\t\t\t'[' + surfaces[id] + '] [' + (isDefAndNotNull(surfaceContent) ? '...' : 'empty') + ']');\n\t\t});\n\t}\n\n\t/**\n\t * Reloads the page by performing `window.location.reload()`.\n\t */\n\treloadPage() {\n\t\tglobals.window.location.reload();\n\t}\n\n\t/**\n\t * Removes route instance from app routes.\n\t * @param {Route} route\n\t * @return {boolean} True if an element was removed.\n\t */\n\tremoveRoute(route) {\n\t\treturn array.remove(this.routes, route);\n\t}\n\n\t/**\n\t * Removes a screen.\n\t * @param {!string} path Path containing the querystring part.\n\t */\n\tremoveScreen(path) {\n\t\tvar screen = this.screens[path];\n\t\tif (screen) {\n\t\t\tObject.keys(this.surfaces).forEach((surfaceId) => this.surfaces[surfaceId].remove(screen.getId()));\n\t\t\tscreen.dispose();\n\t\t\tdelete this.screens[path];\n\t\t}\n\t}\n\n\t/**\n\t * Saves given scroll position into history state.\n\t * @param {!number} scrollTop Number containing the top scroll position to be saved.\n\t * @param {!number} scrollLeft Number containing the left scroll position to be saved.\n\t */\n\tsaveHistoryCurrentPageScrollPosition_(scrollTop, scrollLeft) {\n\t\tvar state = globals.window.history.state;\n\t\tif (state && state.senna) {\n\t\t\t[state.scrollTop, state.scrollLeft] = [scrollTop, scrollLeft];\n\t\t\tglobals.window.history.replaceState(state, null, null);\n\t\t}\n\t}\n\n\t/**\n\t * Sets allow prevent navigate.\n\t * @param {boolean} allowPreventNavigate\n\t */\n\tsetAllowPreventNavigate(allowPreventNavigate) {\n\t\tthis.allowPreventNavigate = allowPreventNavigate;\n\t}\n\n\t/**\n\t * Sets link base path.\n\t * @param {!string} path\n\t */\n\tsetBasePath(basePath) {\n\t\tthis.basePath = utils.removePathTrailingSlash(basePath);\n\t}\n\n\t/**\n\t * Sets the default page title.\n\t * @param {string} defaultTitle\n\t */\n\tsetDefaultTitle(defaultTitle) {\n\t\tthis.defaultTitle = defaultTitle;\n\t}\n\n\t/**\n\t * Sets the form selector.\n\t * @param {!string} formSelector\n\t */\n\tsetFormSelector(formSelector) {\n\t\tthis.formSelector = formSelector;\n\t\tif (this.formEventHandler_) {\n\t\t\tthis.formEventHandler_.removeListener();\n\t\t}\n\t\tthis.formEventHandler_ = delegate(document, 'submit', this.formSelector, this.onDocSubmitDelegate_.bind(this), this.allowPreventNavigate);\n\t}\n\n\t/**\n\t * Sets if route matching should ignore query string from the route path.\n\t * @param {boolean} ignoreQueryStringFromRoutePath\n\t */\n\tsetIgnoreQueryStringFromRoutePath(ignoreQueryStringFromRoutePath) {\n\t\tthis.ignoreQueryStringFromRoutePath = ignoreQueryStringFromRoutePath;\n\t}\n\n\t/**\n\t * Sets the link selector.\n\t * @param {!string} linkSelector\n\t */\n\tsetLinkSelector(linkSelector) {\n\t\tthis.linkSelector = linkSelector;\n\t\tif (this.linkEventHandler_) {\n\t\t\tthis.linkEventHandler_.removeListener();\n\t\t}\n\t\tthis.linkEventHandler_ = delegate(document, 'click', this.linkSelector, this.onDocClickDelegate_.bind(this), this.allowPreventNavigate);\n\t}\n\n\t/**\n\t * Sets the loading css class.\n\t * @param {!string} loadingCssClass\n\t */\n\tsetLoadingCssClass(loadingCssClass) {\n\t\tthis.loadingCssClass = loadingCssClass;\n\t}\n\n\t/**\n\t * Sets the update scroll position value.\n\t * @param {boolean} updateScrollPosition\n\t */\n\tsetUpdateScrollPosition(updateScrollPosition) {\n\t\tthis.updateScrollPosition = updateScrollPosition;\n\t}\n\n\t/**\n\t * Cancels pending navigate with <code>Cancel pending navigation</code> error.\n\t * @protected\n\t */\n\tstopPendingNavigate_() {\n\t\tif (this.pendingNavigate) {\n\t\t\tthis.pendingNavigate.cancel('Cancel pending navigation');\n\t\t\tthis.pendingNavigate = null;\n\t\t}\n\t}\n\n\t/**\n\t * Sync document scroll position twice, the first one synchronous and then\n\t * one inside <code>async.nextTick</code>. Relevant to browsers that fires\n\t * scroll restoration asynchronously after popstate.\n\t * @protected\n\t * @return {?CancellablePromise=}\n\t */\n\tsyncScrollPositionSyncThenAsync_() {\n\t\tvar state = globals.window.history.state;\n\t\tif (!state) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar scrollTop = state.scrollTop;\n\t\tvar scrollLeft = state.scrollLeft;\n\n\t\tvar sync = () => {\n\t\t\tif (this.updateScrollPosition) {\n\t\t\t\tglobals.window.scrollTo(scrollLeft, scrollTop);\n\t\t\t}\n\t\t};\n\n\t\treturn new CancellablePromise((resolve) => sync() & async.nextTick(() => sync() & resolve()));\n\t}\n\n\t/**\n\t * Updates or replace browser history.\n\t * @param {?string} title Document title.\n\t * @param {!string} path Path containing the querystring part.\n\t * @param {!object} state\n\t * @param {boolean=} opt_replaceHistory Replaces browser history.\n\t * @protected\n\t */\n\tupdateHistory_(title, path, state, opt_replaceHistory) {\n\t\tconst referrer = globals.window.location.href;\n\n\t\tif (state) {\n\t\t\tstate.referrer = referrer;\n\t\t}\n\n\t\tif (opt_replaceHistory) {\n\t\t\tglobals.window.history.replaceState(state, title, path);\n\t\t} else {\n\t\t\tglobals.window.history.pushState(state, title, path);\n\t\t}\n\n\t\tutils.setReferrer(referrer);\n\n\t\tlet titleNode = globals.document.querySelector('title');\n\t\tif (titleNode) {\n\t\t\ttitleNode.innerHTML = title;\n\t\t} else {\n\t\t\tglobals.document.title = title;\n\t\t}\n\t}\n\n}\n\nexport default App;\n","'use strict';\n\nimport { isDef, isDefAndNotNull } from 'metal';\nimport Uri from 'metal-uri';\nimport { CancellablePromise as Promise } from 'metal-promise';\n\nclass Ajax {\n\n\t/**\n\t * XmlHttpRequest's getAllResponseHeaders() method returns a string of\n\t * response headers according to the format described on the spec:\n\t * {@link http://www.w3.org/TR/XMLHttpRequest/#the-getallresponseheaders-method}.\n\t * This method parses that string into a user-friendly name/value pair\n\t * object.\n\t * @param {string} allHeaders All headers as string.\n\t * @return {!Array.<Object<string, string>>}\n\t */\n\tstatic parseResponseHeaders(allHeaders) {\n\t\tvar headers = [];\n\t\tif (!allHeaders) {\n\t\t\treturn headers;\n\t\t}\n\t\tvar pairs = allHeaders.split('\\u000d\\u000a');\n\t\tfor (var i = 0; i < pairs.length; i++) {\n\t\t\tvar index = pairs[i].indexOf('\\u003a\\u0020');\n\t\t\tif (index > 0) {\n\t\t\t\tvar name = pairs[i].substring(0, index);\n\t\t\t\tvar value = pairs[i].substring(index + 2);\n\t\t\t\theaders.push({\n\t\t\t\t\tname: name,\n\t\t\t\t\tvalue: value\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\treturn headers;\n\t}\n\n\t/**\n\t * Requests the url using XMLHttpRequest.\n\t * @param {!string} url\n\t * @param {!string} method\n\t * @param {?string} body\n\t * @param {MultiMap=} opt_headers\n\t * @param {MultiMap=} opt_params\n\t * @param {number=} opt_timeout\n\t * @param {boolean=} opt_sync\n\t * @param {boolean=} opt_withCredentials\n\t * @return {Promise} Deferred ajax request.\n\t * @protected\n\t */\n\tstatic request(url, method, body, opt_headers, opt_params, opt_timeout, opt_sync, opt_withCredentials) {\n\t\turl = url || '';\n\t\tmethod = method || 'GET';\n\n\t\tvar request = new XMLHttpRequest();\n\t\tvar previousReadyState = 0;\n\n\t\tvar promise = new Promise(function(resolve, reject) {\n\t\t\trequest.onload = function() {\n\t\t\t\tif (request.aborted) {\n\t\t\t\t\trequest.onerror();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tresolve(request);\n\t\t\t};\n\t\t\trequest.onreadystatechange = function() {\n\t\t\t\tif (previousReadyState && previousReadyState < 3 && 4 === request.readyState) {\n\t\t\t\t\trequest.terminatedPrematurely = true;\n\t\t\t\t}\n\t\t\t\tpreviousReadyState = request.readyState;\n\t\t\t};\n\t\t\trequest.onerror = function() {\n\t\t\t\tvar message = 'Request error';\n\t\t\t\tif (request.terminatedPrematurely) {\n\t\t\t\t\tmessage = 'Request terminated prematurely';\n\t\t\t\t} \n\t\t\t\tvar error = new Error(message);\n\t\t\t\terror.request = request;\n\t\t\t\treject(error);\n\t\t\t};\n\t\t}).thenCatch(function(reason) {\n\t\t\trequest.abort();\n\t\t\tthrow reason;\n\t\t}).thenAlways(function() {\n\t\t\tclearTimeout(timeout);\n\t\t});\n\n\t\turl = new Uri(url);\n\n\t\tif (opt_params) {\n\t\t\turl.addParametersFromMultiMap(opt_params).toString();\n\t\t}\n\n\t\turl = url.toString();\n\n\t\trequest.open(method, url, !opt_sync);\n\n\t\tif (opt_withCredentials) {\n\t\t\trequest.withCredentials = true;\n\t\t}\n\n\t\tif (opt_headers) {\n\t\t\topt_headers.names().forEach(function(name) {\n\t\t\t\trequest.setRequestHeader(name, opt_headers.getAll(name).join(', '));\n\t\t\t});\n\t\t}\n\n\t\trequest.send(isDef(body) ? body : null);\n\n\t\tif (isDefAndNotNull(opt_timeout)) {\n\t\t\tvar timeout = setTimeout(function() {\n\t\t\t\tpromise.cancel('Request timeout');\n\t\t\t}, opt_timeout);\n\t\t}\n\n\t\treturn promise;\n\t}\n\n}\n\nexport default Ajax;\n","'use strict';\n\n/**\n * Holds value error messages.\n * @const\n */\nclass errors {\n}\n\n/**\n * Invalid status error message.\n * @type {string}\n * @static\n */\nerrors.INVALID_STATUS = 'Invalid status code';\n\n/**\n * Request error message.\n * @type {string}\n * @static\n */\nerrors.REQUEST_ERROR = 'Request error';\n\n/**\n * Request timeout error message.\n * @type {string}\n * @static\n */\nerrors.REQUEST_TIMEOUT = 'Request timeout';\n\n/**\n * Request is blocked by CORS issue message.\n * @type {string}\n * @static\n */\nerrors.REQUEST_PREMATURE_TERMINATION = 'Request terminated prematurely';\n\nexport default errors;\n","'use strict';\n\n/**\n * Metal.js browser user agent detection. It's extremely recommended the usage\n * of feature checking over browser user agent sniffing. Unfortunately, in some\n * situations feature checking can be slow or even impossible, therefore use\n * this utility with caution.\n * @see <a href=\"http://www.useragentstring.com/\">User agent strings</a>.\n */\nclass UA {\n\t/**\n\t * Gets the native userAgent string from navigator if it exists. If\n\t * navigator or navigator.userAgent string is missing, returns an empty\n\t * string.\n\t * @return {string}\n\t * @private\n\t * @static\n\t */\n\tstatic getNativeUserAgent() {\n\t\tvar navigator = UA.globals.window.navigator;\n\t\tif (navigator) {\n\t\t\tvar userAgent = navigator.userAgent;\n\t\t\tif (userAgent) {\n\t\t\t\treturn userAgent;\n\t\t\t}\n\t\t}\n\t\treturn '';\n\t}\n\n\t/**\n\t * Gets the native platform string from navigator if it exists. If\n\t * navigator or navigator.platform string is missing, returns an empty\n\t * string.\n\t * @return {string}\n\t * @private\n\t * @static\n\t */\n\tstatic getNativePlatform() {\n\t\tvar navigator = UA.globals.window.navigator;\n\t\tif (navigator) {\n\t\t\tvar platform = navigator.platform;\n\t\t\tif (platform) {\n\t\t\t\treturn platform;\n\t\t\t}\n\t\t}\n\t\treturn '';\n\t}\n\n\t/**\n\t * Whether the platform contains the given string, ignoring case.\n\t * @param {string} str\n\t * @return {boolean}\n\t * @private\n\t * @static\n\t*/\n\tstatic matchPlatform(str) {\n\t\treturn UA.platform.indexOf(str) !== -1;\n\t}\n\n\t/**\n\t * Whether the user agent contains the given string, ignoring case.\n\t * @param {string} str\n\t * @return {boolean}\n\t * @private\n\t * @static\n\t*/\n\tstatic matchUserAgent(str) {\n\t\treturn UA.userAgent.indexOf(str) !== -1;\n\t}\n\n\t/**\n\t * Tests the user agent.\n\t * @param {string} userAgent The user agent string.\n\t * @static\n\t */\n\tstatic testUserAgent(userAgent = '', platform = '') {\n\t\t/**\n\t\t * Holds the user agent value extracted from browser native user agent.\n\t\t * @type {string}\n\t\t * @static\n\t\t */\n\t\tUA.userAgent = userAgent;\n\n\t\t/**\n\t\t * Holds the platform value extracted from browser native platform.\n\t\t * @type {string}\n\t\t * @static\n\t\t */\n\t\tUA.platform = platform;\n\n\t\t/**\n\t\t * Whether the user's OS is Mac.\n\t\t * @type {boolean}\n\t\t * @static\n\t\t */\n\t\tUA.isMac = UA.matchPlatform('Mac');\n\n\t\t/**\n\t\t * Whether the user's OS is Win.\n\t\t * @type {boolean}\n\t\t * @static\n\t\t */\n\t\tUA.isWin = UA.matchPlatform('Win');\n\n\t\t/**\n\t\t * Whether the user's browser is Opera.\n\t\t * @type {boolean}\n\t\t * @static\n\t\t */\n\t\tUA.isOpera = UA.matchUserAgent('Opera') || UA.matchUserAgent('OPR');\n\n\t\t/**\n\t\t * Whether the user's browser is IE.\n\t\t * @type {boolean}\n\t\t * @static\n\t\t */\n\t\tUA.isIe = UA.matchUserAgent('Trident') || UA.matchUserAgent('MSIE');\n\n\t\t/**\n\t\t * Whether the user's browser is Edge.\n\t\t * @type {boolean}\n\t\t * @static\n\t\t */\n\t\tUA.isEdge = UA.matchUserAgent('Edge');\n\n\t\t/**\n\t\t * Whether the user's browser is IE or Edge.\n\t\t * @type {boolean}\n\t\t * @static\n\t\t */\n\t\tUA.isIeOrEdge = UA.isIe || UA.isEdge;\n\n\t\t/**\n\t\t * Whether the user's browser is Chrome.\n\t\t * @type {boolean}\n\t\t * @static\n\t\t */\n\t\tUA.isChrome = (UA.matchUserAgent('Chrome') || UA.matchUserAgent('CriOS')) && !UA.isOpera && !UA.isEdge;\n\n\t\t/**\n\t\t * Whether the user's browser is Safari.\n\t\t * @type {boolean}\n\t\t * @static\n\t\t */\n\t\tUA.isSafari = UA.matchUserAgent('Safari') && !(UA.isChrome || UA.isOpera || UA.isEdge);\n\n\t\t/**\n\t\t * Whether the user's browser is Firefox.\n\t\t * @type {boolean}\n\t\t * @static\n\t\t */\n\t\tUA.isFirefox = UA.matchUserAgent('Firefox');\n\t}\n}\n\n/**\n * Exposes global references.\n * @type {object}\n * @static\n */\nUA.globals = {\n\twindow: window\n};\n\nUA.testUserAgent(UA.getNativeUserAgent(), UA.getNativePlatform());\n\nexport default UA;\n","'use strict';\n\nimport { isDefAndNotNull } from 'metal';\nimport Ajax from 'metal-ajax';\nimport { MultiMap } from 'metal-structs';\nimport CancellablePromise from 'metal-promise';\nimport errors from '../errors/errors';\nimport utils from '../utils/utils';\nimport globals from '../globals/globals';\nimport Screen from './Screen';\nimport Uri from 'metal-uri';\nimport UA from 'metal-useragent';\n\nclass RequestScreen extends Screen {\n\n\t/**\n\t * Request screen abstract class to perform io operations on descendant\n\t * screens.\n\t * @constructor\n\t * @extends {Screen}\n\t */\n\tconstructor() {\n\t\tsuper();\n\n\t\t/**\n\t\t * @inheritDoc\n\t\t * @default true\n\t\t */\n\t\tthis.cacheable = true;\n\n\t\t/**\n\t\t * Holds default http headers to set on request.\n\t\t * @type {?Object=}\n\t\t * @default {\n\t\t *   'X-PJAX': 'true',\n\t\t *   'X-Requested-With': 'XMLHttpRequest'\n\t\t * }\n\t\t * @protected\n\t\t */\n\t\tthis.httpHeaders = {\n\t\t\t'X-PJAX': 'true',\n\t\t\t'X-Requested-With': 'XMLHttpRequest'\n\t\t};\n\n\t\t/**\n\t\t * Holds default http method to perform the request.\n\t\t * @type {!string}\n\t\t * @default RequestScreen.GET\n\t\t * @protected\n\t\t */\n\t\tthis.httpMethod = RequestScreen.GET;\n\n\t\t/**\n\t\t * Holds the XHR object responsible for the request.\n\t\t * @type {XMLHttpRequest}\n\t\t * @default null\n\t\t * @protected\n\t\t */\n\t\tthis.request = null;\n\n\t\t/**\n\t\t * Holds the request timeout in milliseconds.\n\t\t * @type {!number}\n\t\t * @default 30000\n\t\t * @protected\n\t\t */\n\t\tthis.timeout = 30000;\n\t}\n\n\t/**\n\t * Asserts that response status code is valid.\n\t * @param {number} status\n\t * @protected\n\t */\n\tassertValidResponseStatusCode(status) {\n\t\tif (!this.isValidResponseStatusCode(status)) {\n\t\t\tvar error = new Error(errors.INVALID_STATUS);\n\t\t\terror.invalidStatus = true;\n\t\t\terror.statusCode = status;\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tbeforeUpdateHistoryPath(path) {\n\t\tvar redirectPath = this.getRequestPath();\n\t\tif (redirectPath && redirectPath !== path) {\n\t\t\treturn redirectPath;\n\t\t}\n\t\treturn path;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tbeforeUpdateHistoryState(state) {\n\t\t// If state is ours and navigate to post-without-redirect-get set\n\t\t// history state to null, that way Senna will reload the page on\n\t\t// popstate since it cannot predict post data.\n\t\tif (state.senna && state.form && state.redirectPath === state.path) {\n\t\t\treturn null;\n\t\t}\n\t\treturn state;\n\t}\n\n\t/**\n\t * Formats load path before invoking ajax call.\n\t * @param {string} path\n\t * @return {string} Formatted path;\n\t * @protected\n\t */\n\tformatLoadPath(path) {\n\t\tvar uri = new Uri(path);\n\n\t\turi.setHostname(globals.window.location.hostname);\n\t\turi.setProtocol(globals.window.location.protocol);\n\n\t\tif (globals.window.location.port) {\n\t\t\turi.setPort(globals.window.location.port);\n\t\t}\n\n\t\tif (UA.isIeOrEdge && this.httpMethod === RequestScreen.GET) {\n\t\t\treturn uri.makeUnique().toString();\n\t\t}\n\n\t\treturn uri.toString();\n\t}\n\n\t/**\n\t * Gets the http headers.\n\t * @return {?Object=}\n\t */\n\tgetHttpHeaders() {\n\t\treturn this.httpHeaders;\n\t}\n\n\t/**\n\t * Gets the http method.\n\t * @return {!string}\n\t */\n\tgetHttpMethod() {\n\t\treturn this.httpMethod;\n\t}\n\n\t/**\n\t * Gets request path.\n\t * @return {string=}\n\t */\n\tgetRequestPath() {\n\t\tvar request = this.getRequest();\n\t\tif (request) {\n\t\t\tvar requestPath = request.requestPath;\n\t\t\tvar responseUrl = this.maybeExtractResponseUrlFromRequest(request);\n\t\t\tif (responseUrl) {\n\t\t\t\trequestPath = responseUrl;\n\t\t\t}\n\t\t\tif (UA.isIeOrEdge && this.httpMethod === RequestScreen.GET) {\n\t\t\t\trequestPath = new Uri(requestPath).removeUnique().toString();\n\t\t\t}\n\t\t\treturn utils.getUrlPath(requestPath);\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * Gets the request object.\n\t * @return {?Object}\n\t */\n\tgetRequest() {\n\t\treturn this.request;\n\t}\n\n\t/**\n\t * Gets the request timeout.\n\t * @return {!number}\n\t */\n\tgetTimeout() {\n\t\treturn this.timeout;\n\t}\n\n\t/**\n\t * Checks if response succeeded. Any status code 2xx or 3xx is considered\n\t * valid.\n\t * @param {number} statusCode\n\t */\n\tisValidResponseStatusCode(statusCode) {\n\t\treturn statusCode >= 200 && statusCode <= 399;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tload(path) {\n\t\tconst cache = this.getCache();\n\t\tif (isDefAndNotNull(cache)) {\n\t\t\treturn CancellablePromise.resolve(cache);\n\t\t}\n\t\tlet body = null;\n\t\tlet httpMethod = this.httpMethod;\n\t\tconst headers = new MultiMap();\n\t\tObject.keys(this.httpHeaders).forEach(header => headers.add(header, this.httpHeaders[header]));\n\t\tif (globals.capturedFormElement) {\n\t\t\tthis.addSafariXHRPolyfill();\n\t\t\tbody = new FormData(globals.capturedFormElement);\n\t\t\tthis.maybeAppendSubmitButtonValue_(body);\n\t\t\thttpMethod = RequestScreen.POST;\n\t\t\tif (UA.isIeOrEdge) {\n\t\t\t\theaders.add('If-None-Match', '\"0\"');\n\t\t\t}\n\t\t}\n\t\tconst requestPath = this.formatLoadPath(path);\n\t\treturn Ajax\n\t\t\t.request(requestPath, httpMethod, body, headers, null, this.timeout)\n\t\t\t.then(xhr => {\n\t\t\t\tthis.removeSafariXHRPolyfill();\n\t\t\t\tthis.setRequest(xhr);\n\t\t\t\tthis.assertValidResponseStatusCode(xhr.status);\n\t\t\t\tif (httpMethod === RequestScreen.GET && this.isCacheable()) {\n\t\t\t\t\tthis.addCache(xhr.responseText);\n\t\t\t\t}\n\t\t\t\txhr.requestPath = requestPath;\n\t\t\t\treturn xhr.responseText;\n\t\t\t})\n\t\t\t.catch((reason) => {\n\t\t\t\tthis.removeSafariXHRPolyfill();\n\t\t\t\tswitch (reason.message) {\n\t\t\t\t\tcase errors.REQUEST_TIMEOUT:\n\t\t\t\t\t\treason.timeout = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase errors.REQUEST_ERROR:\n\t\t\t\t\t\treason.requestError = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase errors.REQUEST_PREMATURE_TERMINATION:\n\t\t\t\t\t\treason.requestError = true;\n\t\t\t\t\t\treason.requestPrematureTermination = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tthrow reason;\n\t\t\t});\n\t}\n\n\t/**\n\t * Adds aditional data to the body of the request in case a submit button\n\t * is captured during form submission.\n\t * @param {!FormData} body The FormData containing the request body.\n\t * @protected\n\t */\n\tmaybeAppendSubmitButtonValue_(body) {\n\t\tconst button = globals.capturedFormButtonElement;\n\t\tif (button && button.name) {\n\t\t\tbody.append(button.name, button.value);\n\t\t}\n\t}\n\n\t/**\n\t * The following method tries to extract the response url value by checking\n\t * the custom response header 'X-Request-URL' if proper value is not present\n\t * in XMLHttpRequest. The value of responseURL will be the final URL\n\t * obtained after any redirects. Internet Explorer, Edge and Safari <= 7\n\t * does not yet support the feature. For more information see:\n\t * https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/responseURL\n\t * https://xhr.spec.whatwg.org/#the-responseurl-attribute\n\t * @param {XMLHttpRequest} request\n\t * @return {?string} Response url best match.\n\t */\n\tmaybeExtractResponseUrlFromRequest(request) {\n\t\tvar responseUrl = request.responseURL;\n\t\tif (responseUrl) {\n\t\t\treturn responseUrl;\n\t\t}\n\t\treturn request.getResponseHeader(RequestScreen.X_REQUEST_URL_HEADER);\n\t}\n\n\t/**\n\t * This function set attribute data-safari-temp-disabled to \n\t * true and set disable attribute of an input type=\"file\" tag\n\t * is used as a polyfill for iOS 11.3 Safari / macOS Safari 11.1 \n\t * empty <input type=\"file\"> XHR bug.\n\t * https://github.com/rails/rails/issues/32440\n\t * https://bugs.webkit.org/show_bug.cgi?id=184490\n\t */\n\taddSafariXHRPolyfill() {\n\t\tif (globals.capturedFormElement && UA.isSafari) {\n\t\t\tlet inputs = globals.capturedFormElement.querySelectorAll('input[type=\"file\"]:not([disabled])');\n\t\t\tfor (let index = 0; index < inputs.length; index++) {\n\t\t\t\tlet input = inputs[index];\n\t\t\t\tif (input.files.length > 0) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tinput.setAttribute('data-safari-temp-disabled', 'true');\n\t\t\t\tinput.setAttribute('disabled', '');\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * This function remove attribute data-safari-temp-disabled and disable attribute\n\t * of an input type=\"file\" tag is used as a polyfill for iOS 11.3 Safari / macOS Safari 11.1\n\t * empty <input type=\"file\"> XHR bug.\n\t * https://github.com/rails/rails/issues/32440\n\t * https://bugs.webkit.org/show_bug.cgi?id=184490\n\t */\n\tremoveSafariXHRPolyfill() {\n\t\tif (globals.capturedFormElement && UA.isSafari) {\n\t\t\tlet inputs = globals.capturedFormElement.querySelectorAll('input[type=\"file\"][data-safari-temp-disabled]');\n\t\t\tfor (let index = 0; index < inputs.length; index++) {\n\t\t\t\tconst input = inputs[index];\n\t\t\t\tinput.removeAttribute('data-safari-temp-disabled');\n\t\t\t\tinput.removeAttribute('disabled');\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Sets the http headers.\n\t * @param {?Object=} httpHeaders\n\t */\n\tsetHttpHeaders(httpHeaders) {\n\t\tthis.httpHeaders = httpHeaders;\n\t}\n\n\t/**\n\t * Sets the http method.\n\t * @param {!string} httpMethod\n\t */\n\tsetHttpMethod(httpMethod) {\n\t\tthis.httpMethod = httpMethod.toLowerCase();\n\t}\n\n\t/**\n\t * Sets the request object.\n\t * @param {?Object} request\n\t */\n\tsetRequest(request) {\n\t\tthis.request = request;\n\t}\n\n\t/**\n\t * Sets the request timeout in milliseconds.\n\t * @param {!number} timeout\n\t */\n\tsetTimeout(timeout) {\n\t\tthis.timeout = timeout;\n\t}\n\n}\n\n/**\n * Holds value for method get.\n * @type {string}\n * @default 'get'\n * @static\n */\nRequestScreen.GET = 'get';\n\n/**\n * Holds value for method post.\n * @type {string}\n * @default 'post'\n * @static\n */\nRequestScreen.POST = 'post';\n\n/**\n * Fallback http header to retrieve response request url.\n * @type {string}\n * @default 'X-Request-URL'\n * @static\n */\nRequestScreen.X_REQUEST_URL_HEADER = 'X-Request-URL';\n\nexport default RequestScreen;\n","'use strict';\n\nimport { getUid } from 'metal';\nimport { buildFragment, exitDocument, globalEval, globalEvalStyles, match } from 'metal-dom';\nimport CancellablePromise from 'metal-promise';\nimport globals from '../globals/globals';\nimport RequestScreen from './RequestScreen';\nimport Surface from '../surface/Surface';\nimport UA from 'metal-useragent';\nimport Uri from 'metal-uri';\nimport utils from '../utils/utils';\n\nclass HtmlScreen extends RequestScreen {\n\n\t/**\n\t * Screen class that perform a request and extracts surface contents from\n\t * the response content.\n\t * @constructor\n\t * @extends {RequestScreen}\n\t */\n\tconstructor() {\n\t\tsuper();\n\n\t\t/**\n\t\t * Holds the title selector. Relevant to extract the <code><title></code>\n\t\t * element from request fragments to use as the screen title.\n\t\t * @type {!string}\n\t\t * @default title\n\t\t * @protected\n\t\t */\n\t\tthis.titleSelector = 'title';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tactivate() {\n\t\tsuper.activate();\n\t\tthis.releaseVirtualDocument();\n\t\tthis.pendingStyles = null;\n\t}\n\n\t/**\n\t * Allocates virtual document for content. After allocated virtual document\n\t * can be accessed by <code>this.virtualDocument</code>.\n\t * @param {!string} htmlString\n\t */\n\tallocateVirtualDocumentForContent(htmlString) {\n\t\tif (!this.virtualDocument) {\n\t\t\tthis.virtualDocument = globals.document.createElement('html');\n\t\t}\n\n\t\tthis.copyNodeAttributesFromContent_(htmlString, this.virtualDocument);\n\n\t\tthis.virtualDocument.innerHTML = htmlString;\n\t}\n\n\t/**\n\t * Customizes logic to append styles into document. Relevant to when\n\t * tracking a style by id make sure to re-positions the new style in the\n\t * same dom order.\n\t * @param {Element} newStyle\n\t */\n\tappendStyleIntoDocument_(newStyle) {\n\t\tvar isTemporaryStyle = match(newStyle, HtmlScreen.selectors.stylesTemporary);\n\t\tif (isTemporaryStyle) {\n\t\t\tthis.pendingStyles.push(newStyle);\n\t\t}\n\t\tif (newStyle.id) {\n\t\t\tvar styleInDoc = globals.document.getElementById(newStyle.id);\n\t\t\tif (styleInDoc) {\n\t\t\t\tstyleInDoc.parentNode.insertBefore(newStyle, styleInDoc.nextSibling);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tglobals.document.head.appendChild(newStyle);\n\t}\n\n\t/**\n\t * If body is used as surface forces the requested documents to have same id\n\t * of the initial page.\n\t */\n\tassertSameBodyIdInVirtualDocument() {\n\t\tvar bodySurface = this.virtualDocument.querySelector('body');\n\t\tif (!globals.document.body.id) {\n\t\t\tglobals.document.body.id = 'senna_surface_' + getUid();\n\t\t}\n\t\tif (bodySurface) {\n\t\t\tbodySurface.id = globals.document.body.id;\n\t\t}\n\t}\n\n\t/**\n\t * Copies attributes from the <html> tag of content to the given node.\n\t */\n\tcopyNodeAttributesFromContent_(content, node) {\n\t\tcontent = content.replace(/[<]\\s*html/ig, '<senna');\n\t\tcontent = content.replace(/\\/html\\s*\\>/ig, '/senna>');\n\t\tnode.innerHTML = content;\n\t\tvar placeholder = node.querySelector('senna');\n\t\tif (placeholder) {\n\t\t\tutils.clearNodeAttributes(node);\n\t\t\tutils.copyNodeAttributes(placeholder, node);\n\t\t}\n\t}\n\n\t/**\n\t * @Override\n\t */\n\tdisposeInternal() {\n\t\tthis.disposePendingStyles();\n\t\tsuper.disposeInternal();\n\t}\n\n\t/**\n\t * Disposes pending styles if screen get disposed prior to its loading.\n\t */\n\tdisposePendingStyles() {\n\t\tif (this.pendingStyles) {\n\t\t\tthis.pendingStyles.forEach((style) => exitDocument(style));\n\t\t}\n\t}\n\n\t/**\n\t * @Override\n\t */\n\tevaluateScripts(surfaces) {\n\t\tvar evaluateTrackedScripts = this.evaluateTrackedResources_(\n\t\t\tglobalEval.runScriptsInElement, HtmlScreen.selectors.scripts,\n\t\t\tHtmlScreen.selectors.scriptsTemporary, HtmlScreen.selectors.scriptsPermanent);\n\n\t\treturn evaluateTrackedScripts.then(() => super.evaluateScripts(surfaces));\n\t}\n\n\t/**\n\t * @Override\n\t */\n\tevaluateStyles(surfaces) {\n\t\tthis.pendingStyles = [];\n\t\tvar evaluateTrackedStyles = this.evaluateTrackedResources_(\n\t\t\tglobalEvalStyles.runStylesInElement, HtmlScreen.selectors.styles,\n\t\t\tHtmlScreen.selectors.stylesTemporary, HtmlScreen.selectors.stylesPermanent,\n\t\t\tthis.appendStyleIntoDocument_.bind(this));\n\n\t\treturn evaluateTrackedStyles.then(() => super.evaluateStyles(surfaces));\n\t}\n\n\t/**\n\t * Evaluates tracked resources inside incoming fragment and remove existing\n\t * temporary resources.\n\t * @param {?function()} appendFn Function to append the node into document.\n\t * @param {!string} selector Selector used to find resources to track.\n\t * @param {!string} selectorTemporary Selector used to find temporary\n\t *     resources to track.\n\t * @param {!string} selectorPermanent Selector used to find permanent\n\t *     resources to track.\n\t * @param {!function} opt_appendResourceFn Optional function used to\n\t *     evaluate fragment containing resources.\n\t * @return {CancellablePromise} Deferred that waits resources evaluation to\n\t *     complete.\n\t * @private\n\t */\n\tevaluateTrackedResources_(evaluatorFn, selector, selectorTemporary, selectorPermanent, opt_appendResourceFn) {\n\t\tvar tracked = this.virtualQuerySelectorAll_(selector);\n\t\tvar temporariesInDoc = this.querySelectorAll_(selectorTemporary);\n\t\tvar permanentsInDoc = this.querySelectorAll_(selectorPermanent);\n\n\t\t// Adds permanent resources in document to cache.\n\t\tpermanentsInDoc.forEach((resource) => {\n\t\t\tvar resourceKey = this.getResourceKey_(resource);\n\t\t\tif (resourceKey) {\n\t\t\t\tHtmlScreen.permanentResourcesInDoc[resourceKey] = true;\n\t\t\t}\n\t\t});\n\n\t\tvar frag = buildFragment();\n\t\ttracked.forEach((resource) => {\n\t\t\tvar resourceKey = this.getResourceKey_(resource);\n\t\t\t// Do not load permanent resources if already in document.\n\t\t\tif (!HtmlScreen.permanentResourcesInDoc[resourceKey]) {\n\t\t\t\tfrag.appendChild(resource);\n\t\t\t}\n\t\t\t// If resource has key and is permanent add to cache.\n\t\t\tif (resourceKey && match(resource, selectorPermanent)) {\n\t\t\t\tHtmlScreen.permanentResourcesInDoc[resourceKey] = true;\n\t\t\t}\n\t\t});\n\n\t\treturn new CancellablePromise((resolve) => {\n\t\t\tevaluatorFn(frag, () => {\n\t\t\t\ttemporariesInDoc.forEach((resource) => exitDocument(resource));\n\t\t\t\tresolve();\n\t\t\t}, opt_appendResourceFn);\n\t\t});\n\t}\n\n\t/**\n\t * @Override\n\t */\n\tflip(surfaces) {\n\t\treturn super.flip(surfaces).then(() => {\n\t\t\tutils.clearNodeAttributes(document.documentElement);\n\t\t\tutils.copyNodeAttributes(this.virtualDocument, document.documentElement);\n\t\t});\n\t}\n\n\t/**\n\t * Extracts a key to identify the resource based on its attributes.\n\t * @param {Element} resource\n\t * @return {string} Extracted key based on resource attributes in order of\n\t *     preference: id, href, src.\n\t */\n\tgetResourceKey_(resource) {\n\t\treturn resource.id || resource.href || resource.src || '';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tgetSurfaceContent(surfaceId) {\n\t\tvar surface = this.virtualDocument.querySelector('#' + surfaceId);\n\t\tif (surface) {\n\t\t\tvar defaultChild = surface.querySelector('#' + surfaceId + '-' + Surface.DEFAULT);\n\t\t\tif (defaultChild) {\n\t\t\t\treturn defaultChild.innerHTML;\n\t\t\t}\n\t\t\treturn surface.innerHTML; // If default content not found, use surface content\n\t\t}\n\t}\n\n\t/**\n\t * Gets the title selector.\n\t * @return {!string}\n\t */\n\tgetTitleSelector() {\n\t\treturn this.titleSelector;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tload(path) {\n\t\treturn super.load(path)\n\t\t\t.then(content => {\n\t\t\t\tthis.allocateVirtualDocumentForContent(content);\n\t\t\t\tthis.resolveTitleFromVirtualDocument();\n\t\t\t\tthis.assertSameBodyIdInVirtualDocument();\n\t\t\t\tif (UA.isIe) {\n\t\t\t\t\tthis.makeTemporaryStylesHrefsUnique_();\n\t\t\t\t}\n\t\t\t\treturn content;\n\t\t\t});\n\t}\n\n\t/**\n\t * Queries temporary styles from virtual document, and makes them unique.\n\t * This is necessary for caching and load event firing issues specific to\n\t * IE11. https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/7940171/\n\t */\n\tmakeTemporaryStylesHrefsUnique_() {\n\t\tvar temporariesInDoc = this.virtualQuerySelectorAll_(HtmlScreen.selectors.stylesTemporary);\n\t\ttemporariesInDoc.forEach((style) => this.replaceStyleAndMakeUnique_(style));\n\t}\n\n\t/**\n\t * Creates a new element from given, copies attributes, mutates href to be\n\t * unique to prevent caching and more than one load/error event from firing.\n\t */\n\treplaceStyleAndMakeUnique_(style) {\n\t\tif (style.href) {\n\t\t\tvar newStyle = globals.document.createElement(style.tagName);\n\t\t\tstyle.href = new Uri(style.href).makeUnique().toString();\n\t\t\tutils.copyNodeAttributes(style, newStyle);\n\t\t\tstyle.parentNode.replaceChild(newStyle, style);\n\t\t\tstyle.disabled = true;\n\t\t}\n\t}\n\n\t/**\n\t * Queries elements from virtual document and returns an array of elements.\n\t * @param {!string} selector\n\t * @return {array.<Element>}\n\t */\n\tvirtualQuerySelectorAll_(selector) {\n\t\treturn Array.prototype.slice.call(this.virtualDocument.querySelectorAll(selector));\n\t}\n\n\t/**\n\t * Queries elements from document and returns an array of elements.\n\t * @param {!string} selector\n\t * @return {array.<Element>}\n\t */\n\tquerySelectorAll_(selector) {\n\t\treturn Array.prototype.slice.call(globals.document.querySelectorAll(selector));\n\t}\n\n\t/**\n\t * Releases virtual document allocated for content.\n\t */\n\treleaseVirtualDocument() {\n\t\tthis.virtualDocument = null;\n\t}\n\n\t/**\n\t * Resolves title from allocated virtual document.\n\t */\n\tresolveTitleFromVirtualDocument() {\n\t\tvar title = this.virtualDocument.querySelector(this.titleSelector);\n\t\tif (title) {\n\t\t\tthis.setTitle(title.textContent.trim());\n\t\t}\n\t}\n\n\t/**\n\t * Sets the title selector.\n\t * @param {!string} titleSelector\n\t */\n\tsetTitleSelector(titleSelector) {\n\t\tthis.titleSelector = titleSelector;\n\t}\n\n}\n\n/**\n * Helper selectors for tracking resources.\n * @type {object}\n * @protected\n * @static\n */\nHtmlScreen.selectors = {\n\tscripts: 'script[data-senna-track]',\n\tscriptsPermanent: 'script[data-senna-track=\"permanent\"]',\n\tscriptsTemporary: 'script[data-senna-track=\"temporary\"]',\n\tstyles: 'style[data-senna-track],link[data-senna-track]',\n\tstylesPermanent: 'style[data-senna-track=\"permanent\"],link[data-senna-track=\"permanent\"]',\n\tstylesTemporary: 'style[data-senna-track=\"temporary\"],link[data-senna-track=\"temporary\"]'\n};\n\n/**\n * Caches permanent resource keys.\n * @type {object}\n * @protected\n * @static\n */\nHtmlScreen.permanentResourcesInDoc = {};\n\nexport default HtmlScreen;\n","'use strict';\n\nimport { Disposable, getUid, isDefAndNotNull, isElement, object } from 'metal';\nimport dataAttributes from './dataAttributes';\nimport globals from '../globals/globals';\nimport App from './App';\nimport HtmlScreen from '../screen/HtmlScreen';\nimport Route from '../route/Route';\n\nclass AppDataAttributeHandler extends Disposable {\n\n\t/**\n\t * Initilizes App, register surfaces and routes from data attributes.\n\t * @constructor\n\t */\n\tconstructor() {\n\t\tsuper();\n\n\t\t/**\n\t\t * Holds the app reference initialized by data attributes.\n\t\t * @type {App}\n\t\t * @default null\n\t\t */\n\t\tthis.app = null;\n\n\t\t/**\n\t\t * Holds the base element to search initialization data attributes. This\n\t\t * element is the container used to enable initialization based on the\n\t\t * presence of `data-senna` attribute.\n\t\t * @type {Element}\n\t\t * @default null\n\t\t */\n\t\tthis.baseElement = null;\n\t}\n\n\t/**\n\t * Inits application based on information scanned from document.\n\t */\n\thandle() {\n\t\tif (!isElement(this.baseElement)) {\n\t\t\tthrow new Error('Senna data attribute handler base element ' +\n\t\t\t\t'not set or invalid, try setting a valid element that ' +\n\t\t\t\t'contains a `data-senna` attribute.');\n\t\t}\n\n\t\tif (!this.baseElement.hasAttribute(dataAttributes.senna)) {\n\t\t\tconsole.log('Senna was not initialized from data attributes. ' +\n\t\t\t\t'In order to enable its usage from data attributes try setting ' +\n\t\t\t\t'in the base element, e.g. `<body data-senna>`.');\n\t\t\treturn;\n\t\t}\n\n\t\tif (this.app) {\n\t\t\tthrow new Error('Senna app was already initialized.');\n\t\t}\n\n\t\tconsole.log('Senna initialized from data attribute.');\n\n\t\tthis.app = new App();\n\t\tthis.maybeAddRoutes_();\n\t\tthis.maybeAddSurfaces_();\n\t\tthis.maybeSetBasePath_();\n\t\tthis.maybeSetLinkSelector_();\n\t\tthis.maybeSetLoadingCssClass_();\n\t\tthis.maybeSetUpdateScrollPosition_();\n\t\tthis.maybeDispatch_();\n\t}\n\n\t/**\n\t * Disposes of this instance's object references.\n\t * @override\n\t */\n\tdisposeInternal() {\n\t\tif (this.app) {\n\t\t\tthis.app.dispose();\n\t\t}\n\t}\n\n\t/**\n\t * Gets the app reference.\n\t * @return {App}\n\t */\n\tgetApp() {\n\t\treturn this.app;\n\t}\n\n\t/**\n\t * Gets the base element.\n\t * @return {Element} baseElement\n\t */\n\tgetBaseElement() {\n\t\treturn this.baseElement;\n\t}\n\n\t/**\n\t * Maybe adds app routes from link elements that are `senna-route`.\n\t */\n\tmaybeAddRoutes_() {\n\t\tvar routesSelector = 'link[rel=\"senna-route\"]';\n\t\tthis.querySelectorAllAsArray_(routesSelector).forEach((link) => this.maybeParseLinkRoute_(link));\n\t\tif (!this.app.hasRoutes()) {\n\t\t\tthis.app.addRoutes(new Route(/.*/, HtmlScreen));\n\t\t\tconsole.log('Senna can\\'t find route elements, adding default.');\n\t\t}\n\t}\n\n\t/**\n\t * Maybe adds app surfaces by scanning `data-senna-surface` data attribute.\n\t */\n\tmaybeAddSurfaces_() {\n\t\tvar surfacesSelector = '[' + dataAttributes.surface + ']';\n\t\tthis.querySelectorAllAsArray_(surfacesSelector).forEach((surfaceElement) => {\n\t\t\tthis.updateElementIdIfSpecialSurface_(surfaceElement);\n\t\t\tthis.app.addSurfaces(surfaceElement.id);\n\t\t});\n\t}\n\n\t/**\n\t * Dispatches app navigation to the current path when initializes.\n\t */\n\tmaybeDispatch_() {\n\t\tif (this.baseElement.hasAttribute(dataAttributes.dispatch)) {\n\t\t\tthis.app.dispatch();\n\t\t}\n\t}\n\n\t/**\n\t * Adds app route by parsing valid link elements. A valid link element is of\n\t * the kind `rel=\"senna-route\"`.\n\t * @param {Element} link\n\t */\n\tmaybeParseLinkRoute_(link) {\n\t\tvar route = new Route(this.maybeParseLinkRoutePath_(link), this.maybeParseLinkRouteHandler_(link));\n\t\tthis.app.addRoutes(route);\n\t\tconsole.log('Senna scanned route ' + route.getPath());\n\t}\n\n\t/**\n\t * Maybe parse link route handler.\n\t * @param {Element} link\n\t * @return {?string}\n\t */\n\tmaybeParseLinkRouteHandler_(link) {\n\t\tvar handler = link.getAttribute('type');\n\t\tif (isDefAndNotNull(handler)) {\n\t\t\thandler = object.getObjectByName(handler);\n\t\t}\n\t\treturn handler;\n\t}\n\n\t/**\n\t * Maybe parse link route path.\n\t * @param {Element} link\n\t * @return {?string}\n\t */\n\tmaybeParseLinkRoutePath_(link) {\n\t\tvar path = link.getAttribute('href');\n\t\tif (isDefAndNotNull(path)) {\n\t\t\tif (path.indexOf('regex:') === 0) {\n\t\t\t\tpath = new RegExp(path.substring(6));\n\t\t\t}\n\t\t}\n\t\treturn path;\n\t}\n\n\t/**\n\t * Maybe sets app base path from `data-senna-base-path` data attribute.\n\t */\n\tmaybeSetBasePath_() {\n\t\tvar basePath = this.baseElement.getAttribute(dataAttributes.basePath);\n\t\tif (isDefAndNotNull(basePath)) {\n\t\t\tthis.app.setBasePath(basePath);\n\t\t\tconsole.log('Senna scanned base path ' + basePath);\n\t\t}\n\t}\n\n\t/**\n\t * Maybe sets app link selector from `data-senna-link-selector` data\n\t * attribute.\n\t */\n\tmaybeSetLinkSelector_() {\n\t\tvar linkSelector = this.baseElement.getAttribute(dataAttributes.linkSelector);\n\t\tif (isDefAndNotNull(linkSelector)) {\n\t\t\tthis.app.setLinkSelector(linkSelector);\n\t\t\tconsole.log('Senna scanned link selector ' + linkSelector);\n\t\t}\n\t}\n\n\t/**\n\t * Maybe sets app link loading css class from `data-senna-loading-css-class`\n\t * data attribute.\n\t */\n\tmaybeSetLoadingCssClass_() {\n\t\tvar loadingCssClass = this.baseElement.getAttribute(dataAttributes.loadingCssClass);\n\t\tif (isDefAndNotNull(loadingCssClass)) {\n\t\t\tthis.app.setLoadingCssClass(loadingCssClass);\n\t\t\tconsole.log('Senna scanned loading css class ' + loadingCssClass);\n\t\t}\n\t}\n\n\t/**\n\t * Maybe sets app update scroll position from\n\t * `data-senna-update-scroll-position` data attribute.\n\t */\n\tmaybeSetUpdateScrollPosition_() {\n\t\tvar updateScrollPosition = this.baseElement.getAttribute(dataAttributes.updateScrollPosition);\n\t\tif (isDefAndNotNull(updateScrollPosition)) {\n\t\t\tif (updateScrollPosition === 'false') {\n\t\t\t\tthis.app.setUpdateScrollPosition(false);\n\t\t\t} else {\n\t\t\t\tthis.app.setUpdateScrollPosition(true);\n\t\t\t}\n\t\t\tconsole.log('Senna scanned update scroll position ' + updateScrollPosition);\n\t\t}\n\t}\n\n\t/**\n\t * Queries elements from document and returns an array of elements.\n\t * @param {!string} selector\n\t * @return {array.<Element>}\n\t */\n\tquerySelectorAllAsArray_(selector) {\n\t\treturn Array.prototype.slice.call(globals.document.querySelectorAll(selector));\n\t}\n\n\t/**\n\t * Updates element id if handled as special surface element. Some surfaces\n\t * are slightly different from others, like when threating <code>body</code>\n\t * as surface.\n\t * @param {Element} element\n\t */\n\tupdateElementIdIfSpecialSurface_(element) {\n\t\tif (!element.id && element === globals.document.body) {\n\t\t\telement.id = 'senna_surface_' + getUid();\n\t\t}\n\t}\n\n\t/**\n\t * Sets the base element.\n\t * @param {Element} baseElement\n\t */\n\tsetBaseElement(baseElement) {\n\t\tthis.baseElement = baseElement;\n\t}\n\n}\n\nexport default AppDataAttributeHandler;\n","'use strict';\n\nimport globals from '../globals/globals';\nimport AppDataAttributeHandler from './AppDataAttributeHandler';\n\n/**\n * Data attribute handler.\n * @type {AppDataAttributeHandler}\n */\nvar dataAttributeHandler = new AppDataAttributeHandler();\n\nglobals.document.addEventListener('DOMContentLoaded', function() {\n\tdataAttributeHandler.setBaseElement(globals.document.body);\n\tdataAttributeHandler.handle();\n});\n\nexport default dataAttributeHandler;","/**\n * @returns String current senna version\n */\nexport default '<%= version %>';"],"names":["globals","window","document","compatibilityModeData_","uniqueIdCounter_","UID_PROPERTY","Math","random","abstractMethod","Error","disableCompatibilityMode","undefined","enableCompatibilityMode","opt_data","getCompatibilityModeData","__METAL_COMPATIBILITY__","getFirstTruthy_","a","b","getFunctionName","fn","name","str","toString","substring","indexOf","getStaticProperty","ctor","propertyName","opt_mergeFn","mergedName","hasOwnProperty","merged","__proto__","isPrototypeOf","Function","mergeFn","getUid","opt_object","opt_noInheritance","id","identityFunction","opt_returnValue","isBoolean","val","isDef","isDefAndNotNull","isNull","isDocument","nodeType","isDocumentFragment","isElement","isFunction","isNumber","isWindow","isObject","type","isPromise","then","isString","String","isServerSide","process","env","NODE_ENV","browser","nullFunction","array","arr1","arr2","length","i","arr","opt_output","output","Array","isArray","flatten","push","obj","rv","removeAt","prototype","splice","call","start","opt_end","sliced","end","async","throwException","exception","nextTick","run","callback","opt_context","workQueueScheduled_","processWorkQueue","workQueue_","WorkItem_","workItems","workItem","scope","e","cb","bind","wrapCallback_","setImmediate","setImmediate_","getSetImmediateEmulator_","Channel","MessageChannel","postMessage","addEventListener","iframe","createElement","style","display","src","documentElement","appendChild","win","contentWindow","doc","open","write","close","message","origin","location","protocol","host","onmessage","data","port1","port2","channel","head","tail","next","script","onreadystatechange","parentNode","removeChild","Disposable","disposed_","disposeInternal","object","target","key","source","arguments","opt_obj","parts","split","reduce","part","mappedObj","keys","Object","obj1","obj2","keys1","keys2","string","str1","str2","test1","toLowerCase","test2","replace","x","floor","abs","Date","now","hash","len","charCodeAt","value","parseFromAnchor","opt_uri","link","href","test","TypeError","hostname","password","pathname","port","search","username","parse","URL","url","create","MultiMap","values","size","map","names","JSON","stringify","set","TreeNode","value_","parent_","children_","child","setParent","node","current","getParent","ancestors","index","getChildren","EMPTY_ARRAY","depth","root","getChildCount","remove","parent","opt_preorderFn","opt_postorderFn","forEach","traverse","assertChildHasNoParent","parseFn_","Uri","maybeAddProtocolAndHostname_","multimap","getAll","addParameterValue","ensureQueryInitialized_","query","add","param","urlDecode","getHostname","getPort","HOSTNAME_PLACEHOLDER","getHost","getProtocol","get","querystring","getParameterNames","getParameterValues","encodeURIComponent","slice","contains","setParameterValue","RANDOM_PARAM","getRandomString","DEFAULT_PROTOCOL","charAt","removeParameter","getPathname","getSearch","getHash","parseFn","basePath","paths","path","concat","join","decodeURIComponent","isSecure","utils","attributes","attribute","setAttribute","getCurrentBrowserPathWithoutHash","offsetLeft","offsetTop","offsetParent","uri","currentBrowserPath","getUrlPathWithoutHash","getUrlPath","history","pushState","err","error","removeAttribute","substr","referrer","defineProperty","METAL_DATA","domData","element","opt_name","opt_initialVal","EventHandle","emitter","event","listener","emitter_","event_","listener_","removeListener","isDisposed","singleArray_","EventEmitter","events_","listenerHandlers_","shouldUseFacade_","holder","handler","opt_default","validateListener_","events","toEventsArray_","addSingleListener_","opt_origin","runListenerHandlers_","addHandler_","getShouldUseFacade","facade","preventedDefault","listeners","getRawListeners_","args","runListeners_","buildFacade_","directListeners","toArray","amount","many_","self","handlerInternal","apply","listenerObj","removeMatchingListenerObjs_","addListener","many","opt_events","listenerObjs","finalListeners","matchesListener_","off","handlers","defaultListeners","default","j","shouldUseFacade","EventEmitterProxy","originEmitter","targetEmitter","opt_blacklist","opt_whitelist","blacklist_","originEmitter_","pendingEvents_","proxiedEvents_","targetEmitter_","whitelist_","startProxy_","on","removeListeners_","emit","shouldProxyEvent_","tryToAddListener_","proxyEvent","onListener","addListener_","emitOnTarget_","EventHandler","eventHandles_","DomDelegatedEventHandle","opt_selector","selector_","delegating","selector","selectors","DomEventHandle","opt_capture","capture_","removeEventListener","elementsByTag_","supportCache_","customEvents","LAST_CONTAINER","USE_CAPTURE","addClasses","elements","classes","addClassesWithNative_","className","classList","addClassesWithoutNative_","elementClassName","classesToAppend","addElementListener_","eventName","addSelectorListener_","delegatingData","addToArr_","attachDelegateEvent_","handleDelegateEvent_","closest","match","append","buildFragment","NodeList","childArr","htmlString","tempDiv","innerHTML","firstChild","fragment","createDocumentFragment","element1","element2","delegate","selectorOrTarget","customConfig","originalEvent","defaultListener_","isAbleToInteractWith_","opt_eventObj","button","matchesSelector","tagName","disabled","exitDocument","ret","container","currentTarget","defFns","triggerDelegatedListeners_","triggerDefaultDelegatedListeners_","delegateTarget","p","Element","m","matches","webkitMatchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector","matchFallback_","nodes","querySelectorAll","normalizeDelegateEvent_","stopPropagation","stopPropagation_","stopImmediatePropagation","stopImmediatePropagation_","once","domEventHandle","registerCustomEvent","removeChildren","removeClasses","removeClassesWithNative_","removeClassesWithoutNative_","trim","stopped","stoppedImmediate","supportsEvent","tag","defaultPrevented","defaultFns","currElement","limit","triggerElementListeners_","triggerSelectorListeners_","lastContainer","triggerListeners_","DomEventEmitterProxy","isDelegateEvent_","babelHelpers.get","isSupportedDomEvent_","features","animationEventName_","checkAnimationEventName_","prefixes","typeTitleCase","replaceInterval","toUpperCase","suffixes","animationElement_","attrOrderChange_","originalContent","globalEval","text","opt_appendFn","opt_callback","runFile","scripts","runScriptsInOrder","runScript","item","globalEvalStyles","rel","runStyle","styles","loadCount","mouseEventMap","related","relatedTarget","customType","animationEventMap","eventType","checkAnimationEventName","Thenable","IMPLEMENTED_BY_PROP","addImplementation","$goog_Thenable","isImplementedBy","partial","newArgs","CancellablePromise","resolver","state_","State_","PENDING","result_","callbackEntries_","executing_","UNHANDLED_REJECTION_DELAY","unhandledRejectionId_","hadUnhandledRejection_","resolve_","FULFILLED","reason","REJECTED","CallbackEntry_","resolve","opt_value","reject","opt_reason","race","promises","promise","all","toFulfill","onFulfill","onReject","firstFulfilled","toReject","reasons","opt_onFulfilled","opt_onRejected","addChildPromise_","thenAlways","onResolved","handleRejection_","addCallbackEntry_","thenCatch","onRejected","catch","cancel","opt_message","CancellationError","IS_CANCELLATION_ERROR","cancelInternal_","cancelChild_","childPromise","childCount","childIndex","entry","callbackEntry","executeCallback_","scheduleCallbacks_","onFulfilled","result","unblockAndFulfill_","BLOCKED","unblockAndReject_","state","tryThen_","addUnhandledRejection_","thenable","called","executeCallbacks_","entries","removeUnhandledRejection_","setTimeout","setUnhandledRejectionHandler","debounce","delay","debounced","cancelDebounce","REGEX","convertMatchesToObj","convertTokensToRegex","tokens","regex","core","escape","capture","encloseNonCapturingGroup","pattern","repeat","prefix","optional","RegExp","makeTrailingSlashOptional","routeOrTokens","route","unnamedCount","currPath","exec","paramPattern","unnamedPattern","modifier","toRegex","extractData","paramIndex","Route","parsedData_","buildParsedData_","Cacheable","cache","cacheable","content","clearCache","Screen","makeId_","title","log","surfaces","sId","activeChild","runScriptsInElement","transitions","surface","deferred","show","Surface","defaultChild","transitionFn","getChild","DEFAULT","maybeWrapContentAsDefault_","screenId","opt_content","createChild","transition","getElement","getElementById","addContent","from","to","defaultTransition","App","activeScreen","activePath","allowPreventNavigate","browserPathBeforeNavigate","captureScrollPositionFromScrollEvent","defaultTitle","formSelector","ignoreQueryStringFromRoutePath","linkSelector","loadingCssClass","nativeScrollRestorationSupported","isNavigationPending","pendingNavigate","popstateScrollLeft","popstateScrollTop","redirectPath","routes","screens","skipLoadPopstate","updateScrollPosition","appEventHandlers_","onScroll_","onLoad_","onPopstate_","onStartNavigate_","onBeforeNavigate_","onBeforeNavigateDefault_","onBeforeUnloadDefault_","setLinkSelector","setFormSelector","maybeOverloadBeforeUnload_","getId","isWebUri","isLinkSameOrigin_","isSameBasePath_","isCurrentBrowserPath","findRoute","removeScreen","screen","getHandler","clearScreensCache","formEventHandler_","linkEventHandler_","removeAllListeners","navigate","getCurrentBrowserPath","opt_replaceHistory","stopPendingNavigate_","nextScreen","createScreenInstance","maybePreventDeactivate_","maybePreventActivate_","load","deactivate","prepareNavigateHistory_","prepareNavigateSurfaces_","extractParams","evaluateStyles","flip","evaluateScripts","maybeUpdateScrollPositionState_","syncScrollPositionSyncThenAsync_","finalizeNavigate_","handleNavigateError_","getRoutePath","activate","isCacheable","capturedFormElement","capturedFormButtonElement","matchesPath","getIgnoreQueryStringFromRoutePath","getUrlPathWithoutHashAndSearch","winner","switchScrollPositionRace","scrollTo","scrollLeft","scrollTop","nativeScrollRestoration_","scrollRestoration","canNavigate","navigateFailed","preventDefault","onbeforeunload","_onbeforeunload","_overloaded","beforeActivate","prevent","beforeDeactivate","anchorElement","getNodeOffset","saveHistoryCurrentPageScrollPosition_","opt_event","isHtml5HistorySupported","form","replaceHistory","func","altKey","ctrlKey","metaKey","shiftKey","maybeNavigate_","method","buttonSelector","activeElement","querySelector","action","maybeRepositionScrollToHashedAnchor","reloadPage","senna","lockHistoryScrollPosition_","setReferrer","pageYOffset","pageXOffset","maybeDisableNativeScrollRestoration","endNavigatePayload","doNavigate_","maybeRestoreNativeScrollRestoration","getTitle","getDefaultTitle","beforeUpdateHistoryPath","historyState","maybeRestoreRedirectPathHash_","updateHistory_","beforeUpdateHistoryState","params","surfaceContent","getSurfaceContent","reload","surfaceId","dispose","replaceState","removePathTrailingSlash","onDocSubmitDelegate_","onDocClickDelegate_","sync","titleNode","Ajax","allHeaders","headers","pairs","body","opt_headers","opt_params","opt_timeout","opt_sync","opt_withCredentials","request","XMLHttpRequest","previousReadyState","Promise","onload","aborted","onerror","readyState","terminatedPrematurely","abort","timeout","addParametersFromMultiMap","withCredentials","setRequestHeader","send","errors","INVALID_STATUS","REQUEST_ERROR","REQUEST_TIMEOUT","REQUEST_PREMATURE_TERMINATION","UA","navigator","userAgent","platform","isMac","matchPlatform","isWin","isOpera","matchUserAgent","isIe","isEdge","isIeOrEdge","isChrome","isSafari","isFirefox","testUserAgent","getNativeUserAgent","getNativePlatform","RequestScreen","httpHeaders","httpMethod","GET","status","isValidResponseStatusCode","invalidStatus","statusCode","getRequestPath","setHostname","setProtocol","setPort","makeUnique","getRequest","requestPath","responseUrl","maybeExtractResponseUrlFromRequest","removeUnique","getCache","header","addSafariXHRPolyfill","FormData","maybeAppendSubmitButtonValue_","POST","formatLoadPath","removeSafariXHRPolyfill","setRequest","xhr","assertValidResponseStatusCode","addCache","responseText","requestError","requestPrematureTermination","responseURL","getResponseHeader","X_REQUEST_URL_HEADER","inputs","input","files","HtmlScreen","titleSelector","releaseVirtualDocument","pendingStyles","virtualDocument","copyNodeAttributesFromContent_","newStyle","isTemporaryStyle","stylesTemporary","styleInDoc","insertBefore","nextSibling","bodySurface","placeholder","clearNodeAttributes","copyNodeAttributes","disposePendingStyles","evaluateTrackedScripts","evaluateTrackedResources_","scriptsTemporary","scriptsPermanent","evaluateTrackedStyles","runStylesInElement","stylesPermanent","appendStyleIntoDocument_","evaluatorFn","selectorTemporary","selectorPermanent","opt_appendResourceFn","tracked","virtualQuerySelectorAll_","temporariesInDoc","querySelectorAll_","permanentsInDoc","resource","resourceKey","getResourceKey_","permanentResourcesInDoc","frag","allocateVirtualDocumentForContent","resolveTitleFromVirtualDocument","assertSameBodyIdInVirtualDocument","makeTemporaryStylesHrefsUnique_","replaceStyleAndMakeUnique_","replaceChild","setTitle","textContent","AppDataAttributeHandler","app","baseElement","hasAttribute","dataAttributes","maybeAddRoutes_","maybeAddSurfaces_","maybeSetBasePath_","maybeSetLinkSelector_","maybeSetLoadingCssClass_","maybeSetUpdateScrollPosition_","maybeDispatch_","routesSelector","querySelectorAllAsArray_","maybeParseLinkRoute_","hasRoutes","addRoutes","surfacesSelector","surfaceElement","updateElementIdIfSpecialSurface_","addSurfaces","dispatch","maybeParseLinkRoutePath_","maybeParseLinkRouteHandler_","getPath","getAttribute","getObjectByName","setBasePath","setLoadingCssClass","setUpdateScrollPosition","dataAttributeHandler","setBaseElement","handle"],"mappings":"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","preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjpudWxsLCJzb3VyY2VzIjpbIi9Vc2Vycy9qb3NlLmJhbHNhcy9kZXYvbGlmZXJheS9zZW5uYS5qcy9zcmMvZ2xvYmFscy9nbG9iYWxzLmpzIiwiL1VzZXJzL2pvc2UuYmFsc2FzL2Rldi9saWZlcmF5L3Nlbm5hLmpzL25vZGVfbW9kdWxlcy9tZXRhbC9zcmMvY29yZU5hbWVkLmpzIiwiL1VzZXJzL2pvc2UuYmFsc2FzL2Rldi9saWZlcmF5L3Nlbm5hLmpzL25vZGVfbW9kdWxlcy9tZXRhbC9zcmMvY29yZS5qcyIsIi9Vc2Vycy9qb3NlLmJhbHNhcy9kZXYvbGlmZXJheS9zZW5uYS5qcy9ub2RlX21vZHVsZXMvbWV0YWwvc3JjL2FycmF5L2FycmF5LmpzIiwiL1VzZXJzL2pvc2UuYmFsc2FzL2Rldi9saWZlcmF5L3Nlbm5hLmpzL25vZGVfbW9kdWxlcy9tZXRhbC9zcmMvYXN5bmMvYXN5bmMuanMiLCIvVXNlcnMvam9zZS5iYWxzYXMvZGV2L2xpZmVyYXkvc2VubmEuanMvbm9kZV9tb2R1bGVzL21ldGFsL3NyYy9kaXNwb3NhYmxlL0Rpc3Bvc2FibGUuanMiLCIvVXNlcnMvam9zZS5iYWxzYXMvZGV2L2xpZmVyYXkvc2VubmEuanMvbm9kZV9tb2R1bGVzL21ldGFsL3NyYy9vYmplY3Qvb2JqZWN0LmpzIiwiL1VzZXJzL2pvc2UuYmFsc2FzL2Rldi9saWZlcmF5L3Nlbm5hLmpzL25vZGVfbW9kdWxlcy9tZXRhbC9zcmMvc3RyaW5nL3N0cmluZy5qcyIsIi9Vc2Vycy9qb3NlLmJhbHNhcy9kZXYvbGlmZXJheS9zZW5uYS5qcy9ub2RlX21vZHVsZXMvbWV0YWwtdXJpL3NyYy9wYXJzZUZyb21BbmNob3IuanMiLCIvVXNlcnMvam9zZS5iYWxzYXMvZGV2L2xpZmVyYXkvc2VubmEuanMvbm9kZV9tb2R1bGVzL21ldGFsLXVyaS9zcmMvcGFyc2UuanMiLCIvVXNlcnMvam9zZS5iYWxzYXMvZGV2L2xpZmVyYXkvc2VubmEuanMvbm9kZV9tb2R1bGVzL21ldGFsLXN0cnVjdHMvc3JjL011bHRpTWFwLmpzIiwiL1VzZXJzL2pvc2UuYmFsc2FzL2Rldi9saWZlcmF5L3Nlbm5hLmpzL25vZGVfbW9kdWxlcy9tZXRhbC1zdHJ1Y3RzL3NyYy9UcmVlTm9kZS5qcyIsIi9Vc2Vycy9qb3NlLmJhbHNhcy9kZXYvbGlmZXJheS9zZW5uYS5qcy9ub2RlX21vZHVsZXMvbWV0YWwtdXJpL3NyYy9VcmkuanMiLCIvVXNlcnMvam9zZS5iYWxzYXMvZGV2L2xpZmVyYXkvc2VubmEuanMvc3JjL3V0aWxzL3V0aWxzLmpzIiwiL1VzZXJzL2pvc2UuYmFsc2FzL2Rldi9saWZlcmF5L3Nlbm5hLmpzL3NyYy9hcHAvZGF0YUF0dHJpYnV0ZXMuanMiLCIvVXNlcnMvam9zZS5iYWxzYXMvZGV2L2xpZmVyYXkvc2VubmEuanMvbm9kZV9tb2R1bGVzL21ldGFsLWRvbS9zcmMvZG9tRGF0YS5qcyIsIi9Vc2Vycy9qb3NlLmJhbHNhcy9kZXYvbGlmZXJheS9zZW5uYS5qcy9ub2RlX21vZHVsZXMvbWV0YWwtZXZlbnRzL3NyYy9FdmVudEhhbmRsZS5qcyIsIi9Vc2Vycy9qb3NlLmJhbHNhcy9kZXYvbGlmZXJheS9zZW5uYS5qcy9ub2RlX21vZHVsZXMvbWV0YWwtZXZlbnRzL3NyYy9FdmVudEVtaXR0ZXIuanMiLCIvVXNlcnMvam9zZS5iYWxzYXMvZGV2L2xpZmVyYXkvc2VubmEuanMvbm9kZV9tb2R1bGVzL21ldGFsLWV2ZW50cy9zcmMvRXZlbnRFbWl0dGVyUHJveHkuanMiLCIvVXNlcnMvam9zZS5iYWxzYXMvZGV2L2xpZmVyYXkvc2VubmEuanMvbm9kZV9tb2R1bGVzL21ldGFsLWV2ZW50cy9zcmMvRXZlbnRIYW5kbGVyLmpzIiwiL1VzZXJzL2pvc2UuYmFsc2FzL2Rldi9saWZlcmF5L3Nlbm5hLmpzL25vZGVfbW9kdWxlcy9tZXRhbC1kb20vc3JjL0RvbURlbGVnYXRlZEV2ZW50SGFuZGxlLmpzIiwiL1VzZXJzL2pvc2UuYmFsc2FzL2Rldi9saWZlcmF5L3Nlbm5hLmpzL25vZGVfbW9kdWxlcy9tZXRhbC1kb20vc3JjL0RvbUV2ZW50SGFuZGxlLmpzIiwiL1VzZXJzL2pvc2UuYmFsc2FzL2Rldi9saWZlcmF5L3Nlbm5hLmpzL25vZGVfbW9kdWxlcy9tZXRhbC1kb20vc3JjL2RvbU5hbWVkLmpzIiwiL1VzZXJzL2pvc2UuYmFsc2FzL2Rldi9saWZlcmF5L3Nlbm5hLmpzL25vZGVfbW9kdWxlcy9tZXRhbC1kb20vc3JjL2RvbS5qcyIsIi9Vc2Vycy9qb3NlLmJhbHNhcy9kZXYvbGlmZXJheS9zZW5uYS5qcy9ub2RlX21vZHVsZXMvbWV0YWwtZG9tL3NyYy9Eb21FdmVudEVtaXR0ZXJQcm94eS5qcyIsIi9Vc2Vycy9qb3NlLmJhbHNhcy9kZXYvbGlmZXJheS9zZW5uYS5qcy9ub2RlX21vZHVsZXMvbWV0YWwtZG9tL3NyYy9mZWF0dXJlcy5qcyIsIi9Vc2Vycy9qb3NlLmJhbHNhcy9kZXYvbGlmZXJheS9zZW5uYS5qcy9ub2RlX21vZHVsZXMvbWV0YWwtZG9tL3NyYy9nbG9iYWxFdmFsLmpzIiwiL1VzZXJzL2pvc2UuYmFsc2FzL2Rldi9saWZlcmF5L3Nlbm5hLmpzL25vZGVfbW9kdWxlcy9tZXRhbC1kb20vc3JjL2dsb2JhbEV2YWxTdHlsZXMuanMiLCIvVXNlcnMvam9zZS5iYWxzYXMvZGV2L2xpZmVyYXkvc2VubmEuanMvbm9kZV9tb2R1bGVzL21ldGFsLWRvbS9zcmMvZXZlbnRzLmpzIiwiL1VzZXJzL2pvc2UuYmFsc2FzL2Rldi9saWZlcmF5L3Nlbm5hLmpzL25vZGVfbW9kdWxlcy9tZXRhbC1wcm9taXNlL3NyYy9wcm9taXNlL1Byb21pc2UuanMiLCIvVXNlcnMvam9zZS5iYWxzYXMvZGV2L2xpZmVyYXkvc2VubmEuanMvbm9kZV9tb2R1bGVzL21ldGFsLWRlYm91bmNlL3NyYy9kZWJvdW5jZS5qcyIsIi9Vc2Vycy9qb3NlLmJhbHNhcy9kZXYvbGlmZXJheS9zZW5uYS5qcy9ub2RlX21vZHVsZXMvbWV0YWwtcGF0aC1wYXJzZXIvc3JjL3BhdGhQYXJzZXIuanMiLCIvVXNlcnMvam9zZS5iYWxzYXMvZGV2L2xpZmVyYXkvc2VubmEuanMvc3JjL3JvdXRlL1JvdXRlLmpzIiwiL1VzZXJzL2pvc2UuYmFsc2FzL2Rldi9saWZlcmF5L3Nlbm5hLmpzL3NyYy9jYWNoZWFibGUvQ2FjaGVhYmxlLmpzIiwiL1VzZXJzL2pvc2UuYmFsc2FzL2Rldi9saWZlcmF5L3Nlbm5hLmpzL3NyYy9zY3JlZW4vU2NyZWVuLmpzIiwiL1VzZXJzL2pvc2UuYmFsc2FzL2Rldi9saWZlcmF5L3Nlbm5hLmpzL3NyYy9zdXJmYWNlL1N1cmZhY2UuanMiLCIvVXNlcnMvam9zZS5iYWxzYXMvZGV2L2xpZmVyYXkvc2VubmEuanMvc3JjL2FwcC9BcHAuanMiLCIvVXNlcnMvam9zZS5iYWxzYXMvZGV2L2xpZmVyYXkvc2VubmEuanMvbm9kZV9tb2R1bGVzL21ldGFsLWFqYXgvc3JjL0FqYXguanMiLCIvVXNlcnMvam9zZS5iYWxzYXMvZGV2L2xpZmVyYXkvc2VubmEuanMvc3JjL2Vycm9ycy9lcnJvcnMuanMiLCIvVXNlcnMvam9zZS5iYWxzYXMvZGV2L2xpZmVyYXkvc2VubmEuanMvbm9kZV9tb2R1bGVzL21ldGFsLXVzZXJhZ2VudC9zcmMvVUEuanMiLCIvVXNlcnMvam9zZS5iYWxzYXMvZGV2L2xpZmVyYXkvc2VubmEuanMvc3JjL3NjcmVlbi9SZXF1ZXN0U2NyZWVuLmpzIiwiL1VzZXJzL2pvc2UuYmFsc2FzL2Rldi9saWZlcmF5L3Nlbm5hLmpzL3NyYy9zY3JlZW4vSHRtbFNjcmVlbi5qcyIsIi9Vc2Vycy9qb3NlLmJhbHNhcy9kZXYvbGlmZXJheS9zZW5uYS5qcy9zcmMvYXBwL0FwcERhdGFBdHRyaWJ1dGVIYW5kbGVyLmpzIiwiL1VzZXJzL2pvc2UuYmFsc2FzL2Rldi9saWZlcmF5L3Nlbm5hLmpzL3NyYy9hcHAvZGF0YUF0dHJpYnV0ZUhhbmRsZXIuanMiLCIvVXNlcnMvam9zZS5iYWxzYXMvZGV2L2xpZmVyYXkvc2VubmEuanMvc3JjL2FwcC92ZXJzaW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBnbG9iYWxzID0gZ2xvYmFscyB8fCB7fTtcblxuaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG5cdGdsb2JhbHMud2luZG93ID0gd2luZG93O1xufVxuXG5pZiAodHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJykge1xuXHRnbG9iYWxzLmRvY3VtZW50ID0gZG9jdW1lbnQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGdsb2JhbHM7XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQSBjb2xsZWN0aW9uIG9mIGNvcmUgdXRpbGl0eSBmdW5jdGlvbnMuXG4gKiBAY29uc3RcbiAqL1xuXG5sZXQgY29tcGF0aWJpbGl0eU1vZGVEYXRhXztcblxuLyoqXG4gKiBDb3VudGVyIGZvciB1bmlxdWUgaWQuXG4gKiBAdHlwZSB7TnVtYmVyfVxuICogQHByaXZhdGVcbiAqL1xubGV0IHVuaXF1ZUlkQ291bnRlcl8gPSAxO1xuXG4vKipcbiAqIFVuaXF1ZSBpZCBwcm9wZXJ0eSBwcmVmaXguXG4gKiBAdHlwZSB7U3RyaW5nfVxuICogQHByb3RlY3RlZFxuICovXG5leHBvcnQgY29uc3QgVUlEX1BST1BFUlRZID0gYGNvcmVfJHsoKE1hdGgucmFuZG9tKCkgKiAxZTkpID4+PiAwKX1gO1xuXG4vKipcbiAqIFdoZW4gZGVmaW5pbmcgYSBjbGFzcyBGb28gd2l0aCBhbiBhYnN0cmFjdCBtZXRob2QgYmFyKCksIHlvdSBjYW4gZG86XG4gKiBGb28ucHJvdG90eXBlLmJhciA9IGFic3RyYWN0TWV0aG9kXG4gKlxuICogTm93IGlmIGEgc3ViY2xhc3Mgb2YgRm9vIGZhaWxzIHRvIG92ZXJyaWRlIGJhcigpLCBhbiBlcnJvciB3aWxsIGJlIHRocm93blxuICogd2hlbiBiYXIoKSBpcyBpbnZva2VkLlxuICpcbiAqIEB0eXBlIHshRnVuY3Rpb259XG4gKiBAdGhyb3dzIHtFcnJvcn0gd2hlbiBpbnZva2VkIHRvIGluZGljYXRlIHRoZSBtZXRob2Qgc2hvdWxkIGJlIG92ZXJyaWRkZW4uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhYnN0cmFjdE1ldGhvZCgpIHtcblx0dGhyb3cgRXJyb3IoJ1VuaW1wbGVtZW50ZWQgYWJzdHJhY3QgbWV0aG9kJyk7XG59XG5cbi8qKlxuICogRGlzYWJsZXMgTWV0YWwuanMncyBjb21wYXRpYmlsaXR5IG1vZGUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkaXNhYmxlQ29tcGF0aWJpbGl0eU1vZGUoKSB7XG5cdGNvbXBhdGliaWxpdHlNb2RlRGF0YV8gPSB1bmRlZmluZWQ7XG59XG5cbi8qKlxuICogRW5hYmxlcyBNZXRhbC5qcydzIGNvbXBhdGliaWxpdHkgbW9kZSB3aXRoIHRoZSBmb2xsb3dpbmcgZmVhdHVyZXMgZnJvbSByY1xuICogYW5kIDEueCB2ZXJzaW9uczpcbiAqICAgICAtIFVzaW5nIFwia2V5XCIgdG8gcmVmZXJlbmNlIGNvbXBvbmVudCBpbnN0YW5jZXMuIEluIHRoZSBjdXJyZW50IHZlcnNpb25cbiAqICAgICAgIHRoaXMgc2hvdWxkIGJlIGRvbmUgdmlhIFwicmVmXCIgaW5zdGVhZC4gVGhpcyBhbGxvd3Mgb2xkIGNvZGUgc3RpbGxcbiAqICAgICAgIHVzaW5nIFwia2V5XCIgdG8ga2VlcCB3b3JraW5nIGxpa2UgYmVmb3JlLiBOT1RFOiB0aGlzIG1heSBjYXVzZVxuICogICAgICAgcHJvYmxlbXMsIHNpbmNlIFwia2V5XCIgaXMgbWVhbnQgdG8gYmUgdXNlZCBkaWZmZXJlbnRseS4gT25seSB1c2UgdGhpc1xuICogICAgICAgaWYgaXQncyBub3QgcG9zc2libGUgdG8gdXBncmFkZSB0aGUgY29kZSB0byB1c2UgXCJyZWZcIiBpbnN0ZWFkLlxuICogQHBhcmFtIHtPYmplY3Q9fSBvcHRfZGF0YSBPcHRpb25hbCBvYmplY3Qgd2l0aCBkYXRhIHRvIHNwZWNpZnkgbW9yZVxuICogICAgIGRldGFpbHMsIHN1Y2ggYXM6XG4gKiAgICAgICAgIC0gcmVuZGVyZXJzIHtBcnJheX0gdGhlIHRlbXBsYXRlIHJlbmRlcmVycyB0aGF0IHNob3VsZCBiZSBpblxuICogICAgICAgICAgIGNvbXBhdGliaWxpdHkgbW9kZSwgZWl0aGVyIHRoZWlyIGNvbnN0cnVjdG9ycyBvciBzdHJpbmdzXG4gKiAgICAgICAgICAgcmVwcmVzZW50aW5nIHRoZW0gKGUuZy4gJ3NveScgb3IgJ2pzeCcpLiBCeSBkZWZhdWx0LCBhbGwgdGhlIG9uZXNcbiAqICAgICAgICAgICB0aGF0IGV4dGVuZCBmcm9tIEluY3JlbWVudGFsRG9tUmVuZGVyZXIuXG4gKiBAdHlwZSB7T2JqZWN0fVxuICovXG5leHBvcnQgZnVuY3Rpb24gZW5hYmxlQ29tcGF0aWJpbGl0eU1vZGUob3B0X2RhdGEgPSB7fSkge1xuXHRjb21wYXRpYmlsaXR5TW9kZURhdGFfID0gb3B0X2RhdGE7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgZGF0YSB1c2VkIGZvciBjb21wYXRpYmlsaXR5IG1vZGUsIG9yIG5vdGhpbmcgaWYgaXQgaGFzbid0IGJlZW5cbiAqIGVuYWJsZWQuXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRDb21wYXRpYmlsaXR5TW9kZURhdGEoKSB7XG5cdC8vIENvbXBhdGliaWxpdHkgbW9kZSBjYW4gYmUgc2V0IHZpYSB0aGUgX19NRVRBTF9DT01QQVRJQklMSVRZX18gZ2xvYmFsIHZhci5cblx0aWYgKGNvbXBhdGliaWxpdHlNb2RlRGF0YV8gPT09IHVuZGVmaW5lZCkge1xuXHRcdGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuX19NRVRBTF9DT01QQVRJQklMSVRZX18pIHtcblx0XHRcdGVuYWJsZUNvbXBhdGliaWxpdHlNb2RlKHdpbmRvdy5fX01FVEFMX0NPTVBBVElCSUxJVFlfXyk7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBjb21wYXRpYmlsaXR5TW9kZURhdGFfO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIGZpcnN0IGFyZ3VtZW50IGlmIGl0J3MgdHJ1dGh5LCBvciB0aGUgc2Vjb25kIG90aGVyd2lzZS5cbiAqIEBwYXJhbSB7Kn0gYVxuICogQHBhcmFtIHsqfSBiXG4gKiBAcmV0dXJuIHsqfVxuICogQHByb3RlY3RlZFxuICovXG5mdW5jdGlvbiBnZXRGaXJzdFRydXRoeV8oYSwgYikge1xuXHRyZXR1cm4gYSB8fCBiO1xufVxuXG4vKipcbiAqIEdldHMgdGhlIG5hbWUgb2YgdGhlIGdpdmVuIGZ1bmN0aW9uLiBJZiB0aGUgY3VycmVudCBicm93c2VyIGRvZXNuJ3RcbiAqIHN1cHBvcnQgdGhlIGBuYW1lYCBwcm9wZXJ0eSwgdGhpcyB3aWxsIGNhbGN1bGF0ZSBpdCBmcm9tIHRoZSBmdW5jdGlvbidzXG4gKiBjb250ZW50IHN0cmluZy5cbiAqIEBwYXJhbSB7IWZ1bmN0aW9uKCl9IGZuXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRGdW5jdGlvbk5hbWUoZm4pIHtcblx0aWYgKCFmbi5uYW1lKSB7XG5cdFx0Y29uc3Qgc3RyID0gZm4udG9TdHJpbmcoKTtcblx0XHRmbi5uYW1lID0gc3RyLnN1YnN0cmluZyg5LCBzdHIuaW5kZXhPZignKCcpKTtcblx0fVxuXHRyZXR1cm4gZm4ubmFtZTtcbn1cblxuLyoqXG4gKiBHZXRzIHRoZSB2YWx1ZSBvZiBhIHN0YXRpYyBwcm9wZXJ0eSBpbiB0aGUgZ2l2ZW4gY2xhc3MuIFRoZSB2YWx1ZSB3aWxsIGJlXG4gKiBpbmhlcml0ZWQgZnJvbSBhbmNlc3RvcnMgYXMgZXhwZWN0ZWQsIHVubGVzcyBhIGN1c3RvbSBtZXJnZSBmdW5jdGlvbiBpcyBnaXZlbixcbiAqIHdoaWNoIGNhbiBjaGFuZ2UgaG93IHRoZSBzdXBlciBjbGFzc2VzJyB2YWx1ZSBmb3IgdGhhdCBwcm9wZXJ0eSB3aWxsIGJlIG1lcmdlZFxuICogdG9nZXRoZXIuXG4gKiBUaGUgZmluYWwgbWVyZ2VkIHZhbHVlIHdpbGwgYmUgc3RvcmVkIGluIGFub3RoZXIgcHJvcGVydHksIHNvIHRoYXQgaXQgd29uJ3RcbiAqIGJlIHJlY2FsY3VsYXRlZCBldmVuIGlmIHRoaXMgZnVuY3Rpb24gaXMgY2FsbGVkIG11bHRpcGxlIHRpbWVzLlxuICogQHBhcmFtIHshZnVuY3Rpb24oKX0gY3RvciBDbGFzcyBjb25zdHJ1Y3Rvci5cbiAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wZXJ0eU5hbWUgUHJvcGVydHkgbmFtZSB0byBiZSBtZXJnZWQuXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKCosICopOio9fSBvcHRfbWVyZ2VGbiBGdW5jdGlvbiB0aGF0IHJlY2VpdmVzIHRoZSBtZXJnZWRcbiAqICAgICB2YWx1ZSBvZiB0aGUgcHJvcGVydHkgc28gZmFyIGFuZCB0aGUgbmV4dCB2YWx1ZSB0byBiZSBtZXJnZWQgdG8gaXQuXG4gKiAgICAgU2hvdWxkIHJldHVybiB0aGVzZSB0d28gbWVyZ2VkIHRvZ2V0aGVyLiBJZiBub3QgcGFzc2VkIHRoZSBmaW5hbCBwcm9wZXJ0eVxuICogICAgIHdpbGwgYmUgdGhlIGZpcnN0IHRydXRoeSB2YWx1ZSBhbW9uZyBhbmNlc3RvcnMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRTdGF0aWNQcm9wZXJ0eShjdG9yLCBwcm9wZXJ0eU5hbWUsIG9wdF9tZXJnZUZuKSB7XG5cdGNvbnN0IG1lcmdlZE5hbWUgPSBwcm9wZXJ0eU5hbWUgKyAnX01FUkdFRCc7XG5cdGlmICghY3Rvci5oYXNPd25Qcm9wZXJ0eShtZXJnZWROYW1lKSkge1xuXHRcdGxldCBtZXJnZWQgPSBjdG9yLmhhc093blByb3BlcnR5KHByb3BlcnR5TmFtZSkgPyBjdG9yW3Byb3BlcnR5TmFtZV0gOiBudWxsO1xuXHRcdGlmIChjdG9yLl9fcHJvdG9fXyAmJiAhY3Rvci5fX3Byb3RvX18uaXNQcm90b3R5cGVPZihGdW5jdGlvbikpIHtcblx0XHRcdGNvbnN0IG1lcmdlRm4gPSBvcHRfbWVyZ2VGbiB8fCBnZXRGaXJzdFRydXRoeV87XG5cdFx0XHRtZXJnZWQgPSBtZXJnZUZuKFxuXHRcdFx0XHRtZXJnZWQsXG5cdFx0XHRcdGdldFN0YXRpY1Byb3BlcnR5KGN0b3IuX19wcm90b19fLCBwcm9wZXJ0eU5hbWUsIG1lcmdlRm4pXG5cdFx0XHQpO1xuXHRcdH1cblx0XHRjdG9yW21lcmdlZE5hbWVdID0gbWVyZ2VkO1xuXHR9XG5cdHJldHVybiBjdG9yW21lcmdlZE5hbWVdO1xufVxuXG4vKipcbiAqIEdldHMgYW4gdW5pcXVlIGlkLiBJZiBgb3B0X29iamVjdGAgYXJndW1lbnQgaXMgcGFzc2VkLCB0aGUgb2JqZWN0IGlzXG4gKiBtdXRhdGVkIHdpdGggYW4gdW5pcXVlIGlkLiBDb25zZWN1dGl2ZSBjYWxscyB3aXRoIHRoZSBzYW1lIG9iamVjdFxuICogcmVmZXJlbmNlIHdvbid0IG11dGF0ZSB0aGUgb2JqZWN0IGFnYWluLCBpbnN0ZWFkIHRoZSBjdXJyZW50IG9iamVjdCB1aWRcbiAqIHJldHVybnMuIFNlZSB7QGxpbmsgVUlEX1BST1BFUlRZfS5cbiAqIEBwYXJhbSB7T2JqZWN0PX0gb3B0X29iamVjdCBPcHRpb25hbCBvYmplY3QgdG8gYmUgbXV0YXRlZCB3aXRoIHRoZSB1aWQuIElmXG4gKiAgICAgbm90IHNwZWNpZmllZCB0aGlzIG1ldGhvZCBvbmx5IHJldHVybnMgdGhlIHVpZC5cbiAqIEBwYXJhbSB7Ym9vbGVhbj19IG9wdF9ub0luaGVyaXRhbmNlIE9wdGlvbmFsIGZsYWcgaW5kaWNhdGluZyBpZiB0aGlzXG4gKiAgICAgb2JqZWN0J3MgdWlkIHByb3BlcnR5IGNhbiBiZSBpbmhlcml0ZWQgZnJvbSBwYXJlbnRzIG9yIG5vdC5cbiAqIEB0aHJvd3Mge0Vycm9yfSB3aGVuIGludm9rZWQgdG8gaW5kaWNhdGUgdGhlIG1ldGhvZCBzaG91bGQgYmUgb3ZlcnJpZGRlbi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFVpZChvcHRfb2JqZWN0LCBvcHRfbm9Jbmhlcml0YW5jZSkge1xuXHRpZiAob3B0X29iamVjdCkge1xuXHRcdGxldCBpZCA9IG9wdF9vYmplY3RbVUlEX1BST1BFUlRZXTtcblx0XHRpZiAob3B0X25vSW5oZXJpdGFuY2UgJiYgIW9wdF9vYmplY3QuaGFzT3duUHJvcGVydHkoVUlEX1BST1BFUlRZKSkge1xuXHRcdFx0aWQgPSBudWxsO1xuXHRcdH1cblx0XHRyZXR1cm4gaWQgfHwgKG9wdF9vYmplY3RbVUlEX1BST1BFUlRZXSA9IHVuaXF1ZUlkQ291bnRlcl8rKyk7XG5cdH1cblx0cmV0dXJuIHVuaXF1ZUlkQ291bnRlcl8rKztcbn1cblxuLyoqXG4gKiBUaGUgaWRlbnRpdHkgZnVuY3Rpb24uIFJldHVybnMgaXRzIGZpcnN0IGFyZ3VtZW50LlxuICogQHBhcmFtIHsqPX0gb3B0X3JldHVyblZhbHVlIFRoZSBzaW5nbGUgdmFsdWUgdGhhdCB3aWxsIGJlIHJldHVybmVkLlxuICogQHJldHVybiB7P30gVGhlIGZpcnN0IGFyZ3VtZW50LlxuICovXG5leHBvcnQgZnVuY3Rpb24gaWRlbnRpdHlGdW5jdGlvbihvcHRfcmV0dXJuVmFsdWUpIHtcblx0cmV0dXJuIG9wdF9yZXR1cm5WYWx1ZTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIHNwZWNpZmllZCB2YWx1ZSBpcyBhIGJvb2xlYW4uXG4gKiBAcGFyYW0gez99IHZhbCBWYXJpYWJsZSB0byB0ZXN0LlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB2YXJpYWJsZSBpcyBib29sZWFuLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNCb29sZWFuKHZhbCkge1xuXHRyZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ2Jvb2xlYW4nO1xufVxuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgc3BlY2lmaWVkIHZhbHVlIGlzIG5vdCB1bmRlZmluZWQuXG4gKiBAcGFyYW0gez99IHZhbCBWYXJpYWJsZSB0byB0ZXN0LlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB2YXJpYWJsZSBpcyBkZWZpbmVkLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNEZWYodmFsKSB7XG5cdHJldHVybiB2YWwgIT09IHVuZGVmaW5lZDtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdmFsdWUgaXMgbm90IHVuZGVmaW5lZCBvciBudWxsLlxuICogQHBhcmFtIHsqfSB2YWxcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0RlZkFuZE5vdE51bGwodmFsKSB7XG5cdHJldHVybiBpc0RlZih2YWwpICYmICFpc051bGwodmFsKTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdmFsdWUgaXMgYSBkb2N1bWVudC5cbiAqIEBwYXJhbSB7Kn0gdmFsXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNEb2N1bWVudCh2YWwpIHtcblx0cmV0dXJuIHZhbCAmJiB0eXBlb2YgdmFsID09PSAnb2JqZWN0JyAmJiB2YWwubm9kZVR5cGUgPT09IDk7XG59XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHZhbHVlIGlzIGEgZG9jdW1lbnQtZnJhZ21lbnQuXG4gKiBAcGFyYW0geyp9IHZhbFxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzRG9jdW1lbnRGcmFnbWVudCh2YWwpIHtcblx0cmV0dXJuIHZhbCAmJiB0eXBlb2YgdmFsID09PSAnb2JqZWN0JyAmJiB2YWwubm9kZVR5cGUgPT09IDExO1xufVxuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB2YWx1ZSBpcyBhIGRvbSBlbGVtZW50LlxuICogQHBhcmFtIHsqfSB2YWxcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0VsZW1lbnQodmFsKSB7XG5cdHJldHVybiB2YWwgJiYgdHlwZW9mIHZhbCA9PT0gJ29iamVjdCcgJiYgdmFsLm5vZGVUeXBlID09PSAxO1xufVxuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgc3BlY2lmaWVkIHZhbHVlIGlzIGEgZnVuY3Rpb24uXG4gKiBAcGFyYW0gez99IHZhbCBWYXJpYWJsZSB0byB0ZXN0LlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB2YXJpYWJsZSBpcyBhIGZ1bmN0aW9uLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNGdW5jdGlvbih2YWwpIHtcblx0cmV0dXJuIHR5cGVvZiB2YWwgPT09ICdmdW5jdGlvbic7XG59XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHZhbHVlIGlzIG51bGwuXG4gKiBAcGFyYW0geyp9IHZhbFxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzTnVsbCh2YWwpIHtcblx0cmV0dXJuIHZhbCA9PT0gbnVsbDtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIHNwZWNpZmllZCB2YWx1ZSBpcyBhIG51bWJlci5cbiAqIEBwYXJhbSB7P30gdmFsIFZhcmlhYmxlIHRvIHRlc3QuXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHZhcmlhYmxlIGlzIGEgbnVtYmVyLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNOdW1iZXIodmFsKSB7XG5cdHJldHVybiB0eXBlb2YgdmFsID09PSAnbnVtYmVyJztcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdmFsdWUgaXMgYSB3aW5kb3cuXG4gKiBAcGFyYW0geyp9IHZhbFxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzV2luZG93KHZhbCkge1xuXHRyZXR1cm4gdmFsICE9PSBudWxsICYmIHZhbCA9PT0gdmFsLndpbmRvdztcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIHNwZWNpZmllZCB2YWx1ZSBpcyBhbiBvYmplY3QuIFRoaXMgaW5jbHVkZXMgYXJyYXlzXG4gKiBhbmQgZnVuY3Rpb25zLlxuICogQHBhcmFtIHs/fSB2YWwgVmFyaWFibGUgdG8gdGVzdC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdmFyaWFibGUgaXMgYW4gb2JqZWN0LlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNPYmplY3QodmFsKSB7XG5cdGNvbnN0IHR5cGUgPSB0eXBlb2YgdmFsO1xuXHRyZXR1cm4gdHlwZSA9PT0gJ29iamVjdCcgJiYgdmFsICE9PSBudWxsIHx8IHR5cGUgPT09ICdmdW5jdGlvbic7XG59XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHZhbHVlIGlzIGEgUHJvbWlzZS5cbiAqIEBwYXJhbSB7Kn0gdmFsXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNQcm9taXNlKHZhbCkge1xuXHRyZXR1cm4gdmFsICYmIHR5cGVvZiB2YWwgPT09ICdvYmplY3QnICYmIHR5cGVvZiB2YWwudGhlbiA9PT0gJ2Z1bmN0aW9uJztcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdmFsdWUgaXMgYSBzdHJpbmcuXG4gKiBAcGFyYW0geyp9IHZhbFxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzU3RyaW5nKHZhbCkge1xuXHRyZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ3N0cmluZycgfHwgdmFsIGluc3RhbmNlb2YgU3RyaW5nO1xufVxuXG4vKipcbiAqIFNldHMgdG8gdHJ1ZSBpZiBydW5uaW5nIGluc2lkZSBOb2RlLmpzIGVudmlyb25tZW50IHdpdGggZXh0cmEgY2hlY2sgZm9yXG4gKiBgcHJvY2Vzcy5icm93c2VyYCB0byBza2lwIEthcm1hIHJ1bm5lciBlbnZpcm9ubWVudC4gS2FybWEgZW52aXJvbm1lbnQgaGFzXG4gKiBgcHJvY2Vzc2AgZGVmaW5lZCBldmVuIHRob3VnaCBpdCBydW5zIG9uIHRoZSBicm93c2VyLlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzU2VydmVyU2lkZSgpIHtcblx0cmV0dXJuIHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyAmJlxuXHRcdHR5cGVvZiBwcm9jZXNzLmVudiAhPT0gJ3VuZGVmaW5lZCcgJiZcblx0XHRwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Rlc3QnICYmXG5cdFx0IXByb2Nlc3MuYnJvd3Nlcjtcbn1cblxuLyoqXG4gKiBOdWxsIGZ1bmN0aW9uIHVzZWQgZm9yIGRlZmF1bHQgdmFsdWVzIG9mIGNhbGxiYWNrcywgZXRjLlxuICogQHJldHVybiB7dm9pZH0gTm90aGluZy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG51bGxGdW5jdGlvbigpIHtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuLy8gVGhpcyBmaWxlIGV4aXN0cyBqdXN0IGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eSwgbWFraW5nIHN1cmUgdGhhdCBvbGRcbi8vIGRlZmF1bHQgaW1wb3J0cyBmb3IgdGhpcyBmaWxlIHN0aWxsIHdvcmsuIEl0J3MgYmVzdCB0byB1c2UgdGhlIG5hbWVkIGV4cG9ydHNcbi8vIGZvciBlYWNoIGZ1bmN0aW9uIGluc3RlYWQgdGhvdWdoLCBzaW5jZSB0aGF0IGFsbG93cyBidW5kbGVycyBsaWtlIFJvbGx1cCB0b1xuLy8gcmVkdWNlIHRoZSBidW5kbGUgc2l6ZSBieSByZW1vdmluZyB1bnVzZWQgY29kZS5cbmltcG9ydCAqIGFzIGNvcmUgZnJvbSAnLi9jb3JlTmFtZWQnO1xuXG5leHBvcnQgZGVmYXVsdCBjb3JlO1xuZXhwb3J0IHsgY29yZSB9O1xuZXhwb3J0ICogZnJvbSAnLi9jb3JlTmFtZWQnO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgeyBpc0RlZiB9IGZyb20gJy4uL2NvcmUnO1xuXG5jbGFzcyBhcnJheSB7XG5cdC8qKlxuXHQgKiBDaGVja3MgaWYgdGhlIGdpdmVuIGFycmF5cyBoYXZlIHRoZSBzYW1lIGNvbnRlbnQuXG5cdCAqIEBwYXJhbSB7IUFycmF5PCo+fSBhcnIxXG5cdCAqIEBwYXJhbSB7IUFycmF5PCo+fSBhcnIyXG5cdCAqIEByZXR1cm4ge2Jvb2xlYW59XG5cdCAqL1xuXHRzdGF0aWMgZXF1YWwoYXJyMSwgYXJyMikge1xuXHRcdGlmIChhcnIxID09PSBhcnIyKSB7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cdFx0aWYgKGFycjEubGVuZ3RoICE9PSBhcnIyLmxlbmd0aCkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IGFycjEubGVuZ3RoOyBpKyspIHtcblx0XHRcdGlmIChhcnIxW2ldICE9PSBhcnIyW2ldKSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgZmlyc3QgdmFsdWUgaW4gdGhlIGdpdmVuIGFycmF5IHRoYXQgaXNuJ3QgdW5kZWZpbmVkLlxuXHQgKiBAcGFyYW0geyFBcnJheX0gYXJyXG5cdCAqIEByZXR1cm4geyp9XG5cdCAqL1xuXHRzdGF0aWMgZmlyc3REZWZpbmVkVmFsdWUoYXJyKSB7XG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcblx0XHRcdGlmIChhcnJbaV0gIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRyZXR1cm4gYXJyW2ldO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8qKlxuXHQgKiBUcmFuc2Zvcm1zIHRoZSBpbnB1dCBuZXN0ZWQgYXJyYXkgdG8gYmVjb21lIGZsYXQuXG5cdCAqIEBwYXJhbSB7QXJyYXkuPCp8QXJyYXkuPCo+Pn0gYXJyIE5lc3RlZCBhcnJheSB0byBmbGF0dGVuLlxuXHQgKiBAcGFyYW0ge0FycmF5LjwqPn0gb3B0X291dHB1dCBPcHRpb25hbCBvdXRwdXQgYXJyYXkuXG5cdCAqIEByZXR1cm4ge0FycmF5LjwqPn0gRmxhdCBhcnJheS5cblx0ICovXG5cdHN0YXRpYyBmbGF0dGVuKGFyciwgb3B0X291dHB1dCkge1xuXHRcdHZhciBvdXRwdXQgPSBvcHRfb3V0cHV0IHx8IFtdO1xuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRpZiAoQXJyYXkuaXNBcnJheShhcnJbaV0pKSB7XG5cdFx0XHRcdGFycmF5LmZsYXR0ZW4oYXJyW2ldLCBvdXRwdXQpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0b3V0cHV0LnB1c2goYXJyW2ldKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIG91dHB1dDtcblx0fVxuXG5cdC8qKlxuXHQgKiBSZW1vdmVzIHRoZSBmaXJzdCBvY2N1cnJlbmNlIG9mIGEgcGFydGljdWxhciB2YWx1ZSBmcm9tIGFuIGFycmF5LlxuXHQgKiBAcGFyYW0ge0FycmF5LjxUPn0gYXJyIEFycmF5IGZyb20gd2hpY2ggdG8gcmVtb3ZlIHZhbHVlLlxuXHQgKiBAcGFyYW0ge1R9IG9iaiBPYmplY3QgdG8gcmVtb3ZlLlxuXHQgKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIGFuIGVsZW1lbnQgd2FzIHJlbW92ZWQuXG5cdCAqIEB0ZW1wbGF0ZSBUXG5cdCAqL1xuXHRzdGF0aWMgcmVtb3ZlKGFyciwgb2JqKSB7XG5cdFx0Y29uc3QgaSA9IGFyci5pbmRleE9mKG9iaik7XG5cdFx0bGV0IHJ2O1xuXHRcdGlmICggKHJ2ID0gaSA+PSAwKSApIHtcblx0XHRcdGFycmF5LnJlbW92ZUF0KGFyciwgaSk7XG5cdFx0fVxuXHRcdHJldHVybiBydjtcblx0fVxuXG5cdC8qKlxuXHQgKiBSZW1vdmVzIGZyb20gYW4gYXJyYXkgdGhlIGVsZW1lbnQgYXQgaW5kZXggaVxuXHQgKiBAcGFyYW0ge0FycmF5fSBhcnIgQXJyYXkgb3IgYXJyYXkgbGlrZSBvYmplY3QgZnJvbSB3aGljaCB0byByZW1vdmUgdmFsdWUuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBpIFRoZSBpbmRleCB0byByZW1vdmUuXG5cdCAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgYW4gZWxlbWVudCB3YXMgcmVtb3ZlZC5cblx0ICovXG5cdHN0YXRpYyByZW1vdmVBdChhcnIsIGkpIHtcblx0XHRyZXR1cm4gQXJyYXkucHJvdG90eXBlLnNwbGljZS5jYWxsKGFyciwgaSwgMSkubGVuZ3RoID09PSAxO1xuXHR9XG5cblx0LyoqXG5cdCAqIFNsaWNlcyB0aGUgZ2l2ZW4gYXJyYXksIGp1c3QgbGlrZSBBcnJheS5wcm90b3R5cGUuc2xpY2UsIGJ1dCB0aGlzXG5cdCAqIGlzIGZhc3RlciBhbmQgd29ya2luZyBvbiBhbGwgYXJyYXktbGlrZSBvYmplY3RzIChsaWtlIGFyZ3VtZW50cykuXG5cdCAqIEBwYXJhbSB7IU9iamVjdH0gYXJyIEFycmF5LWxpa2Ugb2JqZWN0IHRvIHNsaWNlLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gc3RhcnQgVGhlIGluZGV4IHRoYXQgc2hvdWxkIHN0YXJ0IHRoZSBzbGljZS5cblx0ICogQHBhcmFtIHtudW1iZXI9fSBvcHRfZW5kIFRoZSBpbmRleCB3aGVyZSB0aGUgc2xpY2Ugc2hvdWxkIGVuZCwgbm90XG5cdCAqICAgaW5jbHVkZWQgaW4gdGhlIGZpbmFsIGFycmF5LiBJZiBub3QgZ2l2ZW4sIGFsbCBlbGVtZW50cyBhZnRlciB0aGVcblx0ICogICBzdGFydCBpbmRleCB3aWxsIGJlIGluY2x1ZGVkLlxuXHQgKiBAcmV0dXJuIHshQXJyYXl9XG5cdCAqL1xuXHRzdGF0aWMgc2xpY2UoYXJyLCBzdGFydCwgb3B0X2VuZCkge1xuXHRcdGNvbnN0IHNsaWNlZCA9IFtdO1xuXHRcdGNvbnN0IGVuZCA9IGlzRGVmKG9wdF9lbmQpID8gb3B0X2VuZCA6IGFyci5sZW5ndGg7XG5cdFx0Zm9yIChsZXQgaSA9IHN0YXJ0OyBpIDwgZW5kOyBpKyspIHtcblx0XHRcdHNsaWNlZC5wdXNoKGFycltpXSk7XG5cdFx0fVxuXHRcdHJldHVybiBzbGljZWQ7XG5cdH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgYXJyYXk7XG4iLCIvKiFcbiAqIFBvbHlmaWxsIGZyb20gR29vZ2xlJ3MgQ2xvc3VyZSBMaWJyYXJ5LlxuICogQ29weXJpZ2h0IDIwMTMgVGhlIENsb3N1cmUgTGlicmFyeSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuY29uc3QgYXN5bmMgPSB7fTtcblxuXG4vKipcbiAqIFRocm93IGFuIGl0ZW0gd2l0aG91dCBpbnRlcnJ1cHRpbmcgdGhlIGN1cnJlbnQgZXhlY3V0aW9uIGNvbnRleHQuICBGb3JcbiAqIGV4YW1wbGUsIGlmIHByb2Nlc3NpbmcgYSBncm91cCBvZiBpdGVtcyBpbiBhIGxvb3AsIHNvbWV0aW1lcyBpdCBpcyB1c2VmdWxcbiAqIHRvIHJlcG9ydCBhbiBlcnJvciB3aGlsZSBzdGlsbCBhbGxvd2luZyB0aGUgcmVzdCBvZiB0aGUgYmF0Y2ggdG8gYmVcbiAqIHByb2Nlc3NlZC5cbiAqIEBwYXJhbSB7Kn0gZXhjZXB0aW9uXG4gKi9cbmFzeW5jLnRocm93RXhjZXB0aW9uID0gZnVuY3Rpb24oZXhjZXB0aW9uKSB7XG5cdC8vIEVhY2ggdGhyb3cgbmVlZHMgdG8gYmUgaW4gaXRzIG93biBjb250ZXh0LlxuXHRhc3luYy5uZXh0VGljayhmdW5jdGlvbigpIHtcblx0XHR0aHJvdyBleGNlcHRpb247XG5cdH0pO1xufTtcblxuXG4vKipcbiAqIEZpcmVzIHRoZSBwcm92aWRlZCBjYWxsYmFjayBqdXN0IGJlZm9yZSB0aGUgY3VycmVudCBjYWxsc3RhY2sgdW53aW5kcywgb3IgYXNcbiAqIHNvb24gYXMgcG9zc2libGUgYWZ0ZXIgdGhlIGN1cnJlbnQgSlMgZXhlY3V0aW9uIGNvbnRleHQuXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKHRoaXM6VEhJUyl9IGNhbGxiYWNrXG4gKiBAcGFyYW0ge1RISVM9fSBvcHRfY29udGV4dCBPYmplY3QgdG8gdXNlIGFzIHRoZSBcInRoaXMgdmFsdWVcIiB3aGVuIGNhbGxpbmdcbiAqICAgICB0aGUgcHJvdmlkZWQgZnVuY3Rpb24uXG4gKiBAdGVtcGxhdGUgVEhJU1xuICovXG5hc3luYy5ydW4gPSBmdW5jdGlvbihjYWxsYmFjaywgb3B0X2NvbnRleHQpIHtcblx0aWYgKCFhc3luYy5ydW4ud29ya1F1ZXVlU2NoZWR1bGVkXykge1xuXHRcdC8vIE5vdGhpbmcgaXMgY3VycmVudGx5IHNjaGVkdWxlZCwgc2NoZWR1bGUgaXQgbm93LlxuXHRcdGFzeW5jLm5leHRUaWNrKGFzeW5jLnJ1bi5wcm9jZXNzV29ya1F1ZXVlKTtcblx0XHRhc3luYy5ydW4ud29ya1F1ZXVlU2NoZWR1bGVkXyA9IHRydWU7XG5cdH1cblxuXHRhc3luYy5ydW4ud29ya1F1ZXVlXy5wdXNoKFxuXHRcdG5ldyBhc3luYy5ydW4uV29ya0l0ZW1fKGNhbGxiYWNrLCBvcHRfY29udGV4dCkpO1xufTtcblxuXG4vKiogQHByaXZhdGUge2Jvb2xlYW59ICovXG5hc3luYy5ydW4ud29ya1F1ZXVlU2NoZWR1bGVkXyA9IGZhbHNlO1xuXG5cbi8qKiBAcHJpdmF0ZSB7IUFycmF5LjwhYXN5bmMucnVuLldvcmtJdGVtXz59ICovXG5hc3luYy5ydW4ud29ya1F1ZXVlXyA9IFtdO1xuXG4vKipcbiAqIFJ1biBhbnkgcGVuZGluZyBhc3luYy5ydW4gd29yayBpdGVtcy4gVGhpcyBmdW5jdGlvbiBpcyBub3QgaW50ZW5kZWRcbiAqIGZvciBnZW5lcmFsIHVzZSwgYnV0IGZvciB1c2UgYnkgZW50cnkgcG9pbnQgaGFuZGxlcnMgdG8gcnVuIGl0ZW1zIGFoZWFkIG9mXG4gKiBhc3luYy5uZXh0VGljay5cbiAqL1xuYXN5bmMucnVuLnByb2Nlc3NXb3JrUXVldWUgPSBmdW5jdGlvbigpIHtcblx0Ly8gTk9URTogYWRkaXRpb25hbCB3b3JrIHF1ZXVlIGl0ZW1zIG1heSBiZSBwdXNoZWQgd2hpbGUgcHJvY2Vzc2luZy5cblx0d2hpbGUgKGFzeW5jLnJ1bi53b3JrUXVldWVfLmxlbmd0aCkge1xuXHRcdC8vIERvbid0IGxldCB0aGUgd29yayBxdWV1ZSBncm93IGluZGVmaW5pdGVseS5cblx0XHRjb25zdCB3b3JrSXRlbXMgPSBhc3luYy5ydW4ud29ya1F1ZXVlXztcblx0XHRhc3luYy5ydW4ud29ya1F1ZXVlXyA9IFtdO1xuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgd29ya0l0ZW1zLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRjb25zdCB3b3JrSXRlbSA9IHdvcmtJdGVtc1tpXTtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdHdvcmtJdGVtLmZuLmNhbGwod29ya0l0ZW0uc2NvcGUpO1xuXHRcdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0XHRhc3luYy50aHJvd0V4Y2VwdGlvbihlKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBUaGVyZSBhcmUgbm8gbW9yZSB3b3JrIGl0ZW1zLCByZXNldCB0aGUgd29yayBxdWV1ZS5cblx0YXN5bmMucnVuLndvcmtRdWV1ZVNjaGVkdWxlZF8gPSBmYWxzZTtcbn07XG5cblxuLyoqXG4gKiBAY29uc3RydWN0b3JcbiAqIEBmaW5hbFxuICogQHN0cnVjdFxuICogQHByaXZhdGVcbiAqXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKCl9IGZuXG4gKiBAcGFyYW0ge09iamVjdHxudWxsfHVuZGVmaW5lZH0gc2NvcGVcbiAqL1xuYXN5bmMucnVuLldvcmtJdGVtXyA9IGZ1bmN0aW9uKGZuLCBzY29wZSkge1xuXHQvKiogQGNvbnN0ICovXG5cdHRoaXMuZm4gPSBmbjtcblx0LyoqIEBjb25zdCAqL1xuXHR0aGlzLnNjb3BlID0gc2NvcGU7XG59O1xuXG5cbi8qKlxuICogRmlyZXMgdGhlIHByb3ZpZGVkIGNhbGxiYWNrcyBhcyBzb29uIGFzIHBvc3NpYmxlIGFmdGVyIHRoZSBjdXJyZW50IEpTXG4gKiBleGVjdXRpb24gY29udGV4dC4gc2V0VGltZW91dCjigKYsIDApIGFsd2F5cyB0YWtlcyBhdCBsZWFzdCA1bXMgZm9yIGxlZ2FjeVxuICogcmVhc29ucy5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24odGhpczpTQ09QRSl9IGNhbGxiYWNrIENhbGxiYWNrIGZ1bmN0aW9uIHRvIGZpcmUgYXMgc29vbiBhc1xuICogICAgIHBvc3NpYmxlLlxuICogQHBhcmFtIHtTQ09QRT19IG9wdF9jb250ZXh0IE9iamVjdCBpbiB3aG9zZSBzY29wZSB0byBjYWxsIHRoZSBsaXN0ZW5lci5cbiAqIEB0ZW1wbGF0ZSBTQ09QRVxuICovXG5hc3luYy5uZXh0VGljayA9IGZ1bmN0aW9uKGNhbGxiYWNrLCBvcHRfY29udGV4dCkge1xuXHRsZXQgY2IgPSBjYWxsYmFjaztcblx0aWYgKG9wdF9jb250ZXh0KSB7XG5cdFx0Y2IgPSBjYWxsYmFjay5iaW5kKG9wdF9jb250ZXh0KTtcblx0fVxuXHRjYiA9IGFzeW5jLm5leHRUaWNrLndyYXBDYWxsYmFja18oY2IpO1xuXHQvLyBJbnRyb2R1Y2VkIGFuZCBjdXJyZW50bHkgb25seSBzdXBwb3J0ZWQgYnkgSUUxMC5cblx0Ly8gVmVyaWZ5IGlmIHZhcmlhYmxlIGlzIGRlZmluZWQgb24gdGhlIGN1cnJlbnQgcnVudGltZSAoaS5lLiwgbm9kZSwgYnJvd3NlcikuXG5cdC8vIENhbid0IHVzZSB0eXBlb2YgZW5jbG9zZWQgaW4gYSBmdW5jdGlvbiAoc3VjaCBhcyBjb3JlLmlzRnVuY3Rpb24pIG9yIGFuXG5cdC8vIGV4Y2VwdGlvbiB3aWxsIGJlIHRocm93biB3aGVuIHRoZSBmdW5jdGlvbiBpcyBjYWxsZWQgb24gYW4gZW52aXJvbm1lbnRcblx0Ly8gd2hlcmUgdGhlIHZhcmlhYmxlIGlzIHVuZGVmaW5lZC5cblx0aWYgKHR5cGVvZiBzZXRJbW1lZGlhdGUgPT09ICdmdW5jdGlvbicpIHtcblx0XHRzZXRJbW1lZGlhdGUoY2IpO1xuXHRcdHJldHVybjtcblx0fVxuXHQvLyBMb29rIGZvciBhbmQgY2FjaGUgdGhlIGN1c3RvbSBmYWxsYmFjayB2ZXJzaW9uIG9mIHNldEltbWVkaWF0ZS5cblx0aWYgKCFhc3luYy5uZXh0VGljay5zZXRJbW1lZGlhdGVfKSB7XG5cdFx0YXN5bmMubmV4dFRpY2suc2V0SW1tZWRpYXRlXyA9IGFzeW5jLm5leHRUaWNrLmdldFNldEltbWVkaWF0ZUVtdWxhdG9yXygpO1xuXHR9XG5cdGFzeW5jLm5leHRUaWNrLnNldEltbWVkaWF0ZV8oY2IpO1xufTtcblxuXG4vKipcbiAqIENhY2hlIGZvciB0aGUgc2V0SW1tZWRpYXRlIGltcGxlbWVudGF0aW9uLlxuICogQHR5cGUge2Z1bmN0aW9uKGZ1bmN0aW9uKCkpfVxuICogQHByaXZhdGVcbiAqL1xuYXN5bmMubmV4dFRpY2suc2V0SW1tZWRpYXRlXyA9IG51bGw7XG5cblxuLyoqXG4gKiBEZXRlcm1pbmVzIHRoZSBiZXN0IHBvc3NpYmxlIGltcGxlbWVudGF0aW9uIHRvIHJ1biBhIGZ1bmN0aW9uIGFzIHNvb24gYXNcbiAqIHRoZSBKUyBldmVudCBsb29wIGlzIGlkbGUuXG4gKiBAcmV0dXJuIHtmdW5jdGlvbihmdW5jdGlvbigpKX0gVGhlIFwic2V0SW1tZWRpYXRlXCIgaW1wbGVtZW50YXRpb24uXG4gKiBAcHJpdmF0ZVxuICovXG5hc3luYy5uZXh0VGljay5nZXRTZXRJbW1lZGlhdGVFbXVsYXRvcl8gPSBmdW5jdGlvbigpIHtcblx0Ly8gQ3JlYXRlIGEgcHJpdmF0ZSBtZXNzYWdlIGNoYW5uZWwgYW5kIHVzZSBpdCB0byBwb3N0TWVzc2FnZSBlbXB0eSBtZXNzYWdlc1xuXHQvLyB0byBvdXJzZWx2ZXMuXG5cdGxldCBDaGFubmVsO1xuXG5cdC8vIFZlcmlmeSBpZiB2YXJpYWJsZSBpcyBkZWZpbmVkIG9uIHRoZSBjdXJyZW50IHJ1bnRpbWUgKGkuZS4sIG5vZGUsIGJyb3dzZXIpLlxuXHQvLyBDYW4ndCB1c2UgdHlwZW9mIGVuY2xvc2VkIGluIGEgZnVuY3Rpb24gKHN1Y2ggYXMgY29yZS5pc0Z1bmN0aW9uKSBvciBhblxuXHQvLyBleGNlcHRpb24gd2lsbCBiZSB0aHJvd24gd2hlbiB0aGUgZnVuY3Rpb24gaXMgY2FsbGVkIG9uIGFuIGVudmlyb25tZW50XG5cdC8vIHdoZXJlIHRoZSB2YXJpYWJsZSBpcyB1bmRlZmluZWQuXG5cdGlmICh0eXBlb2YgTWVzc2FnZUNoYW5uZWwgPT09ICdmdW5jdGlvbicpIHtcblx0XHRDaGFubmVsID0gTWVzc2FnZUNoYW5uZWw7XG5cdH1cblxuXHQvLyBJZiBNZXNzYWdlQ2hhbm5lbCBpcyBub3QgYXZhaWxhYmxlIGFuZCB3ZSBhcmUgaW4gYSBicm93c2VyLCBpbXBsZW1lbnRcblx0Ly8gYW4gaWZyYW1lIGJhc2VkIHBvbHlmaWxsIGluIGJyb3dzZXJzIHRoYXQgaGF2ZSBwb3N0TWVzc2FnZSBhbmRcblx0Ly8gZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lci4gVGhlIGxhdHRlciBleGNsdWRlcyBJRTggYmVjYXVzZSBpdCBoYXMgYVxuXHQvLyBzeW5jaHJvbm91cyBwb3N0TWVzc2FnZSBpbXBsZW1lbnRhdGlvbi5cblx0aWYgKHR5cGVvZiBDaGFubmVsID09PSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJlxuXHRcdHdpbmRvdy5wb3N0TWVzc2FnZSAmJiB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcikge1xuXHRcdC8qKiBAY29uc3RydWN0b3IgKi9cblx0XHRDaGFubmVsID0gZnVuY3Rpb24oKSB7XG5cdFx0XHQvLyBNYWtlIGFuIGVtcHR5LCBpbnZpc2libGUgaWZyYW1lLlxuXHRcdFx0Y29uc3QgaWZyYW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaWZyYW1lJyk7XG5cdFx0XHRpZnJhbWUuc3R5bGUuZGlzcGxheSA9ICdub25lJztcblx0XHRcdGlmcmFtZS5zcmMgPSAnJztcblx0XHRcdGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5hcHBlbmRDaGlsZChpZnJhbWUpO1xuXHRcdFx0Y29uc3Qgd2luID0gaWZyYW1lLmNvbnRlbnRXaW5kb3c7XG5cdFx0XHRjb25zdCBkb2MgPSB3aW4uZG9jdW1lbnQ7XG5cdFx0XHRkb2Mub3BlbigpO1xuXHRcdFx0ZG9jLndyaXRlKCcnKTtcblx0XHRcdGRvYy5jbG9zZSgpO1xuXHRcdFx0Y29uc3QgbWVzc2FnZSA9ICdjYWxsSW1tZWRpYXRlJyArIE1hdGgucmFuZG9tKCk7XG5cdFx0XHRjb25zdCBvcmlnaW4gPSB3aW4ubG9jYXRpb24ucHJvdG9jb2wgKyAnLy8nICsgd2luLmxvY2F0aW9uLmhvc3Q7XG5cdFx0XHRjb25zdCBvbm1lc3NhZ2UgPSBmdW5jdGlvbihlKSB7XG5cdFx0XHRcdC8vIFZhbGlkYXRlIG9yaWdpbiBhbmQgbWVzc2FnZSB0byBtYWtlIHN1cmUgdGhhdCB0aGlzIG1lc3NhZ2Ugd2FzXG5cdFx0XHRcdC8vIGludGVuZGVkIGZvciB1cy5cblx0XHRcdFx0aWYgKGUub3JpZ2luICE9PSBvcmlnaW4gJiYgZS5kYXRhICE9PSBtZXNzYWdlKSB7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHRoaXMucG9ydDEub25tZXNzYWdlKCk7XG5cdFx0XHR9LmJpbmQodGhpcyk7XG5cdFx0XHR3aW4uYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIG9ubWVzc2FnZSwgZmFsc2UpO1xuXHRcdFx0dGhpcy5wb3J0MSA9IHt9O1xuXHRcdFx0dGhpcy5wb3J0MiA9IHtcblx0XHRcdFx0cG9zdE1lc3NhZ2U6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdHdpbi5wb3N0TWVzc2FnZShtZXNzYWdlLCBvcmlnaW4pO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXHRcdH07XG5cdH1cblx0aWYgKHR5cGVvZiBDaGFubmVsICE9PSAndW5kZWZpbmVkJykge1xuXHRcdGNvbnN0IGNoYW5uZWwgPSBuZXcgQ2hhbm5lbCgpO1xuXHRcdC8vIFVzZSBhIGZpZm8gbGlua2VkIGxpc3QgdG8gY2FsbCBjYWxsYmFja3MgaW4gdGhlIHJpZ2h0IG9yZGVyLlxuXHRcdGxldCBoZWFkID0ge307XG5cdFx0bGV0IHRhaWwgPSBoZWFkO1xuXHRcdGNoYW5uZWwucG9ydDEub25tZXNzYWdlID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRoZWFkID0gaGVhZC5uZXh0O1xuXHRcdFx0Y29uc3QgY2IgPSBoZWFkLmNiO1xuXHRcdFx0aGVhZC5jYiA9IG51bGw7XG5cdFx0XHRjYigpO1xuXHRcdH07XG5cdFx0cmV0dXJuIGZ1bmN0aW9uKGNiKSB7XG5cdFx0XHR0YWlsLm5leHQgPSB7XG5cdFx0XHRcdGNiOiBjYlxuXHRcdFx0fTtcblx0XHRcdHRhaWwgPSB0YWlsLm5leHQ7XG5cdFx0XHRjaGFubmVsLnBvcnQyLnBvc3RNZXNzYWdlKDApO1xuXHRcdH07XG5cdH1cblx0Ly8gSW1wbGVtZW50YXRpb24gZm9yIElFNi04OiBTY3JpcHQgZWxlbWVudHMgZmlyZSBhbiBhc3luY2hyb25vdXNcblx0Ly8gb25yZWFkeXN0YXRlY2hhbmdlIGV2ZW50IHdoZW4gaW5zZXJ0ZWQgaW50byB0aGUgRE9NLlxuXHRpZiAodHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyAmJiAnb25yZWFkeXN0YXRlY2hhbmdlJyBpblxuXHRcdGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpKSB7XG5cdFx0cmV0dXJuIGZ1bmN0aW9uKGNiKSB7XG5cdFx0XHRsZXQgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG5cdFx0XHRzY3JpcHQub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdC8vIENsZWFuIHVwIGFuZCBjYWxsIHRoZSBjYWxsYmFjay5cblx0XHRcdFx0c2NyaXB0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IG51bGw7XG5cdFx0XHRcdHNjcmlwdC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHNjcmlwdCk7XG5cdFx0XHRcdHNjcmlwdCA9IG51bGw7XG5cdFx0XHRcdGNiKCk7XG5cdFx0XHRcdGNiID0gbnVsbDtcblx0XHRcdH07XG5cdFx0XHRkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuYXBwZW5kQ2hpbGQoc2NyaXB0KTtcblx0XHR9O1xuXHR9XG5cdC8vIEZhbGwgYmFjayB0byBzZXRUaW1lb3V0IHdpdGggMC4gSW4gYnJvd3NlcnMgdGhpcyBjcmVhdGVzIGEgZGVsYXkgb2YgNW1zXG5cdC8vIG9yIG1vcmUuXG5cdHJldHVybiBmdW5jdGlvbihjYikge1xuXHRcdHNldFRpbWVvdXQoY2IsIDApO1xuXHR9O1xufTtcblxuXG4vKipcbiAqIEhlbHBlciBmdW5jdGlvbiB0aGF0IGlzIG92ZXJyaWRlZCB0byBwcm90ZWN0IGNhbGxiYWNrcyB3aXRoIGVudHJ5IHBvaW50XG4gKiBtb25pdG9yIGlmIHRoZSBhcHBsaWNhdGlvbiBtb25pdG9ycyBlbnRyeSBwb2ludHMuXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKCl9IGNhbGxiYWNrIENhbGxiYWNrIGZ1bmN0aW9uIHRvIGZpcmUgYXMgc29vbiBhcyBwb3NzaWJsZS5cbiAqIEByZXR1cm4ge2Z1bmN0aW9uKCl9IFRoZSB3cmFwcGVkIGNhbGxiYWNrLlxuICogQHByaXZhdGVcbiAqL1xuYXN5bmMubmV4dFRpY2sud3JhcENhbGxiYWNrXyA9IGZ1bmN0aW9uKG9wdF9yZXR1cm5WYWx1ZSkge1xuXHRyZXR1cm4gb3B0X3JldHVyblZhbHVlO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgYXN5bmM7XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogRGlzcG9zYWJsZSB1dGlsaXR5LiBXaGVuIGluaGVyaXRlZCBwcm92aWRlcyB0aGUgYGRpc3Bvc2VgIGZ1bmN0aW9uIHRvIGl0c1xuICogc3ViY2xhc3MsIHdoaWNoIGlzIHJlc3BvbnNpYmxlIGZvciBkaXNwb3Npbmcgb2YgYW55IG9iamVjdCByZWZlcmVuY2VzXG4gKiB3aGVuIGFuIGluc3RhbmNlIHdvbid0IGJlIHVzZWQgYW55bW9yZS4gU3ViY2xhc3NlcyBzaG91bGQgb3ZlcnJpZGVcbiAqIGBkaXNwb3NlSW50ZXJuYWxgIHRvIGltcGxlbWVudCBhbnkgc3BlY2lmaWMgZGlzcG9zaW5nIGxvZ2ljLlxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmNsYXNzIERpc3Bvc2FibGUge1xuXHRjb25zdHJ1Y3RvcigpIHtcblx0XHQvKipcblx0XHQgKiBGbGFnIGluZGljYXRpbmcgaWYgdGhpcyBpbnN0YW5jZSBoYXMgYWxyZWFkeSBiZWVuIGRpc3Bvc2VkLlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEBwcm90ZWN0ZWRcblx0XHQgKi9cblx0XHR0aGlzLmRpc3Bvc2VkXyA9IGZhbHNlO1xuXHR9XG5cblx0LyoqXG5cdCAqIERpc3Bvc2VzIG9mIHRoaXMgaW5zdGFuY2UncyBvYmplY3QgcmVmZXJlbmNlcy4gQ2FsbHMgYGRpc3Bvc2VJbnRlcm5hbGAuXG5cdCAqL1xuXHRkaXNwb3NlKCkge1xuXHRcdGlmICghdGhpcy5kaXNwb3NlZF8pIHtcblx0XHRcdHRoaXMuZGlzcG9zZUludGVybmFsKCk7XG5cdFx0XHR0aGlzLmRpc3Bvc2VkXyA9IHRydWU7XG5cdFx0fVxuXHR9XG5cblx0LyoqXG5cdCAqIFN1YmNsYXNzZXMgc2hvdWxkIG92ZXJyaWRlIHRoaXMgbWV0aG9kIHRvIGltcGxlbWVudCBhbnkgc3BlY2lmaWNcblx0ICogZGlzcG9zaW5nIGxvZ2ljIChsaWtlIGNsZWFyaW5nIHJlZmVyZW5jZXMgYW5kIGNhbGxpbmcgYGRpc3Bvc2VgIG9uIG90aGVyXG5cdCAqIGRpc3Bvc2FibGVzKS5cblx0ICovXG5cdGRpc3Bvc2VJbnRlcm5hbCgpIHt9XG5cblx0LyoqXG5cdCAqIENoZWNrcyBpZiB0aGlzIGluc3RhbmNlIGhhcyBhbHJlYWR5IGJlZW4gZGlzcG9zZWQuXG5cdCAqIEByZXR1cm4ge2Jvb2xlYW59XG5cdCAqL1xuXHRpc0Rpc3Bvc2VkKCkge1xuXHRcdHJldHVybiB0aGlzLmRpc3Bvc2VkXztcblx0fVxufVxuXG5leHBvcnQgZGVmYXVsdCBEaXNwb3NhYmxlO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5jbGFzcyBvYmplY3Qge1xuXHQvKipcblx0ICogQ29waWVzIGFsbCB0aGUgbWVtYmVycyBvZiBhIHNvdXJjZSBvYmplY3QgdG8gYSB0YXJnZXQgb2JqZWN0LlxuXHQgKiBAcGFyYW0ge09iamVjdH0gdGFyZ2V0IFRhcmdldCBvYmplY3QuXG5cdCAqIEBwYXJhbSB7Li4uT2JqZWN0fSB2YXJfYXJncyBUaGUgb2JqZWN0cyBmcm9tIHdoaWNoIHZhbHVlcyB3aWxsIGJlIGNvcGllZC5cblx0ICogQHJldHVybiB7T2JqZWN0fSBSZXR1cm5zIHRoZSB0YXJnZXQgb2JqZWN0IHJlZmVyZW5jZS5cblx0ICovXG5cdHN0YXRpYyBtaXhpbih0YXJnZXQpIHtcblx0XHRsZXQga2V5LCBzb3VyY2U7XG5cdFx0Zm9yIChsZXQgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblx0XHRcdGZvciAoa2V5IGluIHNvdXJjZSkge1xuXHRcdFx0XHR0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gdGFyZ2V0O1xuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgYW4gb2JqZWN0IGJhc2VkIG9uIGl0cyBmdWxseSBxdWFsaWZpZWQgZXh0ZXJuYWwgbmFtZS5cblx0ICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgVGhlIGZ1bGx5IHF1YWxpZmllZCBuYW1lLlxuXHQgKiBAcGFyYW0ge29iamVjdD19IG9wdF9vYmogVGhlIG9iamVjdCB3aXRoaW4gd2hpY2ggdG8gbG9vazsgZGVmYXVsdCBpc1xuXHQgKiAgICAgPGNvZGU+d2luZG93PC9jb2RlPi5cblx0ICogQHJldHVybiB7P30gVGhlIHZhbHVlIChvYmplY3Qgb3IgcHJpbWl0aXZlKSBvciwgaWYgbm90IGZvdW5kLCB1bmRlZmluZWQuXG5cdCAqL1xuXHRzdGF0aWMgZ2V0T2JqZWN0QnlOYW1lKG5hbWUsIG9wdF9vYmopIHtcblx0XHRjb25zdCBzY29wZSA9IG9wdF9vYmogfHwgd2luZG93O1xuXHRcdGNvbnN0IHBhcnRzID0gbmFtZS5zcGxpdCgnLicpO1xuXHRcdHJldHVybiBwYXJ0cy5yZWR1Y2UoKHBhcnQsIGtleSkgPT4gcGFydFtrZXldLCBzY29wZSk7XG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyBhIG5ldyBvYmplY3Qgd2l0aCB0aGUgc2FtZSBrZXlzIGFzIHRoZSBnaXZlbiBvbmUsIGJ1dCB3aXRoXG5cdCAqIHRoZWlyIHZhbHVlcyBzZXQgdG8gdGhlIHJldHVybiB2YWx1ZXMgb2YgdGhlIHNwZWNpZmllZCBmdW5jdGlvbi5cblx0ICogQHBhcmFtIHshT2JqZWN0fSBvYmpcblx0ICogQHBhcmFtIHshZnVuY3Rpb24oc3RyaW5nLCAqKX0gZm5cblx0ICogQHJldHVybiB7IU9iamVjdH1cblx0ICovXG5cdHN0YXRpYyBtYXAob2JqLCBmbikge1xuXHRcdGNvbnN0IG1hcHBlZE9iaiA9IHt9O1xuXHRcdGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhvYmopO1xuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuXHRcdFx0bWFwcGVkT2JqW2tleXNbaV1dID0gZm4oa2V5c1tpXSwgb2JqW2tleXNbaV1dKTtcblx0XHR9XG5cdFx0cmV0dXJuIG1hcHBlZE9iajtcblx0fVxuXG5cdC8qKlxuXHQgKiBDaGVja3MgaWYgdGhlIHR3byBnaXZlbiBvYmplY3RzIGFyZSBlcXVhbC4gVGhpcyBpcyBkb25lIHZpYSBhIHNoYWxsb3dcblx0ICogY2hlY2ssIGluY2x1ZGluZyBvbmx5IHRoZSBrZXlzIGRpcmVjdGx5IGNvbnRhaW5lZCBieSB0aGUgMiBvYmplY3RzLlxuXHQgKiBAcmV0dXJuIHtib29sZWFufVxuXHQgKi9cblx0c3RhdGljIHNoYWxsb3dFcXVhbChvYmoxLCBvYmoyKSB7XG5cdFx0aWYgKG9iajEgPT09IG9iajIpIHtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblxuXHRcdGNvbnN0IGtleXMxID0gT2JqZWN0LmtleXMob2JqMSk7XG5cdFx0Y29uc3Qga2V5czIgPSBPYmplY3Qua2V5cyhvYmoyKTtcblx0XHRpZiAoa2V5czEubGVuZ3RoICE9PSBrZXlzMi5sZW5ndGgpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IGtleXMxLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRpZiAob2JqMVtrZXlzMVtpXV0gIT09IG9iajJba2V5czFbaV1dKSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgb2JqZWN0O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5jbGFzcyBzdHJpbmcge1xuXHQvKipcblx0ICogQ29tcGFyZXMgdGhlIGdpdmVuIHN0cmluZ3Mgd2l0aG91dCB0YWtpbmcgdGhlIGNhc2UgaW50byBhY2NvdW50LlxuXHQgKiBAcGFyYW0ge3N0cmluZ3xudW1iZXJ9IHN0cjFcblx0ICogQHBhcmFtIHtzdHJpbmd8bnVtYmVyfSBzdHIyXG5cdCAqIEByZXR1cm4ge251bWJlcn0gRWl0aGVyIC0xLCAwIG9yIDEsIGFjY29yZGluZyB0byBpZiB0aGUgZmlyc3Qgc3RyaW5nIGlzXG5cdCAqICAgICBcInNtYWxsZXJcIiwgZXF1YWwgb3IgXCJiaWdnZXJcIiB0aGFuIHRoZSBzZWNvbmQgZ2l2ZW4gc3RyaW5nLlxuXHQgKi9cblx0c3RhdGljIGNhc2VJbnNlbnNpdGl2ZUNvbXBhcmUoc3RyMSwgc3RyMikge1xuXHRcdGNvbnN0IHRlc3QxID0gU3RyaW5nKHN0cjEpLnRvTG93ZXJDYXNlKCk7XG5cdFx0Y29uc3QgdGVzdDIgPSBTdHJpbmcoc3RyMikudG9Mb3dlckNhc2UoKTtcblxuXHRcdGlmICh0ZXN0MSA8IHRlc3QyKSB7XG5cdFx0XHRyZXR1cm4gLTE7XG5cdFx0fSBlbHNlIGlmICh0ZXN0MSA9PT0gdGVzdDIpIHtcblx0XHRcdHJldHVybiAwO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXR1cm4gMTtcblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogUmVtb3ZlcyB0aGUgYnJlYWtpbmcgc3BhY2VzIGZyb20gdGhlIGxlZnQgYW5kIHJpZ2h0IG9mIHRoZSBzdHJpbmcgYW5kXG5cdCAqIGNvbGxhcHNlcyB0aGUgc2VxdWVuY2VzIG9mIGJyZWFraW5nIHNwYWNlcyBpbiB0aGUgbWlkZGxlIGludG8gc2luZ2xlIHNwYWNlcy5cblx0ICogVGhlIG9yaWdpbmFsIGFuZCB0aGUgcmVzdWx0IHN0cmluZ3MgcmVuZGVyIHRoZSBzYW1lIHdheSBpbiBIVE1MLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gc3RyIEEgc3RyaW5nIGluIHdoaWNoIHRvIGNvbGxhcHNlIHNwYWNlcy5cblx0ICogQHJldHVybiB7c3RyaW5nfSBDb3B5IG9mIHRoZSBzdHJpbmcgd2l0aCBub3JtYWxpemVkIGJyZWFraW5nIHNwYWNlcy5cblx0ICovXG5cdHN0YXRpYyBjb2xsYXBzZUJyZWFraW5nU3BhY2VzKHN0cikge1xuXHRcdHJldHVybiBzdHIucmVwbGFjZSgvW1xcdFxcclxcbiBdKy9nLCAnICcpLnJlcGxhY2UoL15bXFx0XFxyXFxuIF0rfFtcXHRcXHJcXG4gXSskL2csICcnKTtcblx0fVxuXG5cdC8qKlxuXHQqIEVzY2FwZXMgY2hhcmFjdGVycyBpbiB0aGUgc3RyaW5nIHRoYXQgYXJlIG5vdCBzYWZlIHRvIHVzZSBpbiBhIFJlZ0V4cC5cblx0KiBAcGFyYW0geyp9IHN0ciBUaGUgc3RyaW5nIHRvIGVzY2FwZS4gSWYgbm90IGEgc3RyaW5nLCBpdCB3aWxsIGJlIGNhc3RlZFxuXHQqICAgICB0byBvbmUuXG5cdCogQHJldHVybiB7c3RyaW5nfSBBIFJlZ0V4cCBzYWZlLCBlc2NhcGVkIGNvcHkgb2Yge0Bjb2RlIHN9LlxuXHQqL1xuXHRzdGF0aWMgZXNjYXBlUmVnZXgoc3RyKSB7XG5cdFx0cmV0dXJuIFN0cmluZyhzdHIpXG5cdFx0XHQucmVwbGFjZSgvKFstKClcXFtcXF17fSs/Ki4kXFxefCw6IzwhXFxcXF0pL2csICdcXFxcJDEnKVxuXHRcdFx0LnJlcGxhY2UoL1xceDA4L2csICdcXFxceDA4Jyk7XG5cdH1cblxuXHQvKipcblx0KiBSZXR1cm5zIGEgc3RyaW5nIHdpdGggYXQgbGVhc3QgNjQtYml0cyBvZiByYW5kb21uZXNzLlxuXHQqIEByZXR1cm4ge3N0cmluZ30gQSByYW5kb20gc3RyaW5nLCBlLmcuIHNuMXM3dmI0Z2NpYy5cblx0Ki9cblx0c3RhdGljIGdldFJhbmRvbVN0cmluZygpIHtcblx0XHRjb25zdCB4ID0gMjE0NzQ4MzY0ODtcblx0XHRyZXR1cm4gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogeCkudG9TdHJpbmcoMzYpICtcblx0XHRcdE1hdGguYWJzKE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHgpIF4gRGF0ZS5ub3coKSkudG9TdHJpbmcoMzYpO1xuXHR9XG5cblx0LyoqXG5cdCAqIENhbGN1bGF0ZXMgdGhlIGhhc2hjb2RlIGZvciBhIHN0cmluZy4gVGhlIGhhc2hjb2RlIHZhbHVlIGlzIGNvbXB1dGVkIGJ5XG5cdCAqIHRoZSBzdW0gYWxnb3JpdGhtOiBzWzBdKjMxXihuLTEpICsgc1sxXSozMV4obi0yKSArIC4uLiArIHNbbi0xXS4gQSBuaWNlXG5cdCAqIHByb3BlcnR5IG9mIHVzaW5nIDMxIHByaW1lIGlzIHRoYXQgdGhlIG11bHRpcGxpY2F0aW9uIGNhbiBiZSByZXBsYWNlZCBieVxuXHQgKiBhIHNoaWZ0IGFuZCBhIHN1YnRyYWN0aW9uIGZvciBiZXR0ZXIgcGVyZm9ybWFuY2U6IDMxKmkgPT0gKGk8PDUpLWkuXG5cdCAqIE1vZGVybiBWTXMgZG8gdGhpcyBzb3J0IG9mIG9wdGltaXphdGlvbiBhdXRvbWF0aWNhbGx5LlxuXHQgKiBAcGFyYW0ge1N0cmluZ30gdmFsIFRhcmdldCBzdHJpbmcuXG5cdCAqIEByZXR1cm4ge051bWJlcn0gUmV0dXJucyB0aGUgc3RyaW5nIGhhc2hjb2RlLlxuXHQgKi9cblx0c3RhdGljIGhhc2hDb2RlKHZhbCkge1xuXHRcdGxldCBoYXNoID0gMDtcblx0XHRmb3IgKGxldCBpID0gMCwgbGVuID0gdmFsLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG5cdFx0XHRoYXNoID0gMzEgKiBoYXNoICsgdmFsLmNoYXJDb2RlQXQoaSk7XG5cdFx0XHRoYXNoICU9IDB4MTAwMDAwMDAwO1xuXHRcdH1cblx0XHRyZXR1cm4gaGFzaDtcblx0fVxuXG5cdC8qKlxuXHQgKiBSZXBsYWNlcyBpbnRlcnZhbCBpbnRvIHRoZSBzdHJpbmcgd2l0aCBzcGVjaWZpZWQgdmFsdWUsIGUuZy5cblx0ICogYHJlcGxhY2VJbnRlcnZhbChcImFiY2RlXCIsIDEsIDQsIFwiXCIpYCByZXR1cm5zIFwiYWVcIi5cblx0ICogQHBhcmFtIHtzdHJpbmd9IHN0ciBUaGUgaW5wdXQgc3RyaW5nLlxuXHQgKiBAcGFyYW0ge051bWJlcn0gc3RhcnQgU3RhcnQgaW50ZXJ2YWwgcG9zaXRpb24gdG8gYmUgcmVwbGFjZWQuXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBlbmQgRW5kIGludGVydmFsIHBvc2l0aW9uIHRvIGJlIHJlcGxhY2VkLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWUgVGhlIHZhbHVlIHRoYXQgcmVwbGFjZXMgdGhlIHNwZWNpZmllZCBpbnRlcnZhbC5cblx0ICogQHJldHVybiB7c3RyaW5nfVxuXHQgKi9cblx0c3RhdGljIHJlcGxhY2VJbnRlcnZhbChzdHIsIHN0YXJ0LCBlbmQsIHZhbHVlKSB7XG5cdFx0cmV0dXJuIHN0ci5zdWJzdHJpbmcoMCwgc3RhcnQpICsgdmFsdWUgKyBzdHIuc3Vic3RyaW5nKGVuZCk7XG5cdH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgc3RyaW5nO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFBhcnNlcyB0aGUgZ2l2ZW4gdXJpIHN0cmluZyBpbnRvIGFuIG9iamVjdC5cbiAqIEBwYXJhbSB7Kj19IG9wdF91cmkgT3B0aW9uYWwgc3RyaW5nIFVSSSB0byBwYXJzZVxuICovXG5mdW5jdGlvbiBwYXJzZUZyb21BbmNob3Iob3B0X3VyaSkge1xuXHR2YXIgbGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcblx0bGluay5ocmVmID0gb3B0X3VyaTtcblxuXHRpZihsaW5rLnByb3RvY29sID09PSAnOicgfHwgIS86Ly50ZXN0KGxpbmsuaHJlZikpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKGAke29wdF91cml9IGlzIG5vdCBhIHZhbGlkIFVSTGApO1xuXHR9XG5cblx0cmV0dXJuIHtcblx0XHRoYXNoOiBsaW5rLmhhc2gsXG5cdFx0aG9zdG5hbWU6IGxpbmsuaG9zdG5hbWUsXG5cdFx0cGFzc3dvcmQ6IGxpbmsucGFzc3dvcmQsXG5cdFx0cGF0aG5hbWU6IGxpbmsucGF0aG5hbWVbMF0gPT09ICcvJyA/IGxpbmsucGF0aG5hbWUgOiAnLycgKyBsaW5rLnBhdGhuYW1lLFxuXHRcdHBvcnQ6IGxpbmsucG9ydCxcblx0XHRwcm90b2NvbDogbGluay5wcm90b2NvbCxcblx0XHRzZWFyY2g6IGxpbmsuc2VhcmNoLFxuXHRcdHVzZXJuYW1lOiBsaW5rLnVzZXJuYW1lXG5cdH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IHBhcnNlRnJvbUFuY2hvcjtcbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJ21ldGFsJztcbmltcG9ydCBwYXJzZUZyb21BbmNob3IgZnJvbSAnLi9wYXJzZUZyb21BbmNob3InO1xuXG4vKipcbiAqIFBhcnNlcyB0aGUgZ2l2ZW4gdXJpIHN0cmluZyBpbnRvIGFuIG9iamVjdC4gVGhlIFVSTCBmdW5jdGlvbiB3aWxsIGJlIHVzZWRcbiAqIHdoZW4gcHJlc2VudCwgb3RoZXJ3aXNlIHdlJ2xsIGZhbGwgYmFjayB0byB0aGUgYW5jaG9yIG5vZGUgZWxlbWVudC5cbiAqIEBwYXJhbSB7Kj19IG9wdF91cmkgT3B0aW9uYWwgc3RyaW5nIFVSSSB0byBwYXJzZVxuICovXG5mdW5jdGlvbiBwYXJzZShvcHRfdXJpKSB7XG5cdGlmIChpc0Z1bmN0aW9uKFVSTCkgJiYgVVJMLmxlbmd0aCkge1xuXHRcdGNvbnN0IHVybCA9IG5ldyBVUkwob3B0X3VyaSk7XG5cblx0XHQvLyBTYWZhcmkgQnJvd3NlcnMgd2lsbCBjYXAgcG9ydCB0byB0aGUgbWF4IDE2LWJpdCB1bnNpZ25lZCBpbnRlZ2VyICg2NTUzNSkgaW5zdGVhZFxuXHRcdC8vIG9mIHRocm93aW5nIGEgVHlwZUVycm9yIGFzIHBlciBzcGVjLiBJdCB3aWxsIHN0aWxsIGtlZXAgdGhlIHBvcnQgbnVtYmVyIGluIHRoZVxuXHRcdC8vIGhyZWYgYXR0cmlidXRlLCBzbyB3ZSBjYW4gdXNlIHRoaXMgbWlzbWF0Y2ggdG8gcmFpc2UgdGhlIGV4cGVjdGVkIGV4Y2VwdGlvbi5cblx0XHRpZiAodXJsLnBvcnQgJiYgdXJsLmhyZWYuaW5kZXhPZih1cmwucG9ydCkgPT09IC0xKSB7XG5cdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKGAke29wdF91cml9IGlzIG5vdCBhIHZhbGlkIFVSTGApO1xuXHRcdH1cblxuXHRcdHJldHVybiB1cmw7XG5cdH0gZWxzZSB7XG5cdFx0cmV0dXJuIHBhcnNlRnJvbUFuY2hvcihvcHRfdXJpKTtcblx0fVxufVxuXG5leHBvcnQgZGVmYXVsdCBwYXJzZTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHsgRGlzcG9zYWJsZSB9IGZyb20gJ21ldGFsJztcblxuLyoqXG4gKiBBIGNhY2hlZCByZWZlcmVuY2UgdG8gdGhlIGNyZWF0ZSBmdW5jdGlvbi5cbiAqL1xudmFyIGNyZWF0ZSA9IE9iamVjdC5jcmVhdGU7XG5cbi8qKlxuICogQ2FzZSBpbnNlbnNpdGl2ZSBzdHJpbmcgTXVsdGltYXAgaW1wbGVtZW50YXRpb24uIEFsbG93cyBtdWx0aXBsZSB2YWx1ZXMgZm9yXG4gKiB0aGUgc2FtZSBrZXkgbmFtZS5cbiAqIEBleHRlbmRzIHtEaXNwb3NhYmxlfVxuICovXG5jbGFzcyBNdWx0aU1hcCBleHRlbmRzIERpc3Bvc2FibGUge1xuXHRjb25zdHJ1Y3RvcigpIHtcblx0XHRzdXBlcigpO1xuXHRcdHRoaXMua2V5cyA9IGNyZWF0ZShudWxsKTtcblx0XHR0aGlzLnZhbHVlcyA9IGNyZWF0ZShudWxsKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBBZGRzIHZhbHVlIHRvIGEga2V5IG5hbWUuXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG5cdCAqIEBwYXJhbSB7Kn0gdmFsdWVcblx0ICogQGNoYWluYWJsZVxuXHQgKi9cblx0YWRkKG5hbWUsIHZhbHVlKSB7XG5cdFx0dGhpcy5rZXlzW25hbWUudG9Mb3dlckNhc2UoKV0gPSBuYW1lO1xuXHRcdHRoaXMudmFsdWVzW25hbWUudG9Mb3dlckNhc2UoKV0gPSB0aGlzLnZhbHVlc1tuYW1lLnRvTG93ZXJDYXNlKCldIHx8IFtdO1xuXHRcdHRoaXMudmFsdWVzW25hbWUudG9Mb3dlckNhc2UoKV0ucHVzaCh2YWx1ZSk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxuXHQvKipcblx0ICogQ2xlYXJzIG1hcCBuYW1lcyBhbmQgdmFsdWVzLlxuXHQgKiBAY2hhaW5hYmxlXG5cdCAqL1xuXHRjbGVhcigpIHtcblx0XHR0aGlzLmtleXMgPSBjcmVhdGUobnVsbCk7XG5cdFx0dGhpcy52YWx1ZXMgPSBjcmVhdGUobnVsbCk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxuXHQvKipcblx0ICogQ2hlY2tzIGlmIG1hcCBjb250YWlucyBhIHZhbHVlIHRvIHRoZSBrZXkgbmFtZS5cblx0ICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcblx0ICogQHJldHVybiB7Ym9vbGVhbn1cblx0ICogQGNoYWluYWJsZVxuXHQgKi9cblx0Y29udGFpbnMobmFtZSkge1xuXHRcdHJldHVybiBuYW1lLnRvTG93ZXJDYXNlKCkgaW4gdGhpcy52YWx1ZXM7XG5cdH1cblxuXHQvKipcblx0ICogQGluaGVyaXREb2Ncblx0ICovXG5cdGRpc3Bvc2VJbnRlcm5hbCgpIHtcblx0XHR0aGlzLnZhbHVlcyA9IG51bGw7XG5cdH1cblxuXHQvKipcblx0ICogQ3JlYXRlcyBhIGBNdWx0aU1hcGAgaW5zdGFuY2UgZnJvbSB0aGUgZ2l2ZW4gb2JqZWN0LlxuXHQgKiBAcGFyYW0geyFPYmplY3R9IG9ialxuXHQgKiBAcmV0dXJuIHshTXVsdGlNYXB9XG5cdCAqL1xuXHRzdGF0aWMgZnJvbU9iamVjdChvYmopIHtcblx0XHR2YXIgbWFwID0gbmV3IE11bHRpTWFwKCk7XG5cdFx0dmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmopO1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuXHRcdFx0bWFwLnNldChrZXlzW2ldLCBvYmpba2V5c1tpXV0pO1xuXHRcdH1cblx0XHRyZXR1cm4gbWFwO1xuXHR9XG5cblx0LyoqXG5cdCAqIEdldHMgdGhlIGZpcnN0IGFkZGVkIHZhbHVlIGZyb20gYSBrZXkgbmFtZS5cblx0ICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcblx0ICogQHJldHVybiB7Kn1cblx0ICogQGNoYWluYWJsZVxuXHQgKi9cblx0Z2V0KG5hbWUpIHtcblx0XHR2YXIgdmFsdWVzID0gdGhpcy52YWx1ZXNbbmFtZS50b0xvd2VyQ2FzZSgpXTtcblx0XHRpZiAodmFsdWVzKSB7XG5cdFx0XHRyZXR1cm4gdmFsdWVzWzBdO1xuXHRcdH1cblx0fVxuXG5cdC8qKlxuXHQgKiBHZXRzIGFsbCB2YWx1ZXMgZnJvbSBhIGtleSBuYW1lLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuXHQgKiBAcmV0dXJuIHtBcnJheS48Kj59XG5cdCAqL1xuXHRnZXRBbGwobmFtZSkge1xuXHRcdHJldHVybiB0aGlzLnZhbHVlc1tuYW1lLnRvTG93ZXJDYXNlKCldO1xuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgbWFwIGlzIGVtcHR5LCBmYWxzZSBvdGhlcndpc2UuXG5cdCAqIEByZXR1cm4ge2Jvb2xlYW59XG5cdCAqL1xuXHRpc0VtcHR5KCkge1xuXHRcdHJldHVybiB0aGlzLnNpemUoKSA9PT0gMDtcblx0fVxuXG5cdC8qKlxuXHQgKiBHZXRzIGFycmF5IG9mIGtleSBuYW1lcy5cblx0ICogQHJldHVybiB7QXJyYXkuPHN0cmluZz59XG5cdCAqL1xuXHRuYW1lcygpIHtcblx0XHRyZXR1cm4gT2JqZWN0LmtleXModGhpcy52YWx1ZXMpLm1hcCgoa2V5KSA9PiB0aGlzLmtleXNba2V5XSk7XG5cdH1cblxuXHQvKipcblx0ICogUmVtb3ZlcyBhbGwgdmFsdWVzIGZyb20gYSBrZXkgbmFtZS5cblx0ICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcblx0ICogQGNoYWluYWJsZVxuXHQgKi9cblx0cmVtb3ZlKG5hbWUpIHtcblx0XHRkZWxldGUgdGhpcy5rZXlzW25hbWUudG9Mb3dlckNhc2UoKV07XG5cdFx0ZGVsZXRlIHRoaXMudmFsdWVzW25hbWUudG9Mb3dlckNhc2UoKV07XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxuXHQvKipcblx0ICogU2V0cyB0aGUgdmFsdWUgb2YgYSBrZXkgbmFtZS4gUmVsZXZhbnQgdG8gcmVwbGFjZSB0aGUgY3VycmVudCB2YWx1ZXMgd2l0aFxuXHQgKiBhIG5ldyBvbmUuXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG5cdCAqIEBwYXJhbSB7Kn0gdmFsdWVcblx0ICogQGNoYWluYWJsZVxuXHQgKi9cblx0c2V0KG5hbWUsIHZhbHVlKSB7XG5cdFx0dGhpcy5rZXlzW25hbWUudG9Mb3dlckNhc2UoKV0gPSBuYW1lO1xuXHRcdHRoaXMudmFsdWVzW25hbWUudG9Mb3dlckNhc2UoKV0gPSBbdmFsdWVdO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0LyoqXG5cdCAqIEdldHMgdGhlIHNpemUgb2YgdGhlIG1hcCBrZXkgbmFtZXMuXG5cdCAqIEByZXR1cm4ge251bWJlcn1cblx0ICovXG5cdHNpemUoKSB7XG5cdFx0cmV0dXJuIHRoaXMubmFtZXMoKS5sZW5ndGg7XG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgcGFyc2VkIHZhbHVlcyBhcyBhIHN0cmluZy5cblx0ICogQHJldHVybiB7c3RyaW5nfVxuXHQgKi9cblx0dG9TdHJpbmcoKSB7XG5cdFx0cmV0dXJuIEpTT04uc3RyaW5naWZ5KHRoaXMudmFsdWVzKTtcblx0fVxufVxuXG5leHBvcnQgZGVmYXVsdCBNdWx0aU1hcDtcbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHsgYXJyYXkgfSBmcm9tICdtZXRhbCc7XG5cbi8qKlxuICogR2VuZXJpYyB0cmVlIG5vZGUgZGF0YSBzdHJ1Y3R1cmUgd2l0aCBhcmJpdHJhcnkgbnVtYmVyIG9mIGNoaWxkIG5vZGVzLlxuICogQHBhcmFtIHtWfSB2YWx1ZSBWYWx1ZS5cbiAqIEBjb25zdHJ1Y3RvclxuICovXG5jbGFzcyBUcmVlTm9kZSB7XG5cblx0Y29uc3RydWN0b3IodmFsdWUpIHtcblx0XHQvKipcblx0XHQgKiBUaGUgdmFsdWUuXG5cdFx0ICogQHByaXZhdGUge1Z9XG5cdFx0ICovXG5cdFx0dGhpcy52YWx1ZV8gPSB2YWx1ZTtcblxuXHRcdC8qKlxuXHRcdCAqIFJlZmVyZW5jZSB0byB0aGUgcGFyZW50IG5vZGUgb3IgbnVsbCBpZiBpdCBoYXMgbm8gcGFyZW50LlxuXHRcdCAqIEBwcml2YXRlIHtUcmVlTm9kZX1cblx0XHQgKi9cblx0XHR0aGlzLnBhcmVudF8gPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogQ2hpbGQgbm9kZXMgb3IgbnVsbCBpbiBjYXNlIG9mIGxlYWYgbm9kZS5cblx0XHQgKiBAcHJpdmF0ZSB7QXJyYXk8IVRyZWVOb2RlPn1cblx0XHQgKi9cblx0XHR0aGlzLmNoaWxkcmVuXyA9IG51bGw7XG5cdH1cblxuXHQvKipcblx0ICogQXBwZW5kcyBhIGNoaWxkIG5vZGUgdG8gdGhpcyBub2RlLlxuXHQgKiBAcGFyYW0geyFUcmVlTm9kZX0gY2hpbGQgT3JwaGFuIGNoaWxkIG5vZGUuXG5cdCAqL1xuXHRhZGRDaGlsZChjaGlsZCkge1xuXHRcdGFzc2VydENoaWxkSGFzTm9QYXJlbnQoY2hpbGQpO1xuXHRcdGNoaWxkLnNldFBhcmVudCh0aGlzKTtcblx0XHR0aGlzLmNoaWxkcmVuXyA9IHRoaXMuY2hpbGRyZW5fIHx8IFtdO1xuXHRcdHRoaXMuY2hpbGRyZW5fLnB1c2goY2hpbGQpO1xuXHR9XG5cblx0LyoqXG5cdCAqIFRlbGxzIHdoZXRoZXIgdGhpcyBub2RlIGlzIHRoZSBhbmNlc3RvciBvZiB0aGUgZ2l2ZW4gbm9kZS5cblx0ICogQHBhcmFtIHshVHJlZU5vZGV9IG5vZGUgQSBub2RlLlxuXHQgKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoaXMgbm9kZSBpcyB0aGUgYW5jZXN0b3Igb2Yge0Bjb2RlIG5vZGV9LlxuXHQgKi9cblx0Y29udGFpbnMobm9kZSkge1xuXHRcdGxldCBjdXJyZW50ID0gbm9kZS5nZXRQYXJlbnQoKTtcblx0XHR3aGlsZSAoY3VycmVudCkge1xuXHRcdFx0aWYgKGN1cnJlbnQgPT09IHRoaXMpIHtcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cdFx0XHRjdXJyZW50ID0gY3VycmVudC5nZXRQYXJlbnQoKTtcblx0XHR9XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0LyoqXG5cdCAqIEByZXR1cm4geyFBcnJheTxUcmVlTm9kZT59IEFsbCBhbmNlc3RvciBub2RlcyBpbiBib3R0b20tdXAgb3JkZXIuXG5cdCAqL1xuXHRnZXRBbmNlc3RvcnMoKSB7XG5cdFx0bGV0IGFuY2VzdG9ycyA9IFtdO1xuXHRcdGxldCBub2RlID0gdGhpcy5nZXRQYXJlbnQoKTtcblx0XHR3aGlsZSAobm9kZSkge1xuXHRcdFx0YW5jZXN0b3JzLnB1c2gobm9kZSk7XG5cdFx0XHRub2RlID0gbm9kZS5nZXRQYXJlbnQoKTtcblx0XHR9XG5cdFx0cmV0dXJuIGFuY2VzdG9ycztcblx0fVxuXG5cdC8qKlxuXHQgKiBHZXRzIHRoZSBjaGlsZCBub2RlIG9mIHRoaXMgbm9kZSBhdCB0aGUgZ2l2ZW4gaW5kZXguXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCBDaGlsZCBpbmRleC5cblx0ICogQHJldHVybiB7P1RyZWVOb2RlfSBUaGUgbm9kZSBhdCB0aGUgZ2l2ZW4gaW5kZXhcblx0ICogb3IgbnVsbCBpZiBub3QgZm91bmQuXG5cdCAqL1xuXHRnZXRDaGlsZEF0KGluZGV4KSB7XG5cdFx0cmV0dXJuIHRoaXMuZ2V0Q2hpbGRyZW4oKVtpbmRleF0gfHwgbnVsbDtcblx0fVxuXG5cdC8qKlxuXHQgKiBAcmV0dXJuIHs/QXJyYXk8IVRyZWVOb2RlPn0gQ2hpbGQgbm9kZXMgb3IgbnVsbCBpbiBjYXNlIG9mIGxlYWYgbm9kZS5cblx0ICovXG5cdGdldENoaWxkcmVuKCkge1xuXHRcdHJldHVybiB0aGlzLmNoaWxkcmVuXyB8fCBUcmVlTm9kZS5FTVBUWV9BUlJBWTtcblx0fVxuXG5cdC8qKlxuXHQgKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBudW1iZXIgb2YgY2hpbGRyZW4uXG5cdCAqL1xuXHRnZXRDaGlsZENvdW50KCkge1xuXHRcdHJldHVybiB0aGlzLmdldENoaWxkcmVuKCkubGVuZ3RoO1xuXHR9XG5cblx0LyoqXG5cdCAqIEByZXR1cm4ge251bWJlcn0gVGhlIG51bWJlciBvZiBhbmNlc3RvcnMgb2YgdGhlIG5vZGUuXG5cdCAqL1xuXHRnZXREZXB0aCgpIHtcblx0XHRsZXQgZGVwdGggPSAwO1xuXHRcdGxldCBub2RlID0gdGhpcztcblx0XHR3aGlsZSAobm9kZS5nZXRQYXJlbnQoKSkge1xuXHRcdFx0ZGVwdGgrKztcblx0XHRcdG5vZGUgPSBub2RlLmdldFBhcmVudCgpO1xuXHRcdH1cblx0XHRyZXR1cm4gZGVwdGg7XG5cdH1cblxuXHQvKipcblx0ICogQHJldHVybiB7P1RyZWVOb2RlfSBQYXJlbnQgbm9kZSBvciBudWxsIGlmIGl0IGhhcyBubyBwYXJlbnQuXG5cdCAqL1xuXHRnZXRQYXJlbnQoKSB7XG5cdFx0cmV0dXJuIHRoaXMucGFyZW50Xztcblx0fVxuXG5cdC8qKlxuXHQgKiBAcmV0dXJuIHshVHJlZU5vZGV9IFRoZSByb290IG9mIHRoZSB0cmVlIHN0cnVjdHVyZSwgaS5lLiB0aGUgZmFydGhlc3Rcblx0ICogYW5jZXN0b3Igb2YgdGhlIG5vZGUgb3IgdGhlIG5vZGUgaXRzZWxmIGlmIGl0IGhhcyBubyBwYXJlbnRzLlxuXHQgKi9cblx0Z2V0Um9vdCgpIHtcblx0XHRsZXQgcm9vdCA9IHRoaXM7XG5cdFx0d2hpbGUgKHJvb3QuZ2V0UGFyZW50KCkpIHtcblx0XHRcdHJvb3QgPSByb290LmdldFBhcmVudCgpO1xuXHRcdH1cblx0XHRyZXR1cm4gcm9vdDtcblx0fVxuXG5cdC8qKlxuXHQgKiBHZXRzIHRoZSB2YWx1ZS5cblx0ICogQHJldHVybiB7Vn0gVGhlIHZhbHVlLlxuXHQgKi9cblx0Z2V0VmFsdWUoKSB7XG5cdFx0cmV0dXJuIHRoaXMudmFsdWVfO1xuXHR9XG5cblx0LyoqXG5cdCAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIG5vZGUgaXMgYSBsZWFmIG5vZGUuXG5cdCAqL1xuXHRpc0xlYWYoKSB7XG5cdFx0cmV0dXJuICF0aGlzLmdldENoaWxkQ291bnQoKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBSZW1vdmVzIHRoZSBnaXZlbiBjaGlsZCBub2RlIG9mIHRoaXMgbm9kZS5cblx0ICogQHBhcmFtIHtUcmVlTm9kZX0gY2hpbGQgVGhlIG5vZGUgdG8gcmVtb3ZlLlxuXHQgKiBAcmV0dXJuIHtUcmVlTm9kZX0gVGhlIHJlbW92ZWQgbm9kZSBpZiBhbnksIG51bGwgb3RoZXJ3aXNlLlxuXHQgKi9cblx0cmVtb3ZlQ2hpbGQoY2hpbGQpIHtcblx0XHRpZiAoYXJyYXkucmVtb3ZlKHRoaXMuZ2V0Q2hpbGRyZW4oKSwgY2hpbGQpKSB7XG5cdFx0XHRyZXR1cm4gY2hpbGQ7XG5cdFx0fVxuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgdGhlIHBhcmVudCBub2RlIG9mIHRoaXMgbm9kZS4gVGhlIGNhbGxlcnMgbXVzdCBlbnN1cmUgdGhhdCB0aGVcblx0ICogcGFyZW50IG5vZGUgYW5kIG9ubHkgdGhhdCBoYXMgdGhpcyBub2RlIGFtb25nIGl0cyBjaGlsZHJlbi5cblx0ICogQHBhcmFtIHtUcmVlTm9kZX0gcGFyZW50IFRoZSBwYXJlbnQgdG8gc2V0LiBJZiBudWxsLCB0aGUgbm9kZSB3aWxsIGJlXG5cdCAqIGRldGFjaGVkIGZyb20gdGhlIHRyZWUuXG5cdCAqIEBwcm90ZWN0ZWRcblx0ICovXG5cdHNldFBhcmVudChwYXJlbnQpIHtcblx0XHR0aGlzLnBhcmVudF8gPSBwYXJlbnQ7XG5cdH1cblxuXHQvKipcblx0ICogVHJhdmVyc2VzIHRoZSBzdWJ0cmVlLiBUaGUgZmlyc3QgY2FsbGJhY2sgc3RhcnRzIHdpdGggdGhpcyBub2RlLFxuXHQgKiBhbmQgdmlzaXRzIHRoZSBkZXNjZW5kYW50IG5vZGVzIGRlcHRoLWZpcnN0LCBpbiBwcmVvcmRlci5cblx0ICogVGhlIHNlY29uZCBjYWxsYmFjaywgc3RhcnRzIHdpdGggZGVlcGVzdCBjaGlsZCB0aGVuIHZpc2l0c1xuXHQgKiB0aGUgYW5jZXN0b3Igbm9kZXMgZGVwdGgtZmlyc3QsIGluIHBvc3RvcmRlci4gRS5nLlxuXHQgKlxuXHQgKiAgXHQgQVxuXHQgKiAgICAvIFxcXG5cdCAqICAgQiAgIENcblx0ICogIC8gICAvIFxcXG5cdCAqIEQgICBFICAgRlxuXHQgKlxuXHQgKiBwcmVvcmRlciAtPiBbJ0EnLCAnQicsICdEJywgJ0MnLCAnRScsICdGJ11cblx0ICogcG9zdG9yZGVyIC0+IFsnRCcsICdCJywgJ0UnLCAnRicsICdDJywgJ0EnXVxuXHQgKlxuXHQgKiBAcGFyYW0ge2Z1bmN0aW9uPX0gb3B0X3ByZW9yZGVyRm4gVGhlIGNhbGxiYWNrIHRvIGV4ZWN1dGUgd2hlbiB2aXNpdGluZyBhIG5vZGUuXG5cdCAqIEBwYXJhbSB7ZnVuY3Rpb249fSBvcHRfcG9zdG9yZGVyRm4gVGhlIGNhbGxiYWNrIHRvIGV4ZWN1dGUgYmVmb3JlIGxlYXZpbmcgYSBub2RlLlxuXHQgKi9cblx0dHJhdmVyc2Uob3B0X3ByZW9yZGVyRm4sIG9wdF9wb3N0b3JkZXJGbikge1xuXHRcdGlmIChvcHRfcHJlb3JkZXJGbikge1xuXHRcdFx0b3B0X3ByZW9yZGVyRm4odGhpcyk7XG5cdFx0fVxuXHRcdHRoaXMuZ2V0Q2hpbGRyZW4oKS5mb3JFYWNoKChjaGlsZCkgPT4gY2hpbGQudHJhdmVyc2Uob3B0X3ByZW9yZGVyRm4sIG9wdF9wb3N0b3JkZXJGbikpO1xuXHRcdGlmIChvcHRfcG9zdG9yZGVyRm4pIHtcblx0XHRcdG9wdF9wb3N0b3JkZXJGbih0aGlzKTtcblx0XHR9XG5cdH1cblxufVxuXG4vKipcbiAqIENvbnN0YW50IGZvciBlbXB0eSBhcnJheSB0byBhdm9pZCB1bm5lY2Vzc2FyeSBhbGxvY2F0aW9ucy5cbiAqIEBwcml2YXRlXG4gKi9cblRyZWVOb2RlLkVNUFRZX0FSUkFZID0gW107XG5cbi8qKlxuICogQXNzZXJ0cyB0aGF0IGNoaWxkIGhhcyBubyBwYXJlbnQuXG4gKiBAcGFyYW0ge1RyZWVOb2RlfSBjaGlsZCBBIGNoaWxkLlxuICogQHByaXZhdGVcbiAqL1xuY29uc3QgYXNzZXJ0Q2hpbGRIYXNOb1BhcmVudCA9IGZ1bmN0aW9uKGNoaWxkKSB7XG5cdGlmIChjaGlsZC5nZXRQYXJlbnQoKSkge1xuXHRcdHRocm93IG5ldyBFcnJvcignQ2Fubm90IGFkZCBjaGlsZCB3aXRoIHBhcmVudC4nKTtcblx0fVxufTtcblxuZXhwb3J0IGRlZmF1bHQgVHJlZU5vZGU7XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB7IGlzRGVmLCBzdHJpbmcgfSBmcm9tICdtZXRhbCc7XG5pbXBvcnQgcGFyc2UgZnJvbSAnLi9wYXJzZSc7XG5pbXBvcnQgeyBNdWx0aU1hcCB9IGZyb20gJ21ldGFsLXN0cnVjdHMnO1xuXG52YXIgcGFyc2VGbl8gPSBwYXJzZTtcblxuY2xhc3MgVXJpIHtcblxuXHQvKipcblx0ICogVGhpcyBjbGFzcyBjb250YWlucyBzZXR0ZXJzIGFuZCBnZXR0ZXJzIGZvciB0aGUgcGFydHMgb2YgdGhlIFVSSS5cblx0ICogVGhlIGZvbGxvd2luZyBmaWd1cmUgZGlzcGxheXMgYW4gZXhhbXBsZSBVUklzIGFuZCB0aGVpciBjb21wb25lbnQgcGFydHMuXG5cdCAqXG5cdCAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhdGhcblx0ICpcdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAg4pSM4pSA4pSA4pSA4pS04pSA4pSA4pSA4pSA4pSQXG5cdCAqXHQgIGFiYzovL2V4YW1wbGUuY29tOjEyMy9wYXRoL2RhdGE/a2V5PXZhbHVlI2ZyYWdpZDFcblx0ICpcdCAg4pSU4pSs4pSYICAg4pSU4pSA4pSA4pSA4pSA4pSs4pSA4pSA4pSA4pSA4pSYIOKUlOKUrOKUmCAgICAgICAgICAg4pSU4pSA4pSA4pSA4pSs4pSA4pSA4pSA4pSYIOKUlOKUgOKUgOKUrOKUgOKUgOKUmFxuXHQgKiBwcm90b2NvbCAgaG9zdG5hbWUgIHBvcnQgICAgICAgICAgICBzZWFyY2ggICAgaGFzaFxuXHQgKiAgICAgICAgICDilJTilIDilIDilIDilIDilIDilIDilKzilIDilIDilIDilIDilIDilIDilIDilJhcblx0ICogICAgICAgICAgICAgICAgaG9zdFxuXHQgKlxuXHQgKiBAcGFyYW0geyo9fSBvcHRfdXJpIE9wdGlvbmFsIHN0cmluZyBVUkkgdG8gcGFyc2Vcblx0ICogQGNvbnN0cnVjdG9yXG5cdCAqL1xuXHRjb25zdHJ1Y3RvcihvcHRfdXJpID0gJycpIHtcblx0XHR0aGlzLnVybCA9IFVyaS5wYXJzZSh0aGlzLm1heWJlQWRkUHJvdG9jb2xBbmRIb3N0bmFtZV8ob3B0X3VyaSkpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEFkZHMgcGFyYW1ldGVycyB0byB1cmkgZnJvbSBhIDxjb2RlPk11bHRpTWFwPC9jb2RlPiBhcyBzb3VyY2UuXG5cdCAqIEBwYXJhbSB7TXVsdGlNYXB9IG11bHRpbWFwIFRoZSA8Y29kZT5NdWx0aU1hcDwvY29kZT4gY29udGFpbmluZyB0aGVcblx0ICogICBwYXJhbWV0ZXJzLlxuXHQgKiBAcHJvdGVjdGVkXG5cdCAqIEBjaGFpbmFibGVcblx0ICovXG5cdGFkZFBhcmFtZXRlcnNGcm9tTXVsdGlNYXAobXVsdGltYXApIHtcblx0XHRtdWx0aW1hcC5uYW1lcygpLmZvckVhY2goKG5hbWUpID0+IHtcblx0XHRcdG11bHRpbWFwLmdldEFsbChuYW1lKS5mb3JFYWNoKCh2YWx1ZSkgPT4ge1xuXHRcdFx0XHR0aGlzLmFkZFBhcmFtZXRlclZhbHVlKG5hbWUsIHZhbHVlKTtcblx0XHRcdH0pO1xuXHRcdH0pO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0LyoqXG5cdCAqIEFkZHMgdGhlIHZhbHVlIG9mIHRoZSBuYW1lZCBxdWVyeSBwYXJhbWV0ZXJzLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBwYXJhbWV0ZXIgdG8gc2V0LlxuXHQgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSBuZXcgdmFsdWUuIFdpbGwgYmUgZXhwbGljaXRseSBjYXN0ZWQgdG8gU3RyaW5nLlxuXHQgKiBAY2hhaW5hYmxlXG5cdCAqL1xuXHRhZGRQYXJhbWV0ZXJWYWx1ZShuYW1lLCB2YWx1ZSkge1xuXHRcdHRoaXMuZW5zdXJlUXVlcnlJbml0aWFsaXplZF8oKTtcblx0XHRpZiAoaXNEZWYodmFsdWUpKSB7XG5cdFx0XHR2YWx1ZSA9IFN0cmluZyh2YWx1ZSk7XG5cdFx0fVxuXHRcdHRoaXMucXVlcnkuYWRkKG5hbWUsIHZhbHVlKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXG5cdC8qKlxuXHQgKiBBZGRzIHRoZSB2YWx1ZXMgb2YgdGhlIG5hbWVkIHF1ZXJ5IHBhcmFtZXRlci5cblx0ICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUgcGFyYW1ldGVyIHRvIHNldC5cblx0ICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgbmV3IHZhbHVlLlxuXHQgKiBAY2hhaW5hYmxlXG5cdCAqL1xuXHRhZGRQYXJhbWV0ZXJWYWx1ZXMobmFtZSwgdmFsdWVzKSB7XG5cdFx0dmFsdWVzLmZvckVhY2goKHZhbHVlKSA9PiB0aGlzLmFkZFBhcmFtZXRlclZhbHVlKG5hbWUsIHZhbHVlKSk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxuXHQvKipcblx0ICogRW5zdXJlcyBxdWVyeSBpbnRlcm5hbCBtYXAgaXMgaW5pdGlhbGl6ZWQgYW5kIHN5bmNlZCB3aXRoIGluaXRpYWwgdmFsdWVcblx0ICogZXh0cmFjdGVkIGZyb20gVVJJIHNlYXJjaCBwYXJ0LlxuXHQgKiBAcHJvdGVjdGVkXG5cdCAqL1xuXHRlbnN1cmVRdWVyeUluaXRpYWxpemVkXygpIHtcblx0XHRpZiAodGhpcy5xdWVyeSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHR0aGlzLnF1ZXJ5ID0gbmV3IE11bHRpTWFwKCk7XG5cdFx0dmFyIHNlYXJjaCA9IHRoaXMudXJsLnNlYXJjaDtcblx0XHRpZiAoc2VhcmNoKSB7XG5cdFx0XHRzZWFyY2guc3Vic3RyaW5nKDEpLnNwbGl0KCcmJykuZm9yRWFjaCgocGFyYW0pID0+IHtcblx0XHRcdFx0dmFyIFtrZXksIHZhbHVlXSA9IHBhcmFtLnNwbGl0KCc9Jyk7XG5cdFx0XHRcdGlmIChpc0RlZih2YWx1ZSkpIHtcblx0XHRcdFx0XHR2YWx1ZSA9IFVyaS51cmxEZWNvZGUodmFsdWUpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHRoaXMuYWRkUGFyYW1ldGVyVmFsdWUoa2V5LCB2YWx1ZSk7XG5cdFx0XHR9KTtcblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogR2V0cyB0aGUgaGFzaCBwYXJ0IG9mIHVyaS5cblx0ICogQHJldHVybiB7c3RyaW5nfVxuXHQgKi9cblx0Z2V0SGFzaCgpIHtcblx0XHRyZXR1cm4gdGhpcy51cmwuaGFzaCB8fCAnJztcblx0fVxuXG5cdC8qKlxuXHQgKiBHZXRzIHRoZSBob3N0IHBhcnQgb2YgdXJpLiBFLmcuIDxjb2RlPltob3N0bmFtZV06W3BvcnRdPC9jb2RlPi5cblx0ICogQHJldHVybiB7c3RyaW5nfVxuXHQgKi9cblx0Z2V0SG9zdCgpIHtcblx0XHR2YXIgaG9zdCA9IHRoaXMuZ2V0SG9zdG5hbWUoKTtcblx0XHRpZiAoaG9zdCkge1xuXHRcdFx0dmFyIHBvcnQgPSB0aGlzLmdldFBvcnQoKTtcblx0XHRcdGlmIChwb3J0ICYmIHBvcnQgIT09ICc4MCcpIHtcblx0XHRcdFx0aG9zdCArPSAnOicgKyBwb3J0O1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gaG9zdDtcblx0fVxuXG5cdC8qKlxuXHQgKiBHZXRzIHRoZSBob3N0bmFtZSBwYXJ0IG9mIHVyaSB3aXRob3V0IHByb3RvY29sIGFuZCBwb3J0LlxuXHQgKiBAcmV0dXJuIHtzdHJpbmd9XG5cdCAqL1xuXHRnZXRIb3N0bmFtZSgpIHtcblx0XHR2YXIgaG9zdG5hbWUgPSB0aGlzLnVybC5ob3N0bmFtZTtcblx0XHRpZiAoaG9zdG5hbWUgPT09IFVyaS5IT1NUTkFNRV9QTEFDRUhPTERFUikge1xuXHRcdFx0cmV0dXJuICcnO1xuXHRcdH1cblx0XHRyZXR1cm4gaG9zdG5hbWU7XG5cdH1cblxuXHQvKipcblx0ICogR2V0cyB0aGUgb3JpZ2luIHBhcnQgb2YgdXJpLiBFLmcuIDxjb2RlPmh0dHA6Ly9baG9zdG5hbWVdOltwb3J0XTwvY29kZT4uXG5cdCAqIEByZXR1cm4ge3N0cmluZ31cblx0ICovXG5cdGdldE9yaWdpbigpIHtcblx0XHR2YXIgaG9zdCA9IHRoaXMuZ2V0SG9zdCgpO1xuXHRcdGlmIChob3N0KSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5nZXRQcm90b2NvbCgpICsgJy8vJyArIGhvc3Q7XG5cdFx0fVxuXHRcdHJldHVybiAnJztcblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBmaXJzdCB2YWx1ZSBmb3IgYSBnaXZlbiBwYXJhbWV0ZXIgb3IgdW5kZWZpbmVkIGlmIHRoZSBnaXZlblxuXHQgKiBwYXJhbWV0ZXIgbmFtZSBkb2VzIG5vdCBhcHBlYXIgaW4gdGhlIHF1ZXJ5IHN0cmluZy5cblx0ICogQHBhcmFtIHtzdHJpbmd9IHBhcmFtTmFtZSBVbmVzY2FwZWQgcGFyYW1ldGVyIG5hbWUuXG5cdCAqIEByZXR1cm4ge3N0cmluZ3x1bmRlZmluZWR9IFRoZSBmaXJzdCB2YWx1ZSBmb3IgYSBnaXZlbiBwYXJhbWV0ZXIgb3Jcblx0ICogICB1bmRlZmluZWQgaWYgdGhlIGdpdmVuIHBhcmFtZXRlciBuYW1lIGRvZXMgbm90IGFwcGVhciBpbiB0aGUgcXVlcnlcblx0ICogICBzdHJpbmcuXG5cdCAqL1xuXHRnZXRQYXJhbWV0ZXJWYWx1ZShuYW1lKSB7XG5cdFx0dGhpcy5lbnN1cmVRdWVyeUluaXRpYWxpemVkXygpO1xuXHRcdHJldHVybiB0aGlzLnF1ZXJ5LmdldChuYW1lKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSB2YWx1ZTxiPnM8L2I+IGZvciBhIGdpdmVuIHBhcmFtZXRlciBhcyBhIGxpc3Qgb2YgZGVjb2RlZFxuXHQgKiBxdWVyeSBwYXJhbWV0ZXIgdmFsdWVzLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBUaGUgcGFyYW1ldGVyIHRvIGdldCB2YWx1ZXMgZm9yLlxuXHQgKiBAcmV0dXJuIHshQXJyYXk8Pz59IFRoZSB2YWx1ZXMgZm9yIGEgZ2l2ZW4gcGFyYW1ldGVyIGFzIGEgbGlzdCBvZiBkZWNvZGVkXG5cdCAqICAgcXVlcnkgcGFyYW1ldGVyIHZhbHVlcy5cblx0ICovXG5cdGdldFBhcmFtZXRlclZhbHVlcyhuYW1lKSB7XG5cdFx0dGhpcy5lbnN1cmVRdWVyeUluaXRpYWxpemVkXygpO1xuXHRcdHJldHVybiB0aGlzLnF1ZXJ5LmdldEFsbChuYW1lKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBuYW1lPGI+czwvYj4gb2YgdGhlIHBhcmFtZXRlcnMuXG5cdCAqIEByZXR1cm4geyFBcnJheTxzdHJpbmc+fSBUaGUgbmFtZXMgZm9yIHRoZSBwYXJhbWV0ZXJzIGFzIGEgbGlzdCBvZlxuXHQgKiAgIHN0cmluZ3MuXG5cdCAqL1xuXHRnZXRQYXJhbWV0ZXJOYW1lcygpIHtcblx0XHR0aGlzLmVuc3VyZVF1ZXJ5SW5pdGlhbGl6ZWRfKCk7XG5cdFx0cmV0dXJuIHRoaXMucXVlcnkubmFtZXMoKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBHZXRzIHRoZSBmdW5jdGlvbiBjdXJyZW50bHkgYmVpbmcgdXNlZCB0byBwYXJzZSBVUklzLlxuXHQgKiBAcmV0dXJuIHshZnVuY3Rpb24oKX1cblx0ICovXG5cdHN0YXRpYyBnZXRQYXJzZUZuKCkge1xuXHRcdHJldHVybiBwYXJzZUZuXztcblx0fVxuXG5cdC8qKlxuXHQgKiBHZXRzIHRoZSBwYXRobmFtZSBwYXJ0IG9mIHVyaS5cblx0ICogQHJldHVybiB7c3RyaW5nfVxuXHQgKi9cblx0Z2V0UGF0aG5hbWUoKSB7XG5cdFx0cmV0dXJuIHRoaXMudXJsLnBhdGhuYW1lO1xuXHR9XG5cblx0LyoqXG5cdCAqIEdldHMgdGhlIHBvcnQgbnVtYmVyIHBhcnQgb2YgdXJpIGFzIHN0cmluZy5cblx0ICogQHJldHVybiB7c3RyaW5nfVxuXHQgKi9cblx0Z2V0UG9ydCgpIHtcblx0XHRyZXR1cm4gdGhpcy51cmwucG9ydDtcblx0fVxuXG5cdC8qKlxuXHQgKiBHZXRzIHRoZSBwcm90b2NvbCBwYXJ0IG9mIHVyaS4gRS5nLiA8Y29kZT5odHRwOjwvY29kZT4uXG5cdCAqIEByZXR1cm4ge3N0cmluZ31cblx0ICovXG5cdGdldFByb3RvY29sKCkge1xuXHRcdHJldHVybiB0aGlzLnVybC5wcm90b2NvbDtcblx0fVxuXG5cdC8qKlxuXHQgKiBHZXRzIHRoZSBzZWFyY2ggcGFydCBvZiB1cmkuIFNlYXJjaCB2YWx1ZSBpcyByZXRyaWV2ZWQgZnJvbSBxdWVyeVxuXHQgKiBwYXJhbWV0ZXJzLlxuXHQgKiBAcmV0dXJuIHtzdHJpbmd9XG5cdCAqL1xuXHRnZXRTZWFyY2goKSB7XG5cdFx0dmFyIHNlYXJjaCA9ICcnO1xuXHRcdHZhciBxdWVyeXN0cmluZyA9ICcnO1xuXHRcdHRoaXMuZ2V0UGFyYW1ldGVyTmFtZXMoKS5mb3JFYWNoKChuYW1lKSA9PiB7XG5cdFx0XHR0aGlzLmdldFBhcmFtZXRlclZhbHVlcyhuYW1lKS5mb3JFYWNoKCh2YWx1ZSkgPT4ge1xuXHRcdFx0XHRxdWVyeXN0cmluZyArPSBuYW1lO1xuXHRcdFx0XHRpZiAoaXNEZWYodmFsdWUpKSB7XG5cdFx0XHRcdFx0cXVlcnlzdHJpbmcgKz0gJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRxdWVyeXN0cmluZyArPSAnJic7XG5cdFx0XHR9KTtcblx0XHR9KTtcblx0XHRxdWVyeXN0cmluZyA9IHF1ZXJ5c3RyaW5nLnNsaWNlKDAsIC0xKTtcblx0XHRpZiAocXVlcnlzdHJpbmcpIHtcblx0XHRcdHNlYXJjaCArPSAnPycgKyBxdWVyeXN0cmluZztcblx0XHR9XG5cdFx0cmV0dXJuIHNlYXJjaDtcblx0fVxuXG5cdC8qKlxuXHQgKiBDaGVja3MgaWYgdXJpIGNvbnRhaW5zIHRoZSBwYXJhbWV0ZXIuXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG5cdCAqIEByZXR1cm4ge2Jvb2xlYW59XG5cdCAqL1xuXHRoYXNQYXJhbWV0ZXIobmFtZSkge1xuXHRcdHRoaXMuZW5zdXJlUXVlcnlJbml0aWFsaXplZF8oKTtcblx0XHRyZXR1cm4gdGhpcy5xdWVyeS5jb250YWlucyhuYW1lKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBNYWtlcyB0aGlzIFVSTCB1bmlxdWUgYnkgYWRkaW5nIGEgcmFuZG9tIHBhcmFtIHRvIGl0LiBVc2VmdWwgZm9yIGF2b2lkaW5nXG5cdCAqIGNhY2hlLlxuXHQgKi9cblx0bWFrZVVuaXF1ZSgpIHtcblx0XHR0aGlzLnNldFBhcmFtZXRlclZhbHVlKFVyaS5SQU5ET01fUEFSQU0sIHN0cmluZy5nZXRSYW5kb21TdHJpbmcoKSk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxuXHQvKipcblx0ICogTWF5YmUgYWRkcyBwcm90b2NvbCBhbmQgYSBob3N0bmFtZSBwbGFjZWhvbGRlciBvbiBhIHBhcmlhbCBVUkkgaWYgbmVlZGVkLlxuXHQgKiBSZWxldmVudCBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIDxjb2RlPlVSTDwvY29kZT4gbmF0aXZlIG9iamVjdC5cblx0ICogQHBhcmFtIHtzdHJpbmc9fSBvcHRfdXJpXG5cdCAqIEByZXR1cm4ge3N0cmluZ30gVVJJIHdpdGggcHJvdG9jb2wgYW5kIGhvc3RuYW1lIHBsYWNlaG9sZGVyLlxuXHQgKi9cblx0bWF5YmVBZGRQcm90b2NvbEFuZEhvc3RuYW1lXyhvcHRfdXJpKSB7XG5cdFx0dmFyIHVybCA9IG9wdF91cmk7XG5cdFx0aWYgKG9wdF91cmkuaW5kZXhPZignOi8vJykgPT09IC0xICYmXG5cdFx0XHRvcHRfdXJpLmluZGV4T2YoJ2phdmFzY3JpcHQ6JykgIT09IDApIHsgLy8ganNoaW50IGlnbm9yZTpsaW5lXG5cblx0XHRcdHVybCA9IFVyaS5ERUZBVUxUX1BST1RPQ09MO1xuXHRcdFx0aWYgKG9wdF91cmlbMF0gIT09ICcvJyB8fCBvcHRfdXJpWzFdICE9PSAnLycpIHtcblx0XHRcdFx0dXJsICs9ICcvLyc7XG5cdFx0XHR9XG5cblx0XHRcdHN3aXRjaCAob3B0X3VyaS5jaGFyQXQoMCkpIHtcblx0XHRcdFx0Y2FzZSAnLic6XG5cdFx0XHRcdGNhc2UgJz8nOlxuXHRcdFx0XHRjYXNlICcjJzpcblx0XHRcdFx0XHR1cmwgKz0gVXJpLkhPU1ROQU1FX1BMQUNFSE9MREVSO1xuXHRcdFx0XHRcdHVybCArPSAnLyc7XG5cdFx0XHRcdFx0dXJsICs9IG9wdF91cmk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgJyc6XG5cdFx0XHRcdGNhc2UgJy8nOlxuXHRcdFx0XHRcdGlmIChvcHRfdXJpWzFdICE9PSAnLycpIHtcblx0XHRcdFx0XHRcdHVybCArPSBVcmkuSE9TVE5BTUVfUExBQ0VIT0xERVI7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHVybCArPSBvcHRfdXJpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdHVybCArPSBvcHRfdXJpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gdXJsO1xuXHR9XG5cblx0LyoqXG5cdCAqIFBhcnNlcyB0aGUgZ2l2ZW4gdXJpIHN0cmluZyBpbnRvIGFuIG9iamVjdC5cblx0ICogQHBhcmFtIHsqPX0gb3B0X3VyaSBPcHRpb25hbCBzdHJpbmcgVVJJIHRvIHBhcnNlXG5cdCAqL1xuXHRzdGF0aWMgcGFyc2Uob3B0X3VyaSkge1xuXHRcdHJldHVybiBwYXJzZUZuXyhvcHRfdXJpKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBSZW1vdmVzIHRoZSBuYW1lZCBxdWVyeSBwYXJhbWV0ZXIuXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFRoZSBwYXJhbWV0ZXIgdG8gcmVtb3ZlLlxuXHQgKiBAY2hhaW5hYmxlXG5cdCAqL1xuXHRyZW1vdmVQYXJhbWV0ZXIobmFtZSkge1xuXHRcdHRoaXMuZW5zdXJlUXVlcnlJbml0aWFsaXplZF8oKTtcblx0XHR0aGlzLnF1ZXJ5LnJlbW92ZShuYW1lKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXG5cdC8qKlxuXHQgKiBSZW1vdmVzIHVuaXF1ZW5lc3MgcGFyYW1ldGVyIG9mIHRoZSB1cmkuXG5cdCAqIEBjaGFpbmFibGVcblx0ICovXG5cdHJlbW92ZVVuaXF1ZSgpIHtcblx0XHR0aGlzLnJlbW92ZVBhcmFtZXRlcihVcmkuUkFORE9NX1BBUkFNKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXG5cdC8qKlxuXHQgKiBTZXRzIHRoZSBoYXNoLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gaGFzaFxuXHQgKiBAY2hhaW5hYmxlXG5cdCAqL1xuXHRzZXRIYXNoKGhhc2gpIHtcblx0XHR0aGlzLnVybC5oYXNoID0gaGFzaDtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXG5cdC8qKlxuXHQgKiBTZXRzIHRoZSBob3N0bmFtZS5cblx0ICogQHBhcmFtIHtzdHJpbmd9IGhvc3RuYW1lXG5cdCAqIEBjaGFpbmFibGVcblx0ICovXG5cdHNldEhvc3RuYW1lKGhvc3RuYW1lKSB7XG5cdFx0dGhpcy51cmwuaG9zdG5hbWUgPSBob3N0bmFtZTtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXG5cdC8qKlxuXHQgKiBTZXRzIHRoZSB2YWx1ZSBvZiB0aGUgbmFtZWQgcXVlcnkgcGFyYW1ldGVycywgY2xlYXJpbmcgcHJldmlvdXMgdmFsdWVzXG5cdCAqIGZvciB0aGF0IGtleS5cblx0ICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUgcGFyYW1ldGVyIHRvIHNldC5cblx0ICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgbmV3IHZhbHVlLlxuXHQgKiBAY2hhaW5hYmxlXG5cdCAqL1xuXHRzZXRQYXJhbWV0ZXJWYWx1ZShuYW1lLCB2YWx1ZSkge1xuXHRcdHRoaXMucmVtb3ZlUGFyYW1ldGVyKG5hbWUpO1xuXHRcdHRoaXMuYWRkUGFyYW1ldGVyVmFsdWUobmFtZSwgdmFsdWUpO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgdGhlIHZhbHVlcyBvZiB0aGUgbmFtZWQgcXVlcnkgcGFyYW1ldGVycywgY2xlYXJpbmcgcHJldmlvdXMgdmFsdWVzXG5cdCAqIGZvciB0aGF0IGtleS5cblx0ICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUgcGFyYW1ldGVyIHRvIHNldC5cblx0ICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgbmV3IHZhbHVlLlxuXHQgKiBAY2hhaW5hYmxlXG5cdCAqL1xuXHRzZXRQYXJhbWV0ZXJWYWx1ZXMobmFtZSwgdmFsdWVzKSB7XG5cdFx0dGhpcy5yZW1vdmVQYXJhbWV0ZXIobmFtZSk7XG5cdFx0dmFsdWVzLmZvckVhY2goKHZhbHVlKSA9PiB0aGlzLmFkZFBhcmFtZXRlclZhbHVlKG5hbWUsIHZhbHVlKSk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxuXHQvKipcblx0ICogU2V0cyB0aGUgcGF0aG5hbWUuXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBwYXRobmFtZVxuXHQgKiBAY2hhaW5hYmxlXG5cdCAqL1xuXHRzZXRQYXRobmFtZShwYXRobmFtZSkge1xuXHRcdHRoaXMudXJsLnBhdGhuYW1lID0gcGF0aG5hbWU7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxuXHQvKipcblx0ICogU2V0cyB0aGUgcG9ydCBudW1iZXIuXG5cdCAqIEBwYXJhbSB7Kn0gcG9ydCBQb3J0IG51bWJlci5cblx0ICogQGNoYWluYWJsZVxuXHQgKi9cblx0c2V0UG9ydChwb3J0KSB7XG5cdFx0dGhpcy51cmwucG9ydCA9IHBvcnQ7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxuXHQvKipcblx0ICogU2V0cyB0aGUgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIHVzZWQgZm9yIHBhcnNpbmcgdGhlIG9yaWdpbmFsIHN0cmluZyB1cmlcblx0ICogaW50byBhbiBvYmplY3QuXG5cdCAqIEBwYXJhbSB7IWZ1bmN0aW9uKCl9IHBhcnNlRm5cblx0ICovXG5cdHN0YXRpYyBzZXRQYXJzZUZuKHBhcnNlRm4pIHtcblx0XHRwYXJzZUZuXyA9IHBhcnNlRm47XG5cdH1cblxuXHQvKipcblx0ICogU2V0cyB0aGUgcHJvdG9jb2wuIElmIG1pc3NpbmcgPGNvZGU+aHR0cDo8L2NvZGU+IGlzIHVzZWQgYXMgZGVmYXVsdC5cblx0ICogQHBhcmFtIHtzdHJpbmd9IHByb3RvY29sXG5cdCAqIEBjaGFpbmFibGVcblx0ICovXG5cdHNldFByb3RvY29sKHByb3RvY29sKSB7XG5cdFx0dGhpcy51cmwucHJvdG9jb2wgPSBwcm90b2NvbDtcblx0XHRpZiAodGhpcy51cmwucHJvdG9jb2xbdGhpcy51cmwucHJvdG9jb2wubGVuZ3RoIC0gMV0gIT09ICc6Jykge1xuXHRcdFx0dGhpcy51cmwucHJvdG9jb2wgKz0gJzonO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXG5cdC8qKlxuXHQgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBzdHJpbmcgZm9ybSBvZiB0aGUgdXJsLlxuXHQgKiBAb3ZlcnJpZGVcblx0ICovXG5cdHRvU3RyaW5nKCkge1xuXHRcdHZhciBocmVmID0gJyc7XG5cdFx0dmFyIGhvc3QgPSB0aGlzLmdldEhvc3QoKTtcblx0XHRpZiAoaG9zdCkge1xuXHRcdFx0aHJlZiArPSB0aGlzLmdldFByb3RvY29sKCkgKyAnLy8nO1xuXHRcdH1cblx0XHRocmVmICs9IGhvc3QgKyB0aGlzLmdldFBhdGhuYW1lKCkgKyB0aGlzLmdldFNlYXJjaCgpICsgdGhpcy5nZXRIYXNoKCk7XG5cdFx0cmV0dXJuIGhyZWY7XG5cdH1cblxuXHQvKipcblx0ICogSm9pbnMgdGhlIGdpdmVuIHBhdGhzLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gYmFzZVBhdGhcblx0ICogQHBhcmFtIHsuLi5zdHJpbmd9IC4uLnBhdGhzIEFueSBudW1iZXIgb2YgcGF0aHMgdG8gYmUgam9pbmVkIHdpdGggdGhlIGJhc2UgdXJsLlxuXHQgKiBAc3RhdGljXG5cdCAqL1xuXHRzdGF0aWMgam9pblBhdGhzKGJhc2VQYXRoLCAuLi5wYXRocykge1xuXHRcdGlmIChiYXNlUGF0aC5jaGFyQXQoYmFzZVBhdGgubGVuZ3RoIC0gMSkgPT09ICcvJykge1xuXHRcdFx0YmFzZVBhdGggPSBiYXNlUGF0aC5zdWJzdHJpbmcoMCwgYmFzZVBhdGgubGVuZ3RoIC0gMSk7XG5cdFx0fVxuXHRcdHBhdGhzID0gcGF0aHMubWFwKHBhdGggPT4gcGF0aC5jaGFyQXQoMCkgPT09ICcvJyA/IHBhdGguc3Vic3RyaW5nKDEpIDogcGF0aCk7XG5cdFx0cmV0dXJuIFtiYXNlUGF0aF0uY29uY2F0KHBhdGhzKS5qb2luKCcvJykucmVwbGFjZSgvXFwvJC8sICcnKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBVUkwtZGVjb2RlcyB0aGUgc3RyaW5nLiBXZSBuZWVkIHRvIHNwZWNpYWxseSBoYW5kbGUgJysncyBiZWNhdXNlXG5cdCAqIHRoZSBqYXZhc2NyaXB0IGxpYnJhcnkgZG9lc24ndCBjb252ZXJ0IHRoZW0gdG8gc3BhY2VzLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gc3RyIFRoZSBzdHJpbmcgdG8gdXJsIGRlY29kZS5cblx0ICogQHJldHVybiB7c3RyaW5nfSBUaGUgZGVjb2RlZCB7QGNvZGUgc3RyfS5cblx0ICovXG5cdHN0YXRpYyB1cmxEZWNvZGUoc3RyKSB7XG5cdFx0cmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChzdHIucmVwbGFjZSgvXFwrL2csICcgJykpO1xuXHR9XG5cbn1cblxuLyoqXG4gKiBEZWZhdWx0IHByb3RvY29sIHZhbHVlLlxuICogQHR5cGUge3N0cmluZ31cbiAqIEBkZWZhdWx0IGh0dHA6XG4gKiBAc3RhdGljXG4gKi9cbmNvbnN0IGlzU2VjdXJlID0gKCkgPT5cblx0KHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmXG5cdFx0d2luZG93LmxvY2F0aW9uICYmXG5cdFx0d2luZG93LmxvY2F0aW9uLnByb3RvY29sICYmXG5cdFx0d2luZG93LmxvY2F0aW9uLnByb3RvY29sLmluZGV4T2YoJ2h0dHBzJykgPT09IDApO1xuXG5VcmkuREVGQVVMVF9QUk9UT0NPTCA9IGlzU2VjdXJlKCkgPyAnaHR0cHM6JyA6ICdodHRwOic7XG5cbi8qKlxuICogSG9zdG5hbWUgcGxhY2Vob2xkZXIuIFJlbGV2YW50IHRvIGludGVybmFsIHVzYWdlIG9ubHkuXG4gKiBAdHlwZSB7c3RyaW5nfVxuICogQHN0YXRpY1xuICovXG5VcmkuSE9TVE5BTUVfUExBQ0VIT0xERVIgPSAnaG9zdG5hbWUnICsgRGF0ZS5ub3coKTtcblxuLyoqXG4gKiBOYW1lIHVzZWQgYnkgdGhlIHBhcmFtIGdlbmVyYXRlZCBieSBgbWFrZVVuaXF1ZWAuXG4gKiBAdHlwZSB7c3RyaW5nfVxuICogQHN0YXRpY1xuICovXG5VcmkuUkFORE9NX1BBUkFNID0gJ3p4JztcblxuZXhwb3J0IGRlZmF1bHQgVXJpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgZ2xvYmFscyBmcm9tICcuLi9nbG9iYWxzL2dsb2JhbHMnO1xuaW1wb3J0IFVyaSBmcm9tICdtZXRhbC11cmknO1xuXG4vKipcbiAqIEEgY29sbGVjdGlvbiBvZiBzdGF0aWMgdXRpbGl0eSBmdW5jdGlvbnMuXG4gKiBAY29uc3RcbiAqL1xuY2xhc3MgdXRpbHMge1xuXG5cdC8qKlxuXHQgKiBDb3BpZXMgYXR0cmlidXRlcyBmb3JtIHNvdXJjZSBub2RlIHRvIHRhcmdldCBub2RlLlxuXHQgKiBAcmV0dXJuIHt2b2lkfVxuXHQgKiBAc3RhdGljXG5cdCAqL1xuXHRzdGF0aWMgY29weU5vZGVBdHRyaWJ1dGVzKHNvdXJjZSwgdGFyZ2V0KSB7XG5cdFx0QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoc291cmNlLmF0dHJpYnV0ZXMpLmZvckVhY2goKGF0dHJpYnV0ZSkgPT4gdGFyZ2V0LnNldEF0dHJpYnV0ZShhdHRyaWJ1dGUubmFtZSwgYXR0cmlidXRlLnZhbHVlKSk7XG5cdH1cblxuXHQvKipcblx0ICogR2V0cyB0aGUgY3VycmVudCBicm93c2VyIHBhdGggaW5jbHVkaW5nIGhhc2hiYW5nLlxuXHQgKiBAcmV0dXJuIHshc3RyaW5nfVxuXHQgKiBAc3RhdGljXG5cdCAqL1xuXHRzdGF0aWMgZ2V0Q3VycmVudEJyb3dzZXJQYXRoKCkge1xuXHRcdHJldHVybiB0aGlzLmdldEN1cnJlbnRCcm93c2VyUGF0aFdpdGhvdXRIYXNoKCkgKyBnbG9iYWxzLndpbmRvdy5sb2NhdGlvbi5oYXNoO1xuXHR9XG5cblx0LyoqXG5cdCAqIEdldHMgdGhlIGN1cnJlbnQgYnJvd3NlciBwYXRoIGV4Y2x1ZGluZyBoYXNoYmFuZy5cblx0ICogQHJldHVybiB7IXN0cmluZ31cblx0ICogQHN0YXRpY1xuXHQgKi9cblx0c3RhdGljIGdldEN1cnJlbnRCcm93c2VyUGF0aFdpdGhvdXRIYXNoKCkge1xuXHRcdHJldHVybiBnbG9iYWxzLndpbmRvdy5sb2NhdGlvbi5wYXRobmFtZSArIGdsb2JhbHMud2luZG93LmxvY2F0aW9uLnNlYXJjaDtcblx0fVxuXG5cdC8qKlxuXHQgKiBHZXRzIHRoZSBnaXZlbiBub2RlIG9mZnNldCBjb29yZGluYXRlcy5cblx0ICogQHJldHVybiB7IW9iamVjdH1cblx0ICogQHN0YXRpY1xuXHQgKi9cblx0c3RhdGljIGdldE5vZGVPZmZzZXQobm9kZSkge1xuXHRcdGxldCBbb2Zmc2V0TGVmdCwgb2Zmc2V0VG9wXSA9IFswLCAwXTtcblx0XHRkbyB7XG5cdFx0XHRvZmZzZXRMZWZ0ICs9IG5vZGUub2Zmc2V0TGVmdDtcblx0XHRcdG9mZnNldFRvcCArPSBub2RlLm9mZnNldFRvcDtcblx0XHRcdG5vZGUgPSBub2RlLm9mZnNldFBhcmVudDtcblx0XHR9IHdoaWxlIChub2RlKTtcblx0XHRyZXR1cm4ge1xuXHRcdFx0b2Zmc2V0TGVmdCxcblx0XHRcdG9mZnNldFRvcFxuXHRcdH07XG5cdH1cblxuXHQvKipcblx0ICogRXh0cmFjdHMgdGhlIHBhdGggcGFydCBvZiBhbiB1cmwuXG5cdCAqIEByZXR1cm4geyFzdHJpbmd9XG5cdCAqIEBzdGF0aWNcblx0ICovXG5cdHN0YXRpYyBnZXRVcmxQYXRoKHVybCkge1xuXHRcdHZhciB1cmkgPSBuZXcgVXJpKHVybCk7XG5cdFx0cmV0dXJuIHVyaS5nZXRQYXRobmFtZSgpICsgdXJpLmdldFNlYXJjaCgpICsgdXJpLmdldEhhc2goKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBFeHRyYWN0cyB0aGUgcGF0aCBwYXJ0IG9mIGFuIHVybCB3aXRob3V0IGhhc2hiYW5nLlxuXHQgKiBAcmV0dXJuIHshc3RyaW5nfVxuXHQgKiBAc3RhdGljXG5cdCAqL1xuXHRzdGF0aWMgZ2V0VXJsUGF0aFdpdGhvdXRIYXNoKHVybCkge1xuXHRcdHZhciB1cmkgPSBuZXcgVXJpKHVybCk7XG5cdFx0cmV0dXJuIHVyaS5nZXRQYXRobmFtZSgpICsgdXJpLmdldFNlYXJjaCgpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEV4dHJhY3RzIHRoZSBwYXRoIHBhcnQgb2YgYW4gdXJsIHdpdGhvdXQgaGFzaGJhbmcgYW5kIHF1ZXJ5IHNlYXJjaC5cblx0ICogQHJldHVybiB7IXN0cmluZ31cblx0ICogQHN0YXRpY1xuXHQgKi9cblx0c3RhdGljIGdldFVybFBhdGhXaXRob3V0SGFzaEFuZFNlYXJjaCh1cmwpIHtcblx0XHR2YXIgdXJpID0gbmV3IFVyaSh1cmwpO1xuXHRcdHJldHVybiB1cmkuZ2V0UGF0aG5hbWUoKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBDaGVja3MgaWYgdXJsIGlzIGluIHRoZSBzYW1lIGJyb3dzZXIgY3VycmVudCB1cmwgZXhjbHVkaW5nIHRoZSBoYXNoYmFuZy5cblx0ICogQHBhcmFtICB7IXN0cmluZ30gdXJsXG5cdCAqIEByZXR1cm4ge2Jvb2xlYW59XG5cdCAqIEBzdGF0aWNcblx0ICovXG5cdHN0YXRpYyBpc0N1cnJlbnRCcm93c2VyUGF0aCh1cmwpIHtcblx0XHRpZiAodXJsKSB7XG5cdFx0XHRjb25zdCBjdXJyZW50QnJvd3NlclBhdGggPSB0aGlzLmdldEN1cnJlbnRCcm93c2VyUGF0aFdpdGhvdXRIYXNoKCk7XG5cdFx0XHQvLyB0aGUgZ2V0VXJsUGF0aCB3aWxsIGNyZWF0ZSBhIFVyaSBhbmQgd2lsbCBub3JtYWxpemUgdGhlIHBhdGggYW5kXG5cdFx0XHQvLyByZW1vdmUgdGhlIHRyYWlsbGluZyAnLycgZm9yIHByb3Blcmx5IGNvbXBhcmluZyBwYXRocy5cblx0XHRcdHJldHVybiB1dGlscy5nZXRVcmxQYXRoV2l0aG91dEhhc2godXJsKSA9PT0gdGhpcy5nZXRVcmxQYXRoKGN1cnJlbnRCcm93c2VyUGF0aCk7XG5cdFx0fVxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRydWUgaWYgSFRNTDUgSGlzdG9yeSBhcGkgaXMgc3VwcG9ydGVkLlxuXHQgKiBAcmV0dXJuIHtib29sZWFufVxuXHQgKiBAc3RhdGljXG5cdCAqL1xuXHRzdGF0aWMgaXNIdG1sNUhpc3RvcnlTdXBwb3J0ZWQoKSB7XG5cdFx0cmV0dXJuICEhKGdsb2JhbHMud2luZG93Lmhpc3RvcnkgJiYgZ2xvYmFscy53aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUpO1xuXHR9XG5cblx0LyoqXG5cdCAqIENoZWNrcyBpZiBhIGdpdmVuIHVybCBpcyBhIHZhbGlkIGh0dHAocykgdXJpIGFuZCByZXR1cm5zIHRoZSBmb3JtZWQgVXJpXG5cdCAqIG9yIGZhbHNlIGlmIHRoZSBwYXJzaW5nIGZhaWxlZFxuXHQgKiBAcmV0dXJuIHtVcml8Ym9vbGVhbn1cblx0ICogQHN0YXRpY1xuXHQgKi9cblx0c3RhdGljIGlzV2ViVXJpKHVybCkge1xuXHRcdHRyeSB7XG5cdFx0XHRyZXR1cm4gbmV3IFVyaSh1cmwpO1xuXHRcdH0gY2F0Y2ggKGVycikge1xuXHRcdFx0Y29uc29sZS5lcnJvcihgJHtlcnIubWVzc2FnZX0gJHt1cmx9YCk7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHR9XG5cblx0LyoqXG5cdCAqIFJlbW92ZXMgYWxsIGF0dHJpYnV0ZXMgZm9ybSBub2RlLlxuXHQgKiBAcmV0dXJuIHt2b2lkfVxuXHQgKiBAc3RhdGljXG5cdCAqL1xuXHRzdGF0aWMgY2xlYXJOb2RlQXR0cmlidXRlcyhub2RlKSB7XG5cdFx0QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwobm9kZS5hdHRyaWJ1dGVzKS5mb3JFYWNoKChhdHRyaWJ1dGUpID0+IG5vZGUucmVtb3ZlQXR0cmlidXRlKGF0dHJpYnV0ZS5uYW1lKSk7XG5cdH1cblxuXHQvKipcblx0KiBSZW1vdmVzIHRyYWlsaW5nIHNsYXNoIGluIHBhdGguXG5cdCogQHBhcmFtIHshc3RyaW5nfVxuXHQqIEByZXR1cm4ge3N0cmluZ31cblx0Ki9cblx0c3RhdGljIHJlbW92ZVBhdGhUcmFpbGluZ1NsYXNoKHBhdGgpIHtcblx0XHR2YXIgbGVuZ3RoID0gcGF0aCA/IHBhdGgubGVuZ3RoIDogMDtcblx0XHRpZiAobGVuZ3RoID4gMSAmJiBwYXRoW2xlbmd0aCAtIDFdID09PSAnLycpIHtcblx0XHRcdHBhdGggPSBwYXRoLnN1YnN0cigwLCBsZW5ndGggLSAxKTtcblx0XHR9XG5cdFx0cmV0dXJuIHBhdGg7XG5cdH1cblxuXHQvKipcblx0ICogT3ZlcnJpZGVzIGRvY3VtZW50IHJlZmVycmVyXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSByZWZlcnJlclxuXHQgKiBAc3RhdGljXG5cdCAqL1xuXHRzdGF0aWMgc2V0UmVmZXJyZXIocmVmZXJyZXIpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZ2xvYmFscy5kb2N1bWVudCwgJ3JlZmVycmVyJywge1xuXHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIHJlZmVycmVyO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG59XG5cbmV4cG9ydCBkZWZhdWx0IHV0aWxzO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnQgZGVmYXVsdCB7XG5cdGJhc2VQYXRoOiAnZGF0YS1zZW5uYS1iYXNlLXBhdGgnLFxuXHRsaW5rU2VsZWN0b3I6ICdkYXRhLXNlbm5hLWxpbmstc2VsZWN0b3InLFxuXHRsb2FkaW5nQ3NzQ2xhc3M6ICdkYXRhLXNlbm5hLWxvYWRpbmctY3NzLWNsYXNzJyxcblx0c2VubmE6ICdkYXRhLXNlbm5hJyxcblx0ZGlzcGF0Y2g6ICdkYXRhLXNlbm5hLWRpc3BhdGNoJyxcblx0c3VyZmFjZTogJ2RhdGEtc2VubmEtc3VyZmFjZScsXG5cdHVwZGF0ZVNjcm9sbFBvc2l0aW9uOiAnZGF0YS1zZW5uYS11cGRhdGUtc2Nyb2xsLXBvc2l0aW9uJ1xufTsiLCIndXNlIHN0cmljdCc7XG5cbmNvbnN0IE1FVEFMX0RBVEEgPSAnX19tZXRhbF9kYXRhX18nO1xuXG5jbGFzcyBkb21EYXRhIHtcblx0LyoqXG5cdCAqIEdldHMgTWV0YWwuanMncyBkYXRhIGZvciB0aGUgZ2l2ZW4gZWxlbWVudC5cblx0ICogQHBhcmFtIHshRWxlbWVudH0gZWxlbWVudFxuXHQgKiBAcGFyYW0ge3N0cmluZz19IG9wdF9uYW1lIE9wdGlvbmFsIHByb3BlcnR5IGZyb20gdGhlIGRhdGEgdG8gYmUgcmV0dXJuZWQuXG5cdCAqIEBwYXJhbSB7Kn0gb3B0X2luaXRpYWxWYWwgT3B0aW5hbCB2YWx1ZSB0byB0aGUgc2V0IHRoZSByZXF1ZXN0ZWQgcHJvcGVydHlcblx0ICogICAgIHRvIGlmIGl0IGRvZXNuJ3QgZXhpc3QgeWV0IGluIHRoZSBkYXRhLlxuXHQgKiBAcmV0dXJuIHshT2JqZWN0fVxuXHQgKi9cblx0c3RhdGljIGdldChlbGVtZW50LCBvcHRfbmFtZSwgb3B0X2luaXRpYWxWYWwpIHtcblx0XHRpZiAoIWVsZW1lbnRbTUVUQUxfREFUQV0pIHtcblx0XHRcdGVsZW1lbnRbTUVUQUxfREFUQV0gPSB7fTtcblx0XHR9XG5cdFx0aWYgKCFvcHRfbmFtZSkge1xuXHRcdFx0cmV0dXJuIGVsZW1lbnRbTUVUQUxfREFUQV07XG5cdFx0fVxuXHRcdGlmICghZWxlbWVudFtNRVRBTF9EQVRBXVtvcHRfbmFtZV0gJiYgb3B0X2luaXRpYWxWYWwpIHtcblx0XHRcdGVsZW1lbnRbTUVUQUxfREFUQV1bb3B0X25hbWVdID0gb3B0X2luaXRpYWxWYWw7XG5cdFx0fVxuXHRcdHJldHVybiBlbGVtZW50W01FVEFMX0RBVEFdW29wdF9uYW1lXTtcblx0fVxuXG5cdC8qKlxuXHQgKiBDaGVja3MgaWYgdGhlIGdpdmVuIGVsZW1lbnQgaGFzIGRhdGEgc3RvcmVkIGluIGl0LlxuXHQgKiBAcGFyYW0geyFFbGVtZW50fSBlbGVtZW50XG5cdCAqIEByZXR1cm4ge2Jvb2xlYW59XG5cdCAqL1xuXHRzdGF0aWMgaGFzKGVsZW1lbnQpIHtcblx0XHRyZXR1cm4gISFlbGVtZW50W01FVEFMX0RBVEFdO1xuXHR9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGRvbURhdGE7XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB7IERpc3Bvc2FibGUgfSBmcm9tICdtZXRhbCc7XG5cbi8qKlxuICogRXZlbnRIYW5kbGUgdXRpbGl0eS4gSG9sZHMgaW5mb3JtYXRpb24gYWJvdXQgYW4gZXZlbnQgc3Vic2NyaXB0aW9uLCBhbmRcbiAqIGFsbG93cyByZW1vdmluZyB0aGVtIGVhc2lseS5cbiAqIEV2ZW50SGFuZGxlIGlzIGEgRGlzcG9zYWJsZSwgYnV0IGl0J3MgaW1wb3J0YW50IHRvIG5vdGUgdGhhdCB0aGVcbiAqIEV2ZW50RW1pdHRlciB0aGF0IGNyZWF0ZWQgaXQgaXMgbm90IHRoZSBvbmUgcmVzcG9uc2libGUgZm9yIGRpc3Bvc2luZyBpdC5cbiAqIFRoYXQgcmVzcG9uc2liaWxpdHkgaXMgZm9yIHRoZSBjb2RlIHRoYXQgaG9sZHMgYSByZWZlcmVuY2UgdG8gaXQuXG4gKiBAcGFyYW0geyFFdmVudEVtaXR0ZXJ9IGVtaXR0ZXIgRW1pdHRlciB0aGUgZXZlbnQgd2FzIHN1YnNjcmliZWQgdG8uXG4gKiBAcGFyYW0ge3N0cmluZ30gZXZlbnQgVGhlIG5hbWUgb2YgdGhlIGV2ZW50IHRoYXQgd2FzIHN1YnNjcmliZWQgdG8uXG4gKiBAcGFyYW0geyFGdW5jdGlvbn0gbGlzdGVuZXIgVGhlIGxpc3RlbmVyIHN1YnNjcmliZWQgdG8gdGhlIGV2ZW50LlxuICogQGNvbnN0cnVjdG9yXG4gKiBAZXh0ZW5kcyB7RGlzcG9zYWJsZX1cbiAqL1xuY2xhc3MgRXZlbnRIYW5kbGUgZXh0ZW5kcyBEaXNwb3NhYmxlIHtcblx0Y29uc3RydWN0b3IoZW1pdHRlciwgZXZlbnQsIGxpc3RlbmVyKSB7XG5cdFx0c3VwZXIoKTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBFdmVudEVtaXR0ZXIgaW5zdGFuY2UgdGhhdCB0aGUgZXZlbnQgd2FzIHN1YnNjcmliZWQgdG8uXG5cdFx0ICogQHR5cGUge0V2ZW50RW1pdHRlcn1cblx0XHQgKiBAcHJvdGVjdGVkXG5cdFx0ICovXG5cdFx0dGhpcy5lbWl0dGVyXyA9IGVtaXR0ZXI7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgbmFtZSBvZiB0aGUgZXZlbnQgdGhhdCB3YXMgc3Vic2NyaWJlZCB0by5cblx0XHQgKiBAdHlwZSB7c3RyaW5nfVxuXHRcdCAqIEBwcm90ZWN0ZWRcblx0XHQgKi9cblx0XHR0aGlzLmV2ZW50XyA9IGV2ZW50O1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGxpc3RlbmVyIHN1YnNjcmliZWQgdG8gdGhlIGV2ZW50LlxuXHRcdCAqIEB0eXBlIHtGdW5jdGlvbn1cblx0XHQgKiBAcHJvdGVjdGVkXG5cdFx0ICovXG5cdFx0dGhpcy5saXN0ZW5lcl8gPSBsaXN0ZW5lcjtcblx0fVxuXG5cdC8qKlxuXHQgKiBEaXNwb3NlcyBvZiB0aGlzIGluc3RhbmNlJ3Mgb2JqZWN0IHJlZmVyZW5jZXMuXG5cdCAqIEBvdmVycmlkZVxuXHQgKi9cblx0ZGlzcG9zZUludGVybmFsKCkge1xuXHRcdHRoaXMucmVtb3ZlTGlzdGVuZXIoKTtcblx0XHR0aGlzLmVtaXR0ZXJfID0gbnVsbDtcblx0XHR0aGlzLmxpc3RlbmVyXyA9IG51bGw7XG5cdH1cblxuXHQvKipcblx0ICogUmVtb3ZlcyB0aGUgbGlzdGVuZXIgc3Vic2NyaXB0aW9uIGZyb20gdGhlIGVtaXR0ZXIuXG5cdCAqL1xuXHRyZW1vdmVMaXN0ZW5lcigpIHtcblx0XHRpZiAoIXRoaXMuZW1pdHRlcl8uaXNEaXNwb3NlZCgpKSB7XG5cdFx0XHR0aGlzLmVtaXR0ZXJfLnJlbW92ZUxpc3RlbmVyKHRoaXMuZXZlbnRfLCB0aGlzLmxpc3RlbmVyXyk7XG5cdFx0fVxuXHR9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEV2ZW50SGFuZGxlO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgeyBhcnJheSwgRGlzcG9zYWJsZSwgaXNGdW5jdGlvbiwgaXNTdHJpbmcgfSBmcm9tICdtZXRhbCc7XG5pbXBvcnQgRXZlbnRIYW5kbGUgZnJvbSAnLi9FdmVudEhhbmRsZSc7XG5cbmNvbnN0IHNpbmdsZUFycmF5XyA9IFswXTtcblxuLyoqXG4gKiBFdmVudEVtaXR0ZXIgdXRpbGl0eS5cbiAqIEBjb25zdHJ1Y3RvclxuICogQGV4dGVuZHMge0Rpc3Bvc2FibGV9XG4gKi9cbmNsYXNzIEV2ZW50RW1pdHRlciBleHRlbmRzIERpc3Bvc2FibGUge1xuXHRjb25zdHJ1Y3RvcigpIHtcblx0XHRzdXBlcigpO1xuXG5cdFx0LyoqXG5cdFx0ICogSG9sZHMgZXZlbnQgbGlzdGVuZXJzIHNjb3BlZCBieSBldmVudCB0eXBlLlxuXHRcdCAqIEB0eXBlIHtPYmplY3Q8c3RyaW5nLCAhQXJyYXk8IWZ1bmN0aW9uKCk+Pn1cblx0XHQgKiBAcHJvdGVjdGVkXG5cdFx0ICovXG5cdFx0dGhpcy5ldmVudHNfID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIEhhbmRsZXJzIHRoYXQgYXJlIHRyaWdnZXJlZCB3aGVuIGFuIGV2ZW50IGlzIGxpc3RlbmVkIHRvLlxuXHRcdCAqIEB0eXBlIHtBcnJheX1cblx0XHQgKi9cblx0XHR0aGlzLmxpc3RlbmVySGFuZGxlcnNfID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIENvbmZpZ3VyYXRpb24gb3B0aW9uIHdoaWNoIGRldGVybWluZXMgaWYgYW4gZXZlbnQgZmFjYWRlIHNob3VsZCBiZSBzZW50XG5cdFx0ICogYXMgYSBwYXJhbSBvZiBsaXN0ZW5lcnMgd2hlbiBlbWl0dGluZyBldmVudHMuIElmIHNldCB0byB0cnVlLCB0aGUgZmFjYWRlXG5cdFx0ICogd2lsbCBiZSBwYXNzZWQgYXMgdGhlIGZpcnN0IGFyZ3VtZW50IG9mIHRoZSBsaXN0ZW5lci5cblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAcHJvdGVjdGVkXG5cdFx0ICovXG5cdFx0dGhpcy5zaG91bGRVc2VGYWNhZGVfID0gZmFsc2U7XG5cdH1cblxuXHQvKipcblx0ICogQWRkcyBhIGhhbmRsZXIgdG8gZ2l2ZW4gaG9sZGVyIHZhcmlhYmxlLiBJZiB0aGUgaG9sZGVyIGRvZXNuJ3QgaGF2ZSBhXG5cdCAqIHZhbHVlIHlldCwgaXQgd2lsbCByZWNlaXZlIHRoZSBoYW5kbGVyIGRpcmVjdGx5LiBJZiB0aGUgaG9sZGVyIGlzIGFuIGFycmF5LFxuXHQgKiB0aGUgdmFsdWUgd2lsbCBqdXN0IGJlIGFkZGVkIHRvIGl0LiBPdGhlcndpc2UsIHRoZSBob2xkZXIgd2lsbCBiZSBzZXQgdG8gYVxuXHQgKiBuZXcgYXJyYXkgY29udGFpbmluZyBpdHMgcHJldmlvdXMgdmFsdWUgcGx1cyB0aGUgbmV3IGhhbmRsZXIuXG5cdCAqIEBwYXJhbSB7Kn0gaG9sZGVyXG5cdCAqIEBwYXJhbSB7IWZ1bmN0aW9uKCl8T2JqZWN0fSBoYW5kbGVyXG5cdCAqIEByZXR1cm4geyp9IFRoZSBob2xkZXIncyBuZXcgdmFsdWUuXG5cdCAqIEBwcm90ZWN0ZWRcblx0ICovXG5cdGFkZEhhbmRsZXJfKGhvbGRlciwgaGFuZGxlcikge1xuXHRcdGlmICghaG9sZGVyKSB7XG5cdFx0XHRob2xkZXIgPSBoYW5kbGVyO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRpZiAoIUFycmF5LmlzQXJyYXkoaG9sZGVyKSkge1xuXHRcdFx0XHRob2xkZXIgPSBbaG9sZGVyXTtcblx0XHRcdH1cblx0XHRcdGhvbGRlci5wdXNoKGhhbmRsZXIpO1xuXHRcdH1cblx0XHRyZXR1cm4gaG9sZGVyO1xuXHR9XG5cblx0LyoqXG5cdCAqIEFkZHMgYSBsaXN0ZW5lciB0byB0aGUgZW5kIG9mIHRoZSBsaXN0ZW5lcnMgYXJyYXkgZm9yIHRoZSBzcGVjaWZpZWQgZXZlbnRzLlxuXHQgKiBAcGFyYW0geyEoQXJyYXl8c3RyaW5nKX0gZXZlbnRcblx0ICogQHBhcmFtIHshRnVuY3Rpb259IGxpc3RlbmVyXG5cdCAqIEBwYXJhbSB7Ym9vbGVhbn0gb3B0X2RlZmF1bHQgRmxhZyBpbmRpY2F0aW5nIGlmIHRoaXMgbGlzdGVuZXIgaXMgYSBkZWZhdWx0XG5cdCAqICAgYWN0aW9uIGZvciB0aGlzIGV2ZW50LiBEZWZhdWx0IGFjdGlvbnMgYXJlIHJ1biBsYXN0LCBhbmQgb25seSBpZiBubyBwcmV2aW91c1xuXHQgKiAgIGxpc3RlbmVyIGNhbGwgYHByZXZlbnREZWZhdWx0KClgIG9uIHRoZSByZWNlaXZlZCBldmVudCBmYWNhZGUuXG5cdCAqIEByZXR1cm4geyFFdmVudEhhbmRsZX0gQ2FuIGJlIHVzZWQgdG8gcmVtb3ZlIHRoZSBsaXN0ZW5lci5cblx0ICovXG5cdGFkZExpc3RlbmVyKGV2ZW50LCBsaXN0ZW5lciwgb3B0X2RlZmF1bHQpIHtcblx0XHR0aGlzLnZhbGlkYXRlTGlzdGVuZXJfKGxpc3RlbmVyKTtcblxuXHRcdGNvbnN0IGV2ZW50cyA9IHRoaXMudG9FdmVudHNBcnJheV8oZXZlbnQpO1xuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgZXZlbnRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR0aGlzLmFkZFNpbmdsZUxpc3RlbmVyXyhldmVudHNbaV0sIGxpc3RlbmVyLCBvcHRfZGVmYXVsdCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG5ldyBFdmVudEhhbmRsZSh0aGlzLCBldmVudCwgbGlzdGVuZXIpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEFkZHMgYSBsaXN0ZW5lciB0byB0aGUgZW5kIG9mIHRoZSBsaXN0ZW5lcnMgYXJyYXkgZm9yIGEgc2luZ2xlIGV2ZW50LlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnRcblx0ICogQHBhcmFtIHshRnVuY3Rpb259IGxpc3RlbmVyXG5cdCAqIEBwYXJhbSB7Ym9vbGVhbn0gb3B0X2RlZmF1bHQgRmxhZyBpbmRpY2F0aW5nIGlmIHRoaXMgbGlzdGVuZXIgaXMgYSBkZWZhdWx0XG5cdCAqICAgYWN0aW9uIGZvciB0aGlzIGV2ZW50LiBEZWZhdWx0IGFjdGlvbnMgYXJlIHJ1biBsYXN0LCBhbmQgb25seSBpZiBubyBwcmV2aW91c1xuXHQgKiAgIGxpc3RlbmVyIGNhbGwgYHByZXZlbnREZWZhdWx0KClgIG9uIHRoZSByZWNlaXZlZCBldmVudCBmYWNhZGUuXG5cdCAqIEByZXR1cm4geyFFdmVudEhhbmRsZX0gQ2FuIGJlIHVzZWQgdG8gcmVtb3ZlIHRoZSBsaXN0ZW5lci5cblx0ICogQHBhcmFtIHtGdW5jdGlvbj19IG9wdF9vcmlnaW4gVGhlIG9yaWdpbmFsIGZ1bmN0aW9uIHRoYXQgd2FzIGFkZGVkIGFzIGFcblx0ICogICBsaXN0ZW5lciwgaWYgdGhlcmUgaXMgYW55LlxuXHQgKiBAcHJvdGVjdGVkXG5cdCAqL1xuXHRhZGRTaW5nbGVMaXN0ZW5lcl8oZXZlbnQsIGxpc3RlbmVyLCBvcHRfZGVmYXVsdCwgb3B0X29yaWdpbikge1xuXHRcdHRoaXMucnVuTGlzdGVuZXJIYW5kbGVyc18oZXZlbnQpO1xuXHRcdGlmIChvcHRfZGVmYXVsdCB8fCBvcHRfb3JpZ2luKSB7XG5cdFx0XHRsaXN0ZW5lciA9IHtcblx0XHRcdFx0ZGVmYXVsdDogb3B0X2RlZmF1bHQsXG5cdFx0XHRcdGZuOiBsaXN0ZW5lcixcblx0XHRcdFx0b3JpZ2luOiBvcHRfb3JpZ2luXG5cdFx0XHR9O1xuXHRcdH1cblx0XHR0aGlzLmV2ZW50c18gPSB0aGlzLmV2ZW50c18gfHwge307XG5cdFx0dGhpcy5ldmVudHNfW2V2ZW50XSA9IHRoaXMuYWRkSGFuZGxlcl8odGhpcy5ldmVudHNfW2V2ZW50XSwgbGlzdGVuZXIpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEJ1aWxkcyBmYWNhZGUgZm9yIHRoZSBnaXZlbiBldmVudC5cblx0ICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50XG5cdCAqIEByZXR1cm4ge09iamVjdH1cblx0ICogQHByb3RlY3RlZFxuXHQgKi9cblx0YnVpbGRGYWNhZGVfKGV2ZW50KSB7XG5cdFx0aWYgKHRoaXMuZ2V0U2hvdWxkVXNlRmFjYWRlKCkpIHtcblx0XHRcdGNvbnN0IGZhY2FkZSA9IHtcblx0XHRcdFx0cHJldmVudERlZmF1bHQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGZhY2FkZS5wcmV2ZW50ZWREZWZhdWx0ID0gdHJ1ZTtcblx0XHRcdFx0fSxcblx0XHRcdFx0dGFyZ2V0OiB0aGlzLFxuXHRcdFx0XHR0eXBlOiBldmVudFxuXHRcdFx0fTtcblx0XHRcdHJldHVybiBmYWNhZGU7XG5cdFx0fVxuXHR9XG5cblx0LyoqXG5cdCAqIERpc3Bvc2VzIG9mIHRoaXMgaW5zdGFuY2UncyBvYmplY3QgcmVmZXJlbmNlcy5cblx0ICogQG92ZXJyaWRlXG5cdCAqL1xuXHRkaXNwb3NlSW50ZXJuYWwoKSB7XG5cdFx0dGhpcy5ldmVudHNfID0gbnVsbDtcblx0fVxuXG5cdC8qKlxuXHQgKiBFeGVjdXRlIGVhY2ggb2YgdGhlIGxpc3RlbmVycyBpbiBvcmRlciB3aXRoIHRoZSBzdXBwbGllZCBhcmd1bWVudHMuXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBldmVudFxuXHQgKiBAcGFyYW0geyp9IG9wdF9hcmdzIFthcmcxXSwgW2FyZzJdLCBbLi4uXVxuXHQgKiBAcmV0dXJuIHtib29sZWFufSBSZXR1cm5zIHRydWUgaWYgZXZlbnQgaGFkIGxpc3RlbmVycywgZmFsc2Ugb3RoZXJ3aXNlLlxuXHQgKi9cblx0ZW1pdChldmVudCkge1xuXHRcdGNvbnN0IGxpc3RlbmVycyA9IHRoaXMuZ2V0UmF3TGlzdGVuZXJzXyhldmVudCk7XG5cdFx0aWYgKGxpc3RlbmVycy5sZW5ndGggPT09IDApIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRjb25zdCBhcmdzID0gYXJyYXkuc2xpY2UoYXJndW1lbnRzLCAxKTtcblx0XHR0aGlzLnJ1bkxpc3RlbmVyc18obGlzdGVuZXJzLCBhcmdzLCB0aGlzLmJ1aWxkRmFjYWRlXyhldmVudCkpO1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cblx0LyoqXG5cdCAqIEdldHMgdGhlIGxpc3RlbmVyIG9iamVjdHMgZm9yIHRoZSBnaXZlbiBldmVudCwgaWYgdGhlcmUgYXJlIGFueS5cblx0ICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50XG5cdCAqIEByZXR1cm4geyFBcnJheX1cblx0ICogQHByb3RlY3RlZFxuXHQgKi9cblx0Z2V0UmF3TGlzdGVuZXJzXyhldmVudCkge1xuXHRcdGNvbnN0IGRpcmVjdExpc3RlbmVycyA9IHRvQXJyYXkodGhpcy5ldmVudHNfICYmIHRoaXMuZXZlbnRzX1tldmVudF0pO1xuXHRcdHJldHVybiBkaXJlY3RMaXN0ZW5lcnMuY29uY2F0KHRvQXJyYXkodGhpcy5ldmVudHNfICYmIHRoaXMuZXZlbnRzX1snKiddKSk7XG5cdH1cblxuXHQvKipcblx0ICogR2V0cyB0aGUgY29uZmlndXJhdGlvbiBvcHRpb24gd2hpY2ggZGV0ZXJtaW5lcyBpZiBhbiBldmVudCBmYWNhZGUgc2hvdWxkXG5cdCAqIGJlIHNlbnQgYXMgYSBwYXJhbSBvZiBsaXN0ZW5lcnMgd2hlbiBlbWl0dGluZyBldmVudHMuIElmIHNldCB0byB0cnVlLCB0aGVcblx0ICogZmFjYWRlIHdpbGwgYmUgcGFzc2VkIGFzIHRoZSBmaXJzdCBhcmd1bWVudCBvZiB0aGUgbGlzdGVuZXIuXG5cdCAqIEByZXR1cm4ge2Jvb2xlYW59XG5cdCAqL1xuXHRnZXRTaG91bGRVc2VGYWNhZGUoKSB7XG5cdFx0cmV0dXJuIHRoaXMuc2hvdWxkVXNlRmFjYWRlXztcblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGFuIGFycmF5IG9mIGxpc3RlbmVycyBmb3IgdGhlIHNwZWNpZmllZCBldmVudC5cblx0ICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50XG5cdCAqIEByZXR1cm4ge0FycmF5fSBBcnJheSBvZiBsaXN0ZW5lcnMuXG5cdCAqL1xuXHRsaXN0ZW5lcnMoZXZlbnQpIHtcblx0XHRyZXR1cm4gdGhpcy5nZXRSYXdMaXN0ZW5lcnNfKGV2ZW50KS5tYXAoXG5cdFx0XHRsaXN0ZW5lciA9PiBsaXN0ZW5lci5mbiA/IGxpc3RlbmVyLmZuIDogbGlzdGVuZXJcblx0XHQpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEFkZHMgYSBsaXN0ZW5lciB0aGF0IHdpbGwgYmUgaW52b2tlZCBhIGZpeGVkIG51bWJlciBvZiB0aW1lcyBmb3IgdGhlXG5cdCAqIGV2ZW50cy4gQWZ0ZXIgZWFjaCBldmVudCBpcyB0cmlnZ2VyZWQgdGhlIHNwZWNpZmllZCBhbW91bnQgb2YgdGltZXMsIHRoZVxuXHQgKiBsaXN0ZW5lciBpcyByZW1vdmVkIGZvciBpdC5cblx0ICogQHBhcmFtIHshKEFycmF5fHN0cmluZyl9IGV2ZW50XG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBhbW91bnQgVGhlIGFtb3VudCBvZiB0aW1lcyB0aGlzIGV2ZW50IHNob3VsZCBiZSBsaXN0ZW5lZFxuXHQgKiB0by5cblx0ICogQHBhcmFtIHshRnVuY3Rpb259IGxpc3RlbmVyXG5cdCAqIEByZXR1cm4geyFFdmVudEhhbmRsZX0gQ2FuIGJlIHVzZWQgdG8gcmVtb3ZlIHRoZSBsaXN0ZW5lci5cblx0ICovXG5cdG1hbnkoZXZlbnQsIGFtb3VudCwgbGlzdGVuZXIpIHtcblx0XHRjb25zdCBldmVudHMgPSB0aGlzLnRvRXZlbnRzQXJyYXlfKGV2ZW50KTtcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IGV2ZW50cy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dGhpcy5tYW55XyhldmVudHNbaV0sIGFtb3VudCwgbGlzdGVuZXIpO1xuXHRcdH1cblxuXHRcdHJldHVybiBuZXcgRXZlbnRIYW5kbGUodGhpcywgZXZlbnQsIGxpc3RlbmVyKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBBZGRzIGEgbGlzdGVuZXIgdGhhdCB3aWxsIGJlIGludm9rZWQgYSBmaXhlZCBudW1iZXIgb2YgdGltZXMgZm9yIGEgc2luZ2xlXG5cdCAqIGV2ZW50LiBBZnRlciB0aGUgZXZlbnQgaXMgdHJpZ2dlcmVkIHRoZSBzcGVjaWZpZWQgYW1vdW50IG9mIHRpbWVzLCB0aGVcblx0ICogbGlzdGVuZXIgaXMgcmVtb3ZlZC5cblx0ICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50XG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBhbW91bnQgVGhlIGFtb3VudCBvZiB0aW1lcyB0aGlzIGV2ZW50IHNob3VsZCBiZSBsaXN0ZW5lZFxuXHQgKiB0by5cblx0ICogQHBhcmFtIHshRnVuY3Rpb259IGxpc3RlbmVyXG5cdCAqIEBwcm90ZWN0ZWRcblx0ICovXG5cdG1hbnlfKGV2ZW50LCBhbW91bnQsIGxpc3RlbmVyKSB7XG5cdFx0Y29uc3Qgc2VsZiA9IHRoaXM7XG5cblx0XHRpZiAoYW1vdW50IDw9IDApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRmdW5jdGlvbiBoYW5kbGVySW50ZXJuYWwoKSB7XG5cdFx0XHRpZiAoLS1hbW91bnQgPT09IDApIHtcblx0XHRcdFx0c2VsZi5yZW1vdmVMaXN0ZW5lcihldmVudCwgaGFuZGxlckludGVybmFsKTtcblx0XHRcdH1cblx0XHRcdGxpc3RlbmVyLmFwcGx5KHNlbGYsIGFyZ3VtZW50cyk7XG5cdFx0fVxuXG5cdFx0c2VsZi5hZGRTaW5nbGVMaXN0ZW5lcl8oZXZlbnQsIGhhbmRsZXJJbnRlcm5hbCwgZmFsc2UsIGxpc3RlbmVyKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBDaGVja3MgaWYgYSBsaXN0ZW5lciBvYmplY3QgbWF0Y2hlcyB0aGUgZ2l2ZW4gbGlzdGVuZXIgZnVuY3Rpb24uIFRvIG1hdGNoLFxuXHQgKiBpdCBuZWVkcyB0byBlaXRoZXIgcG9pbnQgdG8gdGhhdCBsaXN0ZW5lciBvciBoYXZlIGl0IGFzIGl0cyBvcmlnaW4uXG5cdCAqIEBwYXJhbSB7IU9iamVjdH0gbGlzdGVuZXJPYmpcblx0ICogQHBhcmFtIHshRnVuY3Rpb259IGxpc3RlbmVyXG5cdCAqIEByZXR1cm4ge2Jvb2xlYW59XG5cdCAqIEBwcm90ZWN0ZWRcblx0ICovXG5cdG1hdGNoZXNMaXN0ZW5lcl8obGlzdGVuZXJPYmosIGxpc3RlbmVyKSB7XG5cdFx0Y29uc3QgZm4gPSBsaXN0ZW5lck9iai5mbiB8fCBsaXN0ZW5lck9iajtcblx0XHRyZXR1cm4gZm4gPT09IGxpc3RlbmVyIHx8XG5cdFx0XHQobGlzdGVuZXJPYmoub3JpZ2luICYmIGxpc3RlbmVyT2JqLm9yaWdpbiA9PT0gbGlzdGVuZXIpO1xuXHR9XG5cblx0LyoqXG5cdCAqIFJlbW92ZXMgYSBsaXN0ZW5lciBmb3IgdGhlIHNwZWNpZmllZCBldmVudHMuXG5cdCAqIENhdXRpb246IGNoYW5nZXMgYXJyYXkgaW5kaWNlcyBpbiB0aGUgbGlzdGVuZXIgYXJyYXkgYmVoaW5kIHRoZSBsaXN0ZW5lci5cblx0ICogQHBhcmFtIHshKEFycmF5fHN0cmluZyl9IGV2ZW50c1xuXHQgKiBAcGFyYW0geyFGdW5jdGlvbn0gbGlzdGVuZXJcblx0ICogQHJldHVybiB7IU9iamVjdH0gUmV0dXJucyBlbWl0dGVyLCBzbyBjYWxscyBjYW4gYmUgY2hhaW5lZC5cblx0ICovXG5cdG9mZihldmVudCwgbGlzdGVuZXIpIHtcblx0XHR0aGlzLnZhbGlkYXRlTGlzdGVuZXJfKGxpc3RlbmVyKTtcblx0XHRpZiAoIXRoaXMuZXZlbnRzXykge1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXG5cdFx0Y29uc3QgZXZlbnRzID0gdGhpcy50b0V2ZW50c0FycmF5XyhldmVudCk7XG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBldmVudHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHRoaXMuZXZlbnRzX1tldmVudHNbaV1dID0gdGhpcy5yZW1vdmVNYXRjaGluZ0xpc3RlbmVyT2Jqc18oXG5cdFx0XHRcdHRvQXJyYXkodGhpcy5ldmVudHNfW2V2ZW50c1tpXV0pLFxuXHRcdFx0XHRsaXN0ZW5lclxuXHRcdFx0KTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXG5cdC8qKlxuXHQgKiBBZGRzIGEgbGlzdGVuZXIgdG8gdGhlIGVuZCBvZiB0aGUgbGlzdGVuZXJzIGFycmF5IGZvciB0aGUgc3BlY2lmaWVkIGV2ZW50cy5cblx0ICogQHBhcmFtIHshKEFycmF5fHN0cmluZyl9IGV2ZW50c1xuXHQgKiBAcGFyYW0geyFGdW5jdGlvbn0gbGlzdGVuZXJcblx0ICogQHJldHVybiB7IUV2ZW50SGFuZGxlfSBDYW4gYmUgdXNlZCB0byByZW1vdmUgdGhlIGxpc3RlbmVyLlxuXHQgKi9cblx0b24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuYWRkTGlzdGVuZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBBZGRzIGhhbmRsZXIgdGhhdCBnZXRzIHRyaWdnZXJlZCB3aGVuIGFuIGV2ZW50IGlzIGxpc3RlbmVkIHRvIG9uIHRoaXNcblx0ICogaW5zdGFuY2UuXG5cdCAqIEBwYXJhbSB7IWZ1bmN0aW9uKCl9XG5cdCAqL1xuXHRvbkxpc3RlbmVyKGhhbmRsZXIpIHtcblx0XHR0aGlzLmxpc3RlbmVySGFuZGxlcnNfID0gdGhpcy5hZGRIYW5kbGVyXyh0aGlzLmxpc3RlbmVySGFuZGxlcnNfLCBoYW5kbGVyKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBBZGRzIGEgb25lIHRpbWUgbGlzdGVuZXIgZm9yIHRoZSBldmVudHMuIFRoaXMgbGlzdGVuZXIgaXMgaW52b2tlZCBvbmx5IHRoZVxuXHQgKiBuZXh0IHRpbWUgZWFjaCBldmVudCBpcyBmaXJlZCwgYWZ0ZXIgd2hpY2ggaXQgaXMgcmVtb3ZlZC5cblx0ICogQHBhcmFtIHshKEFycmF5fHN0cmluZyl9IGV2ZW50c1xuXHQgKiBAcGFyYW0geyFGdW5jdGlvbn0gbGlzdGVuZXJcblx0ICogQHJldHVybiB7IUV2ZW50SGFuZGxlfSBDYW4gYmUgdXNlZCB0byByZW1vdmUgdGhlIGxpc3RlbmVyLlxuXHQgKi9cblx0b25jZShldmVudHMsIGxpc3RlbmVyKSB7XG5cdFx0cmV0dXJuIHRoaXMubWFueShldmVudHMsIDEsIGxpc3RlbmVyKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBSZW1vdmVzIGFsbCBsaXN0ZW5lcnMsIG9yIHRob3NlIG9mIHRoZSBzcGVjaWZpZWQgZXZlbnRzLiBJdCdzIG5vdCBhIGdvb2Rcblx0ICogaWRlYSB0byByZW1vdmUgbGlzdGVuZXJzIHRoYXQgd2VyZSBhZGRlZCBlbHNld2hlcmUgaW4gdGhlIGNvZGUsXG5cdCAqIGVzcGVjaWFsbHkgd2hlbiBpdCdzIG9uIGFuIGVtaXR0ZXIgdGhhdCB5b3UgZGlkbid0IGNyZWF0ZS5cblx0ICogQHBhcmFtIHsoQXJyYXl8c3RyaW5nKT19IG9wdF9ldmVudHNcblx0ICogQHJldHVybiB7IU9iamVjdH0gUmV0dXJucyBlbWl0dGVyLCBzbyBjYWxscyBjYW4gYmUgY2hhaW5lZC5cblx0ICovXG5cdHJlbW92ZUFsbExpc3RlbmVycyhvcHRfZXZlbnRzKSB7XG5cdFx0aWYgKHRoaXMuZXZlbnRzXykge1xuXHRcdFx0aWYgKG9wdF9ldmVudHMpIHtcblx0XHRcdFx0Y29uc3QgZXZlbnRzID0gdGhpcy50b0V2ZW50c0FycmF5XyhvcHRfZXZlbnRzKTtcblx0XHRcdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBldmVudHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0XHR0aGlzLmV2ZW50c19bZXZlbnRzW2ldXSA9IG51bGw7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRoaXMuZXZlbnRzXyA9IG51bGw7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0LyoqXG5cdCAqIFJlbW92ZXMgYWxsIGxpc3RlbmVyIG9iamVjdHMgZnJvbSB0aGUgZ2l2ZW4gYXJyYXkgdGhhdCBtYXRjaCB0aGUgZ2l2ZW5cblx0ICogbGlzdGVuZXIgZnVuY3Rpb24uXG5cdCAqIEBwYXJhbSB7QXJyYXkuPE9iamVjdD59IGxpc3RlbmVyT2Jqc1xuXHQgKiBAcGFyYW0geyFGdW5jdGlvbn0gbGlzdGVuZXJcblx0ICogQHJldHVybiB7QXJyYXkuPE9iamVjdD58T2JqZWN0fSBUaGUgbmV3IGxpc3RlbmVycyBhcnJheSBmb3IgdGhpcyBldmVudC5cblx0ICogQHByb3RlY3RlZFxuXHQgKi9cblx0cmVtb3ZlTWF0Y2hpbmdMaXN0ZW5lck9ianNfKGxpc3RlbmVyT2JqcywgbGlzdGVuZXIpIHtcblx0XHRjb25zdCBmaW5hbExpc3RlbmVycyA9IFtdO1xuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgbGlzdGVuZXJPYmpzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRpZiAoIXRoaXMubWF0Y2hlc0xpc3RlbmVyXyhsaXN0ZW5lck9ianNbaV0sIGxpc3RlbmVyKSkge1xuXHRcdFx0XHRmaW5hbExpc3RlbmVycy5wdXNoKGxpc3RlbmVyT2Jqc1tpXSk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBmaW5hbExpc3RlbmVycy5sZW5ndGggPiAwID8gZmluYWxMaXN0ZW5lcnMgOiBudWxsO1xuXHR9XG5cblx0LyoqXG5cdCAqIFJlbW92ZXMgYSBsaXN0ZW5lciBmb3IgdGhlIHNwZWNpZmllZCBldmVudHMuXG5cdCAqIENhdXRpb246IGNoYW5nZXMgYXJyYXkgaW5kaWNlcyBpbiB0aGUgbGlzdGVuZXIgYXJyYXkgYmVoaW5kIHRoZSBsaXN0ZW5lci5cblx0ICogQHBhcmFtIHshKEFycmF5fHN0cmluZyl9IGV2ZW50c1xuXHQgKiBAcGFyYW0geyFGdW5jdGlvbn0gbGlzdGVuZXJcblx0ICogQHJldHVybiB7IU9iamVjdH0gUmV0dXJucyBlbWl0dGVyLCBzbyBjYWxscyBjYW4gYmUgY2hhaW5lZC5cblx0ICovXG5cdHJlbW92ZUxpc3RlbmVyKCkge1xuXHRcdHJldHVybiB0aGlzLm9mZi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXHR9XG5cblx0LyoqXG5cdCAqIFJ1bnMgdGhlIGhhbmRsZXJzIHdoZW4gYW4gZXZlbnQgaXMgbGlzdGVuZWQgdG8uXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBldmVudFxuXHQgKiBAcHJvdGVjdGVkXG5cdCAqL1xuXHRydW5MaXN0ZW5lckhhbmRsZXJzXyhldmVudCkge1xuXHRcdGxldCBoYW5kbGVycyA9IHRoaXMubGlzdGVuZXJIYW5kbGVyc187XG5cdFx0aWYgKGhhbmRsZXJzKSB7XG5cdFx0XHRoYW5kbGVycyA9IHRvQXJyYXkoaGFuZGxlcnMpO1xuXHRcdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBoYW5kbGVycy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRoYW5kbGVyc1tpXShldmVudCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0LyoqXG5cdCAqIFJ1bnMgdGhlIGdpdmVuIGxpc3RlbmVycy5cblx0ICogQHBhcmFtIHshQXJyYXl9IGxpc3RlbmVyc1xuXHQgKiBAcGFyYW0geyFBcnJheX0gYXJnc1xuXHQgKiBAcGFyYW0gKE9iamVjdCkgZmFjYWRlXG5cdCAqIEBwcm90ZWN0ZWRcblx0ICovXG5cdHJ1bkxpc3RlbmVyc18obGlzdGVuZXJzLCBhcmdzLCBmYWNhZGUpIHtcblx0XHRpZiAoZmFjYWRlKSB7XG5cdFx0XHRhcmdzLnB1c2goZmFjYWRlKTtcblx0XHR9XG5cblx0XHRjb25zdCBkZWZhdWx0TGlzdGVuZXJzID0gW107XG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBsaXN0ZW5lcnMubGVuZ3RoOyBpKyspIHtcblx0XHRcdGNvbnN0IGxpc3RlbmVyID0gbGlzdGVuZXJzW2ldLmZuIHx8IGxpc3RlbmVyc1tpXTtcblx0XHRcdGlmIChsaXN0ZW5lcnNbaV0uZGVmYXVsdCkge1xuXHRcdFx0XHRkZWZhdWx0TGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0bGlzdGVuZXIuYXBwbHkodGhpcywgYXJncyk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGlmICghZmFjYWRlIHx8ICFmYWNhZGUucHJldmVudGVkRGVmYXVsdCkge1xuXHRcdFx0Zm9yIChsZXQgaiA9IDA7IGogPCBkZWZhdWx0TGlzdGVuZXJzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdGRlZmF1bHRMaXN0ZW5lcnNbal0uYXBwbHkodGhpcywgYXJncyk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgdGhlIGNvbmZpZ3VyYXRpb24gb3B0aW9uIHdoaWNoIGRldGVybWluZXMgaWYgYW4gZXZlbnQgZmFjYWRlIHNob3VsZFxuXHQgKiBiZSBzZW50IGFzIGEgcGFyYW0gb2YgbGlzdGVuZXJzIHdoZW4gZW1pdHRpbmcgZXZlbnRzLiBJZiBzZXQgdG8gdHJ1ZSwgdGhlXG5cdCAqIGZhY2FkZSB3aWxsIGJlIHBhc3NlZCBhcyB0aGUgZmlyc3QgYXJndW1lbnQgb2YgdGhlIGxpc3RlbmVyLlxuXHQgKiBAcGFyYW0ge2Jvb2xlYW59IHNob3VsZFVzZUZhY2FkZVxuXHQgKiBAcmV0dXJuIHshT2JqZWN0fSBSZXR1cm5zIGVtaXR0ZXIsIHNvIGNhbGxzIGNhbiBiZSBjaGFpbmVkLlxuXHQgKi9cblx0c2V0U2hvdWxkVXNlRmFjYWRlKHNob3VsZFVzZUZhY2FkZSkge1xuXHRcdHRoaXMuc2hvdWxkVXNlRmFjYWRlXyA9IHNob3VsZFVzZUZhY2FkZTtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXG5cdC8qKlxuXHQgKiBDb252ZXJ0cyB0aGUgcGFyYW1ldGVyIHRvIGFuIGFycmF5IGlmIG9ubHkgb25lIGV2ZW50IGlzIGdpdmVuLiBSZXVzZXMgdGhlXG5cdCAqIHNhbWUgYXJyYXkgZWFjaCB0aW1lIHRoaXMgY29udmVyc2lvbiBpcyBkb25lLCB0byBhdm9pZCB1c2luZyBtb3JlIG1lbW9yeVxuXHQgKiB0aGFuIG5lY2Vzc2FyeS5cblx0ICogQHBhcmFtICB7IShBcnJheXxzdHJpbmcpfSBldmVudHNcblx0ICogQHJldHVybiB7IUFycmF5fVxuXHQgKiBAcHJvdGVjdGVkXG5cdCAqL1xuXHR0b0V2ZW50c0FycmF5XyhldmVudHMpIHtcblx0XHRpZiAoaXNTdHJpbmcoZXZlbnRzKSkge1xuXHRcdFx0c2luZ2xlQXJyYXlfWzBdID0gZXZlbnRzO1xuXHRcdFx0ZXZlbnRzID0gc2luZ2xlQXJyYXlfO1xuXHRcdH1cblx0XHRyZXR1cm4gZXZlbnRzO1xuXHR9XG5cblx0LyoqXG5cdCAqIENoZWNrcyBpZiB0aGUgZ2l2ZW4gbGlzdGVuZXIgaXMgdmFsaWQsIHRocm93aW5nIGFuIGV4Y2VwdGlvbiB3aGVuIGl0J3Mgbm90LlxuXHQgKiBAcGFyYW0gIHsqfSBsaXN0ZW5lclxuXHQgKiBAcHJvdGVjdGVkXG5cdCAqL1xuXHR2YWxpZGF0ZUxpc3RlbmVyXyhsaXN0ZW5lcikge1xuXHRcdGlmICghaXNGdW5jdGlvbihsaXN0ZW5lcikpIHtcblx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ0xpc3RlbmVyIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiB0b0FycmF5KHZhbCkge1xuXHR2YWwgPSB2YWwgfHwgW107XG5cdHJldHVybiBBcnJheS5pc0FycmF5KHZhbCkgPyB2YWwgOiBbdmFsXTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgRXZlbnRFbWl0dGVyO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgeyBEaXNwb3NhYmxlIH0gZnJvbSAnbWV0YWwnO1xuXG4vKipcbiAqIEV2ZW50RW1pdHRlclByb3h5IHV0aWxpdHkuIEl0J3MgcmVzcG9uc2libGUgZm9yIGxpbmtpbmcgdHdvIEV2ZW50RW1pdHRlclxuICogaW5zdGFuY2VzIHRvZ2V0aGVyLCBlbWl0dGluZyBldmVudHMgZnJvbSB0aGUgZmlyc3QgZW1pdHRlciB0aHJvdWdoIHRoZVxuICogc2Vjb25kIG9uZS4gVGhhdCBtZWFucyB0aGF0IGxpc3RlbmluZyB0byBhIHN1cHBvcnRlZCBldmVudCBvbiB0aGUgdGFyZ2V0XG4gKiBlbWl0dGVyIHdpbGwgbWVhbiBsaXN0ZW5pbmcgdG8gaXQgb24gdGhlIG9yaWdpbiBlbWl0dGVyIGFzIHdlbGwuXG4gKiBAcGFyYW0ge0V2ZW50RW1pdHRlcn0gb3JpZ2luRW1pdHRlciBFdmVudHMgb3JpZ2luYXRlZCBvbiB0aGlzIGVtaXR0ZXJcbiAqICAgd2lsbCBiZSBmaXJlZCBmb3IgdGhlIHRhcmdldCBlbWl0dGVyJ3MgbGlzdGVuZXJzIGFzIHdlbGwuXG4gKiBAcGFyYW0ge0V2ZW50RW1pdHRlcn0gdGFyZ2V0RW1pdHRlciBFdmVudCBsaXN0ZW5lcnMgYXR0YWNoZWQgdG8gdGhpcyBlbWl0dGVyXG4gKiAgIHdpbGwgYWxzbyBiZSB0cmlnZ2VyZWQgd2hlbiB0aGUgZXZlbnQgaXMgZmlyZWQgYnkgdGhlIG9yaWdpbiBlbWl0dGVyLlxuICogQHBhcmFtIHtPYmplY3R9IG9wdF9ibGFja2xpc3QgT3B0aW9uYWwgYmxhY2tsaXN0IG9mIGV2ZW50cyB0aGF0IHNob3VsZCBub3QgYmVcbiAqICAgcHJveGllZC5cbiAqIEBjb25zdHJ1Y3RvclxuICogQGV4dGVuZHMge0Rpc3Bvc2FibGV9XG4gKi9cbmNsYXNzIEV2ZW50RW1pdHRlclByb3h5IGV4dGVuZHMgRGlzcG9zYWJsZSB7XG5cdGNvbnN0cnVjdG9yKG9yaWdpbkVtaXR0ZXIsIHRhcmdldEVtaXR0ZXIsIG9wdF9ibGFja2xpc3QsIG9wdF93aGl0ZWxpc3QpIHtcblx0XHRzdXBlcigpO1xuXG5cdFx0LyoqXG5cdFx0ICogTWFwIG9mIGV2ZW50cyB0aGF0IHNob3VsZCBub3QgYmUgcHJveGllZC5cblx0XHQgKiBAdHlwZSB7T2JqZWN0fVxuXHRcdCAqIEBwcm90ZWN0ZWRcblx0XHQgKi9cblx0XHR0aGlzLmJsYWNrbGlzdF8gPSBvcHRfYmxhY2tsaXN0O1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIG9yaWdpbiBlbWl0dGVyLiBUaGlzIGVtaXR0ZXIncyBldmVudHMgd2lsbCBiZSBwcm94aWVkIHRocm91Z2ggdGhlXG5cdFx0ICogdGFyZ2V0IGVtaXR0ZXIuXG5cdFx0ICogQHR5cGUge0V2ZW50RW1pdHRlcn1cblx0XHQgKiBAcHJvdGVjdGVkXG5cdFx0ICovXG5cdFx0dGhpcy5vcmlnaW5FbWl0dGVyXyA9IG9yaWdpbkVtaXR0ZXI7XG5cblx0XHQvKipcblx0XHQgKiBBIGxpc3Qgb2YgZXZlbnRzIHRoYXQgYXJlIHBlbmRpbmcgdG8gYmUgbGlzdGVuZWQgYnkgYW4gYWN0dWFsIG9yaWdpblxuXHRcdCAqIGVtaXR0ZXIuIEV2ZW50cyBhcmUgc3RvcmVkIGhlcmUgd2hlbiB0aGUgb3JpZ2luIGRvZXNuJ3QgZXhpc3QsIHNvIHRoZXlcblx0XHQgKiBjYW4gYmUgc2V0IG9uIGEgbmV3IG9yaWdpbiB3aGVuIG9uZSBpcyBzZXQuXG5cdFx0ICogQHR5cGUge0FycmF5fVxuXHRcdCAqIEBwcm90ZWN0ZWRcblx0XHQgKi9cblx0XHR0aGlzLnBlbmRpbmdFdmVudHNfID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIEhvbGRzIGEgbWFwIG9mIGV2ZW50cyBmcm9tIHRoZSBvcmlnaW4gZW1pdHRlciB0aGF0IGFyZSBhbHJlYWR5IGJlaW5nIHByb3hpZWQuXG5cdFx0ICogQHR5cGUge09iamVjdDxzdHJpbmcsICFFdmVudEhhbmRsZT59XG5cdFx0ICogQHByb3RlY3RlZFxuXHRcdCAqL1xuXHRcdHRoaXMucHJveGllZEV2ZW50c18gPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIHRhcmdldCBlbWl0dGVyLiBUaGlzIGVtaXR0ZXIgd2lsbCBlbWl0IGFsbCBldmVudHMgdGhhdCBjb21lIGZyb21cblx0XHQgKiB0aGUgb3JpZ2luIGVtaXR0ZXIuXG5cdFx0ICogQHR5cGUge0V2ZW50RW1pdHRlcn1cblx0XHQgKiBAcHJvdGVjdGVkXG5cdFx0ICovXG5cdFx0dGhpcy50YXJnZXRFbWl0dGVyXyA9IHRhcmdldEVtaXR0ZXI7XG5cblx0XHQvKipcblx0XHQgKiBNYXAgb2YgZXZlbnRzIHRoYXQgc2hvdWxkIGJlIHByb3hpZWQuIElmIHdoaXRlbGlzdCBpcyBzZXQgYmxhY2tsaXN0IGlzIGlnbm9yZWQuXG5cdFx0ICogQHR5cGUge09iamVjdH1cblx0XHQgKiBAcHJvdGVjdGVkXG5cdFx0ICovXG5cdFx0dGhpcy53aGl0ZWxpc3RfID0gb3B0X3doaXRlbGlzdDtcblxuXHRcdHRoaXMuc3RhcnRQcm94eV8oKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBBZGRzIHRoZSBnaXZlbiBsaXN0ZW5lciBmb3IgdGhlIGdpdmVuIGV2ZW50LlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnRcblx0ICogQHBhcmFtIHshZnVuY3Rpb24oKX0gbGlzdGVuZXJcblx0ICogQHJldHVybiB7IUV2ZW50SGFuZGxlfSBUaGUgbGlzdGVuZWQgZXZlbnQncyBoYW5kbGUuXG5cdCAqIEBwcm90ZWN0ZWRcblx0ICovXG5cdGFkZExpc3RlbmVyXyhldmVudCwgbGlzdGVuZXIpIHtcblx0XHRyZXR1cm4gdGhpcy5vcmlnaW5FbWl0dGVyXy5vbihldmVudCwgbGlzdGVuZXIpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEBpbmhlcml0RG9jXG5cdCAqL1xuXHRkaXNwb3NlSW50ZXJuYWwoKSB7XG5cdFx0dGhpcy5yZW1vdmVMaXN0ZW5lcnNfKCk7XG5cdFx0dGhpcy5wcm94aWVkRXZlbnRzXyA9IG51bGw7XG5cdFx0dGhpcy5vcmlnaW5FbWl0dGVyXyA9IG51bGw7XG5cdFx0dGhpcy50YXJnZXRFbWl0dGVyXyA9IG51bGw7XG5cdH1cblxuXHQvKipcblx0ICogRW1pdHMgdGhlIHNwZWNpZmllZCBldmVudCB0eXBlIG9uIHRoZSB0YXJnZXQgZW1pdHRlci5cblx0ICogQHByb3RlY3RlZFxuXHQgKi9cblx0ZW1pdE9uVGFyZ2V0XygpIHtcblx0XHR0aGlzLnRhcmdldEVtaXR0ZXJfLmVtaXQuYXBwbHkodGhpcy50YXJnZXRFbWl0dGVyXywgYXJndW1lbnRzKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBQcm94aWVzIHRoZSBnaXZlbiBldmVudCBmcm9tIHRoZSBvcmlnaW4gdG8gdGhlIHRhcmdldCBlbWl0dGVyLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnRcblx0ICovXG5cdHByb3h5RXZlbnQoZXZlbnQpIHtcblx0XHRpZiAodGhpcy5zaG91bGRQcm94eUV2ZW50XyhldmVudCkpIHtcblx0XHRcdHRoaXMudHJ5VG9BZGRMaXN0ZW5lcl8oZXZlbnQpO1xuXHRcdH1cblx0fVxuXG5cdC8qKlxuXHQgKiBSZW1vdmVzIHRoZSBwcm94eSBsaXN0ZW5lciBmb3IgYWxsIGV2ZW50cy5cblx0ICogQHByb3RlY3RlZFxuXHQgKi9cblx0cmVtb3ZlTGlzdGVuZXJzXygpIHtcblx0XHRpZiAodGhpcy5wcm94aWVkRXZlbnRzXykge1xuXHRcdFx0Y29uc3QgZXZlbnRzID0gT2JqZWN0LmtleXModGhpcy5wcm94aWVkRXZlbnRzXyk7XG5cdFx0XHRmb3IgKGxldCBpID0gMDsgaSA8IGV2ZW50cy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHR0aGlzLnByb3hpZWRFdmVudHNfW2V2ZW50c1tpXV0ucmVtb3ZlTGlzdGVuZXIoKTtcblx0XHRcdH1cblx0XHRcdHRoaXMucHJveGllZEV2ZW50c18gPSBudWxsO1xuXHRcdH1cblx0XHR0aGlzLnBlbmRpbmdFdmVudHNfID0gbnVsbDtcblx0fVxuXG5cdC8qKlxuXHQgKiBDaGFuZ2VzIHRoZSBvcmlnaW4gZW1pdHRlci4gVGhpcyBhdXRvbWF0aWNhbGx5IGRldGFjaGVzIGFueSBldmVudHMgdGhhdFxuXHQgKiB3ZXJlIGFscmVhZHkgYmVpbmcgcHJveGllZCBmcm9tIHRoZSBwcmV2aW91cyBlbWl0dGVyLCBhbmQgc3RhcnRzIHByb3h5aW5nXG5cdCAqIHRoZW0gb24gdGhlIG5ldyBlbWl0dGVyIGluc3RlYWQuXG5cdCAqIEBwYXJhbSB7IUV2ZW50RW1pdHRlcn0gb3JpZ2luRW1pdHRlclxuXHQgKi9cblx0c2V0T3JpZ2luRW1pdHRlcihvcmlnaW5FbWl0dGVyKSB7XG5cdFx0Y29uc3QgZXZlbnRzID0gdGhpcy5vcmlnaW5FbWl0dGVyXyAmJiB0aGlzLnByb3hpZWRFdmVudHNfID9cblx0XHRcdE9iamVjdC5rZXlzKHRoaXMucHJveGllZEV2ZW50c18pIDpcblx0XHRcdHRoaXMucGVuZGluZ0V2ZW50c187XG5cdFx0dGhpcy5vcmlnaW5FbWl0dGVyXyA9IG9yaWdpbkVtaXR0ZXI7XG5cdFx0aWYgKGV2ZW50cykge1xuXHRcdFx0dGhpcy5yZW1vdmVMaXN0ZW5lcnNfKCk7XG5cdFx0XHRldmVudHMuZm9yRWFjaChldmVudCA9PiB0aGlzLnByb3h5RXZlbnQoZXZlbnQpKTtcblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogQ2hlY2tzIGlmIHRoZSBnaXZlbiBldmVudCBzaG91bGQgYmUgcHJveGllZC5cblx0ICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50XG5cdCAqIEByZXR1cm4ge2Jvb2xlYW59XG5cdCAqIEBwcm90ZWN0ZWRcblx0ICovXG5cdHNob3VsZFByb3h5RXZlbnRfKGV2ZW50KSB7XG5cdFx0aWYgKHRoaXMud2hpdGVsaXN0XyAmJiAhdGhpcy53aGl0ZWxpc3RfW2V2ZW50XSkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0XHRpZiAodGhpcy5ibGFja2xpc3RfICYmIHRoaXMuYmxhY2tsaXN0X1tldmVudF0pIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdFx0cmV0dXJuICF0aGlzLnByb3hpZWRFdmVudHNfIHx8ICF0aGlzLnByb3hpZWRFdmVudHNfW2V2ZW50XTtcblx0fVxuXG5cdC8qKlxuXHQgKiBTdGFydHMgcHJveHlpbmcgYWxsIGV2ZW50cyBmcm9tIHRoZSBvcmlnaW4gdG8gdGhlIHRhcmdldCBlbWl0dGVyLlxuXHQgKiBAcHJvdGVjdGVkXG5cdCAqL1xuXHRzdGFydFByb3h5XygpIHtcblx0XHR0aGlzLnRhcmdldEVtaXR0ZXJfLm9uTGlzdGVuZXIodGhpcy5wcm94eUV2ZW50LmJpbmQodGhpcykpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEFkZHMgYSBsaXN0ZW5lciB0byB0aGUgb3JpZ2luIGVtaXR0ZXIsIGlmIGl0IGV4aXN0cy4gT3RoZXJ3aXNlLCBzdG9yZXNcblx0ICogdGhlIHBlbmRpbmcgbGlzdGVuZXIgc28gaXQgY2FuIGJlIHVzZWQgb24gYSBmdXR1cmUgb3JpZ2luIGVtaXR0ZXIuXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBldmVudFxuXHQgKiBAcHJvdGVjdGVkXG5cdCAqL1xuXHR0cnlUb0FkZExpc3RlbmVyXyhldmVudCkge1xuXHRcdGlmICh0aGlzLm9yaWdpbkVtaXR0ZXJfKSB7XG5cdFx0XHR0aGlzLnByb3hpZWRFdmVudHNfID0gdGhpcy5wcm94aWVkRXZlbnRzXyB8fCB7fTtcblx0XHRcdHRoaXMucHJveGllZEV2ZW50c19bZXZlbnRdID0gdGhpcy5hZGRMaXN0ZW5lcl8oXG5cdFx0XHRcdGV2ZW50LFxuXHRcdFx0XHR0aGlzLmVtaXRPblRhcmdldF8uYmluZCh0aGlzLCBldmVudClcblx0XHRcdCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMucGVuZGluZ0V2ZW50c18gPSB0aGlzLnBlbmRpbmdFdmVudHNfIHx8IFtdO1xuXHRcdFx0dGhpcy5wZW5kaW5nRXZlbnRzXy5wdXNoKGV2ZW50KTtcblx0XHR9XG5cdH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgRXZlbnRFbWl0dGVyUHJveHk7XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB7IERpc3Bvc2FibGUgfSBmcm9tICdtZXRhbCc7XG5cbi8qKlxuICogRXZlbnRIYW5kbGVyIHV0aWxpdHkuIEl0J3MgdXNlZnVsIGZvciBlYXNpbHkgcmVtb3ZpbmcgYSBncm91cCBvZlxuICogbGlzdGVuZXJzIGZyb20gZGlmZmVyZW50IEV2ZW50RW1pdHRlciBpbnN0YW5jZXMuXG4gKiBAY29uc3RydWN0b3JcbiAqIEBleHRlbmRzIHtEaXNwb3NhYmxlfVxuICovXG5jbGFzcyBFdmVudEhhbmRsZXIgZXh0ZW5kcyBEaXNwb3NhYmxlIHtcblx0Y29uc3RydWN0b3IoKSB7XG5cdFx0c3VwZXIoKTtcblxuXHRcdC8qKlxuXHRcdCAqIEFuIGFycmF5IHRoYXQgaG9sZHMgdGhlIGFkZGVkIGV2ZW50IGhhbmRsZXMsIHNvIHRoZSBsaXN0ZW5lcnMgY2FuIGJlXG5cdFx0ICogcmVtb3ZlZCBsYXRlci5cblx0XHQgKiBAdHlwZSB7QXJyYXkuPEV2ZW50SGFuZGxlPn1cblx0XHQgKiBAcHJvdGVjdGVkXG5cdFx0ICovXG5cdFx0dGhpcy5ldmVudEhhbmRsZXNfID0gW107XG5cdH1cblxuXHQvKipcblx0ICogQWRkcyBldmVudCBoYW5kbGVzIHRvIGJlIHJlbW92ZWQgbGF0ZXIgdGhyb3VnaCB0aGUgYHJlbW92ZUFsbExpc3RlbmVyc2Bcblx0ICogbWV0aG9kLlxuXHQgKiBAcGFyYW0gey4uLighRXZlbnRIYW5kbGUpfSB2YXJfYXJnc1xuXHQgKi9cblx0YWRkKCkge1xuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR0aGlzLmV2ZW50SGFuZGxlc18ucHVzaChhcmd1bWVudHNbaV0pO1xuXHRcdH1cblx0fVxuXG5cdC8qKlxuXHQgKiBEaXNwb3NlcyBvZiB0aGlzIGluc3RhbmNlJ3Mgb2JqZWN0IHJlZmVyZW5jZXMuXG5cdCAqIEBvdmVycmlkZVxuXHQgKi9cblx0ZGlzcG9zZUludGVybmFsKCkge1xuXHRcdHRoaXMuZXZlbnRIYW5kbGVzXyA9IG51bGw7XG5cdH1cblxuXHQvKipcblx0ICogUmVtb3ZlcyBhbGwgbGlzdGVuZXJzIHRoYXQgaGF2ZSBiZWVuIGFkZGVkIHRocm91Z2ggdGhlIGBhZGRgIG1ldGhvZC5cblx0ICovXG5cdHJlbW92ZUFsbExpc3RlbmVycygpIHtcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuZXZlbnRIYW5kbGVzXy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dGhpcy5ldmVudEhhbmRsZXNfW2ldLnJlbW92ZUxpc3RlbmVyKCk7XG5cdFx0fVxuXG5cdFx0dGhpcy5ldmVudEhhbmRsZXNfID0gW107XG5cdH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgRXZlbnRIYW5kbGVyO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgeyBhcnJheSwgaXNTdHJpbmcgfSBmcm9tICdtZXRhbCc7XG5pbXBvcnQgZG9tRGF0YSBmcm9tICcuL2RvbURhdGEnO1xuaW1wb3J0IHsgRXZlbnRIYW5kbGUgfSBmcm9tICdtZXRhbC1ldmVudHMnO1xuXG4vKipcbiAqIFRoaXMgaXMgYSBzcGVjaWFsIEV2ZW50SGFuZGxlLCB0aGF0IGlzIHJlc3BvbnNpYmxlIGZvciBkb20gZGVsZWdhdGVkIGV2ZW50c1xuICogKG9ubHkgdGhlIG9uZXMgdGhhdCByZWNlaXZlIGEgdGFyZ2V0IGVsZW1lbnQsIG5vdCBhIHNlbGVjdG9yIHN0cmluZykuXG4gKiBAZXh0ZW5kcyB7RXZlbnRIYW5kbGV9XG4gKi9cbmNsYXNzIERvbURlbGVnYXRlZEV2ZW50SGFuZGxlIGV4dGVuZHMgRXZlbnRIYW5kbGUge1xuXHQvKipcblx0ICogVGhlIGNvbnN0cnVjdG9yIGZvciBgRG9tRGVsZWdhdGVkRXZlbnRIYW5kbGVgLlxuXHQgKiBAcGFyYW0geyFFdmVudH0gZW1pdHRlciBFbGVtZW50IHRoZSBldmVudCB3YXMgc3Vic2NyaWJlZCB0by5cblx0ICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50IFRoZSBuYW1lIG9mIHRoZSBldmVudCB0aGF0IHdhcyBzdWJzY3JpYmVkIHRvLlxuXHQgKiBAcGFyYW0geyFGdW5jdGlvbn0gbGlzdGVuZXIgVGhlIGxpc3RlbmVyIHN1YnNjcmliZWQgdG8gdGhlIGV2ZW50LlxuXHQgKiBAcGFyYW0ge3N0cmluZz19IG9wdF9zZWxlY3RvciBBbiBvcHRpb25hbCBzZWxlY3RvciB1c2VkIHdoZW4gZGVsZWdhdGluZ1xuXHQgKiAgICAgdGhlIGV2ZW50LlxuXHQgKiBAY29uc3RydWN0b3Jcblx0ICovXG5cdGNvbnN0cnVjdG9yKGVtaXR0ZXIsIGV2ZW50LCBsaXN0ZW5lciwgb3B0X3NlbGVjdG9yKSB7XG5cdFx0c3VwZXIoZW1pdHRlciwgZXZlbnQsIGxpc3RlbmVyKTtcblx0XHR0aGlzLnNlbGVjdG9yXyA9IG9wdF9zZWxlY3Rvcjtcblx0fVxuXG5cdC8qKlxuXHQgKiBAaW5oZXJpdERvY1xuXHQgKi9cblx0cmVtb3ZlTGlzdGVuZXIoKSB7XG5cdFx0Y29uc3QgZGVsZWdhdGluZyA9IGRvbURhdGEuZ2V0KHRoaXMuZW1pdHRlcl8sICdkZWxlZ2F0aW5nJywge30pO1xuXHRcdGNvbnN0IGxpc3RlbmVycyA9IGRvbURhdGEuZ2V0KHRoaXMuZW1pdHRlcl8sICdsaXN0ZW5lcnMnLCB7fSk7XG5cdFx0Y29uc3Qgc2VsZWN0b3IgPSB0aGlzLnNlbGVjdG9yXztcblx0XHRjb25zdCBhcnIgPSBpc1N0cmluZyhzZWxlY3RvcikgPyBkZWxlZ2F0aW5nW3RoaXMuZXZlbnRfXS5zZWxlY3RvcnMgOiBsaXN0ZW5lcnM7XG5cdFx0Y29uc3Qga2V5ID0gaXNTdHJpbmcoc2VsZWN0b3IpID8gc2VsZWN0b3IgOiB0aGlzLmV2ZW50XztcblxuXHRcdGFycmF5LnJlbW92ZShhcnJba2V5XSB8fCBbXSwgdGhpcy5saXN0ZW5lcl8pO1xuXHRcdGlmIChhcnJba2V5XSAmJiBhcnJba2V5XS5sZW5ndGggPT09IDApIHtcblx0XHRcdGRlbGV0ZSBhcnJba2V5XTtcblx0XHR9XG5cdH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgRG9tRGVsZWdhdGVkRXZlbnRIYW5kbGU7XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB7IEV2ZW50SGFuZGxlIH0gZnJvbSAnbWV0YWwtZXZlbnRzJztcblxuLyoqXG4gKiBUaGlzIGlzIGEgc3BlY2lhbCBFdmVudEhhbmRsZSwgdGhhdCBpcyByZXNwb25zaWJsZSBmb3IgZG9tIGV2ZW50cywgaW5zdGVhZFxuICogb2YgRXZlbnRFbWl0dGVyIGV2ZW50cy5cbiAqIEBleHRlbmRzIHtFdmVudEhhbmRsZX1cbiAqL1xuY2xhc3MgRG9tRXZlbnRIYW5kbGUgZXh0ZW5kcyBFdmVudEhhbmRsZSB7XG5cdC8qKlxuXHQgKiBUaGUgY29uc3RydWN0b3IgZm9yIGBEb21FdmVudEhhbmRsZWAuXG5cdCAqIEBwYXJhbSB7IUV2ZW50RW1pdHRlcn0gZW1pdHRlciBFbWl0dGVyIHRoZSBldmVudCB3YXMgc3Vic2NyaWJlZCB0by5cblx0ICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50IFRoZSBuYW1lIG9mIHRoZSBldmVudCB0aGF0IHdhcyBzdWJzY3JpYmVkIHRvLlxuXHQgKiBAcGFyYW0geyFGdW5jdGlvbn0gbGlzdGVuZXIgVGhlIGxpc3RlbmVyIHN1YnNjcmliZWQgdG8gdGhlIGV2ZW50LlxuXHQgKiBAcGFyYW0ge2Jvb2xlYW59IG9wdF9jYXB0dXJlIEZsYWcgaW5kaWNhdGluZyBpZiBsaXN0ZW5lciBzaG91bGQgYmUgdHJpZ2dlcmVkXG5cdCAqICAgZHVyaW5nIGNhcHR1cmUgcGhhc2UsIGluc3RlYWQgb2YgZHVyaW5nIHRoZSBidWJibGluZyBwaGFzZS4gRGVmYXVsdHMgdG8gZmFsc2UuXG5cdCAqIEBjb25zdHJ1Y3RvclxuXHQgKi9cblx0Y29uc3RydWN0b3IoZW1pdHRlciwgZXZlbnQsIGxpc3RlbmVyLCBvcHRfY2FwdHVyZSkge1xuXHRcdHN1cGVyKGVtaXR0ZXIsIGV2ZW50LCBsaXN0ZW5lcik7XG5cdFx0dGhpcy5jYXB0dXJlXyA9IG9wdF9jYXB0dXJlO1xuXHR9XG5cblx0LyoqXG5cdCAqIEBpbmhlcml0RG9jXG5cdCAqL1xuXHRyZW1vdmVMaXN0ZW5lcigpIHtcblx0XHR0aGlzLmVtaXR0ZXJfLnJlbW92ZUV2ZW50TGlzdGVuZXIodGhpcy5ldmVudF8sIHRoaXMubGlzdGVuZXJfLCB0aGlzLmNhcHR1cmVfKTtcblx0fVxufVxuXG5leHBvcnQgZGVmYXVsdCBEb21FdmVudEhhbmRsZTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHsgaXNEZWYsIGlzRG9jdW1lbnQsIGlzRG9jdW1lbnRGcmFnbWVudCwgaXNFbGVtZW50LCBpc09iamVjdCwgaXNTdHJpbmcsIG9iamVjdCB9IGZyb20gJ21ldGFsJztcbmltcG9ydCBkb21EYXRhIGZyb20gJy4vZG9tRGF0YSc7XG5pbXBvcnQgRG9tRGVsZWdhdGVkRXZlbnRIYW5kbGUgZnJvbSAnLi9Eb21EZWxlZ2F0ZWRFdmVudEhhbmRsZSc7XG5pbXBvcnQgRG9tRXZlbnRIYW5kbGUgZnJvbSAnLi9Eb21FdmVudEhhbmRsZSc7XG5cbmNvbnN0IGVsZW1lbnRzQnlUYWdfID0ge307XG5jb25zdCBzdXBwb3J0Q2FjaGVfID0ge307XG5leHBvcnQgY29uc3QgY3VzdG9tRXZlbnRzID0ge307XG5cbmNvbnN0IExBU1RfQ09OVEFJTkVSID0gJ19fbWV0YWxfbGFzdF9jb250YWluZXJfXyc7XG5jb25zdCBVU0VfQ0FQVFVSRSA9IHtcblx0Ymx1cjogdHJ1ZSxcblx0ZXJyb3I6IHRydWUsXG5cdGZvY3VzOiB0cnVlLFxuXHRpbnZhbGlkOiB0cnVlLFxuXHRsb2FkOiB0cnVlLFxuXHRzY3JvbGw6IHRydWVcbn07XG5cbi8qKlxuICogQWRkcyB0aGUgcmVxdWVzdGVkIENTUyBjbGFzc2VzIHRvIGFuIGVsZW1lbnQuXG4gKiBAcGFyYW0geyFFbGVtZW50fCFOb2RlbGlzdH0gZWxlbWVudHMgVGhlIGVsZW1lbnQgb3IgZWxlbWVudHMgdG8gYWRkIENTUyBjbGFzc2VzIHRvLlxuICogQHBhcmFtIHtzdHJpbmd9IGNsYXNzZXMgQ1NTIGNsYXNzZXMgdG8gYWRkLlxuICovXG5leHBvcnQgZnVuY3Rpb24gYWRkQ2xhc3NlcyhlbGVtZW50cywgY2xhc3Nlcykge1xuXHRpZiAoIWlzT2JqZWN0KGVsZW1lbnRzKSB8fCAhaXNTdHJpbmcoY2xhc3NlcykpIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHRpZiAoIWVsZW1lbnRzLmxlbmd0aCkge1xuXHRcdGVsZW1lbnRzID0gW2VsZW1lbnRzXTtcblx0fVxuXG5cdGZvciAobGV0IGkgPSAwOyBpIDwgZWxlbWVudHMubGVuZ3RoOyBpKyspIHtcblx0XHRpZiAoJ2NsYXNzTGlzdCcgaW4gZWxlbWVudHNbaV0pIHtcblx0XHRcdGFkZENsYXNzZXNXaXRoTmF0aXZlXyhlbGVtZW50c1tpXSwgY2xhc3Nlcyk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGFkZENsYXNzZXNXaXRob3V0TmF0aXZlXyhlbGVtZW50c1tpXSwgY2xhc3Nlcyk7XG5cdFx0fVxuXHR9XG59XG5cbi8qKlxuICogQWRkcyB0aGUgcmVxdWVzdGVkIENTUyBjbGFzc2VzIHRvIGFuIGVsZW1lbnQgdXNpbmcgY2xhc3NMaXN0LlxuICogQHBhcmFtIHshRWxlbWVudH0gZWxlbWVudCBUaGUgZWxlbWVudCB0byBhZGQgQ1NTIGNsYXNzZXMgdG8uXG4gKiBAcGFyYW0ge3N0cmluZ30gY2xhc3NlcyBDU1MgY2xhc3NlcyB0byBhZGQuXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBhZGRDbGFzc2VzV2l0aE5hdGl2ZV8oZWxlbWVudCwgY2xhc3Nlcykge1xuXHRjbGFzc2VzLnNwbGl0KCcgJykuZm9yRWFjaChmdW5jdGlvbihjbGFzc05hbWUpIHtcblx0XHRpZiAoY2xhc3NOYW1lKSB7XG5cdFx0XHRlbGVtZW50LmNsYXNzTGlzdC5hZGQoY2xhc3NOYW1lKTtcblx0XHR9XG5cdH0pO1xufVxuXG4vKipcbiAqIEFkZHMgdGhlIHJlcXVlc3RlZCBDU1MgY2xhc3NlcyB0byBhbiBlbGVtZW50IHdpdGhvdXQgdXNpbmcgY2xhc3NMaXN0LlxuICogQHBhcmFtIHshRWxlbWVudH0gZWxlbWVudCBUaGUgZWxlbWVudCB0byBhZGQgQ1NTIGNsYXNzZXMgdG8uXG4gKiBAcGFyYW0ge3N0cmluZ30gY2xhc3NlcyBDU1MgY2xhc3NlcyB0byBhZGQuXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBhZGRDbGFzc2VzV2l0aG91dE5hdGl2ZV8oZWxlbWVudCwgY2xhc3Nlcykge1xuXHRjb25zdCBlbGVtZW50Q2xhc3NOYW1lID0gYCAke2VsZW1lbnQuY2xhc3NOYW1lfSBgO1xuXHRsZXQgY2xhc3Nlc1RvQXBwZW5kID0gJyc7XG5cblx0Y2xhc3NlcyA9IGNsYXNzZXMuc3BsaXQoJyAnKTtcblxuXHRmb3IgKGxldCBpID0gMDsgaSA8IGNsYXNzZXMubGVuZ3RoOyBpKyspIHtcblx0XHRjb25zdCBjbGFzc05hbWUgPSBjbGFzc2VzW2ldO1xuXG5cdFx0aWYgKGVsZW1lbnRDbGFzc05hbWUuaW5kZXhPZihgICR7Y2xhc3NOYW1lfSBgKSA9PT0gLTEpIHtcblx0XHRcdGNsYXNzZXNUb0FwcGVuZCArPSBgICR7Y2xhc3NOYW1lfWA7XG5cdFx0fVxuXHR9XG5cblx0aWYgKGNsYXNzZXNUb0FwcGVuZCkge1xuXHRcdGVsZW1lbnQuY2xhc3NOYW1lID0gZWxlbWVudC5jbGFzc05hbWUgKyBjbGFzc2VzVG9BcHBlbmQ7XG5cdH1cbn1cblxuLyoqXG4gKiBBZGRzIGFuIGV2ZW50IGxpc3RlbmVyIHRvIHRoZSBnaXZlbiBlbGVtZW50LCB0byBiZSB0cmlnZ2VyZWQgdmlhIGRlbGVnYXRlLlxuICogQHBhcmFtIHshRWxlbWVudH0gZWxlbWVudFxuICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50TmFtZVxuICogQHBhcmFtIHshZnVuY3Rpb24oKX0gbGlzdGVuZXJcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGFkZEVsZW1lbnRMaXN0ZW5lcl8oZWxlbWVudCwgZXZlbnROYW1lLCBsaXN0ZW5lcikge1xuXHRhZGRUb0Fycl8oZG9tRGF0YS5nZXQoZWxlbWVudCwgJ2xpc3RlbmVycycsIHt9KSwgZXZlbnROYW1lLCBsaXN0ZW5lcik7XG59XG5cbi8qKlxuICogQWRkcyBhbiBldmVudCBsaXN0ZW5lciB0byB0aGUgZ2l2ZW4gZWxlbWVudCwgdG8gYmUgdHJpZ2dlcmVkIHZpYSBkZWxlZ2F0ZVxuICogc2VsZWN0b3JzLlxuICogQHBhcmFtIHshRWxlbWVudH0gZWxlbWVudFxuICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50TmFtZVxuICogQHBhcmFtIHtzdHJpbmd9IHNlbGVjdG9yXG4gKiBAcGFyYW0geyFmdW5jdGlvbigpfSBsaXN0ZW5lclxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gYWRkU2VsZWN0b3JMaXN0ZW5lcl8oZWxlbWVudCwgZXZlbnROYW1lLCBzZWxlY3RvciwgbGlzdGVuZXIpIHtcblx0Y29uc3QgZGVsZWdhdGluZ0RhdGEgPSBkb21EYXRhLmdldChlbGVtZW50LCAnZGVsZWdhdGluZycsIHt9KTtcblx0YWRkVG9BcnJfKGRlbGVnYXRpbmdEYXRhW2V2ZW50TmFtZV0uc2VsZWN0b3JzLCBzZWxlY3RvciwgbGlzdGVuZXIpO1xufVxuXG4vKipcbiAqIEFkZHMgYSB2YWx1ZSB0byBhbiBhcnJheSBpbnNpZGUgYW4gb2JqZWN0LCBjcmVhdGluZyBpdCBmaXJzdCBpZiBpdCBkb2Vzbid0XG4gKiB5ZXQgZXhpc3QuXG4gKiBAcGFyYW0geyFBcnJheX0gYXJyXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5XG4gKiBAcGFyYW0geyp9IHZhbHVlXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBhZGRUb0Fycl8oYXJyLCBrZXksIHZhbHVlKSB7XG5cdGlmICghYXJyW2tleV0pIHtcblx0XHRhcnJba2V5XSA9IFtdO1xuXHR9XG5cdGFycltrZXldLnB1c2godmFsdWUpO1xufVxuXG4vKipcbiAqIEF0dGFjaGVzIGEgZGVsZWdhdGUgbGlzdGVuZXIsIHVubGVzcyB0aGVyZSdzIGFscmVhZHkgb25lIGF0dGFjaGVkLlxuICogQHBhcmFtIHshRWxlbWVudH0gZWxlbWVudFxuICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50TmFtZVxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gYXR0YWNoRGVsZWdhdGVFdmVudF8oZWxlbWVudCwgZXZlbnROYW1lKSB7XG5cdGxldCBkZWxlZ2F0aW5nRGF0YSA9IGRvbURhdGEuZ2V0KGVsZW1lbnQsICdkZWxlZ2F0aW5nJywge30pO1xuXHRpZiAoIWRlbGVnYXRpbmdEYXRhW2V2ZW50TmFtZV0pIHtcblx0XHRkZWxlZ2F0aW5nRGF0YVtldmVudE5hbWVdID0ge1xuXHRcdFx0aGFuZGxlOiBvbihcblx0XHRcdFx0ZWxlbWVudCxcblx0XHRcdFx0ZXZlbnROYW1lLFxuXHRcdFx0XHRoYW5kbGVEZWxlZ2F0ZUV2ZW50Xyxcblx0XHRcdFx0ISFVU0VfQ0FQVFVSRVtldmVudE5hbWVdXG5cdFx0XHQpLFxuXHRcdFx0c2VsZWN0b3JzOiB7fVxuXHRcdH07XG5cdH1cbn1cblxuLyoqXG4gKiBHZXRzIHRoZSBjbG9zZXN0IGVsZW1lbnQgdXAgdGhlIHRyZWUgZnJvbSB0aGUgZ2l2ZW4gZWxlbWVudCAoaW5jbHVkaW5nXG4gKiBpdHNlbGYpIHRoYXQgbWF0Y2hlcyB0aGUgc3BlY2lmaWVkIHNlbGVjdG9yLCBvciBudWxsIGlmIG5vbmUgbWF0Y2guXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnRcbiAqIEBwYXJhbSB7c3RyaW5nfSBzZWxlY3RvclxuICogQHJldHVybiB7RWxlbWVudH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNsb3Nlc3QoZWxlbWVudCwgc2VsZWN0b3IpIHtcblx0d2hpbGUgKGVsZW1lbnQgJiYgIW1hdGNoKGVsZW1lbnQsIHNlbGVjdG9yKSkge1xuXHRcdGVsZW1lbnQgPSBlbGVtZW50LnBhcmVudE5vZGU7XG5cdH1cblx0cmV0dXJuIGVsZW1lbnQ7XG59XG5cbi8qKlxuICogQXBwZW5kcyBhIGNoaWxkIG5vZGUgd2l0aCB0ZXh0IG9yIG90aGVyIG5vZGVzIHRvIGEgcGFyZW50IG5vZGUuIElmXG4gKiBjaGlsZCBpcyBhIEhUTUwgc3RyaW5nIGl0IHdpbGwgYmUgYXV0b21hdGljYWxseSBjb252ZXJ0ZWQgdG8gYSBkb2N1bWVudFxuICogZnJhZ21lbnQgYmVmb3JlIGFwcGVuZGluZyBpdCB0byB0aGUgcGFyZW50LlxuICogQHBhcmFtIHshRWxlbWVudH0gcGFyZW50IFRoZSBub2RlIHRvIGFwcGVuZCBub2RlcyB0by5cbiAqIEBwYXJhbSB7IShFbGVtZW50fE5vZGVMaXN0fHN0cmluZyl9IGNoaWxkIFRoZSB0aGluZyB0byBhcHBlbmQgdG8gdGhlIHBhcmVudC5cbiAqIEByZXR1cm4geyFFbGVtZW50fSBUaGUgYXBwZW5kZWQgY2hpbGQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhcHBlbmQocGFyZW50LCBjaGlsZCkge1xuXHRpZiAoaXNTdHJpbmcoY2hpbGQpKSB7XG5cdFx0Y2hpbGQgPSBidWlsZEZyYWdtZW50KGNoaWxkKTtcblx0fVxuXHRpZiAoY2hpbGQgaW5zdGFuY2VvZiBOb2RlTGlzdCkge1xuXHRcdGNvbnN0IGNoaWxkQXJyID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoY2hpbGQpO1xuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgY2hpbGRBcnIubGVuZ3RoOyBpKyspIHtcblx0XHRcdHBhcmVudC5hcHBlbmRDaGlsZChjaGlsZEFycltpXSk7XG5cdFx0fVxuXHR9IGVsc2Uge1xuXHRcdHBhcmVudC5hcHBlbmRDaGlsZChjaGlsZCk7XG5cdH1cblx0cmV0dXJuIGNoaWxkO1xufVxuXG4vKipcbiAqIEhlbHBlciBmb3IgY29udmVydGluZyBhIEhUTUwgc3RyaW5nIGludG8gYSBkb2N1bWVudCBmcmFnbWVudC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBodG1sU3RyaW5nIFRoZSBIVE1MIHN0cmluZyB0byBjb252ZXJ0LlxuICogQHJldHVybiB7IUVsZW1lbnR9IFRoZSByZXN1bHRpbmcgZG9jdW1lbnQgZnJhZ21lbnQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBidWlsZEZyYWdtZW50KGh0bWxTdHJpbmcpIHtcblx0Y29uc3QgdGVtcERpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuXHR0ZW1wRGl2LmlubmVySFRNTCA9IGA8YnI+JHtodG1sU3RyaW5nfWA7XG5cdHRlbXBEaXYucmVtb3ZlQ2hpbGQodGVtcERpdi5maXJzdENoaWxkKTtcblxuXHRjb25zdCBmcmFnbWVudCA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcblx0d2hpbGUgKHRlbXBEaXYuZmlyc3RDaGlsZCkge1xuXHRcdGZyYWdtZW50LmFwcGVuZENoaWxkKHRlbXBEaXYuZmlyc3RDaGlsZCk7XG5cdH1cblx0cmV0dXJuIGZyYWdtZW50O1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiB0aGUgZmlyc3QgZWxlbWVudCBjb250YWlucyB0aGUgc2Vjb25kIG9uZS5cbiAqIEBwYXJhbSB7IUVsZW1lbnR9IGVsZW1lbnQxXG4gKiBAcGFyYW0geyFFbGVtZW50fSBlbGVtZW50MlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbnRhaW5zKGVsZW1lbnQxLCBlbGVtZW50Mikge1xuXHRpZiAoaXNEb2N1bWVudChlbGVtZW50MSkpIHtcblx0XHQvLyBkb2N1bWVudC5jb250YWlucyBpcyBub3QgZGVmaW5lZCBvbiBJRTksIHNvIGNhbGwgaXQgb24gZG9jdW1lbnRFbGVtZW50IGluc3RlYWQuXG5cdFx0cmV0dXJuIGVsZW1lbnQxLmRvY3VtZW50RWxlbWVudC5jb250YWlucyhlbGVtZW50Mik7XG5cdH0gZWxzZSB7XG5cdFx0cmV0dXJuIGVsZW1lbnQxLmNvbnRhaW5zKGVsZW1lbnQyKTtcblx0fVxufVxuXG4vKipcbiAqIExpc3RlbnMgdG8gdGhlIHNwZWNpZmllZCBldmVudCBvbiB0aGUgZ2l2ZW4gRE9NIGVsZW1lbnQsIGJ1dCBvbmx5IGNhbGxzIHRoZVxuICogZ2l2ZW4gY2FsbGJhY2sgbGlzdGVuZXIgd2hlbiBpdCdzIHRyaWdnZXJlZCBieSBlbGVtZW50cyB0aGF0IG1hdGNoIHRoZVxuICogZ2l2ZW4gc2VsZWN0b3Igb3IgdGFyZ2V0IGVsZW1lbnQuXG4gKiBAcGFyYW0geyFFbGVtZW50fSBlbGVtZW50IFRoZSBET00gZWxlbWVudCB0aGUgZXZlbnQgc2hvdWxkIGJlIGxpc3RlbmVkIG9uLlxuICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50TmFtZSBUaGUgbmFtZSBvZiB0aGUgZXZlbnQgdG8gbGlzdGVuIHRvLlxuICogQHBhcmFtIHshRWxlbWVudHxzdHJpbmd9IHNlbGVjdG9yT3JUYXJnZXQgRWl0aGVyIGFuIGVsZW1lbnQgb3IgY3NzIHNlbGVjdG9yXG4gKiAgICAgdGhhdCBzaG91bGQgbWF0Y2ggdGhlIGV2ZW50IGZvciB0aGUgbGlzdGVuZXIgdG8gYmUgdHJpZ2dlcmVkLlxuICogQHBhcmFtIHshZnVuY3Rpb24oIU9iamVjdCl9IGNhbGxiYWNrIEZ1bmN0aW9uIHRvIGJlIGNhbGxlZCB3aGVuIHRoZSBldmVudFxuICogICAgIGlzIHRyaWdnZXJlZC4gSXQgd2lsbCByZWNlaXZlIHRoZSBub3JtYWxpemVkIGV2ZW50IG9iamVjdC5cbiAqIEBwYXJhbSB7Ym9vbGVhbj19IG9wdF9kZWZhdWx0IE9wdGlvbmFsIGZsYWcgaW5kaWNhdGluZyBpZiB0aGlzIGlzIGEgZGVmYXVsdFxuICogICAgIGxpc3RlbmVyLiBUaGF0IG1lYW5zIHRoYXQgaXQgd291bGQgb25seSBiZSBleGVjdXRlZCBhZnRlciBhbGwgbm9uXG4gKiAgICAgZGVmYXVsdCBsaXN0ZW5lcnMsIGFuZCBvbmx5IGlmIHRoZSBldmVudCBpc24ndCBwcmV2ZW50ZWQgdmlhXG4gKiAgICAgYHByZXZlbnREZWZhdWx0YC5cbiAqIEByZXR1cm4geyFFdmVudEhhbmRsZX0gQ2FuIGJlIHVzZWQgdG8gcmVtb3ZlIHRoZSBsaXN0ZW5lci5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlbGVnYXRlKGVsZW1lbnQsIGV2ZW50TmFtZSwgc2VsZWN0b3JPclRhcmdldCwgY2FsbGJhY2ssIG9wdF9kZWZhdWx0KSB7XG5cdGNvbnN0IGN1c3RvbUNvbmZpZyA9IGN1c3RvbUV2ZW50c1tldmVudE5hbWVdO1xuXHRpZiAoY3VzdG9tQ29uZmlnICYmIGN1c3RvbUNvbmZpZy5kZWxlZ2F0ZSkge1xuXHRcdGV2ZW50TmFtZSA9IGN1c3RvbUNvbmZpZy5vcmlnaW5hbEV2ZW50O1xuXHRcdGNhbGxiYWNrID0gY3VzdG9tQ29uZmlnLmhhbmRsZXIuYmluZChjdXN0b21Db25maWcsIGNhbGxiYWNrKTtcblx0fVxuXG5cdGlmIChvcHRfZGVmYXVsdCkge1xuXHRcdC8vIFdyYXAgY2FsbGJhY2sgc28gd2UgZG9uJ3Qgc2V0IHByb3BlcnR5IGRpcmVjdGx5IG9uIGl0LlxuXHRcdGNhbGxiYWNrID0gY2FsbGJhY2suYmluZCgpO1xuXHRcdGNhbGxiYWNrLmRlZmF1bHRMaXN0ZW5lcl8gPSB0cnVlO1xuXHR9XG5cblx0YXR0YWNoRGVsZWdhdGVFdmVudF8oZWxlbWVudCwgZXZlbnROYW1lKTtcblx0aWYgKGlzU3RyaW5nKHNlbGVjdG9yT3JUYXJnZXQpKSB7XG5cdFx0YWRkU2VsZWN0b3JMaXN0ZW5lcl8oZWxlbWVudCwgZXZlbnROYW1lLCBzZWxlY3Rvck9yVGFyZ2V0LCBjYWxsYmFjayk7XG5cdH0gZWxzZSB7XG5cdFx0YWRkRWxlbWVudExpc3RlbmVyXyhzZWxlY3Rvck9yVGFyZ2V0LCBldmVudE5hbWUsIGNhbGxiYWNrKTtcblx0fVxuXG5cdHJldHVybiBuZXcgRG9tRGVsZWdhdGVkRXZlbnRIYW5kbGUoXG5cdFx0aXNTdHJpbmcoc2VsZWN0b3JPclRhcmdldCkgPyBlbGVtZW50IDogc2VsZWN0b3JPclRhcmdldCxcblx0XHRldmVudE5hbWUsXG5cdFx0Y2FsbGJhY2ssXG5cdFx0aXNTdHJpbmcoc2VsZWN0b3JPclRhcmdldCkgPyBzZWxlY3Rvck9yVGFyZ2V0IDogbnVsbFxuXHQpO1xufVxuXG4vKipcbiAqIFZlcmlmaWVzIGlmIHRoZSBlbGVtZW50IGlzIGFibGUgdG8gdHJpZ2dlciB0aGUgQ2xpY2sgZXZlbnQsXG4gKiBzaW11bGF0aW5nIGJyb3dzZXJzIGJlaGF2aW91ciwgYXZvaWRpbmcgZXZlbnQgbGlzdGVuZXJzIHRvIGJlIGNhbGxlZCBieSB0cmlnZ2VyRXZlbnQgbWV0aG9kLlxuICogQHBhcmFtIHtFbGVtZW50fSBub2RlIEVsZW1lbnQgdG8gYmUgY2hlY2tlZC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBldmVudE5hbWUgVGhlIGV2ZW50IG5hbWUuXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBpc0FibGVUb0ludGVyYWN0V2l0aF8obm9kZSwgZXZlbnROYW1lLCBvcHRfZXZlbnRPYmopIHtcblx0aWYgKG9wdF9ldmVudE9iaiAmJiBldmVudE5hbWUgPT09ICdjbGljaycgJiYgb3B0X2V2ZW50T2JqLmJ1dHRvbiA9PT0gMikge1xuXHRcdC8vIEZpcmVmb3ggdHJpZ2dlcnMgXCJjbGlja1wiIGV2ZW50cyBvbiB0aGUgZG9jdW1lbnQgZm9yIHJpZ2h0IGNsaWNrcy4gVGhpc1xuXHRcdC8vIGNhdXNlcyBvdXIgZGVsZWdhdGUgbG9naWMgdG8gdHJpZ2dlciBpdCBmb3IgcmVndWxhciBlbGVtZW50cyB0b28sIHdoaWNoXG5cdFx0Ly8gc2hvdWxkbid0IGhhcHBlbi4gSWdub3JpbmcgdGhlbSBoZXJlLlxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdGNvbnN0IG1hdGNoZXNTZWxlY3RvciA9IFsnQlVUVE9OJywgJ0lOUFVUJywgJ1NFTEVDVCcsICdURVhUQVJFQScsICdGSUVMRFNFVCddO1xuXHRpZiAoZXZlbnROYW1lID09PSAnY2xpY2snICYmIG1hdGNoZXNTZWxlY3Rvci5pbmRleE9mKG5vZGUudGFnTmFtZSkgPiAtMSkge1xuXHRcdHJldHVybiAhKG5vZGUuZGlzYWJsZWQgfHwgcGFyZW50KG5vZGUsICdmaWVsZHNldFtkaXNhYmxlZF0nKSk7XG5cdH1cblx0cmV0dXJuIHRydWU7XG59XG5cbi8qKlxuICogSW5zZXJ0cyBub2RlIGluIGRvY3VtZW50IGFzIGxhc3QgZWxlbWVudC5cbiAqIEBwYXJhbSB7RWxlbWVudH0gbm9kZSBFbGVtZW50IHRvIHJlbW92ZSBjaGlsZHJlbiBmcm9tLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZW50ZXJEb2N1bWVudChub2RlKSB7XG5cdG5vZGUgJiYgYXBwZW5kKGRvY3VtZW50LmJvZHksIG5vZGUpO1xufVxuXG4vKipcbiAqIFJlbW92ZXMgbm9kZSBmcm9tIGRvY3VtZW50LlxuICogQHBhcmFtIHtFbGVtZW50fSBub2RlIEVsZW1lbnQgdG8gcmVtb3ZlIGNoaWxkcmVuIGZyb20uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBleGl0RG9jdW1lbnQobm9kZSkge1xuXHRpZiAobm9kZSAmJiBub2RlLnBhcmVudE5vZGUpIHtcblx0XHRub2RlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobm9kZSk7XG5cdH1cbn1cblxuLyoqXG4gKiBUaGlzIGlzIGNhbGxlZCB3aGVuIGFuIGV2ZW50IGlzIHRyaWdnZXJlZCBieSBhIGRlbGVnYXRlIGxpc3RlbmVyLiBBbGxcbiAqIG1hdGNoaW5nIGxpc3RlbmVycyBvZiB0aGlzIGV2ZW50IHR5cGUgZnJvbSBgdGFyZ2V0YCB0byBgY3VycmVudFRhcmdldGAgd2lsbFxuICogYmUgdHJpZ2dlcmVkLlxuICogQHBhcmFtIHshRXZlbnR9IGV2ZW50IFRoZSBldmVudCBwYXlsb2FkLlxuICogQHJldHVybiB7Ym9vbGVhbn0gRmFsc2UgaWYgYXQgbGVhc3Qgb25lIG9mIHRoZSB0cmlnZ2VyZWQgY2FsbGJhY2tzIHJldHVybnNcbiAqICAgICBmYWxzZSwgb3IgdHJ1ZSBvdGhlcndpc2UuXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBoYW5kbGVEZWxlZ2F0ZUV2ZW50XyhldmVudCkge1xuXHRub3JtYWxpemVEZWxlZ2F0ZUV2ZW50XyhldmVudCk7XG5cdGxldCByZXQgPSB0cnVlO1xuXHRjb25zdCBjb250YWluZXIgPSBldmVudC5jdXJyZW50VGFyZ2V0O1xuXHRjb25zdCBkZWZGbnMgPSBbXTtcblxuXHRyZXQgJj0gdHJpZ2dlckRlbGVnYXRlZExpc3RlbmVyc18oY29udGFpbmVyLCBldmVudCwgZGVmRm5zKTtcblx0cmV0ICY9IHRyaWdnZXJEZWZhdWx0RGVsZWdhdGVkTGlzdGVuZXJzXyhkZWZGbnMsIGV2ZW50KTtcblxuXHRldmVudC5kZWxlZ2F0ZVRhcmdldCA9IG51bGw7XG5cdGV2ZW50W0xBU1RfQ09OVEFJTkVSXSA9IGNvbnRhaW5lcjtcblx0cmV0dXJuIHJldDtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgdGhlIGdpdmVuIGVsZW1lbnQgaGFzIHRoZSByZXF1ZXN0ZWQgY3NzIGNsYXNzLlxuICogQHBhcmFtIHshRWxlbWVudH0gZWxlbWVudFxuICogQHBhcmFtIHtzdHJpbmd9IGNsYXNzTmFtZVxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGhhc0NsYXNzKGVsZW1lbnQsIGNsYXNzTmFtZSkge1xuXHRpZiAoJ2NsYXNzTGlzdCcgaW4gZWxlbWVudCkge1xuXHRcdHJldHVybiBoYXNDbGFzc1dpdGhOYXRpdmVfKGVsZW1lbnQsIGNsYXNzTmFtZSk7XG5cdH0gZWxzZSB7XG5cdFx0cmV0dXJuIGhhc0NsYXNzV2l0aG91dE5hdGl2ZV8oZWxlbWVudCwgY2xhc3NOYW1lKTtcblx0fVxufVxuXG4vKipcbiAqIENoZWNrcyBpZiB0aGUgZ2l2ZW4gZWxlbWVudCBoYXMgdGhlIHJlcXVlc3RlZCBjc3MgY2xhc3MgdXNpbmcgY2xhc3NMaXN0LlxuICogQHBhcmFtIHshRWxlbWVudH0gZWxlbWVudFxuICogQHBhcmFtIHtzdHJpbmd9IGNsYXNzTmFtZVxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGhhc0NsYXNzV2l0aE5hdGl2ZV8oZWxlbWVudCwgY2xhc3NOYW1lKSB7XG5cdHJldHVybiBlbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhjbGFzc05hbWUpO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiB0aGUgZ2l2ZW4gZWxlbWVudCBoYXMgdGhlIHJlcXVlc3RlZCBjc3MgY2xhc3Mgd2l0aG91dCB1c2luZyBjbGFzc0xpc3QuXG4gKiBAcGFyYW0geyFFbGVtZW50fSBlbGVtZW50XG4gKiBAcGFyYW0ge3N0cmluZ30gY2xhc3NOYW1lXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gaGFzQ2xhc3NXaXRob3V0TmF0aXZlXyhlbGVtZW50LCBjbGFzc05hbWUpIHtcblx0cmV0dXJuIChgICR7ZWxlbWVudC5jbGFzc05hbWV9IGApLmluZGV4T2YoYCAke2NsYXNzTmFtZX0gYCkgPj0gMDtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgdGhlIGdpdmVuIGVsZW1lbnQgaXMgZW1wdHkgb3Igbm90LlxuICogQHBhcmFtIHshRWxlbWVudH0gZWxlbWVudFxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzRW1wdHkoZWxlbWVudCkge1xuXHRyZXR1cm4gZWxlbWVudC5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMDtcbn1cblxuLyoqXG4gKiBDaGVjayBpZiBhbiBlbGVtZW50IG1hdGNoZXMgYSBnaXZlbiBzZWxlY3Rvci5cbiAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudFxuICogQHBhcmFtIHtzdHJpbmd9IHNlbGVjdG9yXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5leHBvcnQgZnVuY3Rpb24gbWF0Y2goZWxlbWVudCwgc2VsZWN0b3IpIHtcblx0aWYgKCFlbGVtZW50IHx8IGVsZW1lbnQubm9kZVR5cGUgIT09IDEpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRjb25zdCBwID0gRWxlbWVudC5wcm90b3R5cGU7XG5cdGNvbnN0IG0gPSBwLm1hdGNoZXMgfHwgcC53ZWJraXRNYXRjaGVzU2VsZWN0b3IgfHwgcC5tb3pNYXRjaGVzU2VsZWN0b3IgfHwgcC5tc01hdGNoZXNTZWxlY3RvciB8fCBwLm9NYXRjaGVzU2VsZWN0b3I7XG5cdGlmIChtKSB7XG5cdFx0cmV0dXJuIG0uY2FsbChlbGVtZW50LCBzZWxlY3Rvcik7XG5cdH1cblxuXHRyZXR1cm4gbWF0Y2hGYWxsYmFja18oZWxlbWVudCwgc2VsZWN0b3IpO1xufVxuXG4vKipcbiAqIENoZWNrIGlmIGFuIGVsZW1lbnQgbWF0Y2hlcyBhIGdpdmVuIHNlbGVjdG9yLCB1c2luZyBhbiBpbnRlcm5hbCBpbXBsZW1lbnRhdGlvblxuICogaW5zdGVhZCBvZiBjYWxsaW5nIGV4aXN0aW5nIGphdmFzY3JpcHQgZnVuY3Rpb25zLlxuICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50XG4gKiBAcGFyYW0ge3N0cmluZ30gc2VsZWN0b3JcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBtYXRjaEZhbGxiYWNrXyhlbGVtZW50LCBzZWxlY3Rvcikge1xuXHRjb25zdCBub2RlcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IsIGVsZW1lbnQucGFyZW50Tm9kZSk7XG5cdGZvciAobGV0IGkgPSAwOyBpIDwgbm9kZXMubGVuZ3RoOyArK2kpIHtcblx0XHRpZiAobm9kZXNbaV0gPT09IGVsZW1lbnQpIHtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gZmFsc2U7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgbmV4dCBzaWJsaW5nIG9mIHRoZSBnaXZlbiBlbGVtZW50IHRoYXQgbWF0Y2hlcyB0aGUgc3BlY2lmaWVkXG4gKiBzZWxlY3Rvciwgb3IgbnVsbCBpZiB0aGVyZSBpcyBub25lLlxuICogQHBhcmFtIHshRWxlbWVudH0gZWxlbWVudFxuICogQHBhcmFtIHs/c3RyaW5nfSBzZWxlY3RvclxuICovXG5leHBvcnQgZnVuY3Rpb24gbmV4dChlbGVtZW50LCBzZWxlY3Rvcikge1xuXHRkbyB7XG5cdFx0ZWxlbWVudCA9IGVsZW1lbnQubmV4dFNpYmxpbmc7XG5cdFx0aWYgKGVsZW1lbnQgJiYgbWF0Y2goZWxlbWVudCwgc2VsZWN0b3IpKSB7XG5cdFx0XHRyZXR1cm4gZWxlbWVudDtcblx0XHR9XG5cdH0gd2hpbGUgKGVsZW1lbnQpO1xuXHRyZXR1cm4gbnVsbDtcbn1cblxuLyoqXG4gKiBOb3JtYWxpemVzIHRoZSBldmVudCBwYXlsb2FkIGZvciBkZWxlZ2F0ZSBsaXN0ZW5lcnMuXG4gKiBAcGFyYW0geyFFdmVudH0gZXZlbnRcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIG5vcm1hbGl6ZURlbGVnYXRlRXZlbnRfKGV2ZW50KSB7XG5cdGV2ZW50LnN0b3BQcm9wYWdhdGlvbiA9IHN0b3BQcm9wYWdhdGlvbl87XG5cdGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiA9IHN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbl87XG59XG5cbi8qKlxuICogTGlzdGVucyB0byB0aGUgc3BlY2lmaWVkIGV2ZW50IG9uIHRoZSBnaXZlbiBET00gZWxlbWVudC4gVGhpcyBmdW5jdGlvbiBub3JtYWxpemVzXG4gKiBET00gZXZlbnQgcGF5bG9hZHMgYW5kIGZ1bmN0aW9ucyBzbyB0aGV5J2xsIHdvcmsgdGhlIHNhbWUgd2F5IG9uIGFsbCBzdXBwb3J0ZWRcbiAqIGJyb3dzZXJzLlxuICogQHBhcmFtIHshRWxlbWVudHxzdHJpbmd9IGVsZW1lbnQgVGhlIERPTSBlbGVtZW50IHRvIGxpc3RlbiB0byB0aGUgZXZlbnQgb24sIG9yXG4gKiAgIGEgc2VsZWN0b3IgdGhhdCBzaG91bGQgYmUgZGVsZWdhdGVkIG9uIHRoZSBlbnRpcmUgZG9jdW1lbnQuXG4gKiBAcGFyYW0ge3N0cmluZ30gZXZlbnROYW1lIFRoZSBuYW1lIG9mIHRoZSBldmVudCB0byBsaXN0ZW4gdG8uXG4gKiBAcGFyYW0geyFmdW5jdGlvbighT2JqZWN0KX0gY2FsbGJhY2sgRnVuY3Rpb24gdG8gYmUgY2FsbGVkIHdoZW4gdGhlIGV2ZW50IGlzXG4gKiAgIHRyaWdnZXJlZC4gSXQgd2lsbCByZWNlaXZlIHRoZSBub3JtYWxpemVkIGV2ZW50IG9iamVjdC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gb3B0X2NhcHR1cmUgRmxhZyBpbmRpY2F0aW5nIGlmIGxpc3RlbmVyIHNob3VsZCBiZSB0cmlnZ2VyZWRcbiAqICAgZHVyaW5nIGNhcHR1cmUgcGhhc2UsIGluc3RlYWQgb2YgZHVyaW5nIHRoZSBidWJibGluZyBwaGFzZS4gRGVmYXVsdHMgdG8gZmFsc2UuXG4gKiBAcmV0dXJuIHshRG9tRXZlbnRIYW5kbGV9IENhbiBiZSB1c2VkIHRvIHJlbW92ZSB0aGUgbGlzdGVuZXIuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBvbihlbGVtZW50LCBldmVudE5hbWUsIGNhbGxiYWNrLCBvcHRfY2FwdHVyZSkge1xuXHRpZiAoaXNTdHJpbmcoZWxlbWVudCkpIHtcblx0XHRyZXR1cm4gZGVsZWdhdGUoZG9jdW1lbnQsIGV2ZW50TmFtZSwgZWxlbWVudCwgY2FsbGJhY2spO1xuXHR9XG5cdGNvbnN0IGN1c3RvbUNvbmZpZyA9IGN1c3RvbUV2ZW50c1tldmVudE5hbWVdO1xuXHRpZiAoY3VzdG9tQ29uZmlnICYmIGN1c3RvbUNvbmZpZy5ldmVudCkge1xuXHRcdGV2ZW50TmFtZSA9IGN1c3RvbUNvbmZpZy5vcmlnaW5hbEV2ZW50O1xuXHRcdGNhbGxiYWNrID0gY3VzdG9tQ29uZmlnLmhhbmRsZXIuYmluZChjdXN0b21Db25maWcsIGNhbGxiYWNrKTtcblx0fVxuXHRlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBjYWxsYmFjaywgb3B0X2NhcHR1cmUpO1xuXHRyZXR1cm4gbmV3IERvbUV2ZW50SGFuZGxlKGVsZW1lbnQsIGV2ZW50TmFtZSwgY2FsbGJhY2ssIG9wdF9jYXB0dXJlKTtcbn1cblxuLyoqXG4gKiBMaXN0ZW5zIHRvIHRoZSBzcGVjaWZpZWQgZXZlbnQgb24gdGhlIGdpdmVuIERPTSBlbGVtZW50IG9uY2UuIFRoaXNcbiAqIGZ1bmN0aW9uIG5vcm1hbGl6ZXMgRE9NIGV2ZW50IHBheWxvYWRzIGFuZCBmdW5jdGlvbnMgc28gdGhleSdsbCB3b3JrIHRoZVxuICogc2FtZSB3YXkgb24gYWxsIHN1cHBvcnRlZCBicm93c2Vycy5cbiAqIEBwYXJhbSB7IUVsZW1lbnR9IGVsZW1lbnQgVGhlIERPTSBlbGVtZW50IHRvIGxpc3RlbiB0byB0aGUgZXZlbnQgb24uXG4gKiBAcGFyYW0ge3N0cmluZ30gZXZlbnROYW1lIFRoZSBuYW1lIG9mIHRoZSBldmVudCB0byBsaXN0ZW4gdG8uXG4gKiBAcGFyYW0geyFmdW5jdGlvbighT2JqZWN0KX0gY2FsbGJhY2sgRnVuY3Rpb24gdG8gYmUgY2FsbGVkIHdoZW4gdGhlIGV2ZW50XG4gKiAgIGlzIHRyaWdnZXJlZC4gSXQgd2lsbCByZWNlaXZlIHRoZSBub3JtYWxpemVkIGV2ZW50IG9iamVjdC5cbiAqIEByZXR1cm4geyFEb21FdmVudEhhbmRsZX0gQ2FuIGJlIHVzZWQgdG8gcmVtb3ZlIHRoZSBsaXN0ZW5lci5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG9uY2UoZWxlbWVudCwgZXZlbnROYW1lLCBjYWxsYmFjaykge1xuXHRjb25zdCBkb21FdmVudEhhbmRsZSA9IG9uKGVsZW1lbnQsIGV2ZW50TmFtZSwgZnVuY3Rpb24oKSB7XG5cdFx0ZG9tRXZlbnRIYW5kbGUucmVtb3ZlTGlzdGVuZXIoKTtcblx0XHRyZXR1cm4gY2FsbGJhY2suYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblx0fSk7XG5cdHJldHVybiBkb21FdmVudEhhbmRsZTtcbn1cblxuLyoqXG4gKiBHZXRzIHRoZSBmaXJzdCBwYXJlbnQgZnJvbSB0aGUgZ2l2ZW4gZWxlbWVudCB0aGF0IG1hdGNoZXMgdGhlIHNwZWNpZmllZFxuICogc2VsZWN0b3IsIG9yIG51bGwgaWYgbm9uZSBtYXRjaC5cbiAqIEBwYXJhbSB7IUVsZW1lbnR9IGVsZW1lbnRcbiAqIEBwYXJhbSB7c3RyaW5nfSBzZWxlY3RvclxuICogQHJldHVybiB7RWxlbWVudH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcmVudChlbGVtZW50LCBzZWxlY3Rvcikge1xuXHRyZXR1cm4gY2xvc2VzdChlbGVtZW50LnBhcmVudE5vZGUsIHNlbGVjdG9yKTtcbn1cblxuLyoqXG4gKiBSZWdpc3RlcnMgYSBjdXN0b20gZXZlbnQuXG4gKiBAcGFyYW0ge3N0cmluZ30gZXZlbnROYW1lIFRoZSBuYW1lIG9mIHRoZSBjdXN0b20gZXZlbnQuXG4gKiBAcGFyYW0geyFPYmplY3R9IGN1c3RvbUNvbmZpZyBBbiBvYmplY3Qgd2l0aCBpbmZvcm1hdGlvbiBhYm91dCBob3cgdGhlIGV2ZW50XG4gKiAgIHNob3VsZCBiZSBoYW5kbGVkLlxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVnaXN0ZXJDdXN0b21FdmVudChldmVudE5hbWUsIGN1c3RvbUNvbmZpZykge1xuXHRjdXN0b21FdmVudHNbZXZlbnROYW1lXSA9IGN1c3RvbUNvbmZpZztcbn1cblxuLyoqXG4gKiBSZW1vdmVzIGFsbCB0aGUgY2hpbGQgbm9kZXMgb24gYSBET00gbm9kZS5cbiAqIEBwYXJhbSB7RWxlbWVudH0gbm9kZSBFbGVtZW50IHRvIHJlbW92ZSBjaGlsZHJlbiBmcm9tLlxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlQ2hpbGRyZW4obm9kZSkge1xuXHRsZXQgY2hpbGQ7XG5cdHdoaWxlICgoY2hpbGQgPSBub2RlLmZpcnN0Q2hpbGQpKSB7XG5cdFx0bm9kZS5yZW1vdmVDaGlsZChjaGlsZCk7XG5cdH1cbn1cblxuLyoqXG4gKiBSZW1vdmVzIHRoZSByZXF1ZXN0ZWQgQ1NTIGNsYXNzZXMgZnJvbSBhbiBlbGVtZW50LlxuICogQHBhcmFtIHshRWxlbWVudHwhTm9kZUxpc3R9IGVsZW1lbnRzIFRoZSBlbGVtZW50IG9yIGVsZW1lbnRzIHRvIHJlbW92ZSBDU1MgY2xhc3NlcyBmcm9tLlxuICogQHBhcmFtIHtzdHJpbmd9IGNsYXNzZXMgQ1NTIGNsYXNzZXMgdG8gcmVtb3ZlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlQ2xhc3NlcyhlbGVtZW50cywgY2xhc3Nlcykge1xuXHRpZiAoIWlzT2JqZWN0KGVsZW1lbnRzKSB8fCAhaXNTdHJpbmcoY2xhc3NlcykpIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHRpZiAoIWVsZW1lbnRzLmxlbmd0aCkge1xuXHRcdGVsZW1lbnRzID0gW2VsZW1lbnRzXTtcblx0fVxuXG5cdGZvciAobGV0IGkgPSAwOyBpIDwgZWxlbWVudHMubGVuZ3RoOyBpKyspIHtcblx0XHRpZiAoJ2NsYXNzTGlzdCcgaW4gZWxlbWVudHNbaV0pIHtcblx0XHRcdHJlbW92ZUNsYXNzZXNXaXRoTmF0aXZlXyhlbGVtZW50c1tpXSwgY2xhc3Nlcyk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJlbW92ZUNsYXNzZXNXaXRob3V0TmF0aXZlXyhlbGVtZW50c1tpXSwgY2xhc3Nlcyk7XG5cdFx0fVxuXHR9XG59XG5cbi8qKlxuICogUmVtb3ZlcyB0aGUgcmVxdWVzdGVkIENTUyBjbGFzc2VzIGZyb20gYW4gZWxlbWVudCB1c2luZyBjbGFzc0xpc3QuXG4gKiBAcGFyYW0geyFFbGVtZW50fSBlbGVtZW50IFRoZSBlbGVtZW50IHRvIHJlbW92ZSBDU1MgY2xhc3NlcyBmcm9tLlxuICogQHBhcmFtIHtzdHJpbmd9IGNsYXNzZXMgQ1NTIGNsYXNzZXMgdG8gcmVtb3ZlLlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gcmVtb3ZlQ2xhc3Nlc1dpdGhOYXRpdmVfKGVsZW1lbnQsIGNsYXNzZXMpIHtcblx0Y2xhc3Nlcy5zcGxpdCgnICcpLmZvckVhY2goZnVuY3Rpb24oY2xhc3NOYW1lKSB7XG5cdFx0aWYgKGNsYXNzTmFtZSkge1xuXHRcdFx0ZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKGNsYXNzTmFtZSk7XG5cdFx0fVxuXHR9KTtcbn1cblxuLyoqXG4gKiBSZW1vdmVzIHRoZSByZXF1ZXN0ZWQgQ1NTIGNsYXNzZXMgZnJvbSBhbiBlbGVtZW50IHdpdGhvdXQgdXNpbmcgY2xhc3NMaXN0LlxuICogQHBhcmFtIHshRWxlbWVudH0gZWxlbWVudCBUaGUgZWxlbWVudCB0byByZW1vdmUgQ1NTIGNsYXNzZXMgZnJvbS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBjbGFzc2VzIENTUyBjbGFzc2VzIHRvIHJlbW92ZS5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHJlbW92ZUNsYXNzZXNXaXRob3V0TmF0aXZlXyhlbGVtZW50LCBjbGFzc2VzKSB7XG5cdGxldCBlbGVtZW50Q2xhc3NOYW1lID0gYCAke2VsZW1lbnQuY2xhc3NOYW1lfSBgO1xuXG5cdGNsYXNzZXMgPSBjbGFzc2VzLnNwbGl0KCcgJyk7XG5cblx0Zm9yIChsZXQgaSA9IDA7IGkgPCBjbGFzc2VzLmxlbmd0aDsgaSsrKSB7XG5cdFx0ZWxlbWVudENsYXNzTmFtZSA9IGVsZW1lbnRDbGFzc05hbWUucmVwbGFjZShgICR7Y2xhc3Nlc1tpXX0gYCwgJyAnKTtcblx0fVxuXG5cdGVsZW1lbnQuY2xhc3NOYW1lID0gZWxlbWVudENsYXNzTmFtZS50cmltKCk7XG59XG5cbi8qKlxuICogUmVwbGFjZXMgdGhlIGZpcnN0IGVsZW1lbnQgd2l0aCB0aGUgc2Vjb25kLlxuICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50MVxuICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50MlxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVwbGFjZShlbGVtZW50MSwgZWxlbWVudDIpIHtcblx0aWYgKGVsZW1lbnQxICYmIGVsZW1lbnQyICYmIGVsZW1lbnQxICE9PSBlbGVtZW50MiAmJiBlbGVtZW50MS5wYXJlbnROb2RlKSB7XG5cdFx0ZWxlbWVudDEucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoZWxlbWVudDIsIGVsZW1lbnQxKTtcblx0XHRlbGVtZW50MS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGVsZW1lbnQxKTtcblx0fVxufVxuXG4vKipcbiAqIFRoZSBmdW5jdGlvbiB0aGF0IHJlcGxhY2VzIGBzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb25fYCBmb3IgZXZlbnRzLlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uXygpIHtcblx0Y29uc3QgZXZlbnQgPSB0aGlzOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG5cdGV2ZW50LnN0b3BwZWQgPSB0cnVlO1xuXHRldmVudC5zdG9wcGVkSW1tZWRpYXRlID0gdHJ1ZTtcblx0RXZlbnQucHJvdG90eXBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbi5jYWxsKGV2ZW50KTtcbn1cblxuLyoqXG4gKiBUaGUgZnVuY3Rpb24gdGhhdCByZXBsYWNlcyBgc3RvcFByb3BhZ2F0aW9uYCBmb3IgZXZlbnRzLlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gc3RvcFByb3BhZ2F0aW9uXygpIHtcblx0Y29uc3QgZXZlbnQgPSB0aGlzOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG5cdGV2ZW50LnN0b3BwZWQgPSB0cnVlO1xuXHRFdmVudC5wcm90b3R5cGUuc3RvcFByb3BhZ2F0aW9uLmNhbGwoZXZlbnQpO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiB0aGUgZ2l2ZW4gZWxlbWVudCBzdXBwb3J0cyB0aGUgZ2l2ZW4gZXZlbnQgdHlwZS5cbiAqIEBwYXJhbSB7IUVsZW1lbnR8c3RyaW5nfSBlbGVtZW50IFRoZSBET00gZWxlbWVudCBvciBlbGVtZW50IHRhZyBuYW1lIHRvIGNoZWNrLlxuICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50TmFtZSBUaGUgbmFtZSBvZiB0aGUgZXZlbnQgdG8gY2hlY2suXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5leHBvcnQgZnVuY3Rpb24gc3VwcG9ydHNFdmVudChlbGVtZW50LCBldmVudE5hbWUpIHtcblx0aWYgKGN1c3RvbUV2ZW50c1tldmVudE5hbWVdKSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblxuXHRpZiAoaXNTdHJpbmcoZWxlbWVudCkpIHtcblx0XHRpZiAoIWVsZW1lbnRzQnlUYWdfW2VsZW1lbnRdKSB7XG5cdFx0XHRlbGVtZW50c0J5VGFnX1tlbGVtZW50XSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoZWxlbWVudCk7XG5cdFx0fVxuXHRcdGVsZW1lbnQgPSBlbGVtZW50c0J5VGFnX1tlbGVtZW50XTtcblx0fVxuXG5cdGNvbnN0IHRhZyA9IGVsZW1lbnQudGFnTmFtZTtcblx0aWYgKCFzdXBwb3J0Q2FjaGVfW3RhZ10gfHwgIXN1cHBvcnRDYWNoZV9bdGFnXS5oYXNPd25Qcm9wZXJ0eShldmVudE5hbWUpKSB7XG5cdFx0c3VwcG9ydENhY2hlX1t0YWddID0gc3VwcG9ydENhY2hlX1t0YWddIHx8IHt9O1xuXHRcdHN1cHBvcnRDYWNoZV9bdGFnXVtldmVudE5hbWVdID0gJ29uJyArIGV2ZW50TmFtZSBpbiBlbGVtZW50O1xuXHR9XG5cdHJldHVybiBzdXBwb3J0Q2FjaGVfW3RhZ11bZXZlbnROYW1lXTtcbn1cblxuLyoqXG4gKiBUaGlzIHRyaWdnZXJzIGFsbCBkZWZhdWx0IG1hdGNoZWQgZGVsZWdhdGVkIGxpc3RlbmVycyBvZiBhIGdpdmVuIGV2ZW50IHR5cGUuXG4gKiBAcGFyYW0geyFBcnJheX0gZGVmYXVsdEZucyBBcnJheSB0byBjb2xsZWN0IGRlZmF1bHQgbGlzdGVuZXJzIGluLCBpbnN0ZWFkXG4gKiBAcGFyYW0geyFFdmVudH0gZXZlbnRcbiAqIEByZXR1cm4ge2Jvb2xlYW59IEZhbHNlIGlmIGF0IGxlYXN0IG9uZSBvZiB0aGUgdHJpZ2dlcmVkIGNhbGxiYWNrcyByZXR1cm5zXG4gKiAgICAgZmFsc2UsIG9yIHRydWUgb3RoZXJ3aXNlLlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gdHJpZ2dlckRlZmF1bHREZWxlZ2F0ZWRMaXN0ZW5lcnNfKGRlZkZucywgZXZlbnQpIHtcblx0bGV0IHJldCA9IHRydWU7XG5cblx0Zm9yIChsZXQgaSA9IDA7IGkgPCBkZWZGbnMubGVuZ3RoICYmICFldmVudC5kZWZhdWx0UHJldmVudGVkOyBpKyspIHtcblx0XHRldmVudC5kZWxlZ2F0ZVRhcmdldCA9IGRlZkZuc1tpXS5lbGVtZW50O1xuXHRcdHJldCAmPSBkZWZGbnNbaV0uZm4oZXZlbnQpO1xuXHR9XG5cblx0cmV0dXJuIHJldDtcbn1cblxuLyoqXG4gKiBUaGlzIHRyaWdnZXJzIGFsbCBtYXRjaGVkIGRlbGVnYXRlZCBsaXN0ZW5lcnMgb2YgYSBnaXZlbiBldmVudCB0eXBlIHdoZW4gaXRzXG4gKiBkZWxlZ2F0ZWQgdGFyZ2V0IGlzIGFibGUgdG8gaW50ZXJhY3QuXG4gKiBAcGFyYW0geyFFbGVtZW50fSBjb250YWluZXJcbiAqIEBwYXJhbSB7IUV2ZW50fSBldmVudFxuICogQHBhcmFtIHshQXJyYXl9IGRlZmF1bHRGbnMgQXJyYXkgdG8gY29sbGVjdCBkZWZhdWx0IGxpc3RlbmVycyBpbiwgaW5zdGVhZFxuICogICAgIG9mIHJ1bm5pbmcgdGhlbS5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IEZhbHNlIGlmIGF0IGxlYXN0IG9uZSBvZiB0aGUgdHJpZ2dlcmVkIGNhbGxiYWNrcyByZXR1cm5zXG4gKiAgICAgZmFsc2UsIG9yIHRydWUgb3RoZXJ3aXNlLlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gdHJpZ2dlckRlbGVnYXRlZExpc3RlbmVyc18oY29udGFpbmVyLCBldmVudCwgZGVmYXVsdEZucykge1xuXHRsZXQgcmV0ID0gdHJ1ZTtcblx0bGV0IGN1cnJFbGVtZW50ID0gZXZlbnQudGFyZ2V0O1xuXHRjb25zdCBsaW1pdCA9IGNvbnRhaW5lci5wYXJlbnROb2RlO1xuXG5cdHdoaWxlIChjdXJyRWxlbWVudCAmJiBjdXJyRWxlbWVudCAhPT0gbGltaXQgJiYgIWV2ZW50LnN0b3BwZWQpIHtcblx0XHRpZiAoaXNBYmxlVG9JbnRlcmFjdFdpdGhfKGN1cnJFbGVtZW50LCBldmVudC50eXBlLCBldmVudCkpIHtcblx0XHRcdGV2ZW50LmRlbGVnYXRlVGFyZ2V0ID0gY3VyckVsZW1lbnQ7XG5cdFx0XHRyZXQgJj0gdHJpZ2dlckVsZW1lbnRMaXN0ZW5lcnNfKGN1cnJFbGVtZW50LCBldmVudCwgZGVmYXVsdEZucyk7XG5cdFx0XHRyZXQgJj0gdHJpZ2dlclNlbGVjdG9yTGlzdGVuZXJzXyhjb250YWluZXIsIGN1cnJFbGVtZW50LCBldmVudCwgZGVmYXVsdEZucyk7XG5cdFx0fVxuXHRcdGN1cnJFbGVtZW50ID0gY3VyckVsZW1lbnQucGFyZW50Tm9kZTtcblx0fVxuXG5cdHJldHVybiByZXQ7XG59XG5cbi8qKlxuICogQ29udmVydHMgdGhlIGdpdmVuIGFyZ3VtZW50IHRvIGEgRE9NIGVsZW1lbnQuIFN0cmluZ3MgYXJlIGFzc3VtZWQgdG9cbiAqIGJlIHNlbGVjdG9ycywgYW5kIHNvIGEgbWF0Y2hlZCBlbGVtZW50IHdpbGwgYmUgcmV0dXJuZWQuIElmIHRoZSBhcmdcbiAqIGlzIGFscmVhZHkgYSBET00gZWxlbWVudCBpdCB3aWxsIGJlIHRoZSByZXR1cm4gdmFsdWUuXG4gKiBAcGFyYW0ge3N0cmluZ3xFbGVtZW50fERvY3VtZW50fSBzZWxlY3Rvck9yRWxlbWVudFxuICogQHJldHVybiB7RWxlbWVudH0gVGhlIGNvbnZlcnRlZCBlbGVtZW50LCBvciBudWxsIGlmIG5vbmUgd2FzIGZvdW5kLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdG9FbGVtZW50KHNlbGVjdG9yT3JFbGVtZW50KSB7XG5cdGlmIChpc0VsZW1lbnQoc2VsZWN0b3JPckVsZW1lbnQpIHx8IGlzRG9jdW1lbnQoc2VsZWN0b3JPckVsZW1lbnQpIHx8IGlzRG9jdW1lbnRGcmFnbWVudChzZWxlY3Rvck9yRWxlbWVudCkpIHtcblx0XHRyZXR1cm4gc2VsZWN0b3JPckVsZW1lbnQ7XG5cdH0gZWxzZSBpZiAoaXNTdHJpbmcoc2VsZWN0b3JPckVsZW1lbnQpKSB7XG5cdFx0aWYgKHNlbGVjdG9yT3JFbGVtZW50WzBdID09PSAnIycgJiYgc2VsZWN0b3JPckVsZW1lbnQuaW5kZXhPZignICcpID09PSAtMSkge1xuXHRcdFx0cmV0dXJuIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHNlbGVjdG9yT3JFbGVtZW50LnN1YnN0cigxKSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yT3JFbGVtZW50KTtcblx0XHR9XG5cdH0gZWxzZSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cbn1cblxuLyoqXG4gKiBBZGRzIG9yIHJlbW92ZXMgb25lIG9yIG1vcmUgY2xhc3NlcyBmcm9tIGFuIGVsZW1lbnQuIElmIGFueSBvZiB0aGUgY2xhc3Nlc1xuICogaXMgcHJlc2VudCwgaXQgd2lsbCBiZSByZW1vdmVkIGZyb20gdGhlIGVsZW1lbnQsIG9yIGFkZGVkIG90aGVyd2lzZS5cbiAqIEBwYXJhbSB7IUVsZW1lbnR9IGVsZW1lbnQgVGhlIGVsZW1lbnQgd2hpY2ggY2xhc3NlcyB3aWxsIGJlIHRvZ2dsZWQuXG4gKiBAcGFyYW0ge3N0cmluZ30gY2xhc3NlcyBUaGUgY2xhc3NlcyB3aGljaCBoYXZlIHRvIGFkZGVkIG9yIHJlbW92ZWQgZnJvbSB0aGUgZWxlbWVudC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRvZ2dsZUNsYXNzZXMoZWxlbWVudCwgY2xhc3Nlcykge1xuXHRpZiAoIWlzT2JqZWN0KGVsZW1lbnQpIHx8ICFpc1N0cmluZyhjbGFzc2VzKSkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdGlmICgnY2xhc3NMaXN0JyBpbiBlbGVtZW50KSB7XG5cdFx0dG9nZ2xlQ2xhc3Nlc1dpdGhOYXRpdmVfKGVsZW1lbnQsIGNsYXNzZXMpO1xuXHR9IGVsc2Uge1xuXHRcdHRvZ2dsZUNsYXNzZXNXaXRob3V0TmF0aXZlXyhlbGVtZW50LCBjbGFzc2VzKTtcblx0fVxufVxuXG4vKipcbiAqIEFkZHMgb3IgcmVtb3ZlcyBvbmUgb3IgbW9yZSBjbGFzc2VzIGZyb20gYW4gZWxlbWVudCB1c2luZyBjbGFzc0xpc3QuXG4gKiBJZiBhbnkgb2YgdGhlIGNsYXNzZXMgaXMgcHJlc2VudCwgaXQgd2lsbCBiZSByZW1vdmVkIGZyb20gdGhlIGVsZW1lbnQsXG4gKiBvciBhZGRlZCBvdGhlcndpc2UuXG4gKiBAcGFyYW0geyFFbGVtZW50fSBlbGVtZW50IFRoZSBlbGVtZW50IHdoaWNoIGNsYXNzZXMgd2lsbCBiZSB0b2dnbGVkLlxuICogQHBhcmFtIHtzdHJpbmd9IGNsYXNzZXMgVGhlIGNsYXNzZXMgd2hpY2ggaGF2ZSB0byBhZGRlZCBvciByZW1vdmVkIGZyb20gdGhlIGVsZW1lbnQuXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiB0b2dnbGVDbGFzc2VzV2l0aE5hdGl2ZV8oZWxlbWVudCwgY2xhc3Nlcykge1xuXHRjbGFzc2VzLnNwbGl0KCcgJykuZm9yRWFjaChmdW5jdGlvbihjbGFzc05hbWUpIHtcblx0XHRlbGVtZW50LmNsYXNzTGlzdC50b2dnbGUoY2xhc3NOYW1lKTtcblx0fSk7XG59XG5cbi8qKlxuICogQWRkcyBvciByZW1vdmVzIG9uZSBvciBtb3JlIGNsYXNzZXMgZnJvbSBhbiBlbGVtZW50IHdpdGhvdXQgdXNpbmcgY2xhc3NMaXN0LlxuICogSWYgYW55IG9mIHRoZSBjbGFzc2VzIGlzIHByZXNlbnQsIGl0IHdpbGwgYmUgcmVtb3ZlZCBmcm9tIHRoZSBlbGVtZW50LFxuICogb3IgYWRkZWQgb3RoZXJ3aXNlLlxuICogQHBhcmFtIHshRWxlbWVudH0gZWxlbWVudCBUaGUgZWxlbWVudCB3aGljaCBjbGFzc2VzIHdpbGwgYmUgdG9nZ2xlZC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBjbGFzc2VzIFRoZSBjbGFzc2VzIHdoaWNoIGhhdmUgdG8gYWRkZWQgb3IgcmVtb3ZlZCBmcm9tIHRoZSBlbGVtZW50LlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gdG9nZ2xlQ2xhc3Nlc1dpdGhvdXROYXRpdmVfKGVsZW1lbnQsIGNsYXNzZXMpIHtcblx0bGV0IGVsZW1lbnRDbGFzc05hbWUgPSBgICR7ZWxlbWVudC5jbGFzc05hbWV9IGA7XG5cblx0Y2xhc3NlcyA9IGNsYXNzZXMuc3BsaXQoJyAnKTtcblxuXHRmb3IgKGxldCBpID0gMDsgaSA8IGNsYXNzZXMubGVuZ3RoOyBpKyspIHtcblx0XHRjb25zdCBjbGFzc05hbWUgPSBgICR7Y2xhc3Nlc1tpXX0gYDtcblx0XHRjb25zdCBjbGFzc0luZGV4ID0gZWxlbWVudENsYXNzTmFtZS5pbmRleE9mKGNsYXNzTmFtZSk7XG5cblx0XHRpZiAoY2xhc3NJbmRleCA9PT0gLTEpIHtcblx0XHRcdGVsZW1lbnRDbGFzc05hbWUgPSBgJHtlbGVtZW50Q2xhc3NOYW1lfSR7Y2xhc3Nlc1tpXX0gYDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Y29uc3QgYmVmb3JlID0gZWxlbWVudENsYXNzTmFtZS5zdWJzdHJpbmcoMCwgY2xhc3NJbmRleCk7XG5cdFx0XHRjb25zdCBhZnRlciA9IGVsZW1lbnRDbGFzc05hbWUuc3Vic3RyaW5nKGNsYXNzSW5kZXggKyBjbGFzc05hbWUubGVuZ3RoKTtcblx0XHRcdGVsZW1lbnRDbGFzc05hbWUgPSBgJHtiZWZvcmV9ICR7YWZ0ZXJ9YDtcblx0XHR9XG5cdH1cblxuXHRlbGVtZW50LmNsYXNzTmFtZSA9IGVsZW1lbnRDbGFzc05hbWUudHJpbSgpO1xufVxuXG4vKipcbiAqIFRyaWdnZXJzIGFsbCBsaXN0ZW5lcnMgZm9yIHRoZSBnaXZlbiBldmVudCB0eXBlIHRoYXQgYXJlIHN0b3JlZCBpbiB0aGVcbiAqIHNwZWNpZmllZCBlbGVtZW50LlxuICogQHBhcmFtIHshRWxlbWVudH0gZWxlbWVudFxuICogQHBhcmFtIHshRXZlbnR9IGV2ZW50XG4gKiBAcGFyYW0geyFBcnJheX0gZGVmYXVsdEZucyBBcnJheSB0byBjb2xsZWN0IGRlZmF1bHQgbGlzdGVuZXJzIGluLCBpbnN0ZWFkXG4gKiAgICAgb2YgcnVubmluZyB0aGVtLlxuICogQHJldHVybiB7Ym9vbGVhbn0gRmFsc2UgaWYgYXQgbGVhc3Qgb25lIG9mIHRoZSB0cmlnZ2VyZWQgY2FsbGJhY2tzIHJldHVybnNcbiAqICAgICBmYWxzZSwgb3IgdHJ1ZSBvdGhlcndpc2UuXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiB0cmlnZ2VyRWxlbWVudExpc3RlbmVyc18oZWxlbWVudCwgZXZlbnQsIGRlZmF1bHRGbnMpIHtcblx0Y29uc3QgbGFzdENvbnRhaW5lciA9IGV2ZW50W0xBU1RfQ09OVEFJTkVSXTtcblx0aWYgKCFpc0RlZihsYXN0Q29udGFpbmVyKSB8fCAhY29udGFpbnMobGFzdENvbnRhaW5lciwgZWxlbWVudCkpIHtcblx0XHRjb25zdCBsaXN0ZW5lcnMgPSBkb21EYXRhLmdldChlbGVtZW50LCAnbGlzdGVuZXJzJywge30pW2V2ZW50LnR5cGVdO1xuXHRcdHJldHVybiB0cmlnZ2VyTGlzdGVuZXJzXyhsaXN0ZW5lcnMsIGV2ZW50LCBlbGVtZW50LCBkZWZhdWx0Rm5zKTtcblx0fVxuXHRyZXR1cm4gdHJ1ZTtcbn1cblxuLyoqXG4gKiBUcmlnZ2VycyB0aGUgc3BlY2lmaWVkIGV2ZW50IG9uIHRoZSBnaXZlbiBlbGVtZW50LlxuICogTk9URTogVGhpcyBzaG91bGQgbW9zdGx5IGJlIHVzZWQgZm9yIHRlc3RpbmcsIG5vdCBvbiByZWFsIGNvZGUuXG4gKiBAcGFyYW0geyFFbGVtZW50fSBlbGVtZW50IFRoZSBub2RlIHRoYXQgc2hvdWxkIHRyaWdnZXIgdGhlIGV2ZW50LlxuICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50TmFtZSBUaGUgbmFtZSBvZiB0aGUgZXZlbnQgdG8gYmUgdHJpZ2dyZWQuXG4gKiBAcGFyYW0ge09iamVjdD19IG9wdF9ldmVudE9iaiBBbiBvYmplY3Qgd2l0aCBkYXRhIHRoYXQgc2hvdWxkIGJlIG9uIHRoZVxuICogICB0cmlnZ2VyZWQgZXZlbnQncyBwYXlsb2FkLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdHJpZ2dlckV2ZW50KGVsZW1lbnQsIGV2ZW50TmFtZSwgb3B0X2V2ZW50T2JqKSB7XG5cdGlmIChpc0FibGVUb0ludGVyYWN0V2l0aF8oZWxlbWVudCwgZXZlbnROYW1lLCBvcHRfZXZlbnRPYmopKSB7XG5cdFx0Y29uc3QgZXZlbnRPYmogPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnSFRNTEV2ZW50cycpO1xuXHRcdGV2ZW50T2JqLmluaXRFdmVudChldmVudE5hbWUsIHRydWUsIHRydWUpO1xuXHRcdG9iamVjdC5taXhpbihldmVudE9iaiwgb3B0X2V2ZW50T2JqKTtcblx0XHRlbGVtZW50LmRpc3BhdGNoRXZlbnQoZXZlbnRPYmopO1xuXHR9XG59XG5cbi8qKlxuICogVHJpZ2dlcnMgdGhlIGdpdmVuIGxpc3RlbmVycyBhcnJheS5cbiAqIEBwYXJhbSB7QXJyYXk8IWZ1bmN0aW9uKCk+fSBsaXN0ZW5lcnNcbiAqIEBwYXJhbSB7IUV2ZW50fSBldmVudFxuICogQHBhcmFtIHshRWxlbWVudH0gZWxlbWVudFxuICogQHBhcmFtIHshQXJyYXl9IGRlZmF1bHRGbnMgQXJyYXkgdG8gY29sbGVjdCBkZWZhdWx0IGxpc3RlbmVycyBpbiwgaW5zdGVhZFxuICogICAgIG9mIHJ1bm5pbmcgdGhlbS5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IEZhbHNlIGlmIGF0IGxlYXN0IG9uZSBvZiB0aGUgdHJpZ2dlcmVkIGNhbGxiYWNrcyByZXR1cm5zXG4gKiAgICAgZmFsc2UsIG9yIHRydWUgb3RoZXJ3aXNlLlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gdHJpZ2dlckxpc3RlbmVyc18obGlzdGVuZXJzLCBldmVudCwgZWxlbWVudCwgZGVmYXVsdEZucykge1xuXHRsZXQgcmV0ID0gdHJ1ZTtcblx0bGlzdGVuZXJzID0gbGlzdGVuZXJzIHx8IFtdO1xuXHRmb3IgKGxldCBpID0gMDsgaSA8IGxpc3RlbmVycy5sZW5ndGggJiYgIWV2ZW50LnN0b3BwZWRJbW1lZGlhdGU7IGkrKykge1xuXHRcdGlmIChsaXN0ZW5lcnNbaV0uZGVmYXVsdExpc3RlbmVyXykge1xuXHRcdFx0ZGVmYXVsdEZucy5wdXNoKHtcblx0XHRcdFx0ZWxlbWVudCxcblx0XHRcdFx0Zm46IGxpc3RlbmVyc1tpXVxuXHRcdFx0fSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJldCAmPSBsaXN0ZW5lcnNbaV0oZXZlbnQpO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gcmV0O1xufVxuXG4vKipcbiAqIFRyaWdnZXJzIGFsbCBzZWxlY3RvciBsaXN0ZW5lcnMgZm9yIHRoZSBnaXZlbiBldmVudC5cbiAqIEBwYXJhbSB7IUVsZW1lbnR9IGNvbnRhaW5lclxuICogQHBhcmFtIHshRWxlbWVudH0gZWxlbWVudFxuICogQHBhcmFtIHshRXZlbnR9IGV2ZW50XG4gKiBAcGFyYW0geyFBcnJheX0gZGVmYXVsdEZucyBBcnJheSB0byBjb2xsZWN0IGRlZmF1bHQgbGlzdGVuZXJzIGluLCBpbnN0ZWFkXG4gKiAgICAgb2YgcnVubmluZyB0aGVtLlxuICogQHJldHVybiB7Ym9vbGVhbn0gRmFsc2UgaWYgYXQgbGVhc3Qgb25lIG9mIHRoZSB0cmlnZ2VyZWQgY2FsbGJhY2tzIHJldHVybnNcbiAqICAgICBmYWxzZSwgb3IgdHJ1ZSBvdGhlcndpc2UuXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiB0cmlnZ2VyU2VsZWN0b3JMaXN0ZW5lcnNfKGNvbnRhaW5lciwgZWxlbWVudCwgZXZlbnQsIGRlZmF1bHRGbnMpIHtcblx0bGV0IHJldCA9IHRydWU7XG5cdGNvbnN0IGRhdGEgPSBkb21EYXRhLmdldChjb250YWluZXIsICdkZWxlZ2F0aW5nJywge30pO1xuXHRjb25zdCBtYXAgPSBkYXRhW2V2ZW50LnR5cGVdLnNlbGVjdG9ycztcblx0Y29uc3Qgc2VsZWN0b3JzID0gT2JqZWN0LmtleXMobWFwKTtcblx0Zm9yIChsZXQgaSA9IDA7IGkgPCBzZWxlY3RvcnMubGVuZ3RoICYmICFldmVudC5zdG9wcGVkSW1tZWRpYXRlOyBpKyspIHtcblx0XHRpZiAobWF0Y2goZWxlbWVudCwgc2VsZWN0b3JzW2ldKSkge1xuXHRcdFx0Y29uc3QgbGlzdGVuZXJzID0gbWFwW3NlbGVjdG9yc1tpXV07XG5cdFx0XHRyZXQgJj0gdHJpZ2dlckxpc3RlbmVyc18obGlzdGVuZXJzLCBldmVudCwgZWxlbWVudCwgZGVmYXVsdEZucyk7XG5cdFx0fVxuXHR9XG5cdHJldHVybiByZXQ7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbi8vIFRoaXMgZmlsZSBleGlzdHMganVzdCBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHksIG1ha2luZyBzdXJlIHRoYXQgb2xkXG4vLyBkZWZhdWx0IGltcG9ydHMgZm9yIHRoaXMgZmlsZSBzdGlsbCB3b3JrLiBJdCdzIGJlc3QgdG8gdXNlIHRoZSBuYW1lZCBleHBvcnRzXG4vLyBmb3IgZWFjaCBmdW5jdGlvbiBpbnN0ZWFkIHRob3VnaCwgc2luY2UgdGhhdCBhbGxvd3MgYnVuZGxlcnMgbGlrZSBSb2xsdXAgdG9cbi8vIHJlZHVjZSB0aGUgYnVuZGxlIHNpemUgYnkgcmVtb3ZpbmcgdW51c2VkIGNvZGUuXG5pbXBvcnQgKiBhcyBkb20gZnJvbSAnLi9kb21OYW1lZCc7XG5cbmV4cG9ydCBkZWZhdWx0IGRvbTtcbmV4cG9ydCB7IGRvbSB9O1xuZXhwb3J0ICogZnJvbSAnLi9kb21OYW1lZCc7XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB7IGRlbGVnYXRlLCBvbiwgc3VwcG9ydHNFdmVudCB9IGZyb20gJy4vZG9tJztcbmltcG9ydCB7IEV2ZW50RW1pdHRlclByb3h5IH0gZnJvbSAnbWV0YWwtZXZlbnRzJztcblxuLyoqXG4gKiBEb21FdmVudEVtaXR0ZXJQcm94eSB1dGlsaXR5LiBJdCBleHRlbmRzIGBFdmVudEVtaXR0ZXJQcm94eWAgdG8gYWxzbyBhY2NlcHRcbiAqIGRvbSBlbGVtZW50cyBhcyBvcmlnaW4gZW1pdHRlcnMuXG4gKiBAZXh0ZW5kcyB7RXZlbnRFbWl0dGVyUHJveHl9XG4gKi9cbmNsYXNzIERvbUV2ZW50RW1pdHRlclByb3h5IGV4dGVuZHMgRXZlbnRFbWl0dGVyUHJveHkge1xuXHQvKipcblx0ICogQWRkcyB0aGUgZ2l2ZW4gbGlzdGVuZXIgZm9yIHRoZSBnaXZlbiBldmVudC5cblx0ICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50XG5cdCAqIEBwYXJhbSB7IWZ1bmN0aW9uKCl9IGxpc3RlbmVyXG5cdCAqIEByZXR1cm4geyFFdmVudEhhbmRsZX0gVGhlIGxpc3RlbmVkIGV2ZW50J3MgaGFuZGxlLlxuXHQgKiBAcHJvdGVjdGVkXG5cdCAqIEBvdmVycmlkZVxuXHQgKi9cblx0YWRkTGlzdGVuZXJfKGV2ZW50LCBsaXN0ZW5lcikge1xuXHRcdGlmICh0aGlzLm9yaWdpbkVtaXR0ZXJfLmFkZEV2ZW50TGlzdGVuZXIpIHtcblx0XHRcdGlmICh0aGlzLmlzRGVsZWdhdGVFdmVudF8oZXZlbnQpKSB7XG5cdFx0XHRcdGNvbnN0IGluZGV4ID0gZXZlbnQuaW5kZXhPZignOicsIDkpO1xuXHRcdFx0XHRjb25zdCBldmVudE5hbWUgPSBldmVudC5zdWJzdHJpbmcoOSwgaW5kZXgpO1xuXHRcdFx0XHRjb25zdCBzZWxlY3RvciA9IGV2ZW50LnN1YnN0cmluZyhpbmRleCArIDEpO1xuXHRcdFx0XHRyZXR1cm4gZGVsZWdhdGUodGhpcy5vcmlnaW5FbWl0dGVyXywgZXZlbnROYW1lLCBzZWxlY3RvciwgbGlzdGVuZXIpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0dXJuIG9uKHRoaXMub3JpZ2luRW1pdHRlcl8sIGV2ZW50LCBsaXN0ZW5lcik7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJldHVybiBzdXBlci5hZGRMaXN0ZW5lcl8oZXZlbnQsIGxpc3RlbmVyKTtcblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogQ2hlY2tzIGlmIHRoZSBnaXZlbiBldmVudCBpcyBvZiB0aGUgZGVsZWdhdGUgdHlwZS5cblx0ICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50XG5cdCAqIEByZXR1cm4ge2Jvb2xlYW59XG5cdCAqIEBwcm90ZWN0ZWRcblx0ICovXG5cdGlzRGVsZWdhdGVFdmVudF8oZXZlbnQpIHtcblx0XHRyZXR1cm4gZXZlbnQuc3Vic3RyKDAsIDkpID09PSAnZGVsZWdhdGU6Jztcblx0fVxuXG5cdC8qKlxuXHQgKiBDaGVja3MgaWYgdGhlIGdpdmVuIGV2ZW50IGlzIHN1cHBvcnRlZCBieSB0aGUgb3JpZ2luIGVsZW1lbnQuXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBldmVudFxuXHQgKiBAcHJvdGVjdGVkXG5cdCAqL1xuXHRpc1N1cHBvcnRlZERvbUV2ZW50XyhldmVudCkge1xuXHRcdGlmICghdGhpcy5vcmlnaW5FbWl0dGVyXyB8fCAhdGhpcy5vcmlnaW5FbWl0dGVyXy5hZGRFdmVudExpc3RlbmVyKSB7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cdFx0cmV0dXJuICh0aGlzLmlzRGVsZWdhdGVFdmVudF8oZXZlbnQpICYmIGV2ZW50LmluZGV4T2YoJzonLCA5KSAhPT0gLTEpIHx8XG5cdFx0XHRzdXBwb3J0c0V2ZW50KHRoaXMub3JpZ2luRW1pdHRlcl8sIGV2ZW50KTtcblx0fVxuXG5cdC8qKlxuXHQgKiBDaGVja3MgaWYgdGhlIGdpdmVuIGV2ZW50IHNob3VsZCBiZSBwcm94aWVkLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnRcblx0ICogQHJldHVybiB7Ym9vbGVhbn1cblx0ICogQHByb3RlY3RlZFxuXHQgKiBAb3ZlcnJpZGVcblx0ICovXG5cdHNob3VsZFByb3h5RXZlbnRfKGV2ZW50KSB7XG5cdFx0cmV0dXJuIHN1cGVyLnNob3VsZFByb3h5RXZlbnRfKGV2ZW50KSAmJiB0aGlzLmlzU3VwcG9ydGVkRG9tRXZlbnRfKGV2ZW50KTtcblx0fVxufVxuXG5leHBvcnQgZGVmYXVsdCBEb21FdmVudEVtaXR0ZXJQcm94eTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHsgYXBwZW5kIH0gZnJvbSAnLi9kb20nO1xuaW1wb3J0IHsgc3RyaW5nIH0gZnJvbSAnbWV0YWwnO1xuXG4vKipcbiAqIENsYXNzIHdpdGggc3RhdGljIG1ldGhvZHMgcmVzcG9uc2libGUgZm9yIGRvaW5nIGJyb3dzZXIgZmVhdHVyZSBjaGVja3MuXG4gKi9cbmNsYXNzIGZlYXR1cmVzIHtcblx0LyoqXG5cdCAqIFNvbWUgYnJvd3NlcnMgc3RpbGwgc3VwcG9ydHMgcHJlZml4ZWQgYW5pbWF0aW9uIGV2ZW50cy4gVGhpcyBtZXRob2QgY2FuXG5cdCAqIGJlIHVzZWQgdG8gcmV0cmlldmUgdGhlIGN1cnJlbnQgYnJvd3NlciBldmVudCBuYW1lIGZvciBib3RoLCBhbmltYXRpb25cblx0ICogYW5kIHRyYW5zaXRpb24uXG5cdCAqIEByZXR1cm4ge29iamVjdH1cblx0ICovXG5cdHN0YXRpYyBjaGVja0FuaW1hdGlvbkV2ZW50TmFtZSgpIHtcblx0XHRpZiAoZmVhdHVyZXMuYW5pbWF0aW9uRXZlbnROYW1lXyA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRmZWF0dXJlcy5hbmltYXRpb25FdmVudE5hbWVfID0ge1xuXHRcdFx0XHRhbmltYXRpb246IGZlYXR1cmVzLmNoZWNrQW5pbWF0aW9uRXZlbnROYW1lXygnYW5pbWF0aW9uJyksXG5cdFx0XHRcdHRyYW5zaXRpb246IGZlYXR1cmVzLmNoZWNrQW5pbWF0aW9uRXZlbnROYW1lXygndHJhbnNpdGlvbicpXG5cdFx0XHR9O1xuXHRcdH1cblx0XHRyZXR1cm4gZmVhdHVyZXMuYW5pbWF0aW9uRXZlbnROYW1lXztcblx0fVxuXG5cdC8qKlxuXHQgKiBAcHJvdGVjdGVkXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIFR5cGUgdG8gdGVzdDogYW5pbWF0aW9uLCB0cmFuc2l0aW9uLlxuXHQgKiBAcmV0dXJuIHtzdHJpbmd9IEJyb3dzZXIgZXZlbnQgbmFtZS5cblx0ICovXG5cdHN0YXRpYyBjaGVja0FuaW1hdGlvbkV2ZW50TmFtZV8odHlwZSkge1xuXHRcdGNvbnN0IHByZWZpeGVzID0gWydXZWJraXQnLCAnTVMnLCAnTycsICcnXTtcblx0XHRjb25zdCB0eXBlVGl0bGVDYXNlID0gc3RyaW5nLnJlcGxhY2VJbnRlcnZhbCh0eXBlLCAwLCAxLCB0eXBlLnN1YnN0cmluZygwLCAxKS50b1VwcGVyQ2FzZSgpKTtcblx0XHRjb25zdCBzdWZmaXhlcyA9IFtgJHt0eXBlVGl0bGVDYXNlfUVuZGAsIGAke3R5cGVUaXRsZUNhc2V9RW5kYCwgYCR7dHlwZVRpdGxlQ2FzZX1FbmRgLCBgJHt0eXBlfWVuZGBdO1xuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgcHJlZml4ZXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdGlmIChmZWF0dXJlcy5hbmltYXRpb25FbGVtZW50Xy5zdHlsZVtwcmVmaXhlc1tpXSArIHR5cGVUaXRsZUNhc2VdICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0cmV0dXJuIHByZWZpeGVzW2ldLnRvTG93ZXJDYXNlKCkgKyBzdWZmaXhlc1tpXTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIGAke3R5cGV9ZW5kYDtcblx0fVxuXG5cdC8qKlxuXHQgKiBTb21lIGJyb3dzZXJzIChsaWtlIElFOSkgY2hhbmdlIHRoZSBvcmRlciBvZiBlbGVtZW50IGF0dHJpYnV0ZXMsIHdoZW4gaHRtbFxuXHQgKiBpcyByZW5kZXJlZC4gVGhpcyBtZXRob2QgY2FuIGJlIHVzZWQgdG8gY2hlY2sgaWYgdGhpcyBiZWhhdmlvciBoYXBwZW5zIG9uXG5cdCAqIHRoZSBjdXJyZW50IGJyb3dzZXIuXG5cdCAqIEByZXR1cm4ge2Jvb2xlYW59XG5cdCAqL1xuXHRzdGF0aWMgY2hlY2tBdHRyT3JkZXJDaGFuZ2UoKSB7XG5cdFx0aWYgKGZlYXR1cmVzLmF0dHJPcmRlckNoYW5nZV8gPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0Y29uc3Qgb3JpZ2luYWxDb250ZW50ID0gJzxkaXYgZGF0YS1jb21wb25lbnQ9XCJcIiBkYXRhLXJlZj1cIlwiPjwvZGl2Pic7XG5cdFx0XHRjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG5cdFx0XHRhcHBlbmQoZWxlbWVudCwgb3JpZ2luYWxDb250ZW50KTtcblx0XHRcdGZlYXR1cmVzLmF0dHJPcmRlckNoYW5nZV8gPSBvcmlnaW5hbENvbnRlbnQgIT09IGVsZW1lbnQuaW5uZXJIVE1MO1xuXHRcdH1cblx0XHRyZXR1cm4gZmVhdHVyZXMuYXR0ck9yZGVyQ2hhbmdlXztcblx0fVxufVxuXG5mZWF0dXJlcy5hbmltYXRpb25FbGVtZW50XyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuZmVhdHVyZXMuYW5pbWF0aW9uRXZlbnROYW1lXyA9IHVuZGVmaW5lZDtcbmZlYXR1cmVzLmF0dHJPcmRlckNoYW5nZV8gPSB1bmRlZmluZWQ7XG5cbmV4cG9ydCBkZWZhdWx0IGZlYXR1cmVzO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgeyBhc3luYyB9IGZyb20gJ21ldGFsJztcbmltcG9ydCB7IGV4aXREb2N1bWVudCwgb25jZSB9IGZyb20gJy4vZG9tJztcblxuLyoqXG4gKiBVdGlsaXR5IGZ1bmN0aW9ucyBmb3IgcnVubmluZyBqYXZhc2NyaXB0IGNvZGUgaW4gdGhlIGdsb2JhbCBzY29wZS5cbiAqL1xuY2xhc3MgZ2xvYmFsRXZhbCB7XG5cdC8qKlxuXHQgKiBFdmFsdWF0ZXMgdGhlIGdpdmVuIHN0cmluZyBpbiB0aGUgZ2xvYmFsIHNjb3BlLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gdGV4dFxuXHQgKiBAcGFyYW0ge2Z1bmN0aW9uKCk9fSBvcHRfYXBwZW5kRm4gT3B0aW9uYWwgZnVuY3Rpb24gdG8gYXBwZW5kIHRoZSBub2RlXG5cdCAqICAgaW50byBkb2N1bWVudC5cblx0ICogQHJldHVybiB7RWxlbWVudH0gc2NyaXB0XG5cdCAqL1xuXHRzdGF0aWMgcnVuKHRleHQsIG9wdF9hcHBlbmRGbikge1xuXHRcdGNvbnN0IHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuXHRcdHNjcmlwdC50ZXh0ID0gdGV4dDtcblx0XHRpZiAob3B0X2FwcGVuZEZuKSB7XG5cdFx0XHRvcHRfYXBwZW5kRm4oc2NyaXB0KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChzY3JpcHQpO1xuXHRcdH1cblx0XHRleGl0RG9jdW1lbnQoc2NyaXB0KTtcblx0XHRyZXR1cm4gc2NyaXB0O1xuXHR9XG5cblx0LyoqXG5cdCAqIEV2YWx1YXRlcyB0aGUgZ2l2ZW4gamF2YXNjcmlwdCBmaWxlIGluIHRoZSBnbG9iYWwgc2NvcGUuXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBzcmMgVGhlIGZpbGUncyBwYXRoLlxuXHQgKiBAcGFyYW0ge2Z1bmN0aW9uKCk9fSBvcHRfY2FsbGJhY2sgT3B0aW9uYWwgZnVuY3Rpb24gdG8gYmUgY2FsbGVkXG5cdCAqICAgd2hlbiB0aGUgc2NyaXB0IGhhcyBiZWVuIHJ1bi5cblx0ICogQHBhcmFtIHtmdW5jdGlvbigpPX0gb3B0X2FwcGVuZEZuIE9wdGlvbmFsIGZ1bmN0aW9uIHRvIGFwcGVuZCB0aGUgbm9kZVxuXHQgKiAgIGludG8gZG9jdW1lbnQuXG5cdCAqIEByZXR1cm4ge0VsZW1lbnR9IHNjcmlwdFxuXHQgKi9cblx0c3RhdGljIHJ1bkZpbGUoc3JjLCBvcHRfY2FsbGJhY2ssIG9wdF9hcHBlbmRGbikge1xuXHRcdGNvbnN0IHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuXHRcdHNjcmlwdC5zcmMgPSBzcmM7XG5cblx0XHRjb25zdCBjYWxsYmFjayA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0ZXhpdERvY3VtZW50KHNjcmlwdCk7XG5cdFx0XHRvcHRfY2FsbGJhY2sgJiYgb3B0X2NhbGxiYWNrKCk7XG5cdFx0fTtcblx0XHRvbmNlKHNjcmlwdCwgJ2xvYWQnLCBjYWxsYmFjayk7XG5cdFx0b25jZShzY3JpcHQsICdlcnJvcicsIGNhbGxiYWNrKTtcblxuXHRcdGlmIChvcHRfYXBwZW5kRm4pIHtcblx0XHRcdG9wdF9hcHBlbmRGbihzY3JpcHQpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHNjcmlwdCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHNjcmlwdDtcblx0fVxuXG5cdC8qKlxuXHQgKiBFdmFsdWF0ZXMgdGhlIGNvZGUgcmVmZXJlbmNlZCBieSB0aGUgZ2l2ZW4gc2NyaXB0IGVsZW1lbnQuXG5cdCAqIEBwYXJhbSB7IUVsZW1lbnR9IHNjcmlwdFxuXHQgKiBAcGFyYW0ge2Z1bmN0aW9uKCk9fSBvcHRfY2FsbGJhY2sgT3B0aW9uYWwgZnVuY3Rpb24gdG8gYmUgY2FsbGVkXG5cdCAqICAgd2hlbiB0aGUgc2NyaXB0IGhhcyBiZWVuIHJ1bi5cblx0ICogQHBhcmFtIHtmdW5jdGlvbigpPX0gb3B0X2FwcGVuZEZuIE9wdGlvbmFsIGZ1bmN0aW9uIHRvIGFwcGVuZCB0aGUgbm9kZVxuXHQgKiAgIGludG8gZG9jdW1lbnQuXG5cdCAqIEByZXR1cm4ge0VsZW1lbnR9IHNjcmlwdFxuXHQgKi9cblx0c3RhdGljIHJ1blNjcmlwdChzY3JpcHQsIG9wdF9jYWxsYmFjaywgb3B0X2FwcGVuZEZuKSB7XG5cdFx0Y29uc3QgY2FsbGJhY2sgPSBmdW5jdGlvbigpIHtcblx0XHRcdG9wdF9jYWxsYmFjayAmJiBvcHRfY2FsbGJhY2soKTtcblx0XHR9O1xuXHRcdGlmIChzY3JpcHQudHlwZSAmJiBzY3JpcHQudHlwZSAhPT0gJ3RleHQvamF2YXNjcmlwdCcpIHtcblx0XHRcdGFzeW5jLm5leHRUaWNrKGNhbGxiYWNrKTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0ZXhpdERvY3VtZW50KHNjcmlwdCk7XG5cdFx0aWYgKHNjcmlwdC5zcmMpIHtcblx0XHRcdHJldHVybiBnbG9iYWxFdmFsLnJ1bkZpbGUoc2NyaXB0LnNyYywgb3B0X2NhbGxiYWNrLCBvcHRfYXBwZW5kRm4pO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRhc3luYy5uZXh0VGljayhjYWxsYmFjayk7XG5cdFx0XHRyZXR1cm4gZ2xvYmFsRXZhbC5ydW4oc2NyaXB0LnRleHQsIG9wdF9hcHBlbmRGbik7XG5cdFx0fVxuXHR9XG5cblx0LyoqXG5cdCAqIEV2YWx1YXRlcyBhbnkgc2NyaXB0IHRhZ3MgcHJlc2VudCBpbiB0aGUgZ2l2ZW4gZWxlbWVudC5cblx0ICogQHBhcmFtIHshRWxlbWVudH0gZWxlbWVudFxuXHQgKiBAcGFyYW0ge2Z1bmN0aW9uKCk9fSBvcHRfY2FsbGJhY2sgT3B0aW9uYWwgZnVuY3Rpb24gdG8gYmUgY2FsbGVkXG5cdCAqICAgd2hlbiB0aGUgc2NyaXB0IGhhcyBiZWVuIHJ1bi5cblx0ICogQHBhcmFtIHtmdW5jdGlvbigpPX0gb3B0X2FwcGVuZEZuIE9wdGlvbmFsIGZ1bmN0aW9uIHRvIGFwcGVuZCB0aGUgbm9kZVxuXHQgKiAgIGludG8gZG9jdW1lbnQuXG5cdCAqL1xuXHRzdGF0aWMgcnVuU2NyaXB0c0luRWxlbWVudChlbGVtZW50LCBvcHRfY2FsbGJhY2ssIG9wdF9hcHBlbmRGbikge1xuXHRcdGNvbnN0IHNjcmlwdHMgPSBlbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ3NjcmlwdCcpO1xuXHRcdGlmIChzY3JpcHRzLmxlbmd0aCkge1xuXHRcdFx0Z2xvYmFsRXZhbC5ydW5TY3JpcHRzSW5PcmRlcihzY3JpcHRzLCAwLCBvcHRfY2FsbGJhY2ssIG9wdF9hcHBlbmRGbik7XG5cdFx0fSBlbHNlIGlmIChvcHRfY2FsbGJhY2spIHtcblx0XHRcdGFzeW5jLm5leHRUaWNrKG9wdF9jYWxsYmFjayk7XG5cdFx0fVxuXHR9XG5cblx0LyoqXG5cdCAqIFJ1bnMgdGhlIGdpdmVuIHNjcmlwdHMgZWxlbWVudHMgaW4gdGhlIG9yZGVyIHRoYXQgdGhleSBhcHBlYXIuXG5cdCAqIEBwYXJhbSB7IU5vZGVMaXN0fSBzY3JpcHRzXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleFxuXHQgKiBAcGFyYW0ge2Z1bmN0aW9uKCk9fSBvcHRfY2FsbGJhY2sgT3B0aW9uYWwgZnVuY3Rpb24gdG8gYmUgY2FsbGVkXG5cdCAqICAgd2hlbiB0aGUgc2NyaXB0IGhhcyBiZWVuIHJ1bi5cblx0ICogQHBhcmFtIHtmdW5jdGlvbigpPX0gb3B0X2FwcGVuZEZuIE9wdGlvbmFsIGZ1bmN0aW9uIHRvIGFwcGVuZCB0aGUgbm9kZVxuXHQgKiAgIGludG8gZG9jdW1lbnQuXG5cdCAqL1xuXHRzdGF0aWMgcnVuU2NyaXB0c0luT3JkZXIoc2NyaXB0cywgaW5kZXgsIG9wdF9jYWxsYmFjaywgb3B0X2FwcGVuZEZuKSB7XG5cdFx0Z2xvYmFsRXZhbC5ydW5TY3JpcHQoc2NyaXB0cy5pdGVtKGluZGV4KSwgZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoaW5kZXggPCBzY3JpcHRzLmxlbmd0aCAtIDEpIHtcblx0XHRcdFx0Z2xvYmFsRXZhbC5ydW5TY3JpcHRzSW5PcmRlcihzY3JpcHRzLCBpbmRleCArIDEsIG9wdF9jYWxsYmFjaywgb3B0X2FwcGVuZEZuKTtcblx0XHRcdH0gZWxzZSBpZiAob3B0X2NhbGxiYWNrKSB7XG5cdFx0XHRcdGFzeW5jLm5leHRUaWNrKG9wdF9jYWxsYmFjayk7XG5cdFx0XHR9XG5cdFx0fSwgb3B0X2FwcGVuZEZuKTtcblx0fVxufVxuXG5leHBvcnQgZGVmYXVsdCBnbG9iYWxFdmFsO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgeyBhc3luYyB9IGZyb20gJ21ldGFsJztcbmltcG9ydCB7IG9uY2UgfSBmcm9tICcuL2RvbSc7XG5cbi8qKlxuICogVXRpbGl0eSBmdW5jdGlvbnMgZm9yIHJ1bm5pbmcgc3R5bGVzLlxuICovXG5jbGFzcyBnbG9iYWxFdmFsU3R5bGVzIHtcblx0LyoqXG5cdCAqIEV2YWx1YXRlcyB0aGUgZ2l2ZW4gc3R5bGUuXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0XG5cdCAqIEBwYXJhbSB7ZnVuY3Rpb24oKT19IG9wdF9hcHBlbmRGbiBPcHRpb25hbCBmdW5jdGlvbiB0byBhcHBlbmQgdGhlIG5vZGVcblx0ICogICBpbnRvIGRvY3VtZW50LlxuXHQgKiBAcmV0dXJuIHtFbGVtZW50fSBzdHlsZVxuXHQgKi9cblx0c3RhdGljIHJ1bih0ZXh0LCBvcHRfYXBwZW5kRm4pIHtcblx0XHRjb25zdCBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG5cdFx0c3R5bGUuaW5uZXJIVE1MID0gdGV4dDtcblx0XHRpZiAob3B0X2FwcGVuZEZuKSB7XG5cdFx0XHRvcHRfYXBwZW5kRm4oc3R5bGUpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHN0eWxlKTtcblx0XHR9XG5cdFx0cmV0dXJuIHN0eWxlO1xuXHR9XG5cblx0LyoqXG5cdCAqIEV2YWx1YXRlcyB0aGUgZ2l2ZW4gc3R5bGUgZmlsZS5cblx0ICogQHBhcmFtIHtzdHJpbmd9IGhyZWYgVGhlIGZpbGUncyBwYXRoLlxuXHQgKiBAcGFyYW0ge2Z1bmN0aW9uKCk9fSBvcHRfY2FsbGJhY2sgT3B0aW9uYWwgZnVuY3Rpb24gdG8gYmUgY2FsbGVkXG5cdCAqICAgd2hlbiB0aGUgc3R5bGVzIGhhcyBiZWVuIHJ1bi5cblx0ICogQHBhcmFtIHtmdW5jdGlvbigpPX0gb3B0X2FwcGVuZEZuIE9wdGlvbmFsIGZ1bmN0aW9uIHRvIGFwcGVuZCB0aGUgbm9kZVxuXHQgKiAgIGludG8gZG9jdW1lbnQuXG5cdCAqIEByZXR1cm4ge0VsZW1lbnR9IHN0eWxlXG5cdCAqL1xuXHRzdGF0aWMgcnVuRmlsZShocmVmLCBvcHRfY2FsbGJhY2ssIG9wdF9hcHBlbmRGbikge1xuXHRcdGNvbnN0IGxpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaW5rJyk7XG5cdFx0bGluay5yZWwgPSAnc3R5bGVzaGVldCc7XG5cdFx0bGluay5ocmVmID0gaHJlZjtcblx0XHRnbG9iYWxFdmFsU3R5bGVzLnJ1blN0eWxlKGxpbmssIG9wdF9jYWxsYmFjaywgb3B0X2FwcGVuZEZuKTtcblx0XHRyZXR1cm4gbGluaztcblx0fVxuXG5cdC8qKlxuXHQgKiBFdmFsdWF0ZXMgdGhlIGNvZGUgcmVmZXJlbmNlZCBieSB0aGUgZ2l2ZW4gc3R5bGUvbGluayBlbGVtZW50LlxuXHQgKiBAcGFyYW0geyFFbGVtZW50fSBzdHlsZVxuXHQgKiBAcGFyYW0ge2Z1bmN0aW9uKCk9fSBvcHRfY2FsbGJhY2sgT3B0aW9uYWwgZnVuY3Rpb24gdG8gYmUgY2FsbGVkXG5cdCAqICAgd2hlbiB0aGUgc2NyaXB0IGhhcyBiZWVuIHJ1bi5cblx0ICogQHBhcmFtIHtmdW5jdGlvbigpPX0gb3B0X2FwcGVuZEZuIE9wdGlvbmFsIGZ1bmN0aW9uIHRvIGFwcGVuZCB0aGUgbm9kZVxuXHQgKiAgIGludG8gZG9jdW1lbnQuXG5cdCAqICBAcmV0dXJuIHtFbGVtZW50fSBzdHlsZVxuXHQgKi9cblx0c3RhdGljIHJ1blN0eWxlKHN0eWxlLCBvcHRfY2FsbGJhY2ssIG9wdF9hcHBlbmRGbikge1xuXHRcdGNvbnN0IGNhbGxiYWNrID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRvcHRfY2FsbGJhY2sgJiYgb3B0X2NhbGxiYWNrKCk7XG5cdFx0fTtcblx0XHRpZiAoc3R5bGUucmVsICYmIHN0eWxlLnJlbCAhPT0gJ3N0eWxlc2hlZXQnKSB7XG5cdFx0XHRhc3luYy5uZXh0VGljayhjYWxsYmFjayk7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKHN0eWxlLnRhZ05hbWUgPT09ICdTVFlMRScpIHtcblx0XHRcdGFzeW5jLm5leHRUaWNrKGNhbGxiYWNrKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0b25jZShzdHlsZSwgJ2xvYWQnLCBjYWxsYmFjayk7XG5cdFx0XHRvbmNlKHN0eWxlLCAnZXJyb3InLCBjYWxsYmFjayk7XG5cdFx0fVxuXG5cdFx0aWYgKG9wdF9hcHBlbmRGbikge1xuXHRcdFx0b3B0X2FwcGVuZEZuKHN0eWxlKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChzdHlsZSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHN0eWxlO1xuXHR9XG5cblx0LyoqXG5cdCAqIEV2YWx1YXRlcyBhbnkgc3R5bGUgcHJlc2VudCBpbiB0aGUgZ2l2ZW4gZWxlbWVudC5cblx0ICogQHBhcmFtIHshRWxlbWVudH0gZWxlbWVudFxuXHQgKiBAcGFyYW0ge2Z1bmN0aW9uKCk9fSBvcHRfY2FsbGJhY2sgT3B0aW9uYWwgZnVuY3Rpb24gdG8gYmUgY2FsbGVkIHdoZW4gdGhlXG5cdCAqICAgc3R5bGUgaGFzIGJlZW4gcnVuLlxuXHQgKiBAcGFyYW0ge2Z1bmN0aW9uKCk9fSBvcHRfYXBwZW5kRm4gT3B0aW9uYWwgZnVuY3Rpb24gdG8gYXBwZW5kIHRoZSBub2RlXG5cdCAqICAgaW50byBkb2N1bWVudC5cblx0ICovXG5cdHN0YXRpYyBydW5TdHlsZXNJbkVsZW1lbnQoZWxlbWVudCwgb3B0X2NhbGxiYWNrLCBvcHRfYXBwZW5kRm4pIHtcblx0XHRjb25zdCBzdHlsZXMgPSBlbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ3N0eWxlLGxpbmsnKTtcblx0XHRpZiAoc3R5bGVzLmxlbmd0aCA9PT0gMCAmJiBvcHRfY2FsbGJhY2spIHtcblx0XHRcdGFzeW5jLm5leHRUaWNrKG9wdF9jYWxsYmFjayk7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0bGV0IGxvYWRDb3VudCA9IDA7XG5cdFx0Y29uc3QgY2FsbGJhY2sgPSBmdW5jdGlvbigpIHtcblx0XHRcdGlmIChvcHRfY2FsbGJhY2sgJiYgKytsb2FkQ291bnQgPT09IHN0eWxlcy5sZW5ndGgpIHtcblx0XHRcdFx0YXN5bmMubmV4dFRpY2sob3B0X2NhbGxiYWNrKTtcblx0XHRcdH1cblx0XHR9O1xuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgc3R5bGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRnbG9iYWxFdmFsU3R5bGVzLnJ1blN0eWxlKHN0eWxlc1tpXSwgY2FsbGJhY2ssIG9wdF9hcHBlbmRGbik7XG5cdFx0fVxuXHR9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGdsb2JhbEV2YWxTdHlsZXM7XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB7IHJlZ2lzdGVyQ3VzdG9tRXZlbnQsIGNvbnRhaW5zIH0gZnJvbSAnLi9kb20nO1xuaW1wb3J0IGZlYXR1cmVzIGZyb20gJy4vZmVhdHVyZXMnO1xuXG5jb25zdCBtb3VzZUV2ZW50TWFwID0ge1xuXHRtb3VzZWVudGVyOiAnbW91c2VvdmVyJyxcblx0bW91c2VsZWF2ZTogJ21vdXNlb3V0Jyxcblx0cG9pbnRlcmVudGVyOiAncG9pbnRlcm92ZXInLFxuXHRwb2ludGVybGVhdmU6ICdwb2ludGVyb3V0J1xufTtcbk9iamVjdC5rZXlzKG1vdXNlRXZlbnRNYXApLmZvckVhY2goZnVuY3Rpb24oZXZlbnROYW1lKSB7XG5cdHJlZ2lzdGVyQ3VzdG9tRXZlbnQoZXZlbnROYW1lLCB7XG5cdFx0ZGVsZWdhdGU6IHRydWUsXG5cdFx0aGFuZGxlcjogZnVuY3Rpb24oY2FsbGJhY2ssIGV2ZW50KSB7XG5cdFx0XHRjb25zdCByZWxhdGVkID0gZXZlbnQucmVsYXRlZFRhcmdldDtcblx0XHRcdGNvbnN0IHRhcmdldCA9IGV2ZW50LmRlbGVnYXRlVGFyZ2V0O1xuXHRcdFx0aWYgKCFyZWxhdGVkIHx8IChyZWxhdGVkICE9PSB0YXJnZXQgJiYgIWNvbnRhaW5zKHRhcmdldCwgcmVsYXRlZCkpKSB7XG5cdFx0XHRcdGV2ZW50LmN1c3RvbVR5cGUgPSBldmVudE5hbWU7XG5cdFx0XHRcdHJldHVybiBjYWxsYmFjayhldmVudCk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRvcmlnaW5hbEV2ZW50OiBtb3VzZUV2ZW50TWFwW2V2ZW50TmFtZV1cblx0fSk7XG59KTtcblxuY29uc3QgYW5pbWF0aW9uRXZlbnRNYXAgPSB7XG5cdGFuaW1hdGlvbjogJ2FuaW1hdGlvbmVuZCcsXG5cdHRyYW5zaXRpb246ICd0cmFuc2l0aW9uZW5kJ1xufTtcbk9iamVjdC5rZXlzKGFuaW1hdGlvbkV2ZW50TWFwKS5mb3JFYWNoKGZ1bmN0aW9uKGV2ZW50VHlwZSkge1xuXHRjb25zdCBldmVudE5hbWUgPSBhbmltYXRpb25FdmVudE1hcFtldmVudFR5cGVdO1xuXHRyZWdpc3RlckN1c3RvbUV2ZW50KGV2ZW50TmFtZSwge1xuXHRcdGV2ZW50OiB0cnVlLFxuXHRcdGRlbGVnYXRlOiB0cnVlLFxuXHRcdGhhbmRsZXI6IGZ1bmN0aW9uKGNhbGxiYWNrLCBldmVudCkge1xuXHRcdFx0ZXZlbnQuY3VzdG9tVHlwZSA9IGV2ZW50TmFtZTtcblx0XHRcdHJldHVybiBjYWxsYmFjayhldmVudCk7XG5cdFx0fSxcblx0XHRvcmlnaW5hbEV2ZW50OiBmZWF0dXJlcy5jaGVja0FuaW1hdGlvbkV2ZW50TmFtZSgpW2V2ZW50VHlwZV1cblx0fSk7XG59KTtcbiIsIi8qIVxuICogUHJvbWlzZXMgcG9seWZpbGwgZnJvbSBHb29nbGUncyBDbG9zdXJlIExpYnJhcnkuXG4gKlxuICogICAgICBDb3B5cmlnaHQgMjAxMyBUaGUgQ2xvc3VyZSBMaWJyYXJ5IEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogTk9URShlZHVhcmRvKTogUHJvbWlzZSBzdXBwb3J0IGlzIG5vdCByZWFkeSBvbiBhbGwgc3VwcG9ydGVkIGJyb3dzZXJzLFxuICogdGhlcmVmb3JlIG1ldGFsLXByb21pc2UgaXMgdGVtcG9yYXJpbHkgdXNpbmcgR29vZ2xlJ3MgcHJvbWlzZXMgYXMgcG9seWZpbGwuXG4gKiBJdCBzdXBwb3J0cyBjYW5jZWxsYWJsZSBwcm9taXNlcyBhbmQgaGFzIGNsZWFuIGFuZCBmYXN0IGltcGxlbWVudGF0aW9uLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHsgaXNEZWYsIGlzRnVuY3Rpb24sIGlzT2JqZWN0IH0gZnJvbSAnbWV0YWwnO1xuaW1wb3J0IHsgYXN5bmMgfSBmcm9tICdtZXRhbCc7XG5cbi8qKlxuICogUHJvdmlkZXMgYSBtb3JlIHN0cmljdCBpbnRlcmZhY2UgZm9yIFRoZW5hYmxlcyBpbiB0ZXJtcyBvZlxuICogaHR0cDovL3Byb21pc2VzYXBsdXMuY29tIGZvciBpbnRlcm9wIHdpdGgge0BzZWUgQ2FuY2VsbGFibGVQcm9taXNlfS5cbiAqXG4gKiBAaW50ZXJmYWNlXG4gKiBAZXh0ZW5kcyB7SVRoZW5hYmxlLjxUWVBFPn1cbiAqIEB0ZW1wbGF0ZSBUWVBFXG4gKi9cbnZhciBUaGVuYWJsZSA9IGZ1bmN0aW9uKCkge307XG5cbi8qKlxuICogQWRkcyBjYWxsYmFja3MgdGhhdCB3aWxsIG9wZXJhdGUgb24gdGhlIHJlc3VsdCBvZiB0aGUgVGhlbmFibGUsIHJldHVybmluZyBhXG4gKiBuZXcgY2hpbGQgUHJvbWlzZS5cbiAqXG4gKiBJZiB0aGUgVGhlbmFibGUgaXMgZnVsZmlsbGVkLCB0aGUge0Bjb2RlIG9uRnVsZmlsbGVkfSBjYWxsYmFjayB3aWxsIGJlXG4gKiBpbnZva2VkIHdpdGggdGhlIGZ1bGZpbGxtZW50IHZhbHVlIGFzIGFyZ3VtZW50LCBhbmQgdGhlIGNoaWxkIFByb21pc2Ugd2lsbFxuICogYmUgZnVsZmlsbGVkIHdpdGggdGhlIHJldHVybiB2YWx1ZSBvZiB0aGUgY2FsbGJhY2suIElmIHRoZSBjYWxsYmFjayB0aHJvd3NcbiAqIGFuIGV4Y2VwdGlvbiwgdGhlIGNoaWxkIFByb21pc2Ugd2lsbCBiZSByZWplY3RlZCB3aXRoIHRoZSB0aHJvd24gdmFsdWVcbiAqIGluc3RlYWQuXG4gKlxuICogSWYgdGhlIFRoZW5hYmxlIGlzIHJlamVjdGVkLCB0aGUge0Bjb2RlIG9uUmVqZWN0ZWR9IGNhbGxiYWNrIHdpbGwgYmUgaW52b2tlZFxuICogd2l0aCB0aGUgcmVqZWN0aW9uIHJlYXNvbiBhcyBhcmd1bWVudCwgYW5kIHRoZSBjaGlsZCBQcm9taXNlIHdpbGwgYmUgcmVqZWN0ZWRcbiAqIHdpdGggdGhlIHJldHVybiB2YWx1ZSBvZiB0aGUgY2FsbGJhY2sgb3IgdGhyb3duIHZhbHVlLlxuICpcbiAqIEBwYXJhbSB7PyhmdW5jdGlvbih0aGlzOlRISVMsIFRZUEUpOlxuICogICAgICAgICAgICAgKFJFU1VMVHxJVGhlbmFibGUuPFJFU1VMVD58VGhlbmFibGUpKT19IG9wdF9vbkZ1bGZpbGxlZCBBXG4gKiAgICAgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIGludm9rZWQgd2l0aCB0aGUgZnVsZmlsbG1lbnQgdmFsdWUgaWYgdGhlIFByb21pc2VcbiAqICAgICBpcyBmdWxsZmlsbGVkLlxuICogQHBhcmFtIHs/KGZ1bmN0aW9uKCopOiAqKT19IG9wdF9vblJlamVjdGVkIEEgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIGludm9rZWRcbiAqICAgICB3aXRoIHRoZSByZWplY3Rpb24gcmVhc29uIGlmIHRoZSBQcm9taXNlIGlzIHJlamVjdGVkLlxuICogQHBhcmFtIHtUSElTPX0gb3B0X2NvbnRleHQgQW4gb3B0aW9uYWwgY29udGV4dCBvYmplY3QgdGhhdCB3aWxsIGJlIHRoZVxuICogICAgIGV4ZWN1dGlvbiBjb250ZXh0IGZvciB0aGUgY2FsbGJhY2tzLiBCeSBkZWZhdWx0LCBmdW5jdGlvbnMgYXJlIGV4ZWN1dGVkXG4gKiAgICAgd2l0aCB0aGUgZGVmYXVsdCB0aGlzLlxuICogQHJldHVybiB7IUNhbmNlbGxhYmxlUHJvbWlzZS48UkVTVUxUPn0gQSBuZXcgUHJvbWlzZSB0aGF0IHdpbGwgcmVjZWl2ZSB0aGVcbiAqICAgICByZXN1bHQgb2YgdGhlIGZ1bGZpbGxtZW50IG9yIHJlamVjdGlvbiBjYWxsYmFjay5cbiAqIEB0ZW1wbGF0ZSBSRVNVTFQsVEhJU1xuICovXG5UaGVuYWJsZS5wcm90b3R5cGUudGhlbiA9IGZ1bmN0aW9uKCkge307XG5cblxuLyoqXG4gKiBBbiBleHBhbmRvIHByb3BlcnR5IHRvIGluZGljYXRlIHRoYXQgYW4gb2JqZWN0IGltcGxlbWVudHNcbiAqIHtAY29kZSBUaGVuYWJsZX0uXG4gKlxuICoge0BzZWUgYWRkSW1wbGVtZW50YXRpb259LlxuICpcbiAqIEBjb25zdFxuICovXG5UaGVuYWJsZS5JTVBMRU1FTlRFRF9CWV9QUk9QID0gJyRnb29nX1RoZW5hYmxlJztcblxuXG4vKipcbiAqIE1hcmtzIGEgZ2l2ZW4gY2xhc3MgKGNvbnN0cnVjdG9yKSBhcyBhbiBpbXBsZW1lbnRhdGlvbiBvZiBUaGVuYWJsZSwgc29cbiAqIHRoYXQgd2UgY2FuIHF1ZXJ5IHRoYXQgZmFjdCBhdCBydW50aW1lLiBUaGUgY2xhc3MgbXVzdCBoYXZlIGFscmVhZHlcbiAqIGltcGxlbWVudGVkIHRoZSBpbnRlcmZhY2UuXG4gKiBFeHBvcnRzIGEgJ3RoZW4nIG1ldGhvZCBvbiB0aGUgY29uc3RydWN0b3IgcHJvdG90eXBlLCBzbyB0aGF0IHRoZSBvYmplY3RzXG4gKiBhbHNvIGltcGxlbWVudCB0aGUgZXh0ZXJuIHtAc2VlIFRoZW5hYmxlfSBpbnRlcmZhY2UgZm9yIGludGVyb3Agd2l0aFxuICogb3RoZXIgUHJvbWlzZSBpbXBsZW1lbnRhdGlvbnMuXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKG5ldzpUaGVuYWJsZSwuLi5bP10pfSBjdG9yIFRoZSBjbGFzcyBjb25zdHJ1Y3Rvci4gVGhlXG4gKiAgICAgY29ycmVzcG9uZGluZyBjbGFzcyBtdXN0IGhhdmUgYWxyZWFkeSBpbXBsZW1lbnRlZCB0aGUgaW50ZXJmYWNlLlxuICovXG5UaGVuYWJsZS5hZGRJbXBsZW1lbnRhdGlvbiA9IGZ1bmN0aW9uKGN0b3IpIHtcbiAgY3Rvci5wcm90b3R5cGUudGhlbiA9IGN0b3IucHJvdG90eXBlLnRoZW47XG4gIGN0b3IucHJvdG90eXBlLiRnb29nX1RoZW5hYmxlID0gdHJ1ZTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0geyp9IG9iamVjdFxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciBhIGdpdmVuIGluc3RhbmNlIGltcGxlbWVudHMge0Bjb2RlIFRoZW5hYmxlfS5cbiAqICAgICBUaGUgY2xhc3Mvc3VwZXJjbGFzcyBvZiB0aGUgaW5zdGFuY2UgbXVzdCBjYWxsIHtAY29kZSBhZGRJbXBsZW1lbnRhdGlvbn0uXG4gKi9cblRoZW5hYmxlLmlzSW1wbGVtZW50ZWRCeSA9IGZ1bmN0aW9uKG9iamVjdCkge1xuICBpZiAoIW9iamVjdCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB0cnkge1xuICAgIHJldHVybiAhIW9iamVjdC4kZ29vZ19UaGVuYWJsZTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIFByb3BlcnR5IGFjY2VzcyBzZWVtcyB0byBiZSBmb3JiaWRkZW4uXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59O1xuXG5cbi8qKlxuICogTGlrZSBiaW5kKCksIGV4Y2VwdCB0aGF0IGEgJ3RoaXMgb2JqZWN0JyBpcyBub3QgcmVxdWlyZWQuIFVzZWZ1bCB3aGVuIHRoZVxuICogdGFyZ2V0IGZ1bmN0aW9uIGlzIGFscmVhZHkgYm91bmQuXG4gKlxuICogVXNhZ2U6XG4gKiB2YXIgZyA9IHBhcnRpYWwoZiwgYXJnMSwgYXJnMik7XG4gKiBnKGFyZzMsIGFyZzQpO1xuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIEEgZnVuY3Rpb24gdG8gcGFydGlhbGx5IGFwcGx5LlxuICogQHBhcmFtIHsuLi4qfSB2YXJfYXJncyBBZGRpdGlvbmFsIGFyZ3VtZW50cyB0aGF0IGFyZSBwYXJ0aWFsbHkgYXBwbGllZCB0byBmbi5cbiAqIEByZXR1cm4geyFGdW5jdGlvbn0gQSBwYXJ0aWFsbHktYXBwbGllZCBmb3JtIG9mIHRoZSBmdW5jdGlvbiBiaW5kKCkgd2FzXG4gKiAgICAgaW52b2tlZCBhcyBhIG1ldGhvZCBvZi5cbiAqL1xudmFyIHBhcnRpYWwgPSBmdW5jdGlvbihmbikge1xuICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAvLyBDbG9uZSB0aGUgYXJyYXkgKHdpdGggc2xpY2UoKSkgYW5kIGFwcGVuZCBhZGRpdGlvbmFsIGFyZ3VtZW50c1xuICAgIC8vIHRvIHRoZSBleGlzdGluZyBhcmd1bWVudHMuXG4gICAgdmFyIG5ld0FyZ3MgPSBhcmdzLnNsaWNlKCk7XG4gICAgbmV3QXJncy5wdXNoLmFwcGx5KG5ld0FyZ3MsIGFyZ3VtZW50cyk7XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIG5ld0FyZ3MpO1xuICB9O1xufTtcblxuLyoqXG4gKiBQcm9taXNlcyBwcm92aWRlIGEgcmVzdWx0IHRoYXQgbWF5IGJlIHJlc29sdmVkIGFzeW5jaHJvbm91c2x5LiBBIFByb21pc2UgbWF5XG4gKiBiZSByZXNvbHZlZCBieSBiZWluZyBmdWxmaWxsZWQgb3IgcmVqZWN0ZWQgd2l0aCBhIHZhbHVlLCB3aGljaCB3aWxsIGJlIGtub3duXG4gKiBhcyB0aGUgZnVsZmlsbG1lbnQgdmFsdWUgb3IgdGhlIHJlamVjdGlvbiByZWFzb24uIFdoZXRoZXIgZnVsZmlsbGVkIG9yXG4gKiByZWplY3RlZCwgdGhlIFByb21pc2UgcmVzdWx0IGlzIGltbXV0YWJsZSBvbmNlIGl0IGlzIHNldC5cbiAqXG4gKiBQcm9taXNlcyBtYXkgcmVwcmVzZW50IHJlc3VsdHMgb2YgYW55IHR5cGUsIGluY2x1ZGluZyB1bmRlZmluZWQuIFJlamVjdGlvblxuICogcmVhc29ucyBhcmUgdHlwaWNhbGx5IEVycm9ycywgYnV0IG1heSBhbHNvIGJlIG9mIGFueSB0eXBlLiBDbG9zdXJlIFByb21pc2VzXG4gKiBhbGxvdyBmb3Igb3B0aW9uYWwgdHlwZSBhbm5vdGF0aW9ucyB0aGF0IGVuZm9yY2UgdGhhdCBmdWxmaWxsbWVudCB2YWx1ZXMgYXJlXG4gKiBvZiB0aGUgYXBwcm9wcmlhdGUgdHlwZXMgYXQgY29tcGlsZSB0aW1lLlxuICpcbiAqIFRoZSByZXN1bHQgb2YgYSBQcm9taXNlIGlzIGFjY2Vzc2libGUgYnkgY2FsbGluZyB7QGNvZGUgdGhlbn0gYW5kIHJlZ2lzdGVyaW5nXG4gKiB7QGNvZGUgb25GdWxmaWxsZWR9IGFuZCB7QGNvZGUgb25SZWplY3RlZH0gY2FsbGJhY2tzLiBPbmNlIHRoZSBQcm9taXNlXG4gKiByZXNvbHZlcywgdGhlIHJlbGV2YW50IGNhbGxiYWNrcyBhcmUgaW52b2tlZCB3aXRoIHRoZSBmdWxmaWxsbWVudCB2YWx1ZSBvclxuICogcmVqZWN0aW9uIHJlYXNvbiBhcyBhcmd1bWVudC4gQ2FsbGJhY2tzIGFyZSBhbHdheXMgaW52b2tlZCBpbiB0aGUgb3JkZXIgdGhleVxuICogd2VyZSByZWdpc3RlcmVkLCBldmVuIHdoZW4gYWRkaXRpb25hbCB7QGNvZGUgdGhlbn0gY2FsbHMgYXJlIG1hZGUgZnJvbSBpbnNpZGVcbiAqIGFub3RoZXIgY2FsbGJhY2suIEEgY2FsbGJhY2sgaXMgYWx3YXlzIHJ1biBhc3luY2hyb25vdXNseSBzb21ldGltZSBhZnRlciB0aGVcbiAqIHNjb3BlIGNvbnRhaW5pbmcgdGhlIHJlZ2lzdGVyaW5nIHtAY29kZSB0aGVufSBpbnZvY2F0aW9uIGhhcyByZXR1cm5lZC5cbiAqXG4gKiBJZiBhIFByb21pc2UgaXMgcmVzb2x2ZWQgd2l0aCBhbm90aGVyIFByb21pc2UsIHRoZSBmaXJzdCBQcm9taXNlIHdpbGwgYmxvY2tcbiAqIHVudGlsIHRoZSBzZWNvbmQgaXMgcmVzb2x2ZWQsIGFuZCB0aGVuIGFzc3VtZXMgdGhlIHNhbWUgcmVzdWx0IGFzIHRoZSBzZWNvbmRcbiAqIFByb21pc2UuIFRoaXMgYWxsb3dzIFByb21pc2VzIHRvIGRlcGVuZCBvbiB0aGUgcmVzdWx0cyBvZiBvdGhlciBQcm9taXNlcyxcbiAqIGxpbmtpbmcgdG9nZXRoZXIgbXVsdGlwbGUgYXN5bmNocm9ub3VzIG9wZXJhdGlvbnMuXG4gKlxuICogVGhpcyBpbXBsZW1lbnRhdGlvbiBpcyBjb21wYXRpYmxlIHdpdGggdGhlIFByb21pc2VzL0ErIHNwZWNpZmljYXRpb24gYW5kXG4gKiBwYXNzZXMgdGhhdCBzcGVjaWZpY2F0aW9uJ3MgY29uZm9ybWFuY2UgdGVzdCBzdWl0ZS4gQSBDbG9zdXJlIFByb21pc2UgbWF5IGJlXG4gKiByZXNvbHZlZCB3aXRoIGEgUHJvbWlzZSBpbnN0YW5jZSAob3Igc3VmZmljaWVudGx5IGNvbXBhdGlibGUgUHJvbWlzZS1saWtlXG4gKiBvYmplY3QpIGNyZWF0ZWQgYnkgb3RoZXIgUHJvbWlzZSBpbXBsZW1lbnRhdGlvbnMuIEZyb20gdGhlIHNwZWNpZmljYXRpb24sXG4gKiBQcm9taXNlLWxpa2Ugb2JqZWN0cyBhcmUga25vd24gYXMgXCJUaGVuYWJsZXNcIi5cbiAqXG4gKiBAc2VlIGh0dHA6Ly9wcm9taXNlc2FwbHVzLmNvbS9cbiAqXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKFxuICogICAgICAgICAgICAgdGhpczpSRVNPTFZFUl9DT05URVhULFxuICogICAgICAgICAgICAgZnVuY3Rpb24oKFRZUEV8SVRoZW5hYmxlLjxUWVBFPnxUaGVuYWJsZSkpLFxuICogICAgICAgICAgICAgZnVuY3Rpb24oKikpOiB2b2lkfSByZXNvbHZlclxuICogICAgIEluaXRpYWxpemF0aW9uIGZ1bmN0aW9uIHRoYXQgaXMgaW52b2tlZCBpbW1lZGlhdGVseSB3aXRoIHtAY29kZSByZXNvbHZlfVxuICogICAgIGFuZCB7QGNvZGUgcmVqZWN0fSBmdW5jdGlvbnMgYXMgYXJndW1lbnRzLiBUaGUgUHJvbWlzZSBpcyByZXNvbHZlZCBvclxuICogICAgIHJlamVjdGVkIHdpdGggdGhlIGZpcnN0IGFyZ3VtZW50IHBhc3NlZCB0byBlaXRoZXIgZnVuY3Rpb24uXG4gKiBAcGFyYW0ge1JFU09MVkVSX0NPTlRFWFQ9fSBvcHRfY29udGV4dCBBbiBvcHRpb25hbCBjb250ZXh0IGZvciBleGVjdXRpbmcgdGhlXG4gKiAgICAgcmVzb2x2ZXIgZnVuY3Rpb24uIElmIHVuc3BlY2lmaWVkLCB0aGUgcmVzb2x2ZXIgZnVuY3Rpb24gd2lsbCBiZSBleGVjdXRlZFxuICogICAgIGluIHRoZSBkZWZhdWx0IHNjb3BlLlxuICogQGNvbnN0cnVjdG9yXG4gKiBAc3RydWN0XG4gKiBAZmluYWxcbiAqIEBpbXBsZW1lbnRzIHtUaGVuYWJsZS48VFlQRT59XG4gKiBAdGVtcGxhdGUgVFlQRSxSRVNPTFZFUl9DT05URVhUXG4gKi9cbnZhciBDYW5jZWxsYWJsZVByb21pc2UgPSBmdW5jdGlvbihyZXNvbHZlciwgb3B0X2NvbnRleHQpIHtcbiAgLyoqXG4gICAqIFRoZSBpbnRlcm5hbCBzdGF0ZSBvZiB0aGlzIFByb21pc2UuIEVpdGhlciBQRU5ESU5HLCBGVUxGSUxMRUQsIFJFSkVDVEVELCBvclxuICAgKiBCTE9DS0VELlxuICAgKiBAcHJpdmF0ZSB7Q2FuY2VsbGFibGVQcm9taXNlLlN0YXRlX31cbiAgICovXG4gIHRoaXMuc3RhdGVfID0gQ2FuY2VsbGFibGVQcm9taXNlLlN0YXRlXy5QRU5ESU5HO1xuXG4gIC8qKlxuICAgKiBUaGUgcmVzb2x2ZWQgcmVzdWx0IG9mIHRoZSBQcm9taXNlLiBJbW11dGFibGUgb25jZSBzZXQgd2l0aCBlaXRoZXIgYVxuICAgKiBmdWxmaWxsbWVudCB2YWx1ZSBvciByZWplY3Rpb24gcmVhc29uLlxuICAgKiBAcHJpdmF0ZSB7Kn1cbiAgICovXG4gIHRoaXMucmVzdWx0XyA9IHVuZGVmaW5lZDtcblxuICAvKipcbiAgICogRm9yIFByb21pc2VzIGNyZWF0ZWQgYnkgY2FsbGluZyB7QGNvZGUgdGhlbigpfSwgdGhlIG9yaWdpbmF0aW5nIHBhcmVudC5cbiAgICogQHByaXZhdGUge0NhbmNlbGxhYmxlUHJvbWlzZX1cbiAgICovXG4gIHRoaXMucGFyZW50XyA9IG51bGw7XG5cbiAgLyoqXG4gICAqIFRoZSBsaXN0IG9mIHtAY29kZSBvbkZ1bGZpbGxlZH0gYW5kIHtAY29kZSBvblJlamVjdGVkfSBjYWxsYmFja3MgYWRkZWQgdG9cbiAgICogdGhpcyBQcm9taXNlIGJ5IGNhbGxzIHRvIHtAY29kZSB0aGVuKCl9LlxuICAgKiBAcHJpdmF0ZSB7QXJyYXkuPENhbmNlbGxhYmxlUHJvbWlzZS5DYWxsYmFja0VudHJ5Xz59XG4gICAqL1xuICB0aGlzLmNhbGxiYWNrRW50cmllc18gPSBudWxsO1xuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRoZSBQcm9taXNlIGlzIGluIHRoZSBxdWV1ZSBvZiBQcm9taXNlcyB0byBleGVjdXRlLlxuICAgKiBAcHJpdmF0ZSB7Ym9vbGVhbn1cbiAgICovXG4gIHRoaXMuZXhlY3V0aW5nXyA9IGZhbHNlO1xuXG4gIGlmIChDYW5jZWxsYWJsZVByb21pc2UuVU5IQU5ETEVEX1JFSkVDVElPTl9ERUxBWSA+IDApIHtcbiAgICAvKipcbiAgICAgKiBBIHRpbWVvdXQgSUQgdXNlZCB3aGVuIHRoZSB7QGNvZGUgVU5IQU5ETEVEX1JFSkVDVElPTl9ERUxBWX0gaXMgZ3JlYXRlclxuICAgICAqIHRoYW4gMCBtaWxsaXNlY29uZHMuIFRoZSBJRCBpcyBzZXQgd2hlbiB0aGUgUHJvbWlzZSBpcyByZWplY3RlZCwgYW5kXG4gICAgICogY2xlYXJlZCBvbmx5IGlmIGFuIHtAY29kZSBvblJlamVjdGVkfSBjYWxsYmFjayBpcyBpbnZva2VkIGZvciB0aGVcbiAgICAgKiBQcm9taXNlIChvciBvbmUgb2YgaXRzIGRlc2NlbmRhbnRzKSBiZWZvcmUgdGhlIGRlbGF5IGlzIGV4Y2VlZGVkLlxuICAgICAqXG4gICAgICogSWYgdGhlIHJlamVjdGlvbiBpcyBub3QgaGFuZGxlZCBiZWZvcmUgdGhlIHRpbWVvdXQgY29tcGxldGVzLCB0aGVcbiAgICAgKiByZWplY3Rpb24gcmVhc29uIGlzIHBhc3NlZCB0byB0aGUgdW5oYW5kbGVkIHJlamVjdGlvbiBoYW5kbGVyLlxuICAgICAqIEBwcml2YXRlIHtudW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy51bmhhbmRsZWRSZWplY3Rpb25JZF8gPSAwO1xuICB9IGVsc2UgaWYgKENhbmNlbGxhYmxlUHJvbWlzZS5VTkhBTkRMRURfUkVKRUNUSU9OX0RFTEFZID09PSAwKSB7XG4gICAgLyoqXG4gICAgICogV2hlbiB0aGUge0Bjb2RlIFVOSEFORExFRF9SRUpFQ1RJT05fREVMQVl9IGlzIHNldCB0byAwIG1pbGxpc2Vjb25kcywgYVxuICAgICAqIGJvb2xlYW4gdGhhdCBpcyBzZXQgaWYgdGhlIFByb21pc2UgaXMgcmVqZWN0ZWQsIGFuZCByZXNldCB0byBmYWxzZSBpZiBhblxuICAgICAqIHtAY29kZSBvblJlamVjdGVkfSBjYWxsYmFjayBpcyBpbnZva2VkIGZvciB0aGUgUHJvbWlzZSAob3Igb25lIG9mIGl0c1xuICAgICAqIGRlc2NlbmRhbnRzKS4gSWYgdGhlIHJlamVjdGlvbiBpcyBub3QgaGFuZGxlZCBiZWZvcmUgdGhlIG5leHQgdGltZXN0ZXAsXG4gICAgICogdGhlIHJlamVjdGlvbiByZWFzb24gaXMgcGFzc2VkIHRvIHRoZSB1bmhhbmRsZWQgcmVqZWN0aW9uIGhhbmRsZXIuXG4gICAgICogQHByaXZhdGUge2Jvb2xlYW59XG4gICAgICovXG4gICAgdGhpcy5oYWRVbmhhbmRsZWRSZWplY3Rpb25fID0gZmFsc2U7XG4gIH1cblxuICB0cnkge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICByZXNvbHZlci5jYWxsKFxuICAgICAgb3B0X2NvbnRleHQsIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHNlbGYucmVzb2x2ZV8oQ2FuY2VsbGFibGVQcm9taXNlLlN0YXRlXy5GVUxGSUxMRUQsIHZhbHVlKTtcbiAgICAgIH0sIGZ1bmN0aW9uKHJlYXNvbikge1xuICAgICAgICBzZWxmLnJlc29sdmVfKENhbmNlbGxhYmxlUHJvbWlzZS5TdGF0ZV8uUkVKRUNURUQsIHJlYXNvbik7XG4gICAgICB9KTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHRoaXMucmVzb2x2ZV8oQ2FuY2VsbGFibGVQcm9taXNlLlN0YXRlXy5SRUpFQ1RFRCwgZSk7XG4gIH1cbn07XG5cbi8qKlxuICogVGhlIGRlbGF5IGluIG1pbGxpc2Vjb25kcyBiZWZvcmUgYSByZWplY3RlZCBQcm9taXNlJ3MgcmVhc29uIGlzIHBhc3NlZCB0b1xuICogdGhlIHJlamVjdGlvbiBoYW5kbGVyLiBCeSBkZWZhdWx0LCB0aGUgcmVqZWN0aW9uIGhhbmRsZXIgcmV0aHJvd3MgdGhlXG4gKiByZWplY3Rpb24gcmVhc29uIHNvIHRoYXQgaXQgYXBwZWFycyBpbiB0aGUgZGV2ZWxvcGVyIGNvbnNvbGUgb3JcbiAqIHtAY29kZSB3aW5kb3cub25lcnJvcn0gaGFuZGxlci5cbiAqIFJlamVjdGlvbnMgYXJlIHJldGhyb3duIGFzIHF1aWNrbHkgYXMgcG9zc2libGUgYnkgZGVmYXVsdC4gQSBuZWdhdGl2ZSB2YWx1ZVxuICogZGlzYWJsZXMgcmVqZWN0aW9uIGhhbmRsaW5nIGVudGlyZWx5LlxuICogQHR5cGUge251bWJlcn1cbiAqL1xuQ2FuY2VsbGFibGVQcm9taXNlLlVOSEFORExFRF9SRUpFQ1RJT05fREVMQVkgPSAwO1xuXG5cbi8qKlxuICogVGhlIHBvc3NpYmxlIGludGVybmFsIHN0YXRlcyBmb3IgYSBQcm9taXNlLiBUaGVzZSBzdGF0ZXMgYXJlIG5vdCBkaXJlY3RseVxuICogb2JzZXJ2YWJsZSB0byBleHRlcm5hbCBjYWxsZXJzLlxuICogQGVudW0ge251bWJlcn1cbiAqIEBwcml2YXRlXG4gKi9cbkNhbmNlbGxhYmxlUHJvbWlzZS5TdGF0ZV8gPSB7XG4gIC8qKiBUaGUgUHJvbWlzZSBpcyB3YWl0aW5nIGZvciByZXNvbHV0aW9uLiAqL1xuICBQRU5ESU5HOiAwLFxuXG4gIC8qKiBUaGUgUHJvbWlzZSBpcyBibG9ja2VkIHdhaXRpbmcgZm9yIHRoZSByZXN1bHQgb2YgYW5vdGhlciBUaGVuYWJsZS4gKi9cbiAgQkxPQ0tFRDogMSxcblxuICAvKiogVGhlIFByb21pc2UgaGFzIGJlZW4gcmVzb2x2ZWQgd2l0aCBhIGZ1bGZpbGxtZW50IHZhbHVlLiAqL1xuICBGVUxGSUxMRUQ6IDIsXG5cbiAgLyoqIFRoZSBQcm9taXNlIGhhcyBiZWVuIHJlc29sdmVkIHdpdGggYSByZWplY3Rpb24gcmVhc29uLiAqL1xuICBSRUpFQ1RFRDogM1xufTtcblxuXG4vKipcbiAqIFR5cGVkZWYgZm9yIGVudHJpZXMgaW4gdGhlIGNhbGxiYWNrIGNoYWluLiBFYWNoIGNhbGwgdG8ge0Bjb2RlIHRoZW59LFxuICoge0Bjb2RlIHRoZW5DYXRjaH0sIG9yIHtAY29kZSB0aGVuQWx3YXlzfSBjcmVhdGVzIGFuIGVudHJ5IGNvbnRhaW5pbmcgdGhlXG4gKiBmdW5jdGlvbnMgdGhhdCBtYXkgYmUgaW52b2tlZCBvbmNlIHRoZSBQcm9taXNlIGlzIHJlc29sdmVkLlxuICpcbiAqIEB0eXBlZGVmIHt7XG4gKiAgIGNoaWxkOiBDYW5jZWxsYWJsZVByb21pc2UsXG4gKiAgIG9uRnVsZmlsbGVkOiBmdW5jdGlvbigqKSxcbiAqICAgb25SZWplY3RlZDogZnVuY3Rpb24oKilcbiAqIH19XG4gKiBAcHJpdmF0ZVxuICovXG5DYW5jZWxsYWJsZVByb21pc2UuQ2FsbGJhY2tFbnRyeV8gPSBudWxsO1xuXG5cbi8qKlxuICogQHBhcmFtIHsoVFlQRXxUaGVuYWJsZS48VFlQRT58VGhlbmFibGUpPX0gb3B0X3ZhbHVlXG4gKiBAcmV0dXJuIHshQ2FuY2VsbGFibGVQcm9taXNlLjxUWVBFPn0gQSBuZXcgUHJvbWlzZSB0aGF0IGlzIGltbWVkaWF0ZWx5IHJlc29sdmVkXG4gKiAgICAgd2l0aCB0aGUgZ2l2ZW4gdmFsdWUuXG4gKiBAdGVtcGxhdGUgVFlQRVxuICovXG5DYW5jZWxsYWJsZVByb21pc2UucmVzb2x2ZSA9IGZ1bmN0aW9uKG9wdF92YWx1ZSkge1xuICByZXR1cm4gbmV3IENhbmNlbGxhYmxlUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlKSB7XG4gICAgICByZXNvbHZlKG9wdF92YWx1ZSk7XG4gICAgfSk7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHsqPX0gb3B0X3JlYXNvblxuICogQHJldHVybiB7IUNhbmNlbGxhYmxlUHJvbWlzZX0gQSBuZXcgUHJvbWlzZSB0aGF0IGlzIGltbWVkaWF0ZWx5IHJlamVjdGVkIHdpdGggdGhlXG4gKiAgICAgZ2l2ZW4gcmVhc29uLlxuICovXG5DYW5jZWxsYWJsZVByb21pc2UucmVqZWN0ID0gZnVuY3Rpb24ob3B0X3JlYXNvbikge1xuICByZXR1cm4gbmV3IENhbmNlbGxhYmxlUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHJlamVjdChvcHRfcmVhc29uKTtcbiAgICB9KTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0geyFBcnJheS48IShUaGVuYWJsZS48VFlQRT58VGhlbmFibGUpPn0gcHJvbWlzZXNcbiAqIEByZXR1cm4geyFDYW5jZWxsYWJsZVByb21pc2UuPFRZUEU+fSBBIFByb21pc2UgdGhhdCByZWNlaXZlcyB0aGUgcmVzdWx0IG9mIHRoZVxuICogICAgIGZpcnN0IFByb21pc2UgKG9yIFByb21pc2UtbGlrZSkgaW5wdXQgdG8gY29tcGxldGUuXG4gKiBAdGVtcGxhdGUgVFlQRVxuICovXG5DYW5jZWxsYWJsZVByb21pc2UucmFjZSA9IGZ1bmN0aW9uKHByb21pc2VzKSB7XG4gIHJldHVybiBuZXcgQ2FuY2VsbGFibGVQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgaWYgKCFwcm9taXNlcy5sZW5ndGgpIHtcbiAgICAgICAgcmVzb2x2ZSh1bmRlZmluZWQpO1xuICAgICAgfVxuICAgICAgZm9yICh2YXIgaSA9IDAsIHByb21pc2U7IChwcm9taXNlID0gcHJvbWlzZXNbaV0pOyBpKyspIHtcbiAgICAgICAgcHJvbWlzZS50aGVuKHJlc29sdmUsIHJlamVjdCk7XG4gICAgICB9XG4gICAgfSk7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHshQXJyYXkuPCEoVGhlbmFibGUuPFRZUEU+fFRoZW5hYmxlKT59IHByb21pc2VzXG4gKiBAcmV0dXJuIHshQ2FuY2VsbGFibGVQcm9taXNlLjwhQXJyYXkuPFRZUEU+Pn0gQSBQcm9taXNlIHRoYXQgcmVjZWl2ZXMgYSBsaXN0IG9mXG4gKiAgICAgZXZlcnkgZnVsZmlsbGVkIHZhbHVlIG9uY2UgZXZlcnkgaW5wdXQgUHJvbWlzZSAob3IgUHJvbWlzZS1saWtlKSBpc1xuICogICAgIHN1Y2Nlc3NmdWxseSBmdWxmaWxsZWQsIG9yIGlzIHJlamVjdGVkIGJ5IHRoZSBmaXJzdCByZWplY3Rpb24gcmVzdWx0LlxuICogQHRlbXBsYXRlIFRZUEVcbiAqL1xuQ2FuY2VsbGFibGVQcm9taXNlLmFsbCA9IGZ1bmN0aW9uKHByb21pc2VzKSB7XG4gIHJldHVybiBuZXcgQ2FuY2VsbGFibGVQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdmFyIHRvRnVsZmlsbCA9IHByb21pc2VzLmxlbmd0aDtcbiAgICAgIHZhciB2YWx1ZXMgPSBbXTtcblxuICAgICAgaWYgKCF0b0Z1bGZpbGwpIHtcbiAgICAgICAgcmVzb2x2ZSh2YWx1ZXMpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBvbkZ1bGZpbGwgPSBmdW5jdGlvbihpbmRleCwgdmFsdWUpIHtcbiAgICAgICAgdG9GdWxmaWxsLS07XG4gICAgICAgIHZhbHVlc1tpbmRleF0gPSB2YWx1ZTtcbiAgICAgICAgaWYgKHRvRnVsZmlsbCA9PT0gMCkge1xuICAgICAgICAgIHJlc29sdmUodmFsdWVzKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgdmFyIG9uUmVqZWN0ID0gZnVuY3Rpb24ocmVhc29uKSB7XG4gICAgICAgIHJlamVjdChyZWFzb24pO1xuICAgICAgfTtcblxuICAgICAgZm9yICh2YXIgaSA9IDAsIHByb21pc2U7IChwcm9taXNlID0gcHJvbWlzZXNbaV0pOyBpKyspIHtcbiAgICAgICAgcHJvbWlzZS50aGVuKHBhcnRpYWwob25GdWxmaWxsLCBpKSwgb25SZWplY3QpO1xuICAgICAgfVxuICAgIH0pO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7IUFycmF5LjwhKFRoZW5hYmxlLjxUWVBFPnxUaGVuYWJsZSk+fSBwcm9taXNlc1xuICogQHJldHVybiB7IUNhbmNlbGxhYmxlUHJvbWlzZS48VFlQRT59IEEgUHJvbWlzZSB0aGF0IHJlY2VpdmVzIHRoZSB2YWx1ZSBvZlxuICogICAgIHRoZSBmaXJzdCBpbnB1dCB0byBiZSBmdWxmaWxsZWQsIG9yIGlzIHJlamVjdGVkIHdpdGggYSBsaXN0IG9mIGV2ZXJ5XG4gKiAgICAgcmVqZWN0aW9uIHJlYXNvbiBpZiBhbGwgaW5wdXRzIGFyZSByZWplY3RlZC5cbiAqIEB0ZW1wbGF0ZSBUWVBFXG4gKi9cbkNhbmNlbGxhYmxlUHJvbWlzZS5maXJzdEZ1bGZpbGxlZCA9IGZ1bmN0aW9uKHByb21pc2VzKSB7XG4gIHJldHVybiBuZXcgQ2FuY2VsbGFibGVQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdmFyIHRvUmVqZWN0ID0gcHJvbWlzZXMubGVuZ3RoO1xuICAgICAgdmFyIHJlYXNvbnMgPSBbXTtcblxuICAgICAgaWYgKCF0b1JlamVjdCkge1xuICAgICAgICByZXNvbHZlKHVuZGVmaW5lZCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIG9uRnVsZmlsbCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHJlc29sdmUodmFsdWUpO1xuICAgICAgfTtcblxuICAgICAgdmFyIG9uUmVqZWN0ID0gZnVuY3Rpb24oaW5kZXgsIHJlYXNvbikge1xuICAgICAgICB0b1JlamVjdC0tO1xuICAgICAgICByZWFzb25zW2luZGV4XSA9IHJlYXNvbjtcbiAgICAgICAgaWYgKHRvUmVqZWN0ID09PSAwKSB7XG4gICAgICAgICAgcmVqZWN0KHJlYXNvbnMpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBmb3IgKHZhciBpID0gMCwgcHJvbWlzZTsgKHByb21pc2UgPSBwcm9taXNlc1tpXSk7IGkrKykge1xuICAgICAgICBwcm9taXNlLnRoZW4ob25GdWxmaWxsLCBwYXJ0aWFsKG9uUmVqZWN0LCBpKSk7XG4gICAgICB9XG4gICAgfSk7XG59O1xuXG5cbi8qKlxuICogQWRkcyBjYWxsYmFja3MgdGhhdCB3aWxsIG9wZXJhdGUgb24gdGhlIHJlc3VsdCBvZiB0aGUgUHJvbWlzZSwgcmV0dXJuaW5nIGFcbiAqIG5ldyBjaGlsZCBQcm9taXNlLlxuICpcbiAqIElmIHRoZSBQcm9taXNlIGlzIGZ1bGZpbGxlZCwgdGhlIHtAY29kZSBvbkZ1bGZpbGxlZH0gY2FsbGJhY2sgd2lsbCBiZSBpbnZva2VkXG4gKiB3aXRoIHRoZSBmdWxmaWxsbWVudCB2YWx1ZSBhcyBhcmd1bWVudCwgYW5kIHRoZSBjaGlsZCBQcm9taXNlIHdpbGwgYmVcbiAqIGZ1bGZpbGxlZCB3aXRoIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIGNhbGxiYWNrLiBJZiB0aGUgY2FsbGJhY2sgdGhyb3dzIGFuXG4gKiBleGNlcHRpb24sIHRoZSBjaGlsZCBQcm9taXNlIHdpbGwgYmUgcmVqZWN0ZWQgd2l0aCB0aGUgdGhyb3duIHZhbHVlIGluc3RlYWQuXG4gKlxuICogSWYgdGhlIFByb21pc2UgaXMgcmVqZWN0ZWQsIHRoZSB7QGNvZGUgb25SZWplY3RlZH0gY2FsbGJhY2sgd2lsbCBiZSBpbnZva2VkXG4gKiB3aXRoIHRoZSByZWplY3Rpb24gcmVhc29uIGFzIGFyZ3VtZW50LCBhbmQgdGhlIGNoaWxkIFByb21pc2Ugd2lsbCBiZSByZWplY3RlZFxuICogd2l0aCB0aGUgcmV0dXJuIHZhbHVlIChvciB0aHJvd24gdmFsdWUpIG9mIHRoZSBjYWxsYmFjay5cbiAqXG4gKiBAb3ZlcnJpZGVcbiAqL1xuQ2FuY2VsbGFibGVQcm9taXNlLnByb3RvdHlwZS50aGVuID0gZnVuY3Rpb24ob3B0X29uRnVsZmlsbGVkLCBvcHRfb25SZWplY3RlZCwgb3B0X2NvbnRleHQpIHtcbiAgcmV0dXJuIHRoaXMuYWRkQ2hpbGRQcm9taXNlXyhcbiAgICBpc0Z1bmN0aW9uKG9wdF9vbkZ1bGZpbGxlZCkgPyBvcHRfb25GdWxmaWxsZWQgOiBudWxsLFxuICAgIGlzRnVuY3Rpb24ob3B0X29uUmVqZWN0ZWQpID8gb3B0X29uUmVqZWN0ZWQgOiBudWxsLFxuICAgIG9wdF9jb250ZXh0KTtcbn07XG5UaGVuYWJsZS5hZGRJbXBsZW1lbnRhdGlvbihDYW5jZWxsYWJsZVByb21pc2UpO1xuXG5cbi8qKlxuICogQWRkcyBhIGNhbGxiYWNrIHRoYXQgd2lsbCBiZSBpbnZva2VkIHdoZXRoZXIgdGhlIFByb21pc2UgaXMgZnVsZmlsbGVkIG9yXG4gKiByZWplY3RlZC4gVGhlIGNhbGxiYWNrIHJlY2VpdmVzIG5vIGFyZ3VtZW50LCBhbmQgbm8gbmV3IGNoaWxkIFByb21pc2UgaXNcbiAqIGNyZWF0ZWQuIFRoaXMgaXMgdXNlZnVsIGZvciBlbnN1cmluZyB0aGF0IGNsZWFudXAgdGFrZXMgcGxhY2UgYWZ0ZXIgY2VydGFpblxuICogYXN5bmNocm9ub3VzIG9wZXJhdGlvbnMuIENhbGxiYWNrcyBhZGRlZCB3aXRoIHtAY29kZSB0aGVuQWx3YXlzfSB3aWxsIGJlXG4gKiBleGVjdXRlZCBpbiB0aGUgc2FtZSBvcmRlciB3aXRoIG90aGVyIGNhbGxzIHRvIHtAY29kZSB0aGVufSxcbiAqIHtAY29kZSB0aGVuQWx3YXlzfSwgb3Ige0Bjb2RlIHRoZW5DYXRjaH0uXG4gKlxuICogU2luY2UgaXQgZG9lcyBub3QgcHJvZHVjZSBhIG5ldyBjaGlsZCBQcm9taXNlLCBjYW5jZWxsYXRpb24gcHJvcGFnYXRpb24gaXNcbiAqIG5vdCBwcmV2ZW50ZWQgYnkgYWRkaW5nIGNhbGxiYWNrcyB3aXRoIHtAY29kZSB0aGVuQWx3YXlzfS4gQSBQcm9taXNlIHRoYXQgaGFzXG4gKiBhIGNsZWFudXAgaGFuZGxlciBhZGRlZCB3aXRoIHtAY29kZSB0aGVuQWx3YXlzfSB3aWxsIGJlIGNhbmNlbGVkIGlmIGFsbCBvZlxuICogaXRzIGNoaWxkcmVuIGNyZWF0ZWQgYnkge0Bjb2RlIHRoZW59IChvciB7QGNvZGUgdGhlbkNhdGNofSkgYXJlIGNhbmNlbGVkLlxuICpcbiAqIEBwYXJhbSB7ZnVuY3Rpb24odGhpczpUSElTKTogdm9pZH0gb25SZXNvbHZlZCBBIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSBpbnZva2VkXG4gKiAgICAgd2hlbiB0aGUgUHJvbWlzZSBpcyByZXNvbHZlZC5cbiAqIEBwYXJhbSB7VEhJUz19IG9wdF9jb250ZXh0IEFuIG9wdGlvbmFsIGNvbnRleHQgb2JqZWN0IHRoYXQgd2lsbCBiZSB0aGVcbiAqICAgICBleGVjdXRpb24gY29udGV4dCBmb3IgdGhlIGNhbGxiYWNrcy4gQnkgZGVmYXVsdCwgZnVuY3Rpb25zIGFyZSBleGVjdXRlZFxuICogICAgIGluIHRoZSBnbG9iYWwgc2NvcGUuXG4gKiBAcmV0dXJuIHshQ2FuY2VsbGFibGVQcm9taXNlLjxUWVBFPn0gVGhpcyBQcm9taXNlLCBmb3IgY2hhaW5pbmcgYWRkaXRpb25hbCBjYWxscy5cbiAqIEB0ZW1wbGF0ZSBUSElTXG4gKi9cbkNhbmNlbGxhYmxlUHJvbWlzZS5wcm90b3R5cGUudGhlbkFsd2F5cyA9IGZ1bmN0aW9uKG9uUmVzb2x2ZWQsIG9wdF9jb250ZXh0KSB7XG4gIHZhciBjYWxsYmFjayA9IGZ1bmN0aW9uKCkge1xuICAgIHRyeSB7XG4gICAgICAvLyBFbnN1cmUgdGhhdCBubyBhcmd1bWVudHMgYXJlIHBhc3NlZCB0byBvblJlc29sdmVkLlxuICAgICAgb25SZXNvbHZlZC5jYWxsKG9wdF9jb250ZXh0KTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIENhbmNlbGxhYmxlUHJvbWlzZS5oYW5kbGVSZWplY3Rpb25fLmNhbGwobnVsbCwgZXJyKTtcbiAgICB9XG4gIH07XG5cbiAgdGhpcy5hZGRDYWxsYmFja0VudHJ5Xyh7XG4gICAgY2hpbGQ6IG51bGwsXG4gICAgb25SZWplY3RlZDogY2FsbGJhY2ssXG4gICAgb25GdWxmaWxsZWQ6IGNhbGxiYWNrXG4gIH0pO1xuICByZXR1cm4gdGhpcztcbn07XG5cblxuLyoqXG4gKiBBZGRzIGEgY2FsbGJhY2sgdGhhdCB3aWxsIGJlIGludm9rZWQgb25seSBpZiB0aGUgUHJvbWlzZSBpcyByZWplY3RlZC4gVGhpc1xuICogaXMgZXF1aXZhbGVudCB0byB7QGNvZGUgdGhlbihudWxsLCBvblJlamVjdGVkKX0uXG4gKlxuICogQHBhcmFtIHshZnVuY3Rpb24odGhpczpUSElTLCAqKTogKn0gb25SZWplY3RlZCBBIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZVxuICogICAgIGludm9rZWQgd2l0aCB0aGUgcmVqZWN0aW9uIHJlYXNvbiBpZiB0aGUgUHJvbWlzZSBpcyByZWplY3RlZC5cbiAqIEBwYXJhbSB7VEhJUz19IG9wdF9jb250ZXh0IEFuIG9wdGlvbmFsIGNvbnRleHQgb2JqZWN0IHRoYXQgd2lsbCBiZSB0aGVcbiAqICAgICBleGVjdXRpb24gY29udGV4dCBmb3IgdGhlIGNhbGxiYWNrcy4gQnkgZGVmYXVsdCwgZnVuY3Rpb25zIGFyZSBleGVjdXRlZFxuICogICAgIGluIHRoZSBnbG9iYWwgc2NvcGUuXG4gKiBAcmV0dXJuIHshQ2FuY2VsbGFibGVQcm9taXNlfSBBIG5ldyBQcm9taXNlIHRoYXQgd2lsbCByZWNlaXZlIHRoZSByZXN1bHQgb2YgdGhlXG4gKiAgICAgY2FsbGJhY2suXG4gKiBAdGVtcGxhdGUgVEhJU1xuICovXG5DYW5jZWxsYWJsZVByb21pc2UucHJvdG90eXBlLnRoZW5DYXRjaCA9IGZ1bmN0aW9uKG9uUmVqZWN0ZWQsIG9wdF9jb250ZXh0KSB7XG4gIHJldHVybiB0aGlzLmFkZENoaWxkUHJvbWlzZV8obnVsbCwgb25SZWplY3RlZCwgb3B0X2NvbnRleHQpO1xufTtcblxuLyoqXG4gKiBBbGlhcyBvZiB7QGxpbmsgQ2FuY2VsbGFibGVQcm9taXNlLnByb3RvdHlwZS50aGVuQ2F0Y2h9XG4gKi9cbkNhbmNlbGxhYmxlUHJvbWlzZS5wcm90b3R5cGUuY2F0Y2ggPSBDYW5jZWxsYWJsZVByb21pc2UucHJvdG90eXBlLnRoZW5DYXRjaDtcblxuXG4vKipcbiAqIENhbmNlbHMgdGhlIFByb21pc2UgaWYgaXQgaXMgc3RpbGwgcGVuZGluZyBieSByZWplY3RpbmcgaXQgd2l0aCBhIGNhbmNlbFxuICogRXJyb3IuIE5vIGFjdGlvbiBpcyBwZXJmb3JtZWQgaWYgdGhlIFByb21pc2UgaXMgYWxyZWFkeSByZXNvbHZlZC5cbiAqXG4gKiBBbGwgY2hpbGQgUHJvbWlzZXMgb2YgdGhlIGNhbmNlbGVkIFByb21pc2Ugd2lsbCBiZSByZWplY3RlZCB3aXRoIHRoZSBzYW1lXG4gKiBjYW5jZWwgZXJyb3IsIGFzIHdpdGggbm9ybWFsIFByb21pc2UgcmVqZWN0aW9uLiBJZiB0aGUgUHJvbWlzZSB0byBiZSBjYW5jZWxlZFxuICogaXMgdGhlIG9ubHkgY2hpbGQgb2YgYSBwZW5kaW5nIFByb21pc2UsIHRoZSBwYXJlbnQgUHJvbWlzZSB3aWxsIGFsc28gYmVcbiAqIGNhbmNlbGVkLiBDYW5jZWxsYXRpb24gbWF5IHByb3BhZ2F0ZSB1cHdhcmQgdGhyb3VnaCBtdWx0aXBsZSBnZW5lcmF0aW9ucy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZz19IG9wdF9tZXNzYWdlIEFuIG9wdGlvbmFsIGRlYnVnZ2luZyBtZXNzYWdlIGZvciBkZXNjcmliaW5nIHRoZVxuICogICAgIGNhbmNlbGxhdGlvbiByZWFzb24uXG4gKi9cbkNhbmNlbGxhYmxlUHJvbWlzZS5wcm90b3R5cGUuY2FuY2VsID0gZnVuY3Rpb24ob3B0X21lc3NhZ2UpIHtcbiAgaWYgKHRoaXMuc3RhdGVfID09PSBDYW5jZWxsYWJsZVByb21pc2UuU3RhdGVfLlBFTkRJTkcpIHtcbiAgICBhc3luYy5ydW4oZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgZXJyID0gbmV3IENhbmNlbGxhYmxlUHJvbWlzZS5DYW5jZWxsYXRpb25FcnJvcihvcHRfbWVzc2FnZSk7XG4gICAgICBlcnIuSVNfQ0FOQ0VMTEFUSU9OX0VSUk9SID0gdHJ1ZTtcbiAgICAgIHRoaXMuY2FuY2VsSW50ZXJuYWxfKGVycik7XG4gICAgfSwgdGhpcyk7XG4gIH1cbn07XG5cblxuLyoqXG4gKiBDYW5jZWxzIHRoaXMgUHJvbWlzZSB3aXRoIHRoZSBnaXZlbiBlcnJvci5cbiAqXG4gKiBAcGFyYW0geyFFcnJvcn0gZXJyIFRoZSBjYW5jZWxsYXRpb24gZXJyb3IuXG4gKiBAcHJpdmF0ZVxuICovXG5DYW5jZWxsYWJsZVByb21pc2UucHJvdG90eXBlLmNhbmNlbEludGVybmFsXyA9IGZ1bmN0aW9uKGVycikge1xuICBpZiAodGhpcy5zdGF0ZV8gPT09IENhbmNlbGxhYmxlUHJvbWlzZS5TdGF0ZV8uUEVORElORykge1xuICAgIGlmICh0aGlzLnBhcmVudF8pIHtcbiAgICAgIC8vIENhbmNlbCB0aGUgUHJvbWlzZSBhbmQgcmVtb3ZlIGl0IGZyb20gdGhlIHBhcmVudCdzIGNoaWxkIGxpc3QuXG4gICAgICB0aGlzLnBhcmVudF8uY2FuY2VsQ2hpbGRfKHRoaXMsIGVycik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucmVzb2x2ZV8oQ2FuY2VsbGFibGVQcm9taXNlLlN0YXRlXy5SRUpFQ1RFRCwgZXJyKTtcbiAgICB9XG4gIH1cbn07XG5cblxuLyoqXG4gKiBDYW5jZWxzIGEgY2hpbGQgUHJvbWlzZSBmcm9tIHRoZSBsaXN0IG9mIGNhbGxiYWNrIGVudHJpZXMuIElmIHRoZSBQcm9taXNlIGhhc1xuICogbm90IGFscmVhZHkgYmVlbiByZXNvbHZlZCwgcmVqZWN0IGl0IHdpdGggYSBjYW5jZWwgZXJyb3IuIElmIHRoZXJlIGFyZSBub1xuICogb3RoZXIgY2hpbGRyZW4gaW4gdGhlIGxpc3Qgb2YgY2FsbGJhY2sgZW50cmllcywgcHJvcGFnYXRlIHRoZSBjYW5jZWxsYXRpb25cbiAqIGJ5IGNhbmNlbGluZyB0aGlzIFByb21pc2UgYXMgd2VsbC5cbiAqXG4gKiBAcGFyYW0geyFDYW5jZWxsYWJsZVByb21pc2V9IGNoaWxkUHJvbWlzZSBUaGUgUHJvbWlzZSB0byBjYW5jZWwuXG4gKiBAcGFyYW0geyFFcnJvcn0gZXJyIFRoZSBjYW5jZWwgZXJyb3IgdG8gdXNlIGZvciByZWplY3RpbmcgdGhlIFByb21pc2UuXG4gKiBAcHJpdmF0ZVxuICovXG5DYW5jZWxsYWJsZVByb21pc2UucHJvdG90eXBlLmNhbmNlbENoaWxkXyA9IGZ1bmN0aW9uKGNoaWxkUHJvbWlzZSwgZXJyKSB7XG4gIGlmICghdGhpcy5jYWxsYmFja0VudHJpZXNfKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBjaGlsZENvdW50ID0gMDtcbiAgdmFyIGNoaWxkSW5kZXggPSAtMTtcblxuICAvLyBGaW5kIHRoZSBjYWxsYmFjayBlbnRyeSBmb3IgdGhlIGNoaWxkUHJvbWlzZSwgYW5kIGNvdW50IHdoZXRoZXIgdGhlcmUgYXJlXG4gIC8vIGFkZGl0aW9uYWwgY2hpbGQgUHJvbWlzZXMuXG4gIGZvciAodmFyIGkgPSAwLCBlbnRyeTsgKGVudHJ5ID0gdGhpcy5jYWxsYmFja0VudHJpZXNfW2ldKTsgaSsrKSB7XG4gICAgdmFyIGNoaWxkID0gZW50cnkuY2hpbGQ7XG4gICAgaWYgKGNoaWxkKSB7XG4gICAgICBjaGlsZENvdW50Kys7XG4gICAgICBpZiAoY2hpbGQgPT09IGNoaWxkUHJvbWlzZSkge1xuICAgICAgICBjaGlsZEluZGV4ID0gaTtcbiAgICAgIH1cbiAgICAgIGlmIChjaGlsZEluZGV4ID49IDAgJiYgY2hpbGRDb3VudCA+IDEpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gSWYgdGhlIGNoaWxkIFByb21pc2Ugd2FzIHRoZSBvbmx5IGNoaWxkLCBjYW5jZWwgdGhpcyBQcm9taXNlIGFzIHdlbGwuXG4gIC8vIE90aGVyd2lzZSwgcmVqZWN0IG9ubHkgdGhlIGNoaWxkIFByb21pc2Ugd2l0aCB0aGUgY2FuY2VsIGVycm9yLlxuICBpZiAoY2hpbGRJbmRleCA+PSAwKSB7XG4gICAgaWYgKHRoaXMuc3RhdGVfID09PSBDYW5jZWxsYWJsZVByb21pc2UuU3RhdGVfLlBFTkRJTkcgJiYgY2hpbGRDb3VudCA9PT0gMSkge1xuICAgICAgdGhpcy5jYW5jZWxJbnRlcm5hbF8oZXJyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGNhbGxiYWNrRW50cnkgPSB0aGlzLmNhbGxiYWNrRW50cmllc18uc3BsaWNlKGNoaWxkSW5kZXgsIDEpWzBdO1xuICAgICAgdGhpcy5leGVjdXRlQ2FsbGJhY2tfKFxuICAgICAgICBjYWxsYmFja0VudHJ5LCBDYW5jZWxsYWJsZVByb21pc2UuU3RhdGVfLlJFSkVDVEVELCBlcnIpO1xuICAgIH1cbiAgfVxufTtcblxuXG4vKipcbiAqIEFkZHMgYSBjYWxsYmFjayBlbnRyeSB0byB0aGUgY3VycmVudCBQcm9taXNlLCBhbmQgc2NoZWR1bGVzIGNhbGxiYWNrXG4gKiBleGVjdXRpb24gaWYgdGhlIFByb21pc2UgaGFzIGFscmVhZHkgYmVlbiByZXNvbHZlZC5cbiAqXG4gKiBAcGFyYW0ge0NhbmNlbGxhYmxlUHJvbWlzZS5DYWxsYmFja0VudHJ5X30gY2FsbGJhY2tFbnRyeSBSZWNvcmQgY29udGFpbmluZ1xuICogICAgIHtAY29kZSBvbkZ1bGZpbGxlZH0gYW5kIHtAY29kZSBvblJlamVjdGVkfSBjYWxsYmFja3MgdG8gZXhlY3V0ZSBhZnRlclxuICogICAgIHRoZSBQcm9taXNlIGlzIHJlc29sdmVkLlxuICogQHByaXZhdGVcbiAqL1xuQ2FuY2VsbGFibGVQcm9taXNlLnByb3RvdHlwZS5hZGRDYWxsYmFja0VudHJ5XyA9IGZ1bmN0aW9uKGNhbGxiYWNrRW50cnkpIHtcbiAgaWYgKCghdGhpcy5jYWxsYmFja0VudHJpZXNfIHx8ICF0aGlzLmNhbGxiYWNrRW50cmllc18ubGVuZ3RoKSAmJlxuICAgICh0aGlzLnN0YXRlXyA9PT0gQ2FuY2VsbGFibGVQcm9taXNlLlN0YXRlXy5GVUxGSUxMRUQgfHxcbiAgICB0aGlzLnN0YXRlXyA9PT0gQ2FuY2VsbGFibGVQcm9taXNlLlN0YXRlXy5SRUpFQ1RFRCkpIHtcbiAgICB0aGlzLnNjaGVkdWxlQ2FsbGJhY2tzXygpO1xuICB9XG4gIGlmICghdGhpcy5jYWxsYmFja0VudHJpZXNfKSB7XG4gICAgdGhpcy5jYWxsYmFja0VudHJpZXNfID0gW107XG4gIH1cbiAgdGhpcy5jYWxsYmFja0VudHJpZXNfLnB1c2goY2FsbGJhY2tFbnRyeSk7XG59O1xuXG5cbi8qKlxuICogQ3JlYXRlcyBhIGNoaWxkIFByb21pc2UgYW5kIGFkZHMgaXQgdG8gdGhlIGNhbGxiYWNrIGVudHJ5IGxpc3QuIFRoZSByZXN1bHQgb2ZcbiAqIHRoZSBjaGlsZCBQcm9taXNlIGlzIGRldGVybWluZWQgYnkgdGhlIHN0YXRlIG9mIHRoZSBwYXJlbnQgUHJvbWlzZSBhbmQgdGhlXG4gKiByZXN1bHQgb2YgdGhlIHtAY29kZSBvbkZ1bGZpbGxlZH0gb3Ige0Bjb2RlIG9uUmVqZWN0ZWR9IGNhbGxiYWNrcyBhc1xuICogc3BlY2lmaWVkIGluIHRoZSBQcm9taXNlIHJlc29sdXRpb24gcHJvY2VkdXJlLlxuICpcbiAqIEBzZWUgaHR0cDovL3Byb21pc2VzYXBsdXMuY29tLyN0aGVfX21ldGhvZFxuICpcbiAqIEBwYXJhbSB7P2Z1bmN0aW9uKHRoaXM6VEhJUywgVFlQRSk6XG4gKiAgICAgICAgICAoUkVTVUxUfENhbmNlbGxhYmxlUHJvbWlzZS48UkVTVUxUPnxUaGVuYWJsZSl9IG9uRnVsZmlsbGVkIEEgY2FsbGJhY2sgdGhhdFxuICogICAgIHdpbGwgYmUgaW52b2tlZCBpZiB0aGUgUHJvbWlzZSBpcyBmdWxsZmlsbGVkLCBvciBudWxsLlxuICogQHBhcmFtIHs/ZnVuY3Rpb24odGhpczpUSElTLCAqKTogKn0gb25SZWplY3RlZCBBIGNhbGxiYWNrIHRoYXQgd2lsbCBiZVxuICogICAgIGludm9rZWQgaWYgdGhlIFByb21pc2UgaXMgcmVqZWN0ZWQsIG9yIG51bGwuXG4gKiBAcGFyYW0ge1RISVM9fSBvcHRfY29udGV4dCBBbiBvcHRpb25hbCBleGVjdXRpb24gY29udGV4dCBmb3IgdGhlIGNhbGxiYWNrcy5cbiAqICAgICBpbiB0aGUgZGVmYXVsdCBjYWxsaW5nIGNvbnRleHQuXG4gKiBAcmV0dXJuIHshQ2FuY2VsbGFibGVQcm9taXNlfSBUaGUgY2hpbGQgUHJvbWlzZS5cbiAqIEB0ZW1wbGF0ZSBSRVNVTFQsVEhJU1xuICogQHByaXZhdGVcbiAqL1xuQ2FuY2VsbGFibGVQcm9taXNlLnByb3RvdHlwZS5hZGRDaGlsZFByb21pc2VfID0gZnVuY3Rpb24oXG5vbkZ1bGZpbGxlZCwgb25SZWplY3RlZCwgb3B0X2NvbnRleHQpIHtcblxuICB2YXIgY2FsbGJhY2tFbnRyeSA9IHtcbiAgICBjaGlsZDogbnVsbCxcbiAgICBvbkZ1bGZpbGxlZDogbnVsbCxcbiAgICBvblJlamVjdGVkOiBudWxsXG4gIH07XG5cbiAgY2FsbGJhY2tFbnRyeS5jaGlsZCA9IG5ldyBDYW5jZWxsYWJsZVByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgLy8gSW52b2tlIG9uRnVsZmlsbGVkLCBvciByZXNvbHZlIHdpdGggdGhlIHBhcmVudCdzIHZhbHVlIGlmIGFic2VudC5cbiAgICBjYWxsYmFja0VudHJ5Lm9uRnVsZmlsbGVkID0gb25GdWxmaWxsZWQgPyBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IG9uRnVsZmlsbGVkLmNhbGwob3B0X2NvbnRleHQsIHZhbHVlKTtcbiAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgfVxuICAgIH0gOiByZXNvbHZlO1xuXG4gICAgLy8gSW52b2tlIG9uUmVqZWN0ZWQsIG9yIHJlamVjdCB3aXRoIHRoZSBwYXJlbnQncyByZWFzb24gaWYgYWJzZW50LlxuICAgIGNhbGxiYWNrRW50cnkub25SZWplY3RlZCA9IG9uUmVqZWN0ZWQgPyBmdW5jdGlvbihyZWFzb24pIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBvblJlamVjdGVkLmNhbGwob3B0X2NvbnRleHQsIHJlYXNvbik7XG4gICAgICAgIGlmICghaXNEZWYocmVzdWx0KSAmJiByZWFzb24uSVNfQ0FOQ0VMTEFUSU9OX0VSUk9SKSB7XG4gICAgICAgICAgLy8gUHJvcGFnYXRlIGNhbmNlbGxhdGlvbiB0byBjaGlsZHJlbiBpZiBubyBvdGhlciByZXN1bHQgaXMgcmV0dXJuZWQuXG4gICAgICAgICAgcmVqZWN0KHJlYXNvbik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICB9XG4gICAgfSA6IHJlamVjdDtcbiAgfSk7XG5cbiAgY2FsbGJhY2tFbnRyeS5jaGlsZC5wYXJlbnRfID0gdGhpcztcbiAgdGhpcy5hZGRDYWxsYmFja0VudHJ5XyhcbiAgICAvKiogQHR5cGUge0NhbmNlbGxhYmxlUHJvbWlzZS5DYWxsYmFja0VudHJ5X30gKi8gKGNhbGxiYWNrRW50cnkpKTtcbiAgcmV0dXJuIGNhbGxiYWNrRW50cnkuY2hpbGQ7XG59O1xuXG5cbi8qKlxuICogVW5ibG9ja3MgdGhlIFByb21pc2UgYW5kIGZ1bGZpbGxzIGl0IHdpdGggdGhlIGdpdmVuIHZhbHVlLlxuICpcbiAqIEBwYXJhbSB7VFlQRX0gdmFsdWVcbiAqIEBwcml2YXRlXG4gKi9cbkNhbmNlbGxhYmxlUHJvbWlzZS5wcm90b3R5cGUudW5ibG9ja0FuZEZ1bGZpbGxfID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgaWYgKHRoaXMuc3RhdGVfICE9PSBDYW5jZWxsYWJsZVByb21pc2UuU3RhdGVfLkJMT0NLRUQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0NhbmNlbGxhYmxlUHJvbWlzZSBpcyBub3QgYmxvY2tlZC4nKTtcbiAgfVxuICB0aGlzLnN0YXRlXyA9IENhbmNlbGxhYmxlUHJvbWlzZS5TdGF0ZV8uUEVORElORztcbiAgdGhpcy5yZXNvbHZlXyhDYW5jZWxsYWJsZVByb21pc2UuU3RhdGVfLkZVTEZJTExFRCwgdmFsdWUpO1xufTtcblxuXG4vKipcbiAqIFVuYmxvY2tzIHRoZSBQcm9taXNlIGFuZCByZWplY3RzIGl0IHdpdGggdGhlIGdpdmVuIHJlamVjdGlvbiByZWFzb24uXG4gKlxuICogQHBhcmFtIHsqfSByZWFzb25cbiAqIEBwcml2YXRlXG4gKi9cbkNhbmNlbGxhYmxlUHJvbWlzZS5wcm90b3R5cGUudW5ibG9ja0FuZFJlamVjdF8gPSBmdW5jdGlvbihyZWFzb24pIHtcbiAgaWYgKHRoaXMuc3RhdGVfICE9PSBDYW5jZWxsYWJsZVByb21pc2UuU3RhdGVfLkJMT0NLRUQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0NhbmNlbGxhYmxlUHJvbWlzZSBpcyBub3QgYmxvY2tlZC4nKTtcbiAgfVxuICB0aGlzLnN0YXRlXyA9IENhbmNlbGxhYmxlUHJvbWlzZS5TdGF0ZV8uUEVORElORztcbiAgdGhpcy5yZXNvbHZlXyhDYW5jZWxsYWJsZVByb21pc2UuU3RhdGVfLlJFSkVDVEVELCByZWFzb24pO1xufTtcblxuXG4vKipcbiAqIEF0dGVtcHRzIHRvIHJlc29sdmUgYSBQcm9taXNlIHdpdGggYSBnaXZlbiByZXNvbHV0aW9uIHN0YXRlIGFuZCB2YWx1ZS4gVGhpc1xuICogaXMgYSBuby1vcCBpZiB0aGUgZ2l2ZW4gUHJvbWlzZSBoYXMgYWxyZWFkeSBiZWVuIHJlc29sdmVkLlxuICpcbiAqIElmIHRoZSBnaXZlbiByZXN1bHQgaXMgYSBUaGVuYWJsZSAoc3VjaCBhcyBhbm90aGVyIFByb21pc2UpLCB0aGUgUHJvbWlzZSB3aWxsXG4gKiBiZSByZXNvbHZlZCB3aXRoIHRoZSBzYW1lIHN0YXRlIGFuZCByZXN1bHQgYXMgdGhlIFRoZW5hYmxlIG9uY2UgaXQgaXMgaXRzZWxmXG4gKiByZXNvbHZlZC5cbiAqXG4gKiBJZiB0aGUgZ2l2ZW4gcmVzdWx0IGlzIG5vdCBhIFRoZW5hYmxlLCB0aGUgUHJvbWlzZSB3aWxsIGJlIGZ1bGZpbGxlZCBvclxuICogcmVqZWN0ZWQgd2l0aCB0aGF0IHJlc3VsdCBiYXNlZCBvbiB0aGUgZ2l2ZW4gc3RhdGUuXG4gKlxuICogQHNlZSBodHRwOi8vcHJvbWlzZXNhcGx1cy5jb20vI3RoZV9wcm9taXNlX3Jlc29sdXRpb25fcHJvY2VkdXJlXG4gKlxuICogQHBhcmFtIHtDYW5jZWxsYWJsZVByb21pc2UuU3RhdGVffSBzdGF0ZVxuICogQHBhcmFtIHsqfSB4IFRoZSByZXN1bHQgdG8gYXBwbHkgdG8gdGhlIFByb21pc2UuXG4gKiBAcHJpdmF0ZVxuICovXG5DYW5jZWxsYWJsZVByb21pc2UucHJvdG90eXBlLnJlc29sdmVfID0gZnVuY3Rpb24oc3RhdGUsIHgpIHtcbiAgaWYgKHRoaXMuc3RhdGVfICE9PSBDYW5jZWxsYWJsZVByb21pc2UuU3RhdGVfLlBFTkRJTkcpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAodGhpcyA9PT0geCkge1xuICAgIHN0YXRlID0gQ2FuY2VsbGFibGVQcm9taXNlLlN0YXRlXy5SRUpFQ1RFRDtcbiAgICB4ID0gbmV3IFR5cGVFcnJvcignQ2FuY2VsbGFibGVQcm9taXNlIGNhbm5vdCByZXNvbHZlIHRvIGl0c2VsZicpO1xuXG4gIH0gZWxzZSBpZiAoVGhlbmFibGUuaXNJbXBsZW1lbnRlZEJ5KHgpKSB7XG4gICAgeCA9IC8qKiBAdHlwZSB7IVRoZW5hYmxlfSAqLyAoeCk7XG4gICAgdGhpcy5zdGF0ZV8gPSBDYW5jZWxsYWJsZVByb21pc2UuU3RhdGVfLkJMT0NLRUQ7XG4gICAgeC50aGVuKHRoaXMudW5ibG9ja0FuZEZ1bGZpbGxfLCB0aGlzLnVuYmxvY2tBbmRSZWplY3RfLCB0aGlzKTtcbiAgICByZXR1cm47XG5cbiAgfSBlbHNlIGlmIChpc09iamVjdCh4KSkge1xuICAgIHRyeSB7XG4gICAgICB2YXIgdGhlbiA9IHgudGhlbjtcbiAgICAgIGlmIChpc0Z1bmN0aW9uKHRoZW4pKSB7XG4gICAgICAgIHRoaXMudHJ5VGhlbl8oeCwgdGhlbik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBzdGF0ZSA9IENhbmNlbGxhYmxlUHJvbWlzZS5TdGF0ZV8uUkVKRUNURUQ7XG4gICAgICB4ID0gZTtcbiAgICB9XG4gIH1cblxuICB0aGlzLnJlc3VsdF8gPSB4O1xuICB0aGlzLnN0YXRlXyA9IHN0YXRlO1xuICB0aGlzLnNjaGVkdWxlQ2FsbGJhY2tzXygpO1xuXG4gIGlmIChzdGF0ZSA9PT0gQ2FuY2VsbGFibGVQcm9taXNlLlN0YXRlXy5SRUpFQ1RFRCAmJiAheC5JU19DQU5DRUxMQVRJT05fRVJST1IpIHtcbiAgICBDYW5jZWxsYWJsZVByb21pc2UuYWRkVW5oYW5kbGVkUmVqZWN0aW9uXyh0aGlzLCB4KTtcbiAgfVxufTtcblxuXG4vKipcbiAqIEF0dGVtcHRzIHRvIGNhbGwgdGhlIHtAY29kZSB0aGVufSBtZXRob2Qgb24gYW4gb2JqZWN0IGluIHRoZSBob3BlcyB0aGF0IGl0IGlzXG4gKiBhIFByb21pc2UtY29tcGF0aWJsZSBpbnN0YW5jZS4gVGhpcyBhbGxvd3MgaW50ZXJvcGVyYXRpb24gYmV0d2VlbiBkaWZmZXJlbnRcbiAqIFByb21pc2UgaW1wbGVtZW50YXRpb25zLCBob3dldmVyIGEgbm9uLWNvbXBsaWFudCBvYmplY3QgbWF5IGNhdXNlIGEgUHJvbWlzZVxuICogdG8gaGFuZyBpbmRlZmluaXRlbHkuIElmIHRoZSB7QGNvZGUgdGhlbn0gbWV0aG9kIHRocm93cyBhbiBleGNlcHRpb24sIHRoZVxuICogZGVwZW5kZW50IFByb21pc2Ugd2lsbCBiZSByZWplY3RlZCB3aXRoIHRoZSB0aHJvd24gdmFsdWUuXG4gKlxuICogQHNlZSBodHRwOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTcwXG4gKlxuICogQHBhcmFtIHtUaGVuYWJsZX0gdGhlbmFibGUgQW4gb2JqZWN0IHdpdGggYSB7QGNvZGUgdGhlbn0gbWV0aG9kIHRoYXQgbWF5IGJlXG4gKiAgICAgY29tcGF0aWJsZSB3aXRoIHRoZSBQcm9taXNlL0ErIHNwZWNpZmljYXRpb24uXG4gKiBAcGFyYW0geyFGdW5jdGlvbn0gdGhlbiBUaGUge0Bjb2RlIHRoZW59IG1ldGhvZCBvZiB0aGUgVGhlbmFibGUgb2JqZWN0LlxuICogQHByaXZhdGVcbiAqL1xuQ2FuY2VsbGFibGVQcm9taXNlLnByb3RvdHlwZS50cnlUaGVuXyA9IGZ1bmN0aW9uKHRoZW5hYmxlLCB0aGVuKSB7XG4gIHRoaXMuc3RhdGVfID0gQ2FuY2VsbGFibGVQcm9taXNlLlN0YXRlXy5CTE9DS0VEO1xuICB2YXIgcHJvbWlzZSA9IHRoaXM7XG4gIHZhciBjYWxsZWQgPSBmYWxzZTtcblxuICB2YXIgcmVzb2x2ZSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgaWYgKCFjYWxsZWQpIHtcbiAgICAgIGNhbGxlZCA9IHRydWU7XG4gICAgICBwcm9taXNlLnVuYmxvY2tBbmRGdWxmaWxsXyh2YWx1ZSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciByZWplY3QgPSBmdW5jdGlvbihyZWFzb24pIHtcbiAgICBpZiAoIWNhbGxlZCkge1xuICAgICAgY2FsbGVkID0gdHJ1ZTtcbiAgICAgIHByb21pc2UudW5ibG9ja0FuZFJlamVjdF8ocmVhc29uKTtcbiAgICB9XG4gIH07XG5cbiAgdHJ5IHtcbiAgICB0aGVuLmNhbGwodGhlbmFibGUsIHJlc29sdmUsIHJlamVjdCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZWplY3QoZSk7XG4gIH1cbn07XG5cblxuLyoqXG4gKiBFeGVjdXRlcyB0aGUgcGVuZGluZyBjYWxsYmFja3Mgb2YgYSByZXNvbHZlZCBQcm9taXNlIGFmdGVyIGEgdGltZW91dC5cbiAqXG4gKiBTZWN0aW9uIDIuMi40IG9mIHRoZSBQcm9taXNlcy9BKyBzcGVjaWZpY2F0aW9uIHJlcXVpcmVzIHRoYXQgUHJvbWlzZVxuICogY2FsbGJhY2tzIG11c3Qgb25seSBiZSBpbnZva2VkIGZyb20gYSBjYWxsIHN0YWNrIHRoYXQgb25seSBjb250YWlucyBQcm9taXNlXG4gKiBpbXBsZW1lbnRhdGlvbiBjb2RlLCB3aGljaCB3ZSBhY2NvbXBsaXNoIGJ5IGludm9raW5nIGNhbGxiYWNrIGV4ZWN1dGlvbiBhZnRlclxuICogYSB0aW1lb3V0LiBJZiB7QGNvZGUgc3RhcnRFeGVjdXRpb25ffSBpcyBjYWxsZWQgbXVsdGlwbGUgdGltZXMgZm9yIHRoZSBzYW1lXG4gKiBQcm9taXNlLCB0aGUgY2FsbGJhY2sgY2hhaW4gd2lsbCBiZSBldmFsdWF0ZWQgb25seSBvbmNlLiBBZGRpdGlvbmFsIGNhbGxiYWNrc1xuICogbWF5IGJlIGFkZGVkIGR1cmluZyB0aGUgZXZhbHVhdGlvbiBwaGFzZSwgYW5kIHdpbGwgYmUgZXhlY3V0ZWQgaW4gdGhlIHNhbWVcbiAqIGV2ZW50IGxvb3AuXG4gKlxuICogQWxsIFByb21pc2VzIGFkZGVkIHRvIHRoZSB3YWl0aW5nIGxpc3QgZHVyaW5nIHRoZSBzYW1lIGJyb3dzZXIgZXZlbnQgbG9vcFxuICogd2lsbCBiZSBleGVjdXRlZCBpbiBvbmUgYmF0Y2ggdG8gYXZvaWQgdXNpbmcgYSBzZXBhcmF0ZSB0aW1lb3V0IHBlciBQcm9taXNlLlxuICpcbiAqIEBwcml2YXRlXG4gKi9cbkNhbmNlbGxhYmxlUHJvbWlzZS5wcm90b3R5cGUuc2NoZWR1bGVDYWxsYmFja3NfID0gZnVuY3Rpb24oKSB7XG4gIGlmICghdGhpcy5leGVjdXRpbmdfKSB7XG4gICAgdGhpcy5leGVjdXRpbmdfID0gdHJ1ZTtcbiAgICBhc3luYy5ydW4odGhpcy5leGVjdXRlQ2FsbGJhY2tzXywgdGhpcyk7XG4gIH1cbn07XG5cblxuLyoqXG4gKiBFeGVjdXRlcyBhbGwgcGVuZGluZyBjYWxsYmFja3MgZm9yIHRoaXMgUHJvbWlzZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5DYW5jZWxsYWJsZVByb21pc2UucHJvdG90eXBlLmV4ZWN1dGVDYWxsYmFja3NfID0gZnVuY3Rpb24oKSB7XG4gIHdoaWxlICh0aGlzLmNhbGxiYWNrRW50cmllc18gJiYgdGhpcy5jYWxsYmFja0VudHJpZXNfLmxlbmd0aCkge1xuICAgIHZhciBlbnRyaWVzID0gdGhpcy5jYWxsYmFja0VudHJpZXNfO1xuICAgIHRoaXMuY2FsbGJhY2tFbnRyaWVzXyA9IFtdO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbnRyaWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLmV4ZWN1dGVDYWxsYmFja18oZW50cmllc1tpXSwgdGhpcy5zdGF0ZV8sIHRoaXMucmVzdWx0Xyk7XG4gICAgfVxuICB9XG4gIHRoaXMuZXhlY3V0aW5nXyA9IGZhbHNlO1xufTtcblxuXG4vKipcbiAqIEV4ZWN1dGVzIGEgcGVuZGluZyBjYWxsYmFjayBmb3IgdGhpcyBQcm9taXNlLiBJbnZva2VzIGFuIHtAY29kZSBvbkZ1bGZpbGxlZH1cbiAqIG9yIHtAY29kZSBvblJlamVjdGVkfSBjYWxsYmFjayBiYXNlZCBvbiB0aGUgcmVzb2x2ZWQgc3RhdGUgb2YgdGhlIFByb21pc2UuXG4gKlxuICogQHBhcmFtIHshQ2FuY2VsbGFibGVQcm9taXNlLkNhbGxiYWNrRW50cnlffSBjYWxsYmFja0VudHJ5IEFuIGVudHJ5IGNvbnRhaW5pbmcgdGhlXG4gKiAgICAgb25GdWxmaWxsZWQgYW5kL29yIG9uUmVqZWN0ZWQgY2FsbGJhY2tzIGZvciB0aGlzIHN0ZXAuXG4gKiBAcGFyYW0ge0NhbmNlbGxhYmxlUHJvbWlzZS5TdGF0ZV99IHN0YXRlIFRoZSByZXNvbHV0aW9uIHN0YXR1cyBvZiB0aGUgUHJvbWlzZSxcbiAqICAgICBlaXRoZXIgRlVMRklMTEVEIG9yIFJFSkVDVEVELlxuICogQHBhcmFtIHsqfSByZXN1bHQgVGhlIHJlc29sdmVkIHJlc3VsdCBvZiB0aGUgUHJvbWlzZS5cbiAqIEBwcml2YXRlXG4gKi9cbkNhbmNlbGxhYmxlUHJvbWlzZS5wcm90b3R5cGUuZXhlY3V0ZUNhbGxiYWNrXyA9IGZ1bmN0aW9uKFxuY2FsbGJhY2tFbnRyeSwgc3RhdGUsIHJlc3VsdCkge1xuICBpZiAoc3RhdGUgPT09IENhbmNlbGxhYmxlUHJvbWlzZS5TdGF0ZV8uRlVMRklMTEVEKSB7XG4gICAgY2FsbGJhY2tFbnRyeS5vbkZ1bGZpbGxlZChyZXN1bHQpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMucmVtb3ZlVW5oYW5kbGVkUmVqZWN0aW9uXygpO1xuICAgIGNhbGxiYWNrRW50cnkub25SZWplY3RlZChyZXN1bHQpO1xuICB9XG59O1xuXG5cbi8qKlxuICogTWFya3MgdGhpcyByZWplY3RlZCBQcm9taXNlIGFzIGhhdmluZyBiZWluZyBoYW5kbGVkLiBBbHNvIG1hcmtzIGFueSBwYXJlbnRcbiAqIFByb21pc2VzIGluIHRoZSByZWplY3RlZCBzdGF0ZSBhcyBoYW5kbGVkLiBUaGUgcmVqZWN0aW9uIGhhbmRsZXIgd2lsbCBub1xuICogbG9uZ2VyIGJlIGludm9rZWQgZm9yIHRoaXMgUHJvbWlzZSAoaWYgaXQgaGFzIG5vdCBiZWVuIGNhbGxlZCBhbHJlYWR5KS5cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5DYW5jZWxsYWJsZVByb21pc2UucHJvdG90eXBlLnJlbW92ZVVuaGFuZGxlZFJlamVjdGlvbl8gPSBmdW5jdGlvbigpIHtcbiAgdmFyIHA7XG4gIGlmIChDYW5jZWxsYWJsZVByb21pc2UuVU5IQU5ETEVEX1JFSkVDVElPTl9ERUxBWSA+IDApIHtcbiAgICBmb3IgKHAgPSB0aGlzOyBwICYmIHAudW5oYW5kbGVkUmVqZWN0aW9uSWRfOyBwID0gcC5wYXJlbnRfKSB7XG4gICAgICBjbGVhclRpbWVvdXQocC51bmhhbmRsZWRSZWplY3Rpb25JZF8pO1xuICAgICAgcC51bmhhbmRsZWRSZWplY3Rpb25JZF8gPSAwO1xuICAgIH1cbiAgfSBlbHNlIGlmIChDYW5jZWxsYWJsZVByb21pc2UuVU5IQU5ETEVEX1JFSkVDVElPTl9ERUxBWSA9PT0gMCkge1xuICAgIGZvciAocCA9IHRoaXM7IHAgJiYgcC5oYWRVbmhhbmRsZWRSZWplY3Rpb25fOyBwID0gcC5wYXJlbnRfKSB7XG4gICAgICBwLmhhZFVuaGFuZGxlZFJlamVjdGlvbl8gPSBmYWxzZTtcbiAgICB9XG4gIH1cbn07XG5cblxuLyoqXG4gKiBNYXJrcyB0aGlzIHJlamVjdGVkIFByb21pc2UgYXMgdW5oYW5kbGVkLiBJZiBubyB7QGNvZGUgb25SZWplY3RlZH0gY2FsbGJhY2tcbiAqIGlzIGNhbGxlZCBmb3IgdGhpcyBQcm9taXNlIGJlZm9yZSB0aGUge0Bjb2RlIFVOSEFORExFRF9SRUpFQ1RJT05fREVMQVl9XG4gKiBleHBpcmVzLCB0aGUgcmVhc29uIHdpbGwgYmUgcGFzc2VkIHRvIHRoZSB1bmhhbmRsZWQgcmVqZWN0aW9uIGhhbmRsZXIuIFRoZVxuICogaGFuZGxlciB0eXBpY2FsbHkgcmV0aHJvd3MgdGhlIHJlamVjdGlvbiByZWFzb24gc28gdGhhdCBpdCBiZWNvbWVzIHZpc2libGUgaW5cbiAqIHRoZSBkZXZlbG9wZXIgY29uc29sZS5cbiAqXG4gKiBAcGFyYW0geyFDYW5jZWxsYWJsZVByb21pc2V9IHByb21pc2UgVGhlIHJlamVjdGVkIFByb21pc2UuXG4gKiBAcGFyYW0geyp9IHJlYXNvbiBUaGUgUHJvbWlzZSByZWplY3Rpb24gcmVhc29uLlxuICogQHByaXZhdGVcbiAqL1xuQ2FuY2VsbGFibGVQcm9taXNlLmFkZFVuaGFuZGxlZFJlamVjdGlvbl8gPSBmdW5jdGlvbihwcm9taXNlLCByZWFzb24pIHtcbiAgaWYgKENhbmNlbGxhYmxlUHJvbWlzZS5VTkhBTkRMRURfUkVKRUNUSU9OX0RFTEFZID4gMCkge1xuICAgIHByb21pc2UudW5oYW5kbGVkUmVqZWN0aW9uSWRfID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgIENhbmNlbGxhYmxlUHJvbWlzZS5oYW5kbGVSZWplY3Rpb25fLmNhbGwobnVsbCwgcmVhc29uKTtcbiAgICB9LCBDYW5jZWxsYWJsZVByb21pc2UuVU5IQU5ETEVEX1JFSkVDVElPTl9ERUxBWSk7XG5cbiAgfSBlbHNlIGlmIChDYW5jZWxsYWJsZVByb21pc2UuVU5IQU5ETEVEX1JFSkVDVElPTl9ERUxBWSA9PT0gMCkge1xuICAgIHByb21pc2UuaGFkVW5oYW5kbGVkUmVqZWN0aW9uXyA9IHRydWU7XG4gICAgYXN5bmMucnVuKGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKHByb21pc2UuaGFkVW5oYW5kbGVkUmVqZWN0aW9uXykge1xuICAgICAgICBDYW5jZWxsYWJsZVByb21pc2UuaGFuZGxlUmVqZWN0aW9uXy5jYWxsKG51bGwsIHJlYXNvbik7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn07XG5cblxuLyoqXG4gKiBBIG1ldGhvZCB0aGF0IGlzIGludm9rZWQgd2l0aCB0aGUgcmVqZWN0aW9uIHJlYXNvbnMgZm9yIFByb21pc2VzIHRoYXQgYXJlXG4gKiByZWplY3RlZCBidXQgaGF2ZSBubyB7QGNvZGUgb25SZWplY3RlZH0gY2FsbGJhY2tzIHJlZ2lzdGVyZWQgeWV0LlxuICogQHR5cGUge2Z1bmN0aW9uKCopfVxuICogQHByaXZhdGVcbiAqL1xuQ2FuY2VsbGFibGVQcm9taXNlLmhhbmRsZVJlamVjdGlvbl8gPSBhc3luYy50aHJvd0V4Y2VwdGlvbjtcblxuXG4vKipcbiAqIFNldHMgYSBoYW5kbGVyIHRoYXQgd2lsbCBiZSBjYWxsZWQgd2l0aCByZWFzb25zIGZyb20gdW5oYW5kbGVkIHJlamVjdGVkXG4gKiBQcm9taXNlcy4gSWYgdGhlIHJlamVjdGVkIFByb21pc2UgKG9yIG9uZSBvZiBpdHMgZGVzY2VuZGFudHMpIGhhcyBhblxuICoge0Bjb2RlIG9uUmVqZWN0ZWR9IGNhbGxiYWNrIHJlZ2lzdGVyZWQsIHRoZSByZWplY3Rpb24gd2lsbCBiZSBjb25zaWRlcmVkXG4gKiBoYW5kbGVkLCBhbmQgdGhlIHJlamVjdGlvbiBoYW5kbGVyIHdpbGwgbm90IGJlIGNhbGxlZC5cbiAqXG4gKiBCeSBkZWZhdWx0LCB1bmhhbmRsZWQgcmVqZWN0aW9ucyBhcmUgcmV0aHJvd24gc28gdGhhdCB0aGUgZXJyb3IgbWF5IGJlXG4gKiBjYXB0dXJlZCBieSB0aGUgZGV2ZWxvcGVyIGNvbnNvbGUgb3IgYSB7QGNvZGUgd2luZG93Lm9uZXJyb3J9IGhhbmRsZXIuXG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbigqKX0gaGFuZGxlciBBIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSBjYWxsZWQgd2l0aCByZWFzb25zIGZyb21cbiAqICAgICByZWplY3RlZCBQcm9taXNlcy4gRGVmYXVsdHMgdG8ge0Bjb2RlIGFzeW5jLnRocm93RXhjZXB0aW9ufS5cbiAqL1xuQ2FuY2VsbGFibGVQcm9taXNlLnNldFVuaGFuZGxlZFJlamVjdGlvbkhhbmRsZXIgPSBmdW5jdGlvbihoYW5kbGVyKSB7XG4gIENhbmNlbGxhYmxlUHJvbWlzZS5oYW5kbGVSZWplY3Rpb25fID0gaGFuZGxlcjtcbn07XG5cblxuXG4vKipcbiAqIEVycm9yIHVzZWQgYXMgYSByZWplY3Rpb24gcmVhc29uIGZvciBjYW5jZWxlZCBQcm9taXNlcy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZz19IG9wdF9tZXNzYWdlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBleHRlbmRzIHtFcnJvcn1cbiAqIEBmaW5hbFxuICovXG5DYW5jZWxsYWJsZVByb21pc2UuQ2FuY2VsbGF0aW9uRXJyb3IgPSBjbGFzcyBleHRlbmRzIEVycm9yIHtcbiAgY29uc3RydWN0b3Iob3B0X21lc3NhZ2UpIHtcbiAgICAgc3VwZXIob3B0X21lc3NhZ2UpO1xuXG4gICAgIGlmIChvcHRfbWVzc2FnZSkge1xuICAgICAgIHRoaXMubWVzc2FnZSA9IG9wdF9tZXNzYWdlO1xuICAgICB9XG4gICB9XG59O1xuXG4vKiogQG92ZXJyaWRlICovXG5DYW5jZWxsYWJsZVByb21pc2UuQ2FuY2VsbGF0aW9uRXJyb3IucHJvdG90eXBlLm5hbWUgPSAnY2FuY2VsJztcblxuZXhwb3J0IHtDYW5jZWxsYWJsZVByb21pc2V9O1xuZXhwb3J0IGRlZmF1bHQgQ2FuY2VsbGFibGVQcm9taXNlO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAgKiBEZWJvdW5jZXMgZnVuY3Rpb24gZXhlY3V0aW9uLlxuICAqIEBwYXJhbSB7IWZ1bmN0aW9uKCl9IGZuXG4gICogQHBhcmFtIHtudW1iZXJ9IGRlbGF5XG4gICogQHJldHVybiB7IWZ1bmN0aW9uKCl9XG4gICovXG5mdW5jdGlvbiBkZWJvdW5jZShmbiwgZGVsYXkpIHtcblx0cmV0dXJuIGZ1bmN0aW9uIGRlYm91bmNlZCgpIHtcblx0XHR2YXIgYXJncyA9IGFyZ3VtZW50cztcblx0XHRjYW5jZWxEZWJvdW5jZShkZWJvdW5jZWQpO1xuXHRcdGRlYm91bmNlZC5pZCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG5cdFx0XHRmbi5hcHBseShudWxsLCBhcmdzKTtcblx0XHR9LCBkZWxheSk7XG5cdH07XG59XG5cbi8qKlxuICogQ2FuY2VscyB0aGUgc2NoZWR1bGVkIGRlYm91bmNlZCBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gY2FuY2VsRGVib3VuY2UoZGVib3VuY2VkKSB7XG5cdGNsZWFyVGltZW91dChkZWJvdW5jZWQuaWQpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBkZWJvdW5jZTtcbmV4cG9ydCB7IGNhbmNlbERlYm91bmNlLCBkZWJvdW5jZSB9O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgY29yZSBmcm9tICdtZXRhbCc7XG5cbmNvbnN0IFJFR0VYID0gLyhbXFwvXSk/KD86KD86XFw6KFxcdyspKD86XFwoKCg/OlxcXFwufFteXFxcXCgpXSkqKVxcKSk/fFxcKCgoPzpcXFxcLnxbXlxcXFwoKV0pKylcXCkpKFsrKj9dKT8pL2c7XG5cbi8qKlxuICogQ29udmVydHMgdGhlIGdpdmVuIGFycmF5IG9mIHJlZ2V4IG1hdGNoZXMgdG8gYSBtb3JlIHJlYWRhYmxlIG9iamVjdCBmb3JtYXQuXG4gKiBAcGFyYW0geyFBcnJheTxzdHJpbmc+fSBtYXRjaGVzXG4gKiBAcmV0dXJuIHshT2JqZWN0fVxuICovXG5mdW5jdGlvbiBjb252ZXJ0TWF0Y2hlc1RvT2JqKG1hdGNoZXMpIHtcblx0cmV0dXJuIHtcblx0XHRtYXRjaDogbWF0Y2hlc1swXSxcblx0XHRwcmVmaXg6IG1hdGNoZXNbMV0sXG5cdFx0bmFtZTogbWF0Y2hlc1syXSxcblx0XHRwYXJhbVBhdHRlcm46IG1hdGNoZXNbM10sXG5cdFx0dW5uYW1lZFBhdHRlcm46IG1hdGNoZXNbNF0sXG5cdFx0bW9kaWZpZXI6IG1hdGNoZXNbNV1cblx0fTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyB0aGUgZ2l2ZW4gdG9rZW5zIHBhcnNlZCBmcm9tIGEgcm91dGUgZm9ybWF0IHN0cmluZyB0byBhIHJlZ2V4LlxuICogQHBhcmFtIHshQXJyYXk8c3RyaW5nfCFPYmplY3Q+fSB0b2tlbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIGNvbnZlcnRUb2tlbnNUb1JlZ2V4KHRva2Vucykge1xuXHRsZXQgcmVnZXggPSAnJztcblx0Zm9yIChsZXQgaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcblx0XHRpZiAoY29yZS5pc1N0cmluZyh0b2tlbnNbaV0pKSB7XG5cdFx0XHRyZWdleCArPSBlc2NhcGUodG9rZW5zW2ldKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bGV0IGNhcHR1cmUgPSBlbmNsb3NlTm9uQ2FwdHVyaW5nR3JvdXAodG9rZW5zW2ldLnBhdHRlcm4pO1xuXHRcdFx0aWYgKHRva2Vuc1tpXS5yZXBlYXQpIHtcblx0XHRcdFx0Y2FwdHVyZSArPSBlbmNsb3NlTm9uQ2FwdHVyaW5nR3JvdXAoJ1xcXFwvJyArIGNhcHR1cmUpICsgJyonO1xuXHRcdFx0fVxuXHRcdFx0Y2FwdHVyZSA9IGVzY2FwZSh0b2tlbnNbaV0ucHJlZml4KSArIGAoJHtjYXB0dXJlfSlgO1xuXHRcdFx0aWYgKHRva2Vuc1tpXS5vcHRpb25hbCkge1xuXHRcdFx0XHRpZiAoIXRva2Vuc1tpXS5wYXJ0aWFsKSB7XG5cdFx0XHRcdFx0Y2FwdHVyZSA9IGVuY2xvc2VOb25DYXB0dXJpbmdHcm91cChjYXB0dXJlKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRjYXB0dXJlICs9ICc/Jztcblx0XHRcdH1cblx0XHRcdHJlZ2V4ICs9IGNhcHR1cmU7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBuZXcgUmVnRXhwKCdeJyArIG1ha2VUcmFpbGluZ1NsYXNoT3B0aW9uYWwocmVnZXgpICsgJyQnKTtcbn1cblxuLyoqXG4gKiBFbmNsb3NlcyB0aGUgZ2l2ZW4gcmVnZXggcGF0dGVybiBpbnRvIGEgbm9uIGNhcHR1cmluZyBncm91cC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXR0ZXJuXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVuY2xvc2VOb25DYXB0dXJpbmdHcm91cChwYXR0ZXJuKSB7XG5cdHJldHVybiBgKD86JHtwYXR0ZXJufSlgO1xufVxuXG4vKipcbiAqIEVzY2FwZXMgdGhlIGdpdmVuIHN0cmluZyB0byBzaG93IHVwIGluIHRoZSBwYXRoIHJlZ2V4LlxuICogQHBhcmFtIHtzdHJpbmd9IHN0clxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlc2NhcGUoc3RyKSB7XG5cdHJldHVybiBzdHIucmVwbGFjZSgvKFsuKyo/PV4hOiR7fSgpW1xcXXxcXC9cXFxcXSkvZywgJ1xcXFwkMScpO1xufVxuXG4vKipcbiAqIE1ha2VzIHRyYWlsaW5nIHNsYXNoIG9wdGlvbmFsIG9uIHBhdGhzLlxuICogQHBhcmFtIHtzdHJpbmd9IHJlZ2V4XG4gKiBAcGFyYW0ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gbWFrZVRyYWlsaW5nU2xhc2hPcHRpb25hbChyZWdleCkge1xuXHRpZiAoL1xcLyQvLnRlc3QocmVnZXgpKSB7XG5cdFx0cmVnZXggKz0gJz8nO1xuXHR9IGVsc2Uge1xuXHRcdHJlZ2V4ICs9ICdcXFxcLz8nO1xuXHR9XG5cdHJldHVybiByZWdleDtcbn1cblxuLyoqXG4gKiBQYXJzZXMgdGhlIGdpdmVuIHJvdXRlIGZvcm1hdCBzdHJpbmcgaW50byB0b2tlbnMgcmVwcmVzZW50aW5nIGl0cyBjb250ZW50cy5cbiAqIEBwYXJhbSB7IUFycmF5fHN0cmluZ30gcm91dGVPclRva2VucyBFaXRoZXIgYSByb3V0ZSBmb3JtYXQgc3RyaW5nIG9yIHRva2Vuc1xuICogICAgIHByZXZpb3VzbHkgcGFyc2VkIHZpYSB0aGUgYHBhcnNlYCBmdW5jdGlvbi5cbiAqIEByZXR1cm4geyFBcnJheTxzdHJpbmd8IU9iamVjdD59IEFuIGFycmF5IG9mIHRva2VucyB0aGF0IGNhbiBiZSBlaXRoZXIgcGxhaW5cbiAqICAgICBzdHJpbmdzIChwYXJ0IG9mIHRoZSByb3V0ZSkgb3Igb2JqZWN0cyBjb250YWluaW5nIGluZm9ybWF0aW9ucyBvbiBwYXJhbXMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZShyb3V0ZU9yVG9rZW5zKSB7XG5cdGlmICghY29yZS5pc1N0cmluZyhyb3V0ZU9yVG9rZW5zKSkge1xuXHRcdHJldHVybiByb3V0ZU9yVG9rZW5zO1xuXHR9XG5cblx0Y29uc3Qgcm91dGUgPSByb3V0ZU9yVG9rZW5zO1xuXHRsZXQgdW5uYW1lZENvdW50ID0gMDtcblx0Y29uc3QgdG9rZW5zID0gW107XG5cdGxldCBjdXJyUGF0aCA9ICcnO1xuXHRsZXQgaW5kZXggPSAwO1xuXG5cdGxldCBtYXRjaGVzID0gUkVHRVguZXhlYyhyb3V0ZSk7XG5cdHdoaWxlIChtYXRjaGVzKSB7XG5cdFx0Y29uc3QgZGF0YSA9IGNvbnZlcnRNYXRjaGVzVG9PYmoobWF0Y2hlcyk7XG5cblx0XHRjdXJyUGF0aCA9IHJvdXRlLnNsaWNlKGluZGV4LCBtYXRjaGVzLmluZGV4KTtcblx0XHRpbmRleCA9IG1hdGNoZXMuaW5kZXggKyBkYXRhLm1hdGNoLmxlbmd0aDtcblx0XHR0b2tlbnMucHVzaChjdXJyUGF0aCk7XG5cblx0XHR0b2tlbnMucHVzaCh7XG5cdFx0XHRuYW1lOiBkYXRhLm5hbWUgPyBkYXRhLm5hbWUgOiAnJyArIHVubmFtZWRDb3VudCsrLFxuXHRcdFx0cGFydGlhbDogcm91dGVbaW5kZXhdICYmIHJvdXRlW2luZGV4XSAhPT0gZGF0YS5wcmVmaXgsXG5cdFx0XHRwcmVmaXg6IGRhdGEucHJlZml4IHx8ICcnLFxuXHRcdFx0cGF0dGVybjogZGF0YS5wYXJhbVBhdHRlcm4gfHwgZGF0YS51bm5hbWVkUGF0dGVybiB8fCAnW15cXFxcL10rJyxcblx0XHRcdHJlcGVhdDogZGF0YS5tb2RpZmllciA9PT0gJyonIHx8IGRhdGEubW9kaWZpZXIgPT09ICcrJyxcblx0XHRcdG9wdGlvbmFsOiBkYXRhLm1vZGlmaWVyID09PSAnKicgfHwgZGF0YS5tb2RpZmllciA9PT0gJz8nXG5cdFx0fSk7XG5cblx0XHRtYXRjaGVzID0gUkVHRVguZXhlYyhyb3V0ZSk7XG5cdH1cblxuXHRpZiAoaW5kZXggPCByb3V0ZS5sZW5ndGgpIHtcblx0XHR0b2tlbnMucHVzaChyb3V0ZS5zdWJzdHIoaW5kZXgpKTtcblx0fVxuXHRyZXR1cm4gdG9rZW5zO1xufVxuXG4vKipcbiAqIENvbnZlcnRzIHRoZSBnaXZlbiByb3V0ZSBmb3JtYXQgc3RyaW5nIHRvIGEgcmVnZXggdGhhdCBjYW4gZXh0cmFjdCBwYXJhbVxuICogZGF0YSBmcm9tIHBhdGhzIG1hdGNoaW5nIGl0LlxuICogQHBhcmFtIHshQXJyYXl8c3RyaW5nfSByb3V0ZU9yVG9rZW5zIEVpdGhlciBhIHJvdXRlIGZvcm1hdCBzdHJpbmcgb3IgdG9rZW5zXG4gKiAgICAgcHJldmlvdXNseSBwYXJzZWQgdmlhIHRoZSBgcGFyc2VgIGZ1bmN0aW9uLlxuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRvUmVnZXgocm91dGVPclRva2Vucykge1xuXHRyZXR1cm4gY29udmVydFRva2Vuc1RvUmVnZXgocGFyc2Uocm91dGVPclRva2VucykpO1xufVxuXG4vKipcbiAqIEV4dHJhY3RzIGRhdGEgZnJvbSB0aGUgZ2l2ZW4gcGF0aCBhY2NvcmRpbmcgdG8gdGhlIHNwZWNpZmllZCByb3V0ZSBmb3JtYXQuXG4gKiBAcGFyYW0geyFBcnJheXxzdHJpbmd9IHJvdXRlT3JUb2tlbnMgRWl0aGVyIGEgcm91dGUgZm9ybWF0IHN0cmluZyBvciB0b2tlbnNcbiAqICAgICBwcmV2aW91c2x5IHBhcnNlZCB2aWEgdGhlIGBwYXJzZWAgZnVuY3Rpb24uXG4gKiBAcGFyYW0ge3N0cmluZ30gVGhlIHBhdGggdG8gZXh0cmFjdCBwYXJhbSBkYXRhIGZyb20uXG4gKiBAcmV0dXJuIHtPYmplY3Q8c3RyaW5nLCBzdHJpbmc+fSBUaGUgZGF0YSBvYmplY3QsIG9yIG51bGwgaWYgdGhlIHBhdGggZG9lc24ndFxuICogICAgIG1hdGNoIHRoZSBnaXZlbiBmb3JtYXQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBleHRyYWN0RGF0YShyb3V0ZU9yVG9rZW5zLCBwYXRoKSB7XG5cdGNvbnN0IGRhdGEgPSB7fTtcblx0Y29uc3QgdG9rZW5zID0gcGFyc2Uocm91dGVPclRva2Vucyk7XG5cdGNvbnN0IG1hdGNoID0gcGF0aC5tYXRjaChjb252ZXJ0VG9rZW5zVG9SZWdleCh0b2tlbnMpKTtcblxuXHRpZiAoIW1hdGNoKSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHRsZXQgcGFyYW1JbmRleCA9IDE7XG5cdGZvciAobGV0IGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XG5cdFx0aWYgKCFjb3JlLmlzU3RyaW5nKHRva2Vuc1tpXSkpIHtcblx0XHRcdGxldCB2YWx1ZSA9IG1hdGNoW3BhcmFtSW5kZXgrK107XG5cdFx0XHRpZiAoY29yZS5pc0RlZih2YWx1ZSkpIHtcblx0XHRcdFx0aWYgKHRva2Vuc1tpXS5yZXBlYXQpIHtcblx0XHRcdFx0XHR2YWx1ZSA9IHZhbHVlLnNwbGl0KCcvJyk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZGF0YVt0b2tlbnNbaV0ubmFtZV0gPSB2YWx1ZTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0cmV0dXJuIGRhdGE7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB7IGlzRGVmQW5kTm90TnVsbCwgaXNGdW5jdGlvbiwgaXNTdHJpbmcgfSBmcm9tICdtZXRhbCc7XG5pbXBvcnQgeyBleHRyYWN0RGF0YSwgcGFyc2UsIHRvUmVnZXggfSBmcm9tICdtZXRhbC1wYXRoLXBhcnNlcic7XG5cbmNsYXNzIFJvdXRlIHtcblxuXHQvKipcblx0ICogUm91dGUgY2xhc3MuXG5cdCAqIEBwYXJhbSB7IXN0cmluZ3xSZWdFeHB8RnVuY3Rpb259IHBhdGhcblx0ICogQHBhcmFtIHshRnVuY3Rpb259IGhhbmRsZXJcblx0ICogQGNvbnN0cnVjdG9yXG5cdCAqL1xuXHRjb25zdHJ1Y3RvcihwYXRoLCBoYW5kbGVyKSB7XG5cdFx0aWYgKCFpc0RlZkFuZE5vdE51bGwocGF0aCkpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcignUm91dGUgcGF0aCBub3Qgc3BlY2lmaWVkLicpO1xuXHRcdH1cblx0XHRpZiAoIWlzRnVuY3Rpb24oaGFuZGxlcikpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcignUm91dGUgaGFuZGxlciBpcyBub3QgYSBmdW5jdGlvbi4nKTtcblx0XHR9XG5cblx0XHQvKipcblx0XHQgKiBEZWZpbmVzIHRoZSBoYW5kbGVyIHdoaWNoIHdpbGwgZXhlY3V0ZSBvbmNlIGEgVVJMIGluIHRoZSBhcHBsaWNhdGlvblxuXHRcdCAqIG1hdGNoZXMgdGhlIHBhdGguXG5cdFx0ICogQHR5cGUgeyFGdW5jdGlvbn1cblx0XHQgKiBAcHJvdGVjdGVkXG5cdFx0ICovXG5cdFx0dGhpcy5oYW5kbGVyID0gaGFuZGxlcjtcblxuXHRcdC8qKlxuXHRcdCAqIERlZmluZXMgdGhlIHBhdGggd2hpY2ggd2lsbCB0cmlnZ2VyIHRoZSByb3V0ZSBoYW5kbGVyLlxuXHRcdCAqIEB0eXBlIHshc3RyaW5nfFJlZ0V4cHxGdW5jdGlvbn1cblx0XHQgKiBAcHJvdGVjdGVkXG5cdFx0ICovXG5cdFx0dGhpcy5wYXRoID0gcGF0aDtcblx0fVxuXG5cdC8qKlxuXHQqIEJ1aWxkcyBwYXJzZWQgZGF0YSAocmVnZXggYW5kIHRva2VucykgZm9yIHRoaXMgcm91dGUuXG5cdCogQHJldHVybiB7IU9iamVjdH1cblx0KiBAcHJvdGVjdGVkXG5cdCovXG5cdGJ1aWxkUGFyc2VkRGF0YV8oKSB7XG5cdFx0aWYgKCF0aGlzLnBhcnNlZERhdGFfKSB7XG5cdFx0XHR2YXIgdG9rZW5zID0gcGFyc2UodGhpcy5wYXRoKTtcblx0XHRcdHZhciByZWdleCA9IHRvUmVnZXgodG9rZW5zKTtcblx0XHRcdHRoaXMucGFyc2VkRGF0YV8gPSB7XG5cdFx0XHRcdHJlZ2V4LFxuXHRcdFx0XHR0b2tlbnNcblx0XHRcdH07XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLnBhcnNlZERhdGFfO1xuXHR9XG5cblx0LyoqXG5cdCAqIEV4dHJhY3RzIHBhcmFtIGRhdGEgZnJvbSB0aGUgZ2l2ZW4gcGF0aCwgYWNjb3JkaW5nIHRvIHRoaXMgcm91dGUuXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIFRoZSB1cmwgcGF0aCB0byBleHRyYWN0IHBhcmFtcyBmcm9tLlxuXHQgKiBAcmV0dXJuIHtPYmplY3R9IFRoZSBleHRyYWN0ZWQgZGF0YSwgaWYgdGhlIHBhdGggbWF0Y2hlcyB0aGlzIHJvdXRlLCBvclxuXHQgKiAgICAgbnVsbCBvdGhlcndpc2UuXG5cdCAqL1xuXHRleHRyYWN0UGFyYW1zKHBhdGgpIHtcblx0XHRpZiAoaXNTdHJpbmcodGhpcy5wYXRoKSkge1xuXHRcdFx0cmV0dXJuIGV4dHJhY3REYXRhKHRoaXMuYnVpbGRQYXJzZWREYXRhXygpLnRva2VucywgcGF0aCk7XG5cdFx0fVxuXHRcdHJldHVybiB7fTtcblx0fVxuXG5cdC8qKlxuXHQgKiBHZXRzIHRoZSByb3V0ZSBoYW5kbGVyLlxuXHQgKiBAcmV0dXJuIHshRnVuY3Rpb259XG5cdCAqL1xuXHRnZXRIYW5kbGVyKCkge1xuXHRcdHJldHVybiB0aGlzLmhhbmRsZXI7XG5cdH1cblxuXHQvKipcblx0ICogR2V0cyB0aGUgcm91dGUgcGF0aC5cblx0ICogQHJldHVybiB7IXN0cmluZ3xSZWdFeHB8RnVuY3Rpb259XG5cdCAqL1xuXHRnZXRQYXRoKCkge1xuXHRcdHJldHVybiB0aGlzLnBhdGg7XG5cdH1cblxuXHQvKipcbiBcdCAqIE1hdGNoZXMgaWYgdGhlIHJvdXRlciBjYW4gaGFuZGxlIHRoZSB0ZXN0ZWQgcGF0aC5cbiBcdCAqIEBwYXJhbSB7IXN0cmluZ30gdmFsdWUgUGF0aCB0byB0ZXN0IChtYXkgY29udGFpbiB0aGUgcXVlcnlzdHJpbmcgcGFydCkuXG5cdCAqIEByZXR1cm4ge2Jvb2xlYW59IFJldHVybnMgdHJ1ZSBpZiBtYXRjaGVzIGFueSByb3V0ZS5cblx0ICovXG5cdG1hdGNoZXNQYXRoKHZhbHVlKSB7XG5cdFx0dmFyIHBhdGggPSB0aGlzLnBhdGg7XG5cblx0XHRpZiAoaXNGdW5jdGlvbihwYXRoKSkge1xuXHRcdFx0cmV0dXJuIHBhdGgodmFsdWUpO1xuXHRcdH1cblx0XHRpZiAoaXNTdHJpbmcocGF0aCkpIHtcblx0XHRcdHBhdGggPSB0aGlzLmJ1aWxkUGFyc2VkRGF0YV8oKS5yZWdleDtcblx0XHR9XG5cdFx0aWYgKHBhdGggaW5zdGFuY2VvZiBSZWdFeHApIHtcblx0XHRcdHJldHVybiB2YWx1ZS5zZWFyY2gocGF0aCkgPiAtMTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBSb3V0ZTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHsgRGlzcG9zYWJsZSB9IGZyb20gJ21ldGFsJztcblxuY2xhc3MgQ2FjaGVhYmxlIGV4dGVuZHMgRGlzcG9zYWJsZSB7XG5cblx0LyoqXG5cdCAqIEFic3RyYWN0IGNsYXNzIGZvciBkZWZpbmluZyBjYWNoZWFibGUgYmVoYXZpb3IuXG5cdCAqIEBjb25zdHJ1Y3RvclxuXHQgKi9cblx0Y29uc3RydWN0b3IoKSB7XG5cdFx0c3VwZXIoKTtcblxuXHRcdC8qKlxuXHRcdCAqIEhvbGRzIHRoZSBjYWNoZWQgZGF0YS5cblx0XHQgKiBAdHlwZSB7IU9iamVjdH1cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICogQHByb3RlY3RlZFxuXHRcdCAqL1xuXHRcdHRoaXMuY2FjaGUgPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogSG9sZHMgd2hldGhlciBjbGFzcyBpcyBjYWNoZWFibGUuXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQGRlZmF1bHQgZmFsc2Vcblx0XHQgKiBAcHJvdGVjdGVkXG5cdFx0ICovXG5cdFx0dGhpcy5jYWNoZWFibGUgPSBmYWxzZTtcblx0fVxuXG5cdC8qKlxuXHQgKiBBZGRzIGNvbnRlbnQgdG8gdGhlIGNhY2hlLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gY29udGVudCBDb250ZW50IHRvIGJlIGNhY2hlZC5cblx0ICogQGNoYWluYWJsZVxuXHQgKi9cblx0YWRkQ2FjaGUoY29udGVudCkge1xuXHRcdGlmICh0aGlzLmNhY2hlYWJsZSkge1xuXHRcdFx0dGhpcy5jYWNoZSA9IGNvbnRlbnQ7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0LyoqXG5cdCAqIENsZWFycyB0aGUgY2FjaGUuXG5cdCAqIEBjaGFpbmFibGVcblx0ICovXG5cdGNsZWFyQ2FjaGUoKSB7XG5cdFx0dGhpcy5jYWNoZSA9IG51bGw7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxuXHQvKipcblx0ICogRGlzcG9zZXMgb2YgdGhpcyBpbnN0YW5jZSdzIG9iamVjdCByZWZlcmVuY2VzLlxuXHQgKiBAb3ZlcnJpZGVcblx0ICovXG5cdGRpc3Bvc2VJbnRlcm5hbCgpIHtcblx0XHR0aGlzLmNsZWFyQ2FjaGUoKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBHZXRzIHRoZSBjYWNoZWQgY29udGVudC5cblx0ICogQHJldHVybiB7T2JqZWN0fSBDYWNoZWQgY29udGVudC5cblx0ICogQHByb3RlY3RlZFxuXHQgKi9cblx0Z2V0Q2FjaGUoKSB7XG5cdFx0cmV0dXJuIHRoaXMuY2FjaGU7XG5cdH1cblxuXHQvKipcblx0ICogV2hldGhlciB0aGUgY2xhc3MgaXMgY2FjaGVhYmxlLlxuXHQgKiBAcmV0dXJuIHtib29sZWFufSBSZXR1cm5zIHRydWUgd2hlbiBjbGFzcyBpcyBjYWNoZWFibGUsIGZhbHNlIG90aGVyd2lzZS5cblx0ICovXG5cdGlzQ2FjaGVhYmxlKCkge1xuXHRcdHJldHVybiB0aGlzLmNhY2hlYWJsZTtcblx0fVxuXG5cdC8qKlxuXHQgKiBTZXRzIHdoZXRoZXIgdGhlIGNsYXNzIGlzIGNhY2hlYWJsZS5cblx0ICogQHBhcmFtIHtib29sZWFufSBjYWNoZWFibGVcblx0ICovXG5cdHNldENhY2hlYWJsZShjYWNoZWFibGUpIHtcblx0XHRpZiAoIWNhY2hlYWJsZSkge1xuXHRcdFx0dGhpcy5jbGVhckNhY2hlKCk7XG5cdFx0fVxuXHRcdHRoaXMuY2FjaGVhYmxlID0gY2FjaGVhYmxlO1xuXHR9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ2FjaGVhYmxlO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgeyBnZXRVaWQgfSBmcm9tICdtZXRhbCc7XG5pbXBvcnQgeyBnbG9iYWxFdmFsIH0gZnJvbSAnbWV0YWwtZG9tJztcbmltcG9ydCBDYWNoZWFibGUgZnJvbSAnLi4vY2FjaGVhYmxlL0NhY2hlYWJsZSc7XG5pbXBvcnQgQ2FuY2VsbGFibGVQcm9taXNlIGZyb20gJ21ldGFsLXByb21pc2UnO1xuXG5jbGFzcyBTY3JlZW4gZXh0ZW5kcyBDYWNoZWFibGUge1xuXG5cdC8qKlxuXHQgKiBTY3JlZW4gY2xhc3MgaXMgYSBzcGVjaWFsIHR5cGUgb2Ygcm91dGUgaGFuZGxlciB0aGF0IHByb3ZpZGVzIGhlbHBlclxuXHQgKiB1dGlsaXRpZXMgdGhhdCBhZGRzIGxpZmVjeWNsZSBhbmQgbWV0aG9kcyB0byBwcm92aWRlIGNvbnRlbnQgdG8gZWFjaFxuXHQgKiByZWdpc3RlcmVkIHN1cmZhY2UuXG5cdCAqIEBjb25zdHJ1Y3RvclxuXHQgKiBAZXh0ZW5kcyB7Q2FjaGVhYmxlfVxuXHQgKi9cblx0Y29uc3RydWN0b3IoKSB7XG5cdFx0c3VwZXIoKTtcblxuXHRcdC8qKlxuXHRcdCAqIEhvbGRzIHRoZSBzY3JlZW4gaWQuXG5cdFx0ICogQHR5cGUge3N0cmluZ31cblx0XHQgKiBAcHJvdGVjdGVkXG5cdFx0ICovXG5cdFx0dGhpcy5pZCA9IHRoaXMubWFrZUlkXyhnZXRVaWQoKSk7XG5cblx0XHQvKipcblx0XHQgKiBIb2xkcyB0aGUgc2NyZWVuIHRpdGxlLiBSZWxldmFudCB3aGVuIHRoZSBwYWdlIHRpdGxlIHNob3VsZCBiZVxuXHRcdCAqIHVwYWRhdGVkIHdoZW4gc2NyZWVuIGlzIHJlbmRlcmVkLlxuXHRcdCAqIEB0eXBlIHs/c3RyaW5nPX1cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICogQHByb3RlY3RlZFxuXHRcdCAqL1xuXHRcdHRoaXMudGl0bGUgPSBudWxsO1xuXHR9XG5cblx0LyoqXG5cdCAqIEZpcmVzIHdoZW4gdGhlIHNjcmVlbiBpcyBhY3RpdmUuIEFsbG93cyBhIHNjcmVlbiB0byBwZXJmb3JtIGFueSBzZXR1cFxuXHQgKiB0aGF0IHJlcXVpcmVzIGl0cyBET00gdG8gYmUgdmlzaWJsZS4gTGlmZWN5Y2xlLlxuXHQgKi9cblx0YWN0aXZhdGUoKSB7XG5cdFx0Y29uc29sZS5sb2coJ1NjcmVlbiBbJyArIHRoaXMgKyAnXSBhY3RpdmF0ZScpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEdpdmVzIHRoZSBTY3JlZW4gYSBjaGFuY2UgdG8gY2FuY2VsIHRoZSBuYXZpZ2F0aW9uIGFuZCBzdG9wIGl0c2VsZiBmcm9tXG5cdCAqIGFjdGl2YXRpbmcuIENhbiBiZSB1c2VkLCBmb3IgZXhhbXBsZSwgdG8gcHJldmVudCBuYXZpZ2F0aW9uIGlmIGEgdXNlclxuXHQgKiBpcyBub3QgYXV0aGVudGljYXRlZC4gTGlmZWN5Y2xlLlxuXHQgKiBAcmV0dXJuIHtib29sZWFuPXw/Q2FuY2VsbGFibGVQcm9taXNlPX0gSWYgcmV0dXJucyBvciByZXNvbHZlcyB0byB0cnVlLFxuXHQgKiAgICAgdGhlIGN1cnJlbnQgc2NyZWVuIGlzIGxvY2tlZCBhbmQgdGhlIG5leHQgbmFnaXZhdGlvbiBpbnRlcnJ1cHRlZC5cblx0ICovXG5cdGJlZm9yZUFjdGl2YXRlKCkge1xuXHRcdGNvbnNvbGUubG9nKCdTY3JlZW4gWycgKyB0aGlzICsgJ10gYmVmb3JlQWN0aXZhdGUnKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBHaXZlcyB0aGUgU2NyZWVuIGEgY2hhbmNlIHRvIGNhbmNlbCB0aGUgbmF2aWdhdGlvbiBhbmQgc3RvcCBpdHNlbGYgZnJvbVxuXHQgKiBiZWluZyBkZWFjdGl2YXRlZC4gQ2FuIGJlIHVzZWQsIGZvciBleGFtcGxlLCBpZiB0aGUgc2NyZWVuIGhhcyB1bnNhdmVkXG5cdCAqIHN0YXRlLiBMaWZlY3ljbGUuIENsZWFuLXVwIHNob3VsZCBub3QgYmUgcHJlZm9ybWVkIGhlcmUsIHNpbmNlIHRoZVxuXHQgKiBuYXZpZ2F0aW9uIG1heSBzdGlsbCBiZSBjYW5jZWxsZWQuIERvIGNsZWFuLXVwIGluIGRlYWN0aXZhdGUuXG5cdCAqIEByZXR1cm4ge2Jvb2xlYW49fD9DYW5jZWxsYWJsZVByb21pc2U9fSBJZiByZXR1cm5zIG9yIHJlc29sdmVzIHRvIHRydWUsXG5cdCAqICAgICB0aGUgY3VycmVudCBzY3JlZW4gaXMgbG9ja2VkIGFuZCB0aGUgbmV4dCBuYWdpdmF0aW9uIGludGVycnVwdGVkLlxuXHQgKi9cblx0YmVmb3JlRGVhY3RpdmF0ZSgpIHtcblx0XHRjb25zb2xlLmxvZygnU2NyZWVuIFsnICsgdGhpcyArICddIGJlZm9yZURlYWN0aXZhdGUnKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBHaXZlcyB0aGUgU2NyZWVuIGEgY2hhbmNlIGZvcm1hdCB0aGUgcGF0aCBiZWZvcmUgaGlzdG9yeSB1cGRhdGUuXG5cdCAqIEBwYXRoIHshc3RyaW5nfSBwYXRoIE5hdmlnYXRpb24gcGF0aC5cblx0ICogQHJldHVybiB7IXN0cmluZ30gTmF2aWdhdGlvbiBwYXRoIHRvIHVzZSBvbiBoaXN0b3J5LlxuXHQgKi9cblx0YmVmb3JlVXBkYXRlSGlzdG9yeVBhdGgocGF0aCkge1xuXHRcdHJldHVybiBwYXRoO1xuXHR9XG5cblx0LyoqXG5cdCAqIEdpdmVzIHRoZSBTY3JlZW4gYSBjaGFuY2UgZm9ybWF0IHRoZSBzdGF0ZSBiZWZvcmUgaGlzdG9yeSB1cGRhdGUuXG5cdCAqIEBwYXRoIHshb2JqZWN0fSBzdGF0ZSBIaXN0b3J5IHN0YXRlLlxuXHQgKiBAcmV0dXJuIHshb2JqZWN0fSBIaXN0b3J5IHN0YXRlIHRvIHVzZSBvbiBoaXN0b3J5LlxuXHQgKi9cblx0YmVmb3JlVXBkYXRlSGlzdG9yeVN0YXRlKHN0YXRlKSB7XG5cdFx0cmV0dXJuIHN0YXRlO1xuXHR9XG5cblx0LyoqXG5cdCAqIEFsbG93cyBhIHNjcmVlbiB0byBkbyBhbnkgY2xlYW51cCBuZWNlc3NhcnkgYWZ0ZXIgaXQgaGFzIGJlZW5cblx0ICogZGVhY3RpdmF0ZWQsIGZvciBleGFtcGxlIGNhbmNlbGxpbmcgb3V0c3RhbmRpbmcgcmVxdWVzdHMgb3Igc3RvcHBpbmdcblx0ICogdGltZXJzLiBMaWZlY3ljbGUuXG5cdCAqL1xuXHRkZWFjdGl2YXRlKCkge1xuXHRcdGNvbnNvbGUubG9nKCdTY3JlZW4gWycgKyB0aGlzICsgJ10gZGVhY3RpdmF0ZScpO1xuXHR9XG5cblx0LyoqXG5cdCAqIERpc3Bvc2UgYSBzY3JlZW4sIGVpdGhlciBhZnRlciBpdCBpcyBkZWFjdGl2YXRlZCAoaW4gdGhlIGNhc2Ugb2YgYVxuXHQgKiBub24tY2FjaGVhYmxlIHZpZXcpIG9yIHdoZW4gdGhlIEFwcCBpcyBpdHNlbGYgZGlzcG9zZWQgZm9yIHdoYXRldmVyXG5cdCAqIHJlYXNvbi4gTGlmZWN5Y2xlLlxuXHQgKi9cblx0ZGlzcG9zZUludGVybmFsKCkge1xuXHRcdHN1cGVyLmRpc3Bvc2VJbnRlcm5hbCgpO1xuXHRcdGNvbnNvbGUubG9nKCdTY3JlZW4gWycgKyB0aGlzICsgJ10gZGlzcG9zZScpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEFsbG93cyBhIHNjcmVlbiB0byBldmFsdWF0ZSBzY3JpcHRzIGJlZm9yZSB0aGUgZWxlbWVudCBpcyBtYWRlIHZpc2libGUuXG5cdCAqIExpZmVjeWNsZS5cblx0ICogQHBhcmFtIHshb2JqZWN0fSBzdXJmYWNlcyBNYXAgb2Ygc3VyZmFjZXMgdG8gZmxpcCBrZXllZCBieSBzdXJmYWNlIGlkLlxuXHQgKiBAcmV0dXJuIHs/Q2FuY2VsbGFibGVQcm9taXNlPX0gVGhpcyBjYW4gcmV0dXJuIGEgcHJvbWlzZSwgd2hpY2ggd2lsbFxuXHQgKiAgICAgcGF1c2UgdGhlIG5hdmlnYXRpb24gdW50aWwgaXQgaXMgcmVzb2x2ZWQuXG5cdCAqL1xuXHRldmFsdWF0ZVNjcmlwdHMoc3VyZmFjZXMpIHtcblx0XHRPYmplY3Qua2V5cyhzdXJmYWNlcykuZm9yRWFjaChzSWQgPT4ge1xuXHRcdFx0aWYgKHN1cmZhY2VzW3NJZF0uYWN0aXZlQ2hpbGQpIHtcblx0XHRcdFx0Z2xvYmFsRXZhbC5ydW5TY3JpcHRzSW5FbGVtZW50KHN1cmZhY2VzW3NJZF0uYWN0aXZlQ2hpbGQpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdHJldHVybiBDYW5jZWxsYWJsZVByb21pc2UucmVzb2x2ZSgpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEFsbG93cyBhIHNjcmVlbiB0byBldmFsdWF0ZSBzdHlsZXMgYmVmb3JlIHRoZSBlbGVtZW50IGlzIG1hZGUgdmlzaWJsZS5cblx0ICogTGlmZWN5Y2xlLlxuXHQgKiBAcGFyYW0geyFvYmplY3R9IHN1cmZhY2VzIE1hcCBvZiBzdXJmYWNlcyB0byBmbGlwIGtleWVkIGJ5IHN1cmZhY2UgaWQuXG5cdCAqIEByZXR1cm4gez9DYW5jZWxsYWJsZVByb21pc2U9fSBUaGlzIGNhbiByZXR1cm4gYSBwcm9taXNlLCB3aGljaCB3aWxsXG5cdCAqICAgICBwYXVzZSB0aGUgbmF2aWdhdGlvbiB1bnRpbCBpdCBpcyByZXNvbHZlZC5cblx0ICovXG5cdGV2YWx1YXRlU3R5bGVzKCkge1xuXHRcdHJldHVybiBDYW5jZWxsYWJsZVByb21pc2UucmVzb2x2ZSgpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEFsbG93cyBhIHNjcmVlbiB0byBwZXJmb3JtIGFueSBzZXR1cCBpbW1lZGlhdGVseSBiZWZvcmUgdGhlIGVsZW1lbnQgaXNcblx0ICogbWFkZSB2aXNpYmxlLiBMaWZlY3ljbGUuXG5cdCAqIEBwYXJhbSB7IW9iamVjdH0gc3VyZmFjZXMgTWFwIG9mIHN1cmZhY2VzIHRvIGZsaXAga2V5ZWQgYnkgc3VyZmFjZSBpZC5cblx0ICogQHJldHVybiB7P0NhbmNlbGxhYmxlUHJvbWlzZT19IFRoaXMgY2FuIHJldHVybiBhIHByb21pc2UsIHdoaWNoIHdpbGwgcGF1c2UgdGhlXG5cdCAqICAgICBuYXZpZ2F0aW9uIHVudGlsIGl0IGlzIHJlc29sdmVkLlxuXHQgKi9cblx0ZmxpcChzdXJmYWNlcykge1xuXHRcdGNvbnNvbGUubG9nKCdTY3JlZW4gWycgKyB0aGlzICsgJ10gZmxpcCcpO1xuXG5cdFx0dmFyIHRyYW5zaXRpb25zID0gW107XG5cblx0XHRPYmplY3Qua2V5cyhzdXJmYWNlcykuZm9yRWFjaChzSWQgPT4ge1xuXHRcdFx0dmFyIHN1cmZhY2UgPSBzdXJmYWNlc1tzSWRdO1xuXHRcdFx0dmFyIGRlZmVycmVkID0gc3VyZmFjZS5zaG93KHRoaXMuaWQpO1xuXHRcdFx0dHJhbnNpdGlvbnMucHVzaChkZWZlcnJlZCk7XG5cdFx0fSk7XG5cblx0XHRyZXR1cm4gQ2FuY2VsbGFibGVQcm9taXNlLmFsbCh0cmFuc2l0aW9ucyk7XG5cdH1cblxuXHQvKipcblx0ICogR2V0cyB0aGUgc2NyZWVuIGlkLlxuXHQgKiBAcmV0dXJuIHtzdHJpbmd9XG5cdCAqL1xuXHRnZXRJZCgpIHtcblx0XHRyZXR1cm4gdGhpcy5pZDtcblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBjb250ZW50IGZvciB0aGUgZ2l2ZW4gc3VyZmFjZSwgb3IgbnVsbCBpZiB0aGUgc3VyZmFjZSBpc24ndFxuXHQgKiB1c2VkIGJ5IHRoaXMgc2NyZWVuLiBUaGlzIHdpbGwgYmUgY2FsbGVkIHdoZW4gYSBzY3JlZW4gaXMgaW5pdGlhbGx5XG5cdCAqIGNvbnN0cnVjdGVkIG9yLCBpZiBhIHNjcmVlbiBpcyBub24tY2FjaGVhYmxlLCB3aGVuIG5hdmlnYXRlZC5cblx0ICogQHBhcmFtIHshc3RyaW5nfSBzdXJmYWNlSWQgVGhlIGlkIG9mIHRoZSBzdXJmYWNlIERPTSBlbGVtZW50LlxuXHQgKiBAcGFyYW0geyFPYmplY3R9IHBhcmFtcyBQYXJhbXMgZXh0cmFjdGVkIGZyb20gdGhlIGN1cnJlbnQgcGF0aC5cblx0ICogQHJldHVybiB7P3N0cmluZ3xFbGVtZW50PX0gVGhpcyBjYW4gcmV0dXJuIGEgc3RyaW5nIG9yIG5vZGUgcmVwcmVzZW50aW5nXG5cdCAqICAgICB0aGUgY29udGVudCBvZiB0aGUgc3VyZmFjZS4gSWYgcmV0dXJucyBmYWxzeSB2YWx1ZXMgc3VyZmFjZSBkZWZhdWx0XG5cdCAqICAgICBjb250ZW50IGlzIHJlc3RvcmVkLlxuXHQgKi9cblx0Z2V0U3VyZmFjZUNvbnRlbnQoKSB7XG5cdFx0Y29uc29sZS5sb2coJ1NjcmVlbiBbJyArIHRoaXMgKyAnXSBnZXRTdXJmYWNlQ29udGVudCcpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEdldHMgdGhlIHNjcmVlbiB0aXRsZS5cblx0ICogQHJldHVybiB7P3N0cmluZz19XG5cdCAqL1xuXHRnZXRUaXRsZSgpIHtcblx0XHRyZXR1cm4gdGhpcy50aXRsZTtcblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGFsbCBjb250ZW50cyBmb3IgdGhlIHN1cmZhY2VzLiBUaGlzIHdpbGwgcGFzcyB0aGUgbG9hZGVkIGNvbnRlbnRcblx0ICogdG8gPGNvZGU+U2NyZWVuLmxvYWQ8L2NvZGU+IHdpdGggYWxsIGluZm9ybWF0aW9uIHlvdVxuXHQgKiBuZWVkIHRvIGZ1bGZpbGwgdGhlIHN1cmZhY2VzLiBMaWZlY3ljbGUuXG5cdCAqIEBwYXJhbSB7IXN0cmluZz19IHBhdGggVGhlIHJlcXVlc3RlZCBwYXRoLlxuXHQgKiBAcmV0dXJuIHshQ2FuY2VsbGFibGVQcm9taXNlfSBUaGlzIGNhbiByZXR1cm4gYSBzdHJpbmcgcmVwcmVzZW50aW5nIHRoZVxuXHQgKiAgICAgY29udGVudHMgb2YgdGhlIHN1cmZhY2VzIG9yIGEgcHJvbWlzZSwgd2hpY2ggd2lsbCBwYXVzZSB0aGUgbmF2aWdhdGlvblxuXHQgKiAgICAgdW50aWwgaXQgaXMgcmVzb2x2ZWQuIFRoaXMgaXMgdXNlZnVsIGZvciBsb2FkaW5nIGFzeW5jIGNvbnRlbnQuXG5cdCAqL1xuXHRsb2FkKCkge1xuXHRcdGNvbnNvbGUubG9nKCdTY3JlZW4gWycgKyB0aGlzICsgJ10gbG9hZCcpO1xuXHRcdHJldHVybiBDYW5jZWxsYWJsZVByb21pc2UucmVzb2x2ZSgpO1xuXHR9XG5cblx0LyoqXG5cdCAqIE1ha2VzIHRoZSBpZCBmb3IgdGhlIHNjcmVlbi5cblx0ICogQHBhcmFtIHshc3RyaW5nfSBpZCBUaGUgc2NyZWVuIGlkIHRoZSBjb250ZW50IGJlbG9uZ3MgdG9vLlxuXHQgKiBAcmV0dXJuIHtzdHJpbmd9XG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRtYWtlSWRfKGlkKSB7XG5cdFx0cmV0dXJuICdzY3JlZW5fJyArIGlkO1xuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgdGhlIHNjcmVlbiBpZC5cblx0ICogQHBhcmFtIHshc3RyaW5nfSBpZFxuXHQgKi9cblx0c2V0SWQoaWQpIHtcblx0XHR0aGlzLmlkID0gaWQ7XG5cdH1cblxuXHQvKipcblx0ICogU2V0cyB0aGUgc2NyZWVuIHRpdGxlLlxuXHQgKiBAcGFyYW0gez9zdHJpbmc9fSB0aXRsZVxuXHQgKi9cblx0c2V0VGl0bGUodGl0bGUpIHtcblx0XHR0aGlzLnRpdGxlID0gdGl0bGU7XG5cdH1cblxuXHQvKipcblx0ICogQHJldHVybiB7c3RyaW5nfVxuXHQgKi9cblx0dG9TdHJpbmcoKSB7XG5cdFx0cmV0dXJuIHRoaXMuaWQ7XG5cdH1cblxufVxuXG4vKipcbiAqIEBwYXJhbSB7Kn0gb2JqZWN0XG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIGEgZ2l2ZW4gaW5zdGFuY2UgaW1wbGVtZW50c1xuICogPGNvZGU+U2NyZWVuPC9jb2RlPi5cbiAqL1xuU2NyZWVuLmlzSW1wbGVtZW50ZWRCeSA9IGZ1bmN0aW9uKG9iamVjdCkge1xuXHRyZXR1cm4gb2JqZWN0IGluc3RhbmNlb2YgU2NyZWVuO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgU2NyZWVuO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgZ2xvYmFscyBmcm9tICcuLi9nbG9iYWxzL2dsb2JhbHMnO1xuaW1wb3J0IHsgRGlzcG9zYWJsZSwgaXNEZWZBbmROb3ROdWxsIH0gZnJvbSAnbWV0YWwnO1xuaW1wb3J0IHsgYXBwZW5kLCByZW1vdmVDaGlsZHJlbiwgZXhpdERvY3VtZW50IH0gZnJvbSAnbWV0YWwtZG9tJztcbmltcG9ydCBDYW5jZWxsYWJsZVByb21pc2UgZnJvbSAnbWV0YWwtcHJvbWlzZSc7XG5cbmNsYXNzIFN1cmZhY2UgZXh0ZW5kcyBEaXNwb3NhYmxlIHtcblxuXHQvKipcblx0ICogU3VyZmFjZSBjbGFzcyByZXByZXNlbnRpbmcgdGhlIHJlZmVyZW5jZXMgdG8gZWxlbWVudHMgb24gdGhlIHBhZ2UgdGhhdFxuXHQgKiBjYW4gcG90ZW50aWFsbHkgYmUgdXBkYXRlZCBieSA8Y29kZT5BcHA8L2NvZGU+LlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gaWRcblx0ICogQGNvbnN0cnVjdG9yXG5cdCAqL1xuXHRjb25zdHJ1Y3RvcihpZCkge1xuXHRcdHN1cGVyKCk7XG5cblx0XHRpZiAoIWlkKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ1N1cmZhY2UgZWxlbWVudCBpZCBub3Qgc3BlY2lmaWVkLiBBIHN1cmZhY2UgZWxlbWVudCByZXF1aXJlcyBhIHZhbGlkIGlkLicpO1xuXHRcdH1cblxuXHRcdC8qKlxuXHRcdCAqIEhvbGRzIHRoZSBhY3RpdmUgY2hpbGQgZWxlbWVudC5cblx0XHQgKiBAdHlwZSB7RWxlbWVudH1cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICogQHByb3RlY3RlZFxuXHRcdCAqL1xuXHRcdHRoaXMuYWN0aXZlQ2hpbGQgPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogSG9sZHMgdGhlIGRlZmF1bHQgY2hpbGQgZWxlbWVudC5cblx0XHQgKiBAdHlwZSB7RWxlbWVudH1cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICogQHByb3RlY3RlZFxuXHRcdCAqL1xuXHRcdHRoaXMuZGVmYXVsdENoaWxkID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIEhvbGRzIHRoZSBlbGVtZW50IHdpdGggdGhlIHNwZWNpZmllZCBzdXJmYWNlIGlkLCBpZiBub3QgZm91bmQgY3JlYXRlcyBhXG5cdFx0ICogbmV3IGVsZW1lbnQgd2l0aCB0aGUgc3BlY2lmaWVkIGlkLlxuXHRcdCAqIEB0eXBlIHtFbGVtZW50fVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKiBAcHJvdGVjdGVkXG5cdFx0ICovXG5cdFx0dGhpcy5lbGVtZW50ID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIEhvbGRzIHRoZSBzdXJmYWNlIGlkLlxuXHRcdCAqIEB0eXBlIHtTdHJpbmd9XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqIEBwcm90ZWN0ZWRcblx0XHQgKi9cblx0XHR0aGlzLmlkID0gaWQ7XG5cblx0XHQvKipcblx0XHQgKiBIb2xkcyB0aGUgZGVmYXVsdCB0cmFuc2l0aW9uRm4gZm9yIHRoZSBzdXJmYWNlcy5cblx0XHQgKiBAcGFyYW0gez9FbGVtZW50PX0gZnJvbSBUaGUgdmlzaWJsZSBzdXJmYWNlIGVsZW1lbnQuXG5cdFx0ICogQHBhcmFtIHs/RWxlbWVudD19IHRvIFRoZSBzdXJmYWNlIGVsZW1lbnQgdG8gYmUgZmxpcHBlZC5cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy50cmFuc2l0aW9uRm4gPSBudWxsO1xuXG5cdFx0dGhpcy5kZWZhdWx0Q2hpbGQgPSB0aGlzLmdldENoaWxkKFN1cmZhY2UuREVGQVVMVCk7XG5cdFx0dGhpcy5tYXliZVdyYXBDb250ZW50QXNEZWZhdWx0XygpO1xuXHRcdHRoaXMuYWN0aXZlQ2hpbGQgPSB0aGlzLmRlZmF1bHRDaGlsZDtcblx0fVxuXG5cdC8qKlxuXHQgKiBBZGRzIHNjcmVlbiBjb250ZW50IHRvIGEgc3VyZmFjZS4gSWYgY29udGVudCBoYXNuJ3QgYmVlbiBwYXNzZWQsIHNlZSBpZlxuXHQgKiBhbiBlbGVtZW50IGV4aXN0cyBpbiB0aGUgRE9NIHRoYXQgbWF0Y2hlcyB0aGUgaWQuIEJ5IGNvbnZlbnRpb24sIHRoZVxuXHQgKiBlbGVtZW50IHNob3VsZCBhbHJlYWR5IGJlIG5lc3RlZCBpbiB0aGUgcmlnaHQgZWxlbWVudCBhbmQgc2hvdWxkIGhhdmUgYW5cblx0ICogaWQgdGhhdCBpcyBhIGNvbmNhdGVudGF0aW9uIG9mIHRoZSBzdXJmYWNlIGlkICsgJy0nICsgdGhlIHNjcmVlbiBpZC5cblx0ICogQHBhcmFtIHshc3RyaW5nfSBzY3JlZW5JZCBUaGUgc2NyZWVuIGlkIHRoZSBjb250ZW50IGJlbG9uZ3MgdG9vLlxuXHQgKiBAcGFyYW0gez9zdHJpbmd8RWxlbWVudD19IG9wdF9jb250ZW50IFRoZSBzdHJpbmcgY29udGVudCBvciBlbGVtZW50IHRvXG5cdCAqICAgICBhZGQgYmUgYWRkZWQgYXMgc3VyZmFjZSBjb250ZW50LlxuXHQgKiBAcmV0dXJuIHtFbGVtZW50fVxuXHQgKi9cblx0YWRkQ29udGVudChzY3JlZW5JZCwgb3B0X2NvbnRlbnQpIHtcblx0XHR2YXIgY2hpbGQgPSB0aGlzLmRlZmF1bHRDaGlsZDtcblxuXHRcdGlmIChpc0RlZkFuZE5vdE51bGwob3B0X2NvbnRlbnQpKSB7XG5cdFx0XHRjaGlsZCA9IHRoaXMuZ2V0Q2hpbGQoc2NyZWVuSWQpO1xuXHRcdFx0aWYgKGNoaWxkKSB7XG5cdFx0XHRcdHJlbW92ZUNoaWxkcmVuKGNoaWxkKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGNoaWxkID0gdGhpcy5jcmVhdGVDaGlsZChzY3JlZW5JZCk7XG5cdFx0XHRcdHRoaXMudHJhbnNpdGlvbihjaGlsZCwgbnVsbCk7XG5cdFx0XHR9XG5cdFx0XHRhcHBlbmQoY2hpbGQsIG9wdF9jb250ZW50KTtcblx0XHR9XG5cblx0XHR2YXIgZWxlbWVudCA9IHRoaXMuZ2V0RWxlbWVudCgpO1xuXG5cdFx0aWYgKGVsZW1lbnQgJiYgY2hpbGQpIHtcblx0XHRcdGFwcGVuZChlbGVtZW50LCBjaGlsZCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNoaWxkO1xuXHR9XG5cblx0LyoqXG5cdCAqIENyZWF0ZXMgY2hpbGQgbm9kZSBmb3IgdGhlIHN1cmZhY2UuXG5cdCAqIEBwYXJhbSB7IXN0cmluZ30gc2NyZWVuSWQgVGhlIHNjcmVlbiBpZC5cblx0ICogQHJldHVybiB7RWxlbWVudH1cblx0ICovXG5cdGNyZWF0ZUNoaWxkKHNjcmVlbklkKSB7XG5cdFx0dmFyIGNoaWxkID0gZ2xvYmFscy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblx0XHRjaGlsZC5zZXRBdHRyaWJ1dGUoJ2lkJywgdGhpcy5tYWtlSWRfKHNjcmVlbklkKSk7XG5cdFx0cmV0dXJuIGNoaWxkO1xuXHR9XG5cblx0LyoqXG5cdCAqIEdldHMgY2hpbGQgbm9kZSBvZiB0aGUgc3VyZmFjZS5cblx0ICogQHBhcmFtIHshc3RyaW5nfSBzY3JlZW5JZCBUaGUgc2NyZWVuIGlkLlxuXHQgKiBAcmV0dXJuIHs/RWxlbWVudH1cblx0ICovXG5cdGdldENoaWxkKHNjcmVlbklkKSB7XG5cdFx0cmV0dXJuIGdsb2JhbHMuZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodGhpcy5tYWtlSWRfKHNjcmVlbklkKSk7XG5cdH1cblxuXHQvKipcblx0ICogR2V0cyB0aGUgc3VyZmFjZSBlbGVtZW50IGZyb20gZWxlbWVudCwgYW5kIHNldHMgaXQgdG8gdGhlIGVsIHByb3BlcnR5IG9mXG5cdCAqIHRoZSBjdXJyZW50IGluc3RhbmNlLlxuXHQgKiA8Y29kZT50aGlzLmVsZW1lbnQ8L2NvZGU+IHdpbGwgYmUgdXNlZC5cblx0ICogQHJldHVybiB7P0VsZW1lbnR9IFRoZSBjdXJyZW50IHN1cmZhY2UgZWxlbWVudC5cblx0ICovXG5cdGdldEVsZW1lbnQoKSB7XG5cdFx0aWYgKHRoaXMuZWxlbWVudCkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWxlbWVudDtcblx0XHR9XG5cdFx0dGhpcy5lbGVtZW50ID0gZ2xvYmFscy5kb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0aGlzLmlkKTtcblx0XHRyZXR1cm4gdGhpcy5lbGVtZW50O1xuXHR9XG5cblx0LyoqXG5cdCAqIEdldHMgdGhlIHN1cmZhY2UgaWQuXG5cdCAqIEByZXR1cm4ge1N0cmluZ31cblx0ICovXG5cdGdldElkKCkge1xuXHRcdHJldHVybiB0aGlzLmlkO1xuXHR9XG5cblx0LyoqXG5cdCAqIEdldHMgdGhlIHN1cmZhY2UgdHJhbnNpdGlvbiBmdW5jdGlvbi5cblx0ICogU2VlIDxjb2RlPlN1cmZhY2UuZGVmYXVsdFRyYW5zaXRpb248L2NvZGU+LlxuXHQgKiBAcmV0dXJuIHs/RnVuY3Rpb249fSBUaGUgdHJhbnNpdGlvbiBmdW5jdGlvbi5cblx0ICovXG5cdGdldFRyYW5zaXRpb25GbigpIHtcblx0XHRyZXR1cm4gdGhpcy50cmFuc2l0aW9uRm47XG5cdH1cblxuXHQvKipcblx0ICogTWFrZXMgdGhlIGlkIGZvciB0aGUgZWxlbWVudCB0aGF0IGhvbGRzIGNvbnRlbnQgZm9yIGEgc2NyZWVuLlxuXHQgKiBAcGFyYW0geyFzdHJpbmd9IHNjcmVlbklkIFRoZSBzY3JlZW4gaWQgdGhlIGNvbnRlbnQgYmVsb25ncyB0b28uXG5cdCAqIEByZXR1cm4ge1N0cmluZ31cblx0ICogQHByaXZhdGVcblx0ICovXG5cdG1ha2VJZF8oc2NyZWVuSWQpIHtcblx0XHRyZXR1cm4gdGhpcy5pZCArICctJyArIHNjcmVlbklkO1xuXHR9XG5cblx0LyoqXG5cdCAqIElmIGRlZmF1bHQgY2hpbGQgaXMgbWlzc2luZywgd3JhcHMgc3VyZmFjZSBjb250ZW50IGFzIGRlZmF1bHQgY2hpbGQuIElmXG5cdCAqIHN1cmZhY2UgaGF2ZSBzdGF0aWMgY29udGVudCwgbWFrZSBzdXJlIHRvIHBsYWNlIGFcblx0ICogPGNvZGU+c3VyZmFjZUlkLWRlZmF1bHQ8L2NvZGU+IGVsZW1lbnQgaW5zaWRlIHN1cmZhY2UsIG9ubHkgY29udGVudHNcblx0ICogaW5zaWRlIHRoZSBkZWZhdWx0IGNoaWxkIHdpbGwgYmUgcmVwbGFjZWQgYnkgbmF2aWdhdGlvbi5cblx0ICovXG5cdG1heWJlV3JhcENvbnRlbnRBc0RlZmF1bHRfKCkge1xuXHRcdHZhciBlbGVtZW50ID0gdGhpcy5nZXRFbGVtZW50KCk7XG5cdFx0aWYgKGVsZW1lbnQgJiYgIXRoaXMuZGVmYXVsdENoaWxkKSB7XG5cdFx0XHR2YXIgZnJhZ21lbnQgPSBnbG9iYWxzLmRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcblx0XHRcdHdoaWxlIChlbGVtZW50LmZpcnN0Q2hpbGQpIHtcblx0XHRcdFx0ZnJhZ21lbnQuYXBwZW5kQ2hpbGQoZWxlbWVudC5maXJzdENoaWxkKTtcblx0XHRcdH1cblx0XHRcdHRoaXMuZGVmYXVsdENoaWxkID0gdGhpcy5hZGRDb250ZW50KFN1cmZhY2UuREVGQVVMVCwgZnJhZ21lbnQpO1xuXHRcdFx0dGhpcy50cmFuc2l0aW9uKG51bGwsIHRoaXMuZGVmYXVsdENoaWxkKTtcblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogU2V0cyB0aGUgc3VyZmFjZSBpZC5cblx0ICogQHBhcmFtIHshc3RyaW5nfSBpZFxuXHQgKi9cblx0c2V0SWQoaWQpIHtcblx0XHR0aGlzLmlkID0gaWQ7XG5cdH1cblxuXHQvKipcblx0ICogU2V0cyB0aGUgc3VyZmFjZSB0cmFuc2l0aW9uIGZ1bmN0aW9uLlxuXHQgKiBTZWUgPGNvZGU+U3VyZmFjZS5kZWZhdWx0VHJhbnNpdGlvbjwvY29kZT4uXG5cdCAqIEBwYXJhbSB7P0Z1bmN0aW9uPX0gdHJhbnNpdGlvbkZuIFRoZSB0cmFuc2l0aW9uIGZ1bmN0aW9uLlxuXHQgKi9cblx0c2V0VHJhbnNpdGlvbkZuKHRyYW5zaXRpb25Gbikge1xuXHRcdHRoaXMudHJhbnNpdGlvbkZuID0gdHJhbnNpdGlvbkZuO1xuXHR9XG5cblx0LyoqXG5cdCAqIFNob3dzIHNjcmVlbiBjb250ZW50IGZyb20gYSBzdXJmYWNlLlxuXHQgKiBAcGFyYW0ge1N0cmluZ30gc2NyZWVuSWQgVGhlIHNjcmVlbiBpZCB0byBzaG93LlxuXHQgKiBAcmV0dXJuIHtDYW5jZWxsYWJsZVByb21pc2V9IFBhdXNlcyB0aGUgbmF2aWdhdGlvbiB1bnRpbCBpdCBpcyByZXNvbHZlZC5cblx0ICovXG5cdHNob3coc2NyZWVuSWQpIHtcblx0XHR2YXIgZnJvbSA9IHRoaXMuYWN0aXZlQ2hpbGQ7XG5cdFx0dmFyIHRvID0gdGhpcy5nZXRDaGlsZChzY3JlZW5JZCk7XG5cdFx0aWYgKCF0bykge1xuXHRcdFx0dG8gPSB0aGlzLmRlZmF1bHRDaGlsZDtcblx0XHR9XG5cdFx0dGhpcy5hY3RpdmVDaGlsZCA9IHRvO1xuXHRcdHJldHVybiB0aGlzLnRyYW5zaXRpb24oZnJvbSwgdG8pLnRoZW5BbHdheXMoKCkgPT4ge1xuXHRcdFx0aWYgKGZyb20gJiYgZnJvbSAhPT0gdG8pIHtcblx0XHRcdFx0ZXhpdERvY3VtZW50KGZyb20pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG5cblx0LyoqXG5cdCAqIFJlbW92ZXMgc2NyZWVuIGNvbnRlbnQgZnJvbSBhIHN1cmZhY2UuXG5cdCAqIEBwYXJhbSB7IXN0cmluZ30gc2NyZWVuSWQgVGhlIHNjcmVlbiBpZCB0byByZW1vdmUuXG5cdCAqL1xuXHRyZW1vdmUoc2NyZWVuSWQpIHtcblx0XHR2YXIgY2hpbGQgPSB0aGlzLmdldENoaWxkKHNjcmVlbklkKTtcblx0XHRpZiAoY2hpbGQpIHtcblx0XHRcdGV4aXREb2N1bWVudChjaGlsZCk7XG5cdFx0fVxuXHR9XG5cblx0LyoqXG5cdCAqIEByZXR1cm4ge1N0cmluZ31cblx0ICovXG5cdHRvU3RyaW5nKCkge1xuXHRcdHJldHVybiB0aGlzLmlkO1xuXHR9XG5cblx0LyoqXG5cdCAqIEludm9rZXMgdGhlIHRyYW5zaXRpb24gZnVuY3Rpb24gc3BlY2lmaWVkIG9uIDxjb2RlPnRyYW5zaXRpb248L2NvZGU+IGF0dHJpYnV0ZS5cblx0ICogQHBhcmFtIHs/RWxlbWVudD19IGZyb21cblx0ICogQHBhcmFtIHs/RWxlbWVudD19IHRvXG5cdCAqIEByZXR1cm4gez9DYW5jZWxsYWJsZVByb21pc2U9fSBUaGlzIGNhbiByZXR1cm4gYSBwcm9taXNlLCB3aGljaCB3aWxsIHBhdXNlIHRoZVxuXHQgKiAgICAgbmF2aWdhdGlvbiB1bnRpbCBpdCBpcyByZXNvbHZlZC5cblx0ICovXG5cdHRyYW5zaXRpb24oZnJvbSwgdG8pIHtcblx0XHR2YXIgdHJhbnNpdGlvbkZuID0gdGhpcy50cmFuc2l0aW9uRm4gfHwgU3VyZmFjZS5kZWZhdWx0VHJhbnNpdGlvbjtcblx0XHRyZXR1cm4gQ2FuY2VsbGFibGVQcm9taXNlLnJlc29sdmUodHJhbnNpdGlvbkZuLmNhbGwodGhpcywgZnJvbSwgdG8pKTtcblx0fVxuXG59XG5cbi8qKlxuICAgKiBIb2xkcyB0aGUgZGVmYXVsdCBzdXJmYWNlIG5hbWUuIEVsZW1lbnRzIG9uIHRoZSBwYWdlIG11c3QgY29udGFpbiBhIGNoaWxkXG4gICAqIGVsZW1lbnQgY29udGFpbmluZyB0aGUgZGVmYXVsdCBjb250ZW50LCB0aGlzIGVsZW1lbnQgbXVzdCBiZSBhcyBmb2xsb3dpbmc6XG4gICAqXG4gICAqIEV4YW1wbGU6XG4gICAqIDxjb2RlPlxuICAgKiAgIDxkaXYgaWQ9XCJteXN1cmZhY2VcIj5cbiAgICogICAgIDxkaXYgaWQ9XCJteXN1cmZhY2UtZGVmYXVsdFwiPkRlZmF1bHQgc3VyZmFjZSBjb250ZW50LjwvZGl2PlxuICAgKiAgIDwvZGl2PlxuICAgKiA8L2NvZGU+XG4gICAqXG4gICAqIFRoZSBkZWZhdWx0IGNvbnRlbnQgaXMgcmVsZXZhbnQgZm9yIHRoZSBpbml0aWFsIHBhZ2UgY29udGVudC4gV2hlbiBhXG4gICAqIHNjcmVlbiBkb2Vzbid0IHByb3ZpZGUgY29udGVudCBmb3IgdGhlIHN1cmZhY2UgdGhlIGRlZmF1bHQgY29udGVudCBpc1xuICAgKiByZXN0b3JlZCBpbnRvIHRoZSBwYWdlLlxuICAgKlxuICAgKiBAdHlwZSB7IVN0cmluZ31cbiAgICogQGRlZmF1bHQgZGVmYXVsdFxuICAgKiBAc3RhdGljXG4gICAqL1xuU3VyZmFjZS5ERUZBVUxUID0gJ2RlZmF1bHQnO1xuXG4vKipcbiAqIEhvbGRzIHRoZSBkZWZhdWx0IHRyYW5zaXRpb24gZm9yIGFsbCBzdXJmYWNlcy4gRWFjaCBzdXJmYWNlIGNvdWxkIGhhdmUgaXRzXG4gKiBvd24gdHJhbnNpdGlvbi5cbiAqXG4gKiBFeGFtcGxlOlxuICpcbiAqIDxjb2RlPlxuICogc3VyZmFjZS5zZXRUcmFuc2l0aW9uRm4oZnVuY3Rpb24oZnJvbSwgdG8pIHtcbiAqICAgaWYgKGZyb20pIHtcbiAqICAgICBmcm9tLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gKiAgICAgZnJvbS5jbGFzc0xpc3QucmVtb3ZlKCdmbGlwcGVkJyk7XG4gKiAgIH1cbiAqICAgaWYgKHRvKSB7XG4gKiAgICAgdG8uc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG4gKiAgICAgdG8uY2xhc3NMaXN0LmFkZCgnZmxpcHBlZCcpO1xuICogICB9XG4gKiAgIHJldHVybiBudWxsO1xuICogfSk7XG4gKiA8L2NvZGU+XG4gKlxuICogQHBhcmFtIHs/RWxlbWVudD19IGZyb20gVGhlIHZpc2libGUgc3VyZmFjZSBlbGVtZW50LlxuICogQHBhcmFtIHs/RWxlbWVudD19IHRvIFRoZSBzdXJmYWNlIGVsZW1lbnQgdG8gYmUgZmxpcHBlZC5cbiAqIEBzdGF0aWNcbiAqL1xuU3VyZmFjZS5kZWZhdWx0VHJhbnNpdGlvbiA9IGZ1bmN0aW9uKGZyb20sIHRvKSB7XG5cdGlmIChmcm9tKSB7XG5cdFx0ZnJvbS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuXHRcdGZyb20uY2xhc3NMaXN0LnJlbW92ZSgnZmxpcHBlZCcpO1xuXHR9XG5cdGlmICh0bykge1xuXHRcdHRvLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuXHRcdHRvLmNsYXNzTGlzdC5hZGQoJ2ZsaXBwZWQnKTtcblx0fVxufTtcblxuZXhwb3J0IGRlZmF1bHQgU3VyZmFjZTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHsgYWRkQ2xhc3NlcywgZGVsZWdhdGUsIG1hdGNoLCBvbiwgcmVtb3ZlQ2xhc3NlcyB9IGZyb20gJ21ldGFsLWRvbSc7XG5pbXBvcnQgeyBhcnJheSwgYXN5bmMsIGlzRGVmQW5kTm90TnVsbCwgaXNTdHJpbmcgfSBmcm9tICdtZXRhbCc7XG5pbXBvcnQgeyBFdmVudEVtaXR0ZXIsIEV2ZW50SGFuZGxlciB9IGZyb20gJ21ldGFsLWV2ZW50cyc7XG5pbXBvcnQgQ2FuY2VsbGFibGVQcm9taXNlIGZyb20gJ21ldGFsLXByb21pc2UnO1xuaW1wb3J0IGRlYm91bmNlIGZyb20gJ21ldGFsLWRlYm91bmNlJztcbmltcG9ydCBnbG9iYWxzIGZyb20gJy4uL2dsb2JhbHMvZ2xvYmFscyc7XG5pbXBvcnQgUm91dGUgZnJvbSAnLi4vcm91dGUvUm91dGUnO1xuaW1wb3J0IFNjcmVlbiBmcm9tICcuLi9zY3JlZW4vU2NyZWVuJztcbmltcG9ydCBTdXJmYWNlIGZyb20gJy4uL3N1cmZhY2UvU3VyZmFjZSc7XG5pbXBvcnQgVXJpIGZyb20gJ21ldGFsLXVyaSc7XG5pbXBvcnQgdXRpbHMgZnJvbSAnLi4vdXRpbHMvdXRpbHMnO1xuXG5jbGFzcyBBcHAgZXh0ZW5kcyBFdmVudEVtaXR0ZXIge1xuXG5cdC8qKlxuXHQgKiBBcHAgY2xhc3MgdGhhdCBoYW5kbGUgcm91dGVzIGFuZCBzY3JlZW5zIGxpZmVjeWNsZS5cblx0ICogQGNvbnN0cnVjdG9yXG5cdCAqIEBleHRlbmRzIHtFdmVudEVtaXR0ZXJ9XG5cdCAqL1xuXHRjb25zdHJ1Y3RvcigpIHtcblx0XHRzdXBlcigpO1xuXG5cdFx0LyoqXG5cdFx0ICogSG9sZHMgdGhlIGFjdGl2ZSBzY3JlZW4uXG5cdFx0ICogQHR5cGUgez9TY3JlZW59XG5cdFx0ICogQHByb3RlY3RlZFxuXHRcdCAqL1xuXHRcdHRoaXMuYWN0aXZlU2NyZWVuID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIEhvbGRzIHRoZSBhY3RpdmUgcGF0aCBjb250YWluaW5nIHRoZSBxdWVyeSBwYXJhbWV0ZXJzLlxuXHRcdCAqIEB0eXBlIHs/c3RyaW5nfVxuXHRcdCAqIEBwcm90ZWN0ZWRcblx0XHQgKi9cblx0XHR0aGlzLmFjdGl2ZVBhdGggPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogQWxsb3dzIHByZXZlbnQgbmF2aWdhdGUgZnJvbSBkb20gcHJldmVudGVkIGV2ZW50LlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEBkZWZhdWx0IHRydWVcblx0XHQgKiBAcHJvdGVjdGVkXG5cdFx0ICovXG5cdFx0dGhpcy5hbGxvd1ByZXZlbnROYXZpZ2F0ZSA9IHRydWU7XG5cblx0XHQvKipcblx0XHQgKiBIb2xkcyBsaW5rIGJhc2UgcGF0aC5cblx0XHQgKiBAdHlwZSB7IXN0cmluZ31cblx0XHQgKiBAZGVmYXVsdCAnJ1xuXHRcdCAqIEBwcm90ZWN0ZWRcblx0XHQgKi9cblx0XHR0aGlzLmJhc2VQYXRoID0gJyc7XG5cblx0XHQvKipcblx0XHQgKiBIb2xkcyB0aGUgdmFsdWUgb2YgdGhlIGJyb3dzZXIgcGF0aCBiZWZvcmUgYSBuYXZpZ2F0aW9uIGlzIHBlcmZvcm1lZC5cblx0XHQgKiBAdHlwZSB7IXN0cmluZ31cblx0XHQgKiBAZGVmYXVsdCB0aGUgY3VycmVudCBicm93c2VyIHBhdGguXG5cdFx0ICogQHByb3RlY3RlZFxuXHRcdCAqL1xuXHRcdHRoaXMuYnJvd3NlclBhdGhCZWZvcmVOYXZpZ2F0ZSA9IHV0aWxzLmdldEN1cnJlbnRCcm93c2VyUGF0aFdpdGhvdXRIYXNoKCk7XG5cblx0XHQvKipcblx0XHQgKiBDYXB0dXJlcyBzY3JvbGwgcG9zaXRpb24gZnJvbSBzY3JvbGwgZXZlbnQuXG5cdFx0ICogQHR5cGUgeyFib29sZWFufVxuXHRcdCAqIEBkZWZhdWx0IHRydWVcblx0XHQgKiBAcHJvdGVjdGVkXG5cdFx0ICovXG5cdFx0dGhpcy5jYXB0dXJlU2Nyb2xsUG9zaXRpb25Gcm9tU2Nyb2xsRXZlbnQgPSB0cnVlO1xuXG5cdFx0LyoqXG5cdFx0ICogSG9sZHMgdGhlIGRlZmF1bHQgcGFnZSB0aXRsZS5cblx0XHQgKiBAdHlwZSB7c3RyaW5nfVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKiBAcHJvdGVjdGVkXG5cdFx0ICovXG5cdFx0dGhpcy5kZWZhdWx0VGl0bGUgPSBnbG9iYWxzLmRvY3VtZW50LnRpdGxlO1xuXG5cdFx0LyoqXG5cdFx0ICogSG9sZHMgdGhlIGZvcm0gc2VsZWN0b3IgdG8gZGVmaW5lIGZvcm1zIHRoYXQgYXJlIHJvdXRlZC5cblx0XHQgKiBAdHlwZSB7IXN0cmluZ31cblx0XHQgKiBAZGVmYXVsdCBmb3JtW2VuY3R5cGU9XCJtdWx0aXBhcnQvZm9ybS1kYXRhXCJdOm5vdChbZGF0YS1zZW5uYS1vZmZdKVxuXHRcdCAqIEBwcm90ZWN0ZWRcblx0XHQgKi9cblx0XHR0aGlzLmZvcm1TZWxlY3RvciA9ICdmb3JtW2VuY3R5cGU9XCJtdWx0aXBhcnQvZm9ybS1kYXRhXCJdOm5vdChbZGF0YS1zZW5uYS1vZmZdKSc7XG5cblx0XHQvKipcblx0XHQgKiBXaGVuIGVuYWJsZWQsIHRoZSByb3V0ZSBtYXRjaGluZyBpZ25vcmVzIHF1ZXJ5IHN0cmluZyBmcm9tIHRoZSBwYXRoLlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEBkZWZhdWx0IGZhbHNlXG5cdFx0ICogQHByb3RlY3RlZFxuXHRcdCAqL1xuXHRcdHRoaXMuaWdub3JlUXVlcnlTdHJpbmdGcm9tUm91dGVQYXRoID0gZmFsc2U7XG5cblx0XHQvKipcblx0XHQgKiBIb2xkcyB0aGUgbGluayBzZWxlY3RvciB0byBkZWZpbmUgbGlua3MgdGhhdCBhcmUgcm91dGVkLlxuXHRcdCAqIEB0eXBlIHshc3RyaW5nfVxuXHRcdCAqIEBkZWZhdWx0IGE6bm90KFtkYXRhLXNlbm5hLW9mZl0pXG5cdFx0ICogQHByb3RlY3RlZFxuXHRcdCAqL1xuXHRcdHRoaXMubGlua1NlbGVjdG9yID0gJ2E6bm90KFtkYXRhLXNlbm5hLW9mZl0pOm5vdChbdGFyZ2V0PVwiX2JsYW5rXCJdKSc7XG5cblx0XHQvKipcblx0XHQgKiBIb2xkcyB0aGUgbG9hZGluZyBjc3MgY2xhc3MuXG5cdFx0ICogQHR5cGUgeyFzdHJpbmd9XG5cdFx0ICogQGRlZmF1bHQgc2VubmEtbG9hZGluZ1xuXHRcdCAqIEBwcm90ZWN0ZWRcblx0XHQgKi9cblx0XHR0aGlzLmxvYWRpbmdDc3NDbGFzcyA9ICdzZW5uYS1sb2FkaW5nJztcblxuXHRcdC8qKlxuXHRcdCAqIFVzaW5nIHRoZSBIaXN0b3J5IEFQSSB0byBtYW5hZ2UgeW91ciBVUkxzIGlzIGF3ZXNvbWUgYW5kLCBhcyBpdCBoYXBwZW5zLFxuXHRcdCAqIGEgY3J1Y2lhbCBmZWF0dXJlIG9mIGdvb2Qgd2ViIGFwcHMuIE9uZSBvZiBpdHMgZG93bnNpZGVzLCBob3dldmVyLCBpc1xuXHRcdCAqIHRoYXQgc2Nyb2xsIHBvc2l0aW9ucyBhcmUgc3RvcmVkIGFuZCB0aGVuLCBtb3JlIGltcG9ydGFudGx5LCByZXN0b3JlZFxuXHRcdCAqIHdoZW5ldmVyIHlvdSB0cmF2ZXJzZSB0aGUgaGlzdG9yeS4gVGhpcyBvZnRlbiBtZWFucyB1bnNpZ2h0bHkganVtcHMgYXNcblx0XHQgKiB0aGUgc2Nyb2xsIHBvc2l0aW9uIGNoYW5nZXMgYXV0b21hdGljYWxseSwgYW5kIGVzcGVjaWFsbHkgc28gaWYgeW91ciBhcHBcblx0XHQgKiBkb2VzIHRyYW5zaXRpb25zLCBvciBjaGFuZ2VzIHRoZSBjb250ZW50cyBvZiB0aGUgcGFnZSBpbiBhbnkgd2F5LlxuXHRcdCAqIFVsdGltYXRlbHkgdGhpcyBsZWFkcyB0byBhbiBob3JyaWJsZSB1c2VyIGV4cGVyaWVuY2UuIFRoZSBnb29kIG5ld3MgaXMsXG5cdFx0ICogaG93ZXZlciwgdGhhdCB0aGVyZeKAmXMgYSBwb3RlbnRpYWwgZml4OiBoaXN0b3J5LnNjcm9sbFJlc3RvcmF0aW9uLlxuXHRcdCAqIGh0dHBzOi8vZGV2ZWxvcGVycy5nb29nbGUuY29tL3dlYi91cGRhdGVzLzIwMTUvMDkvaGlzdG9yeS1hcGktc2Nyb2xsLXJlc3RvcmF0aW9uXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQHByb3RlY3RlZFxuXHRcdCAqL1xuXHRcdHRoaXMubmF0aXZlU2Nyb2xsUmVzdG9yYXRpb25TdXBwb3J0ZWQgPSAoJ3Njcm9sbFJlc3RvcmF0aW9uJyBpbiBnbG9iYWxzLndpbmRvdy5oaXN0b3J5KTtcblxuXHRcdC8qKlxuXHRcdCAqIFdoZW4gc2V0IHRvIHRydWUgdGhlcmUgaXMgYSBwZW5kaW5nTmF2aWdhdGUgdGhhdCBoYXMgbm90IHlldCBiZWVuXG5cdFx0ICogcmVzb2x2ZWQgb3IgcmVqZWN0ZWQuXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQGRlZmF1bHQgZmFsc2Vcblx0XHQgKiBAcHJvdGVjdGVkXG5cdFx0ICovXG5cdFx0dGhpcy5pc05hdmlnYXRpb25QZW5kaW5nID0gZmFsc2U7XG5cblx0XHQvKipcblx0XHQgKiBIb2xkcyBhIGRlZmVycmVkIHdpdGggdGhlIGN1cnJlbnQgbmF2aWdhdGlvbi5cblx0XHQgKiBAdHlwZSB7P0NhbmNlbGxhYmxlUHJvbWlzZX1cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICogQHByb3RlY3RlZFxuXHRcdCAqL1xuXHRcdHRoaXMucGVuZGluZ05hdmlnYXRlID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIEhvbGRzIHRoZSB3aW5kb3cgaG9yaXpvbnRhbCBzY3JvbGwgcG9zaXRpb24gd2hlbiB0aGUgbmF2aWdhdGlvbiB1c2luZ1xuXHRcdCAqIGJhY2sgb3IgZm9yd2FyZCBoYXBwZW5zIHRvIGJlIHJlc3RvcmVkIGFmdGVyIHRoZSBzdXJmYWNlcyBhcmUgdXBkYXRlZC5cblx0XHQgKiBAdHlwZSB7IU51bWJlcn1cblx0XHQgKiBAZGVmYXVsdCAwXG5cdFx0ICogQHByb3RlY3RlZFxuXHRcdCAqL1xuXHRcdHRoaXMucG9wc3RhdGVTY3JvbGxMZWZ0ID0gMDtcblxuXHRcdC8qKlxuXHRcdCAqIEhvbGRzIHRoZSB3aW5kb3cgdmVydGljYWwgc2Nyb2xsIHBvc2l0aW9uIHdoZW4gdGhlIG5hdmlnYXRpb24gdXNpbmdcblx0XHQgKiBiYWNrIG9yIGZvcndhcmQgaGFwcGVucyB0byBiZSByZXN0b3JlZCBhZnRlciB0aGUgc3VyZmFjZXMgYXJlIHVwZGF0ZWQuXG5cdFx0ICogQHR5cGUgeyFOdW1iZXJ9XG5cdFx0ICogQGRlZmF1bHQgMFxuXHRcdCAqIEBwcm90ZWN0ZWRcblx0XHQgKi9cblx0XHR0aGlzLnBvcHN0YXRlU2Nyb2xsVG9wID0gMDtcblxuXHRcdC8qKlxuXHRcdCAqIEhvbGRzIHRoZSByZWRpcmVjdCBwYXRoIGNvbnRhaW5pbmcgdGhlIHF1ZXJ5IHBhcmFtZXRlcnMuXG5cdFx0ICogQHR5cGUgez9zdHJpbmd9XG5cdFx0ICogQHByb3RlY3RlZFxuXHRcdCAqL1xuXHRcdHRoaXMucmVkaXJlY3RQYXRoID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIEhvbGRzIHRoZSBzY3JlZW4gcm91dGVzIGNvbmZpZ3VyYXRpb24uXG5cdFx0ICogQHR5cGUgez9BcnJheX1cblx0XHQgKiBAZGVmYXVsdCBbXVxuXHRcdCAqIEBwcm90ZWN0ZWRcblx0XHQgKi9cblx0XHR0aGlzLnJvdXRlcyA9IFtdO1xuXG5cdFx0LyoqXG5cdFx0ICogTWFwcyB0aGUgc2NyZWVuIGluc3RhbmNlcyBieSB0aGUgdXJsIGNvbnRhaW5pbmcgdGhlIHBhcmFtZXRlcnMuXG5cdFx0ICogQHR5cGUgez9PYmplY3R9XG5cdFx0ICogQGRlZmF1bHQge31cblx0XHQgKiBAcHJvdGVjdGVkXG5cdFx0ICovXG5cdFx0dGhpcy5zY3JlZW5zID0ge307XG5cblx0XHQvKipcblx0XHQgKiBXaGVuIHNldCB0byB0cnVlIHRoZSBmaXJzdCBlcnJvbmVvdXMgcG9wc3RhdGUgZmlyZWQgb24gcGFnZSBsb2FkIHdpbGwgYmVcblx0XHQgKiBpZ25vcmVkLCBvbmx5IGlmIDxjb2RlPmdsb2JhbHMud2luZG93Lmhpc3Rvcnkuc3RhdGU8L2NvZGU+IGlzIGFsc29cblx0XHQgKiA8Y29kZT5udWxsPC9jb2RlPi5cblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAZGVmYXVsdCBmYWxzZVxuXHRcdCAqIEBwcm90ZWN0ZWRcblx0XHQgKi9cblx0XHR0aGlzLnNraXBMb2FkUG9wc3RhdGUgPSBmYWxzZTtcblxuXHRcdC8qKlxuXHRcdCAqIE1hcHMgdGhhdCBpbmRleCB0aGUgc3VyZmFjZXMgaW5zdGFuY2VzIGJ5IHRoZSBzdXJmYWNlIGlkLlxuXHRcdCAqIEB0eXBlIHs/T2JqZWN0fVxuXHRcdCAqIEBkZWZhdWx0IHt9XG5cdFx0ICogQHByb3RlY3RlZFxuXHRcdCAqL1xuXHRcdHRoaXMuc3VyZmFjZXMgPSB7fTtcblxuXHRcdC8qKlxuXHRcdCAqIFdoZW4gc2V0IHRvIHRydWUsIG1vdmVzIHRoZSBzY3JvbGwgcG9zaXRpb24gYWZ0ZXIgcG9wc3RhdGUsIG9yIHRvIHRoZVxuXHRcdCAqIHRvcCBvZiB0aGUgdmlld3BvcnQgZm9yIG5ldyBuYXZpZ2F0aW9uLiBJZiBmYWxzZSwgdGhlIGJyb3dzZXIgd2lsbFxuXHRcdCAqIHRha2UgY2FyZSBvZiBzY3JvbGwgcmVzdG9yYXRpb24uXG5cdFx0ICogQHR5cGUgeyFib29sZWFufVxuXHRcdCAqIEBkZWZhdWx0IHRydWVcblx0XHQgKiBAcHJvdGVjdGVkXG5cdFx0ICovXG5cdFx0dGhpcy51cGRhdGVTY3JvbGxQb3NpdGlvbiA9IHRydWU7XG5cblx0XHR0aGlzLmFwcEV2ZW50SGFuZGxlcnNfID0gbmV3IEV2ZW50SGFuZGxlcigpO1xuXG5cdFx0dGhpcy5hcHBFdmVudEhhbmRsZXJzXy5hZGQoXG5cdFx0XHRvbihnbG9iYWxzLndpbmRvdywgJ3Njcm9sbCcsIGRlYm91bmNlKHRoaXMub25TY3JvbGxfLmJpbmQodGhpcyksIDEwMCkpLFxuXHRcdFx0b24oZ2xvYmFscy53aW5kb3csICdsb2FkJywgdGhpcy5vbkxvYWRfLmJpbmQodGhpcykpLFxuXHRcdFx0b24oZ2xvYmFscy53aW5kb3csICdwb3BzdGF0ZScsIHRoaXMub25Qb3BzdGF0ZV8uYmluZCh0aGlzKSlcblx0XHQpO1xuXG5cdFx0dGhpcy5vbignc3RhcnROYXZpZ2F0ZScsIHRoaXMub25TdGFydE5hdmlnYXRlXyk7XG5cdFx0dGhpcy5vbignYmVmb3JlTmF2aWdhdGUnLCB0aGlzLm9uQmVmb3JlTmF2aWdhdGVfKTtcblx0XHR0aGlzLm9uKCdiZWZvcmVOYXZpZ2F0ZScsIHRoaXMub25CZWZvcmVOYXZpZ2F0ZURlZmF1bHRfLCB0cnVlKTtcblx0XHR0aGlzLm9uKCdiZWZvcmVVbmxvYWQnLCB0aGlzLm9uQmVmb3JlVW5sb2FkRGVmYXVsdF8pO1xuXG5cdFx0dGhpcy5zZXRMaW5rU2VsZWN0b3IodGhpcy5saW5rU2VsZWN0b3IpO1xuXHRcdHRoaXMuc2V0Rm9ybVNlbGVjdG9yKHRoaXMuZm9ybVNlbGVjdG9yKTtcblxuXHRcdHRoaXMubWF5YmVPdmVybG9hZEJlZm9yZVVubG9hZF8oKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBBZGRzIG9uZSBvciBtb3JlIHNjcmVlbnMgdG8gdGhlIGFwcGxpY2F0aW9uLlxuXHQgKlxuXHQgKiBFeGFtcGxlOlxuXHQgKlxuXHQgKiA8Y29kZT5cblx0ICogICBhcHAuYWRkUm91dGVzKHsgcGF0aDogJy9mb28nLCBoYW5kbGVyOiBGb29TY3JlZW4gfSk7XG5cdCAqICAgb3Jcblx0ICogICBhcHAuYWRkUm91dGVzKFt7IHBhdGg6ICcvZm9vJywgaGFuZGxlcjogZnVuY3Rpb24ocm91dGUpIHsgcmV0dXJuIG5ldyBGb29TY3JlZW4oKTsgfSB9XSk7XG5cdCAqIDwvY29kZT5cblx0ICpcblx0ICogQHBhcmFtIHtPYmplY3R9IG9yIHtBcnJheX0gcm91dGVzIFNpbmdsZSBvYmplY3Qgb3IgYW4gYXJyYXkgb2Ygb2JqZWN0LlxuXHQgKiAgICAgRWFjaCBvYmplY3Qgc2hvdWxkIGNvbnRhaW4gPGNvZGU+cGF0aDwvY29kZT4gYW5kIDxjb2RlPnNjcmVlbjwvY29kZT4uXG5cdCAqICAgICBUaGUgPGNvZGU+cGF0aDwvY29kZT4gc2hvdWxkIGJlIGEgc3RyaW5nIG9yIGEgcmVnZXggdGhhdCBtYXBzIHRoZVxuXHQgKiAgICAgbmF2aWdhdGlvbiByb3V0ZSB0byBhIHNjcmVlbiBjbGFzcyBkZWZpbml0aW9uIChub3QgYW4gaW5zdGFuY2UpLCBlLmc6XG5cdCAqICAgICAgICAgPGNvZGU+eyBwYXRoOiBcIi9ob21lOnBhcmFtMVwiLCBoYW5kbGVyOiBNeVNjcmVlbiB9PC9jb2RlPlxuXHQgKiAgICAgICAgIDxjb2RlPnsgcGF0aDogL2Zvby4rLywgaGFuZGxlcjogTXlTY3JlZW4gfTwvY29kZT5cblx0ICogQGNoYWluYWJsZVxuXHQgKi9cblx0YWRkUm91dGVzKHJvdXRlcykge1xuXHRcdGlmICghQXJyYXkuaXNBcnJheShyb3V0ZXMpKSB7XG5cdFx0XHRyb3V0ZXMgPSBbcm91dGVzXTtcblx0XHR9XG5cdFx0cm91dGVzLmZvckVhY2goKHJvdXRlKSA9PiB7XG5cdFx0XHRpZiAoIShyb3V0ZSBpbnN0YW5jZW9mIFJvdXRlKSkge1xuXHRcdFx0XHRyb3V0ZSA9IG5ldyBSb3V0ZShyb3V0ZS5wYXRoLCByb3V0ZS5oYW5kbGVyKTtcblx0XHRcdH1cblx0XHRcdHRoaXMucm91dGVzLnB1c2gocm91dGUpO1xuXHRcdH0pO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0LyoqXG5cdCAqIEFkZHMgb25lIG9yIG1vcmUgc3VyZmFjZXMgdG8gdGhlIGFwcGxpY2F0aW9uLlxuXHQgKiBAcGFyYW0ge1N1cmZhY2V8U3RyaW5nfEFycmF5LjxTdXJmYWNlfFN0cmluZz59IHN1cmZhY2VzXG5cdCAqICAgICBTdXJmYWNlIGVsZW1lbnQgaWQgb3Igc3VyZmFjZSBpbnN0YW5jZS4gWW91IGNhbiBhbHNvIHBhc3MgYW4gQXJyYXlcblx0ICogICAgIHdoaWNoY29udGFpbnMgc3VyZmFjZSBpbnN0YW5jZXMgb3IgaWQuIEluIGNhc2Ugb2YgSUQsIHRoZXNlIHNob3VsZCBiZVxuXHQgKiAgICAgdGhlIGlkIG9mIHN1cmZhY2UgZWxlbWVudC5cblx0ICogQGNoYWluYWJsZVxuXHQgKi9cblx0YWRkU3VyZmFjZXMoc3VyZmFjZXMpIHtcblx0XHRpZiAoIUFycmF5LmlzQXJyYXkoc3VyZmFjZXMpKSB7XG5cdFx0XHRzdXJmYWNlcyA9IFtzdXJmYWNlc107XG5cdFx0fVxuXHRcdHN1cmZhY2VzLmZvckVhY2goKHN1cmZhY2UpID0+IHtcblx0XHRcdGlmIChpc1N0cmluZyhzdXJmYWNlKSkge1xuXHRcdFx0XHRzdXJmYWNlID0gbmV3IFN1cmZhY2Uoc3VyZmFjZSk7XG5cdFx0XHR9XG5cdFx0XHR0aGlzLnN1cmZhY2VzW3N1cmZhY2UuZ2V0SWQoKV0gPSBzdXJmYWNlO1xuXHRcdH0pO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgaWYgY2FuIG5hdmlnYXRlIHRvIHBhdGguXG5cdCAqIEBwYXJhbSB7IXN0cmluZ30gdXJsXG5cdCAqIEByZXR1cm4ge2Jvb2xlYW59XG5cdCAqL1xuXHRjYW5OYXZpZ2F0ZSh1cmwpIHtcblx0XHRjb25zdCB1cmkgPSB1dGlscy5pc1dlYlVyaSh1cmwpO1xuXG5cdFx0aWYgKCF1cmkpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRjb25zdCBwYXRoID0gdXRpbHMuZ2V0VXJsUGF0aCh1cmwpO1xuXG5cdFx0aWYgKCF0aGlzLmlzTGlua1NhbWVPcmlnaW5fKHVyaS5nZXRIb3N0KCkpKSB7XG5cdFx0XHRjb25zb2xlLmxvZygnT2Zmc2l0ZSBsaW5rIGNsaWNrZWQnKTtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdFx0aWYgKCF0aGlzLmlzU2FtZUJhc2VQYXRoXyhwYXRoKSkge1xuXHRcdFx0Y29uc29sZS5sb2coJ0xpbmsgY2xpY2tlZCBvdXRzaWRlIGFwcFxcJ3MgYmFzZSBwYXRoJyk7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHRcdC8vIFByZXZlbnRzIG5hdmlnYXRpb24gaWYgaXQncyBhIGhhc2ggY2hhbmdlIG9uIHRoZSBzYW1lIHVybC5cblx0XHRpZiAodXJpLmdldEhhc2goKSAmJiB1dGlscy5pc0N1cnJlbnRCcm93c2VyUGF0aChwYXRoKSkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0XHRpZiAoIXRoaXMuZmluZFJvdXRlKHBhdGgpKSB7XG5cdFx0XHRjb25zb2xlLmxvZygnTm8gcm91dGUgZm9yICcgKyBwYXRoKTtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXG5cdC8qKlxuXHQgKiBDbGVhciBzY3JlZW5zIGNhY2hlLlxuXHQgKiBAY2hhaW5hYmxlXG5cdCAqL1xuXHRjbGVhclNjcmVlbnNDYWNoZSgpIHtcblx0XHRPYmplY3Qua2V5cyh0aGlzLnNjcmVlbnMpLmZvckVhY2goKHBhdGgpID0+IHtcblx0XHRcdGlmIChwYXRoID09PSB0aGlzLmFjdGl2ZVBhdGgpIHtcblx0XHRcdFx0dGhpcy5hY3RpdmVTY3JlZW4uY2xlYXJDYWNoZSgpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dGhpcy5yZW1vdmVTY3JlZW4ocGF0aCk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH1cblxuXHQvKipcblx0ICogUmV0cmlldmVzIG9yIGNyZWF0ZSBhIHNjcmVlbiBpbnN0YW5jZSB0byBhIHBhdGguXG5cdCAqIEBwYXJhbSB7IXN0cmluZ30gcGF0aCBQYXRoIGNvbnRhaW5pbmcgdGhlIHF1ZXJ5c3RyaW5nIHBhcnQuXG5cdCAqIEByZXR1cm4ge1NjcmVlbn1cblx0ICovXG5cdGNyZWF0ZVNjcmVlbkluc3RhbmNlKHBhdGgsIHJvdXRlKSB7XG5cdFx0aWYgKCF0aGlzLnBlbmRpbmdOYXZpZ2F0ZSAmJiBwYXRoID09PSB0aGlzLmFjdGl2ZVBhdGgpIHtcblx0XHRcdGNvbnNvbGUubG9nKCdBbHJlYWR5IGF0IGRlc3RpbmF0aW9uLCByZWZyZXNoIG5hdmlnYXRpb24nKTtcblx0XHRcdHJldHVybiB0aGlzLmFjdGl2ZVNjcmVlbjtcblx0XHR9XG5cdFx0LyoganNoaW50IG5ld2NhcDogZmFsc2UgKi9cblx0XHR2YXIgc2NyZWVuID0gdGhpcy5zY3JlZW5zW3BhdGhdO1xuXHRcdGlmICghc2NyZWVuKSB7XG5cdFx0XHR2YXIgaGFuZGxlciA9IHJvdXRlLmdldEhhbmRsZXIoKTtcblx0XHRcdGlmIChoYW5kbGVyID09PSBTY3JlZW4gfHwgU2NyZWVuLmlzSW1wbGVtZW50ZWRCeShoYW5kbGVyLnByb3RvdHlwZSkpIHtcblx0XHRcdFx0c2NyZWVuID0gbmV3IGhhbmRsZXIoKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHNjcmVlbiA9IGhhbmRsZXIocm91dGUpIHx8IG5ldyBTY3JlZW4oKTtcblx0XHRcdH1cblx0XHRcdGNvbnNvbGUubG9nKCdDcmVhdGUgc2NyZWVuIGZvciBbJyArIHBhdGggKyAnXSBbJyArIHNjcmVlbiArICddJyk7XG5cdFx0fVxuXHRcdHJldHVybiBzY3JlZW47XG5cdH1cblxuXHQvKipcblx0ICogQGluaGVyaXREb2Ncblx0ICovXG5cdGRpc3Bvc2VJbnRlcm5hbCgpIHtcblx0XHRpZiAodGhpcy5hY3RpdmVTY3JlZW4pIHtcblx0XHRcdHRoaXMucmVtb3ZlU2NyZWVuKHRoaXMuYWN0aXZlUGF0aCk7XG5cdFx0fVxuXHRcdHRoaXMuY2xlYXJTY3JlZW5zQ2FjaGUoKTtcblx0XHR0aGlzLmZvcm1FdmVudEhhbmRsZXJfLnJlbW92ZUxpc3RlbmVyKCk7XG5cdFx0dGhpcy5saW5rRXZlbnRIYW5kbGVyXy5yZW1vdmVMaXN0ZW5lcigpO1xuXHRcdHRoaXMuYXBwRXZlbnRIYW5kbGVyc18ucmVtb3ZlQWxsTGlzdGVuZXJzKCk7XG5cdFx0c3VwZXIuZGlzcG9zZUludGVybmFsKCk7XG5cdH1cblxuXHQvKipcblx0ICogRGlzcGF0Y2hlcyB0byB0aGUgZmlyc3Qgcm91dGUgaGFuZGxlciB0aGF0IG1hdGNoZXMgdGhlIGN1cnJlbnQgcGF0aCwgaWZcblx0ICogYW55LlxuXHQgKiBAcmV0dXJuIHtDYW5jZWxsYWJsZVByb21pc2V9IFJldHVybnMgYSBwZW5kaW5nIHJlcXVlc3QgY2FuY2VsbGFibGUgcHJvbWlzZS5cblx0ICovXG5cdGRpc3BhdGNoKCkge1xuXHRcdHJldHVybiB0aGlzLm5hdmlnYXRlKHV0aWxzLmdldEN1cnJlbnRCcm93c2VyUGF0aCgpLCB0cnVlKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBTdGFydHMgbmF2aWdhdGlvbiB0byBhIHBhdGguXG5cdCAqIEBwYXJhbSB7IXN0cmluZ30gcGF0aCBQYXRoIGNvbnRhaW5pbmcgdGhlIHF1ZXJ5c3RyaW5nIHBhcnQuXG5cdCAqIEBwYXJhbSB7Ym9vbGVhbj19IG9wdF9yZXBsYWNlSGlzdG9yeSBSZXBsYWNlcyBicm93c2VyIGhpc3RvcnkuXG5cdCAqIEByZXR1cm4ge0NhbmNlbGxhYmxlUHJvbWlzZX0gUmV0dXJucyBhIHBlbmRpbmcgcmVxdWVzdCBjYW5jZWxsYWJsZSBwcm9taXNlLlxuXHQgKi9cblx0ZG9OYXZpZ2F0ZV8ocGF0aCwgb3B0X3JlcGxhY2VIaXN0b3J5KSB7XG5cdFx0dmFyIHJvdXRlID0gdGhpcy5maW5kUm91dGUocGF0aCk7XG5cdFx0aWYgKCFyb3V0ZSkge1xuXHRcdFx0dGhpcy5wZW5kaW5nTmF2aWdhdGUgPSBDYW5jZWxsYWJsZVByb21pc2UucmVqZWN0KG5ldyBDYW5jZWxsYWJsZVByb21pc2UuQ2FuY2VsbGF0aW9uRXJyb3IoJ05vIHJvdXRlIGZvciAnICsgcGF0aCkpO1xuXHRcdFx0cmV0dXJuIHRoaXMucGVuZGluZ05hdmlnYXRlO1xuXHRcdH1cblxuXHRcdGNvbnNvbGUubG9nKCdOYXZpZ2F0ZSB0byBbJyArIHBhdGggKyAnXScpO1xuXG5cdFx0dGhpcy5zdG9wUGVuZGluZ05hdmlnYXRlXygpO1xuXHRcdHRoaXMuaXNOYXZpZ2F0aW9uUGVuZGluZyA9IHRydWU7XG5cblx0XHR2YXIgbmV4dFNjcmVlbiA9IHRoaXMuY3JlYXRlU2NyZWVuSW5zdGFuY2UocGF0aCwgcm91dGUpO1xuXG5cdFx0cmV0dXJuIHRoaXMubWF5YmVQcmV2ZW50RGVhY3RpdmF0ZV8oKVxuXHRcdFx0LnRoZW4oKCkgPT4gdGhpcy5tYXliZVByZXZlbnRBY3RpdmF0ZV8obmV4dFNjcmVlbikpXG5cdFx0XHQudGhlbigoKSA9PiBuZXh0U2NyZWVuLmxvYWQocGF0aCkpXG5cdFx0XHQudGhlbigoKSA9PiB7XG5cdFx0XHRcdGlmICh0aGlzLmFjdGl2ZVNjcmVlbikge1xuXHRcdFx0XHRcdHRoaXMuYWN0aXZlU2NyZWVuLmRlYWN0aXZhdGUoKTtcblx0XHRcdFx0fVxuXHRcdFx0XHR0aGlzLnByZXBhcmVOYXZpZ2F0ZUhpc3RvcnlfKHBhdGgsIG5leHRTY3JlZW4sIG9wdF9yZXBsYWNlSGlzdG9yeSk7XG5cdFx0XHRcdHRoaXMucHJlcGFyZU5hdmlnYXRlU3VyZmFjZXNfKFxuXHRcdFx0XHRcdG5leHRTY3JlZW4sXG5cdFx0XHRcdFx0dGhpcy5zdXJmYWNlcyxcblx0XHRcdFx0XHR0aGlzLmV4dHJhY3RQYXJhbXMocm91dGUsIHBhdGgpXG5cdFx0XHRcdCk7XG5cdFx0XHR9KVxuXHRcdFx0LnRoZW4oKCkgPT4gbmV4dFNjcmVlbi5ldmFsdWF0ZVN0eWxlcyh0aGlzLnN1cmZhY2VzKSlcblx0XHRcdC50aGVuKCgpID0+IG5leHRTY3JlZW4uZmxpcCh0aGlzLnN1cmZhY2VzKSlcblx0XHRcdC50aGVuKCgpID0+IG5leHRTY3JlZW4uZXZhbHVhdGVTY3JpcHRzKHRoaXMuc3VyZmFjZXMpKVxuXHRcdFx0LnRoZW4oKCkgPT4gdGhpcy5tYXliZVVwZGF0ZVNjcm9sbFBvc2l0aW9uU3RhdGVfKCkpXG5cdFx0XHQudGhlbigoKSA9PiB0aGlzLnN5bmNTY3JvbGxQb3NpdGlvblN5bmNUaGVuQXN5bmNfKCkpXG5cdFx0XHQudGhlbigoKSA9PiB0aGlzLmZpbmFsaXplTmF2aWdhdGVfKHBhdGgsIG5leHRTY3JlZW4pKVxuXHRcdFx0LnRoZW4oKCkgPT4gdGhpcy5tYXliZU92ZXJsb2FkQmVmb3JlVW5sb2FkXygpKVxuXHRcdFx0LmNhdGNoKChyZWFzb24pID0+IHtcblx0XHRcdFx0dGhpcy5pc05hdmlnYXRpb25QZW5kaW5nID0gZmFsc2U7XG5cdFx0XHRcdHRoaXMuaGFuZGxlTmF2aWdhdGVFcnJvcl8ocGF0aCwgbmV4dFNjcmVlbiwgcmVhc29uKTtcblx0XHRcdFx0dGhyb3cgcmVhc29uO1xuXHRcdFx0fSk7XG5cdH1cblxuXHQvKipcblx0ICogRXh0cmFjdHMgcGFyYW1zIGFjY29yZGluZyB0byB0aGUgZ2l2ZW4gcGF0aCBhbmQgcm91dGUuXG5cdCAqIEBwYXJhbSB7IVJvdXRlfSByb3V0ZVxuXHQgKiBAcGFyYW0ge3N0cmluZ30gcGF0aFxuXHQgKiBAcGFyYW0geyFPYmplY3R9XG5cdCAqL1xuXHRleHRyYWN0UGFyYW1zKHJvdXRlLCBwYXRoKSB7XG5cdFx0cmV0dXJuIHJvdXRlLmV4dHJhY3RQYXJhbXModGhpcy5nZXRSb3V0ZVBhdGgocGF0aCkpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEZpbmFsaXplcyBhIHNjcmVlbiBuYXZpZ2F0aW9uLlxuXHQgKiBAcGFyYW0geyFzdHJpbmd9IHBhdGggUGF0aCBjb250YWluaW5nIHRoZSBxdWVyeXN0cmluZyBwYXJ0LlxuXHQgKiBAcGFyYW0geyFTY3JlZW59IG5leHRTY3JlZW5cblx0ICogQHByb3RlY3RlZFxuXHQgKi9cblx0ZmluYWxpemVOYXZpZ2F0ZV8ocGF0aCwgbmV4dFNjcmVlbikge1xuXHRcdG5leHRTY3JlZW4uYWN0aXZhdGUoKTtcblxuXHRcdGlmICh0aGlzLmFjdGl2ZVNjcmVlbiAmJiAhdGhpcy5hY3RpdmVTY3JlZW4uaXNDYWNoZWFibGUoKSkge1xuXHRcdFx0aWYgKHRoaXMuYWN0aXZlU2NyZWVuICE9PSBuZXh0U2NyZWVuKSB7XG5cdFx0XHRcdHRoaXMucmVtb3ZlU2NyZWVuKHRoaXMuYWN0aXZlUGF0aCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0dGhpcy5hY3RpdmVQYXRoID0gcGF0aDtcblx0XHR0aGlzLmFjdGl2ZVNjcmVlbiA9IG5leHRTY3JlZW47XG5cdFx0dGhpcy5icm93c2VyUGF0aEJlZm9yZU5hdmlnYXRlID0gdXRpbHMuZ2V0Q3VycmVudEJyb3dzZXJQYXRoV2l0aG91dEhhc2goKTtcblx0XHR0aGlzLnNjcmVlbnNbcGF0aF0gPSBuZXh0U2NyZWVuO1xuXHRcdHRoaXMuaXNOYXZpZ2F0aW9uUGVuZGluZyA9IGZhbHNlO1xuXHRcdHRoaXMucGVuZGluZ05hdmlnYXRlID0gbnVsbDtcblx0XHRnbG9iYWxzLmNhcHR1cmVkRm9ybUVsZW1lbnQgPSBudWxsO1xuXHRcdGdsb2JhbHMuY2FwdHVyZWRGb3JtQnV0dG9uRWxlbWVudCA9IG51bGw7XG5cdFx0Y29uc29sZS5sb2coJ05hdmlnYXRpb24gZG9uZScpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEZpbmRzIGEgcm91dGUgZm9yIHRoZSB0ZXN0IHBhdGguIFJldHVybnMgdHJ1ZSBpZiBtYXRjaGVzIGhhcyBhIHJvdXRlLFxuXHQgKiBvdGhlcndpc2UgcmV0dXJucyBudWxsLlxuXHQgKiBAcGFyYW0geyFzdHJpbmd9IHBhdGggUGF0aCBjb250YWluaW5nIHRoZSBxdWVyeXN0cmluZyBwYXJ0LlxuXHQgKiBAcmV0dXJuIHs/T2JqZWN0fSBSb3V0ZSBoYW5kbGVyIGlmIG1hdGNoIGFueSBvciA8Y29kZT5udWxsPC9jb2RlPiBpZiB0aGVcblx0ICogICAgIHBhdGggaXMgdGhlIHNhbWUgYXMgdGhlIGN1cnJlbnQgdXJsIGFuZCB0aGUgcGF0aCBjb250YWlucyBhIGZyYWdtZW50LlxuXHQgKi9cblx0ZmluZFJvdXRlKHBhdGgpIHtcblx0XHRwYXRoID0gdGhpcy5nZXRSb3V0ZVBhdGgocGF0aCk7XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnJvdXRlcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIHJvdXRlID0gdGhpcy5yb3V0ZXNbaV07XG5cdFx0XHRpZiAocm91dGUubWF0Y2hlc1BhdGgocGF0aCkpIHtcblx0XHRcdFx0cmV0dXJuIHJvdXRlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0LyoqXG5cdCAqIEdldHMgYWxsb3cgcHJldmVudCBuYXZpZ2F0ZS5cblx0ICogQHJldHVybiB7Ym9vbGVhbn1cblx0ICovXG5cdGdldEFsbG93UHJldmVudE5hdmlnYXRlKCkge1xuXHRcdHJldHVybiB0aGlzLmFsbG93UHJldmVudE5hdmlnYXRlO1xuXHR9XG5cblx0LyoqXG5cdCAqIEdldHMgbGluayBiYXNlIHBhdGguXG5cdCAqIEByZXR1cm4geyFzdHJpbmd9XG5cdCAqL1xuXHRnZXRCYXNlUGF0aCgpIHtcblx0XHRyZXR1cm4gdGhpcy5iYXNlUGF0aDtcblx0fVxuXG5cdC8qKlxuXHQgKiBHZXRzIHRoZSBkZWZhdWx0IHBhZ2UgdGl0bGUuXG5cdCAqIEByZXR1cm4ge3N0cmluZ30gZGVmYXVsdFRpdGxlXG5cdCAqL1xuXHRnZXREZWZhdWx0VGl0bGUoKSB7XG5cdFx0cmV0dXJuIHRoaXMuZGVmYXVsdFRpdGxlO1xuXHR9XG5cblx0LyoqXG5cdCAqIEdldHMgdGhlIGZvcm0gc2VsZWN0b3IuXG5cdCAqIEByZXR1cm4geyFzdHJpbmd9XG5cdCAqL1xuXHRnZXRGb3JtU2VsZWN0b3IoKSB7XG5cdFx0cmV0dXJuIHRoaXMuZm9ybVNlbGVjdG9yO1xuXHR9XG5cblx0LyoqXG5cdCAqIENoZWNrIGlmIHJvdXRlIG1hdGNoaW5nIGlzIGlnbm9yaW5nIHF1ZXJ5IHN0cmluZyBmcm9tIHRoZSByb3V0ZSBwYXRoLlxuXHQgKiBAcmV0dXJuIHtib29sZWFufVxuXHQgKi9cblx0Z2V0SWdub3JlUXVlcnlTdHJpbmdGcm9tUm91dGVQYXRoKCkge1xuXHRcdHJldHVybiB0aGlzLmlnbm9yZVF1ZXJ5U3RyaW5nRnJvbVJvdXRlUGF0aDtcblx0fVxuXG5cdC8qKlxuXHQgKiBHZXRzIHRoZSBsaW5rIHNlbGVjdG9yLlxuXHQgKiBAcmV0dXJuIHshc3RyaW5nfVxuXHQgKi9cblx0Z2V0TGlua1NlbGVjdG9yKCkge1xuXHRcdHJldHVybiB0aGlzLmxpbmtTZWxlY3Rvcjtcblx0fVxuXG5cdC8qKlxuXHQgKiBHZXRzIHRoZSBsb2FkaW5nIGNzcyBjbGFzcy5cblx0ICogQHJldHVybiB7IXN0cmluZ31cblx0ICovXG5cdGdldExvYWRpbmdDc3NDbGFzcygpIHtcblx0XHRyZXR1cm4gdGhpcy5sb2FkaW5nQ3NzQ2xhc3M7XG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgZ2l2ZW4gcGF0aCBmb3JtYXR0ZWQgdG8gYmUgbWF0Y2hlZCBieSBhIHJvdXRlLiBUaGlzIHdpbGwsXG5cdCAqIGZvciBleGFtcGxlLCByZW1vdmUgdGhlIGJhc2UgcGF0aCBmcm9tIGl0LCBidXQgbWFrZSBzdXJlIGl0IHdpbGwgZW5kXG5cdCAqIHdpdGggYSAnLycuXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoXG5cdCAqIEByZXR1cm4ge3N0cmluZ31cblx0ICovXG5cdGdldFJvdXRlUGF0aChwYXRoKSB7XG5cdFx0aWYgKHRoaXMuZ2V0SWdub3JlUXVlcnlTdHJpbmdGcm9tUm91dGVQYXRoKCkpIHtcblx0XHRcdHBhdGggPSB1dGlscy5nZXRVcmxQYXRoV2l0aG91dEhhc2hBbmRTZWFyY2gocGF0aCk7XG5cdFx0XHRyZXR1cm4gdXRpbHMuZ2V0VXJsUGF0aFdpdGhvdXRIYXNoQW5kU2VhcmNoKHBhdGguc3Vic3RyKHRoaXMuYmFzZVBhdGgubGVuZ3RoKSk7XG5cdFx0fVxuXG5cdFx0cGF0aCA9IHV0aWxzLmdldFVybFBhdGhXaXRob3V0SGFzaChwYXRoKTtcblx0XHRyZXR1cm4gdXRpbHMuZ2V0VXJsUGF0aFdpdGhvdXRIYXNoKHBhdGguc3Vic3RyKHRoaXMuYmFzZVBhdGgubGVuZ3RoKSk7XG5cdH1cblxuXHQvKipcblx0ICogR2V0cyB0aGUgdXBkYXRlIHNjcm9sbCBwb3NpdGlvbiB2YWx1ZS5cblx0ICogQHJldHVybiB7Ym9vbGVhbn1cblx0ICovXG5cdGdldFVwZGF0ZVNjcm9sbFBvc2l0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLnVwZGF0ZVNjcm9sbFBvc2l0aW9uO1xuXHR9XG5cblx0LyoqXG5cdCAqIEhhbmRsZSBuYXZpZ2F0aW9uIGVycm9yLlxuXHQgKiBAcGFyYW0geyFzdHJpbmd9IHBhdGggUGF0aCBjb250YWluaW5nIHRoZSBxdWVyeXN0cmluZyBwYXJ0LlxuXHQgKiBAcGFyYW0geyFTY3JlZW59IG5leHRTY3JlZW5cblx0ICogQHBhcmFtIHshRXJyb3J9IGVycm9yXG5cdCAqIEBwcm90ZWN0ZWRcblx0ICovXG5cdGhhbmRsZU5hdmlnYXRlRXJyb3JfKHBhdGgsIG5leHRTY3JlZW4sIGVycm9yKSB7XG5cdFx0Y29uc29sZS5sb2coJ05hdmlnYXRpb24gZXJyb3IgZm9yIFsnICsgbmV4dFNjcmVlbiArICddICgnICsgZXJyb3IgKyAnKScpO1xuXHRcdHRoaXMuZW1pdCgnbmF2aWdhdGlvbkVycm9yJywge1xuXHRcdFx0ZXJyb3IsXG5cdFx0XHRuZXh0U2NyZWVuLFxuXHRcdFx0cGF0aFxuXHRcdH0pO1xuXHRcdGlmICghdXRpbHMuaXNDdXJyZW50QnJvd3NlclBhdGgocGF0aCkpIHtcblx0XHRcdGlmICh0aGlzLmlzTmF2aWdhdGlvblBlbmRpbmcgJiYgdGhpcy5wZW5kaW5nTmF2aWdhdGUpIHtcblx0XHRcdFx0dGhpcy5wZW5kaW5nTmF2aWdhdGUudGhlbkFsd2F5cygoKSA9PiB0aGlzLnJlbW92ZVNjcmVlbihwYXRoKSwgdGhpcyk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0aGlzLnJlbW92ZVNjcmVlbihwYXRoKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogQ2hlY2tzIGlmIGFwcCBoYXMgcm91dGVzLlxuXHQgKiBAcmV0dXJuIHtib29sZWFufVxuXHQgKi9cblx0aGFzUm91dGVzKCkge1xuXHRcdHJldHVybiB0aGlzLnJvdXRlcy5sZW5ndGggPiAwO1xuXHR9XG5cblx0LyoqXG5cdCAqIFRlc3RzIGlmIGhvc3QgaXMgYW4gb2Zmc2l0ZSBsaW5rLlxuXHQgKiBAcGFyYW0geyFzdHJpbmd9IGhvc3QgTGluayBob3N0IHRvIGNvbXBhcmUgd2l0aFxuXHQgKiAgICAgPGNvZGU+Z2xvYmFscy53aW5kb3cubG9jYXRpb24uaG9zdDwvY29kZT4uXG5cdCAqIEByZXR1cm4ge2Jvb2xlYW59XG5cdCAqIEBwcm90ZWN0ZWRcblx0ICovXG5cdGlzTGlua1NhbWVPcmlnaW5fKGhvc3QpIHtcblx0XHRyZXR1cm4gaG9zdCA9PT0gZ2xvYmFscy53aW5kb3cubG9jYXRpb24uaG9zdDtcblx0fVxuXG5cdC8qKlxuXHQgKiBUZXN0cyBpZiBsaW5rIGVsZW1lbnQgaGFzIHRoZSBzYW1lIGFwcCdzIGJhc2UgcGF0aC5cblx0ICogQHBhcmFtIHshc3RyaW5nfSBwYXRoIExpbmsgcGF0aCBjb250YWluaW5nIHRoZSBxdWVyeXN0cmluZyBwYXJ0LlxuXHQgKiBAcmV0dXJuIHtib29sZWFufVxuXHQgKiBAcHJvdGVjdGVkXG5cdCAqL1xuXHRpc1NhbWVCYXNlUGF0aF8ocGF0aCkge1xuXHRcdHJldHVybiBwYXRoLmluZGV4T2YodGhpcy5iYXNlUGF0aCkgPT09IDA7XG5cdH1cblxuXHQvKipcblx0ICogTG9jayB0aGUgZG9jdW1lbnQgc2Nyb2xsIGluIG9yZGVyIHRvIGF2b2lkIHRoZSBicm93c2VyIG5hdGl2ZSBiYWNrIGFuZFxuXHQgKiBmb3J3YXJkIG5hdmlnYXRpb24gdG8gY2hhbmdlIHRoZSBzY3JvbGwgcG9zaXRpb24uIEluIHRoZSBlbmQgb2Zcblx0ICogbmF2aWdhdGlvbiBsaWZlY3ljbGUgc2Nyb2xsIGlzIHJlcG9zaXRpb25lZC5cblx0ICogQHByb3RlY3RlZFxuXHQgKi9cblx0bG9ja0hpc3RvcnlTY3JvbGxQb3NpdGlvbl8oKSB7XG5cdFx0dmFyIHN0YXRlID0gZ2xvYmFscy53aW5kb3cuaGlzdG9yeS5zdGF0ZTtcblx0XHRpZiAoIXN0YXRlKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdC8vIEJyb3dzZXJzIGFyZSBpbmNvbnNpc3RlbnQgd2hlbiByZS1wb3NpdGlvbmluZyB0aGUgc2Nyb2xsIGhpc3Rvcnkgb25cblx0XHQvLyBwb3BzdGF0ZS4gQXQgc29tZSBicm93c2VycywgaGlzdG9yeSBzY3JvbGwgaGFwcGVucyBiZWZvcmUgcG9wc3RhdGUsIHRoZW5cblx0XHQvLyBsb2NrIHRoZSBzY3JvbGwgb24gdGhlIGxhc3Qga25vd24gcG9zaXRpb24gYXMgc29vbiBhcyBwb3NzaWJsZSBhZnRlciB0aGVcblx0XHQvLyBjdXJyZW50IEpTIGV4ZWN1dGlvbiBjb250ZXh0IGFuZCBjYXB0dXJlIHRoZSBjdXJyZW50IHZhbHVlLiBTb21lIG90aGVycyxcblx0XHQvLyBoaXN0b3J5IHNjcm9sbCBoYXBwZW5zIGFmdGVyIHBvcHN0YXRlLCBpbiB0aGlzIGNhc2UsIHdlIGJpbmQgYW4gb25jZVxuXHRcdC8vIHNjcm9sbCBldmVudCB0byBsb2NrIHRoZSBsYXMga25vd24gcG9zaXRpb24uIExhc3RseSwgdGhlIHByZXZpb3VzIHR3b1xuXHRcdC8vIGJlaGF2aW9ycyBjYW4gaGFwcGVuIGV2ZW4gb24gdGhlIHNhbWUgYnJvd3NlciwgaGVuY2UgdGhlIHJhY2Ugd2lsbCBkZWNpZGVcblx0XHQvLyB0aGUgd2lubmVyLlxuXHRcdHZhciB3aW5uZXIgPSBmYWxzZTtcblx0XHR2YXIgc3dpdGNoU2Nyb2xsUG9zaXRpb25SYWNlID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRnbG9iYWxzLmRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHN3aXRjaFNjcm9sbFBvc2l0aW9uUmFjZSwgZmFsc2UpO1xuXHRcdFx0aWYgKCF3aW5uZXIpIHtcblx0XHRcdFx0Z2xvYmFscy53aW5kb3cuc2Nyb2xsVG8oc3RhdGUuc2Nyb2xsTGVmdCwgc3RhdGUuc2Nyb2xsVG9wKTtcblx0XHRcdFx0d2lubmVyID0gdHJ1ZTtcblx0XHRcdH1cblx0XHR9O1xuXHRcdGFzeW5jLm5leHRUaWNrKHN3aXRjaFNjcm9sbFBvc2l0aW9uUmFjZSk7XG5cdFx0Z2xvYmFscy5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBzd2l0Y2hTY3JvbGxQb3NpdGlvblJhY2UsIGZhbHNlKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBJZiBzdXBwb3J0ZWQgYnkgdGhlIGJyb3dzZXIsIGRpc2FibGVzIG5hdGl2ZSBzY3JvbGwgcmVzdG9yYXRpb24gYW5kXG5cdCAqIHN0b3JlcyBjdXJyZW50IHZhbHVlLlxuXHQgKi9cblx0bWF5YmVEaXNhYmxlTmF0aXZlU2Nyb2xsUmVzdG9yYXRpb24oKSB7XG5cdFx0aWYgKHRoaXMubmF0aXZlU2Nyb2xsUmVzdG9yYXRpb25TdXBwb3J0ZWQpIHtcblx0XHRcdHRoaXMubmF0aXZlU2Nyb2xsUmVzdG9yYXRpb25fID0gZ2xvYmFscy53aW5kb3cuaGlzdG9yeS5zY3JvbGxSZXN0b3JhdGlvbjtcblx0XHRcdGdsb2JhbHMud2luZG93Lmhpc3Rvcnkuc2Nyb2xsUmVzdG9yYXRpb24gPSAnbWFudWFsJztcblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogTWF5YmUgbmF2aWdhdGUgdG8gYSBwYXRoLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gaHJlZiBJbmZvcm1hdGlvbiBhYm91dCB0aGUgbGluaydzIGhyZWYuXG5cdCAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50IERvbSBldmVudCB0aGF0IGluaXRpYXRlZCB0aGUgbmF2aWdhdGlvbi5cblx0ICovXG5cdG1heWJlTmF2aWdhdGVfKGhyZWYsIGV2ZW50KSB7XG5cdFx0aWYgKCF0aGlzLmNhbk5hdmlnYXRlKGhyZWYpKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Z2xvYmFscy5jYXB0dXJlZEZvcm1FbGVtZW50ID0gZXZlbnQuY2FwdHVyZWRGb3JtRWxlbWVudDtcblx0XHRnbG9iYWxzLmNhcHR1cmVkRm9ybUJ1dHRvbkVsZW1lbnQgPSBldmVudC5jYXB0dXJlZEZvcm1CdXR0b25FbGVtZW50O1xuXG5cdFx0dmFyIG5hdmlnYXRlRmFpbGVkID0gZmFsc2U7XG5cdFx0dHJ5IHtcblx0XHRcdHRoaXMubmF2aWdhdGUodXRpbHMuZ2V0VXJsUGF0aChocmVmKSwgZmFsc2UsIGV2ZW50KTtcblx0XHR9IGNhdGNoIChlcnIpIHtcblx0XHRcdC8vIERvIG5vdCBwcmV2ZW50IGxpbmsgbmF2aWdhdGlvbiBpbiBjYXNlIHNvbWUgc3luY2hyb25vdXMgZXJyb3Igb2NjdXJzXG5cdFx0XHRuYXZpZ2F0ZUZhaWxlZCA9IHRydWU7XG5cdFx0fVxuXG5cdFx0aWYgKCFuYXZpZ2F0ZUZhaWxlZCkge1xuXHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogQ2hlY2tzIHdoZXRoZXIgdGhlIG9uYmVmb3JldW5sb2FkIGdsb2JhbCBldmVudCBoYW5kbGVyIGlzIG92ZXJsb2FkZWRcblx0ICogYnkgY2xpZW50IGNvZGUuIElmIHNvLCBpdCByZXBsYWNlcyB3aXRoIGEgZnVuY3Rpb24gdGhhdCBoYWx0cyB0aGUgbm9ybWFsXG5cdCAqIGV2ZW50IGZsb3cgaW4gcmVsYXRpb24gd2l0aCB0aGUgY2xpZW50IG9uYmVmb3JldW5sb2FkIGZ1bmN0aW9uLlxuXHQgKiBUaGlzIGNhbiBiZSBpbiBtb3N0IHBhcnQgdXNlZCB0byBwcmVtYXR1cmVseSB0ZXJtaW5hdGUgbmF2aWdhdGlvbiB0byBvdGhlciBwYWdlc1xuXHQgKiBhY2NvcmRpbmcgdG8gdGhlIGdpdmVuIGNvbnN0cmFpdChzKS5cblx0ICogQHByb3RlY3RlZFxuXHQgKi9cblx0bWF5YmVPdmVybG9hZEJlZm9yZVVubG9hZF8oKSB7XG5cdFx0aWYgKCdmdW5jdGlvbicgPT09IHR5cGVvZiB3aW5kb3cub25iZWZvcmV1bmxvYWQpIHtcblx0XHRcdHdpbmRvdy5fb25iZWZvcmV1bmxvYWQgPSB3aW5kb3cub25iZWZvcmV1bmxvYWQ7XG5cblx0XHRcdHdpbmRvdy5vbmJlZm9yZXVubG9hZCA9IGV2ZW50ID0+IHtcblx0XHRcdFx0dGhpcy5lbWl0KCdiZWZvcmVVbmxvYWQnLCBldmVudCk7XG5cdFx0XHRcdGlmIChldmVudCAmJiBldmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cblx0XHRcdC8vIG1hcmsgdGhlIHVwZGF0ZWQgaGFuZGxlciBkdWUgdW53YW50ZWQgcmVjdXJzaW9uXG5cdFx0XHR3aW5kb3cub25iZWZvcmV1bmxvYWQuX292ZXJsb2FkZWQgPSB0cnVlO1xuXHRcdH1cblx0fVxuXG5cdC8qKlxuXHQgKiBDYW5jZWxzIG5hdmlnYXRpb24gaWYgbmV4dFNjcmVlbidzIGJlZm9yZUFjdGl2YXRlIGxpZmVjeWNsZSBtZXRob2Rcblx0ICogcmVzb2x2ZXMgdG8gdHJ1ZS5cblx0ICogQHBhcmFtIHshU2NyZWVufSBuZXh0U2NyZWVuXG5cdCAqIEByZXR1cm4geyFDYW5jZWxsYWJsZVByb21pc2V9XG5cdCAqL1xuXHRtYXliZVByZXZlbnRBY3RpdmF0ZV8obmV4dFNjcmVlbikge1xuXHRcdHJldHVybiBDYW5jZWxsYWJsZVByb21pc2UucmVzb2x2ZSgpXG5cdFx0XHQudGhlbigoKSA9PiB7XG5cdFx0XHRcdHJldHVybiBuZXh0U2NyZWVuLmJlZm9yZUFjdGl2YXRlKCk7XG5cdFx0XHR9KVxuXHRcdFx0LnRoZW4ocHJldmVudCA9PiB7XG5cdFx0XHRcdGlmIChwcmV2ZW50KSB7XG5cdFx0XHRcdFx0dGhpcy5wZW5kaW5nTmF2aWdhdGUgPSBDYW5jZWxsYWJsZVByb21pc2UucmVqZWN0KG5ldyBDYW5jZWxsYWJsZVByb21pc2UuQ2FuY2VsbGF0aW9uRXJyb3IoJ0NhbmNlbGxlZCBieSBuZXh0IHNjcmVlbicpKTtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcy5wZW5kaW5nTmF2aWdhdGU7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHR9XG5cblx0LyoqXG5cdCAqIENhbmNlbHMgbmF2aWdhdGlvbiBpZiBhY3RpdmVTY3JlZW4ncyBiZWZvcmVEZWFjdGl2YXRlIGxpZmVjeWNsZVxuXHQgKiBtZXRob2QgcmVzb2x2ZXMgdG8gdHJ1ZS5cblx0ICogQHJldHVybiB7IUNhbmNlbGxhYmxlUHJvbWlzZX1cblx0ICovXG5cdG1heWJlUHJldmVudERlYWN0aXZhdGVfKCkge1xuXHRcdHJldHVybiBDYW5jZWxsYWJsZVByb21pc2UucmVzb2x2ZSgpXG5cdFx0XHQudGhlbigoKSA9PiB7XG5cdFx0XHRcdGlmICh0aGlzLmFjdGl2ZVNjcmVlbikge1xuXHRcdFx0XHRcdHJldHVybiB0aGlzLmFjdGl2ZVNjcmVlbi5iZWZvcmVEZWFjdGl2YXRlKCk7XG5cdFx0XHRcdH1cblx0XHRcdH0pXG5cdFx0XHQudGhlbihwcmV2ZW50ID0+IHtcblx0XHRcdFx0aWYgKHByZXZlbnQpIHtcblx0XHRcdFx0XHR0aGlzLnBlbmRpbmdOYXZpZ2F0ZSA9IENhbmNlbGxhYmxlUHJvbWlzZS5yZWplY3QobmV3IENhbmNlbGxhYmxlUHJvbWlzZS5DYW5jZWxsYXRpb25FcnJvcignQ2FuY2VsbGVkIGJ5IGFjdGl2ZSBzY3JlZW4nKSk7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXMucGVuZGluZ05hdmlnYXRlO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0fVxuXG5cdC8qKlxuXHQgKiBNYXliZSByZXBvc2l0aW9uIHNjcm9sbCB0byBoYXNoZWQgYW5jaG9yLlxuXHQgKi9cblx0bWF5YmVSZXBvc2l0aW9uU2Nyb2xsVG9IYXNoZWRBbmNob3IoKSB7XG5cdFx0Y29uc3QgaGFzaCA9IGdsb2JhbHMud2luZG93LmxvY2F0aW9uLmhhc2g7XG5cdFx0aWYgKGhhc2gpIHtcblx0XHRcdGxldCBhbmNob3JFbGVtZW50ID0gZ2xvYmFscy5kb2N1bWVudC5nZXRFbGVtZW50QnlJZChoYXNoLnN1YnN0cmluZygxKSk7XG5cdFx0XHRpZiAoYW5jaG9yRWxlbWVudCkge1xuXHRcdFx0XHRjb25zdCB7b2Zmc2V0TGVmdCwgb2Zmc2V0VG9wfSA9IHV0aWxzLmdldE5vZGVPZmZzZXQoYW5jaG9yRWxlbWVudCk7XG5cdFx0XHRcdGdsb2JhbHMud2luZG93LnNjcm9sbFRvKG9mZnNldExlZnQsIG9mZnNldFRvcCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0LyoqXG5cdCAqIElmIHN1cHBvcnRlZCBieSB0aGUgYnJvd3NlciwgcmVzdG9yZXMgbmF0aXZlIHNjcm9sbCByZXN0b3JhdGlvbiB0byB0aGVcblx0ICogdmFsdWUgY2FwdHVyZWQgYnkgYG1heWJlRGlzYWJsZU5hdGl2ZVNjcm9sbFJlc3RvcmF0aW9uYC5cblx0ICovXG5cdG1heWJlUmVzdG9yZU5hdGl2ZVNjcm9sbFJlc3RvcmF0aW9uKCkge1xuXHRcdGlmICh0aGlzLm5hdGl2ZVNjcm9sbFJlc3RvcmF0aW9uU3VwcG9ydGVkICYmIHRoaXMubmF0aXZlU2Nyb2xsUmVzdG9yYXRpb25fKSB7XG5cdFx0XHRnbG9iYWxzLndpbmRvdy5oaXN0b3J5LnNjcm9sbFJlc3RvcmF0aW9uID0gdGhpcy5uYXRpdmVTY3JvbGxSZXN0b3JhdGlvbl87XG5cdFx0fVxuXHR9XG5cblx0LyoqXG5cdCAqIE1heWJlIHJlc3RvcmUgcmVkaXJlY3RlZCBwYXRoIGhhc2ggaW4gY2FzZSBib3RoIHRoZSBjdXJyZW50IHBhdGggYW5kXG5cdCAqIHRoZSBnaXZlbiBwYXRoIGFyZSB0aGUgc2FtZS5cblx0ICogQHBhcmFtIHshc3RyaW5nfSBwYXRoIFBhdGggYmVmb3JlIG5hdmlnYXRpb24uXG5cdCAqIEBwYXJhbSB7IXN0cmluZ30gcmVkaXJlY3RQYXRoIFBhdGggYWZ0ZXIgbmF2aWdhdGlvbi5cblx0ICogQHBhcmFtIHshc3RyaW5nfSBoYXNoIEhhc2ggdG8gYmUgYWRkZWQgdG8gdGhlIHBhdGguXG5cdCAqIEByZXR1cm4geyFzdHJpbmd9IFJldHVybnMgdGhlIHBhdGggd2l0aCB0aGUgaGFzaCByZXN0b3JlZC5cblx0ICovXG5cdG1heWJlUmVzdG9yZVJlZGlyZWN0UGF0aEhhc2hfKHBhdGgsIHJlZGlyZWN0UGF0aCwgaGFzaCkge1xuXHRcdGlmIChyZWRpcmVjdFBhdGggPT09IHV0aWxzLmdldFVybFBhdGhXaXRob3V0SGFzaChwYXRoKSkge1xuXHRcdFx0cmV0dXJuIHJlZGlyZWN0UGF0aCArIGhhc2g7XG5cdFx0fVxuXHRcdHJldHVybiByZWRpcmVjdFBhdGg7XG5cdH1cblxuXHQvKipcblx0ICogTWF5YmUgdXBkYXRlIHNjcm9sbCBwb3NpdGlvbiBpbiBoaXN0b3J5IHN0YXRlIHRvIGFuY2hvciBvbiBwYXRoLlxuXHQgKiBAcGFyYW0geyFzdHJpbmd9IHBhdGggUGF0aCBjb250YWluaW5nIGFuY2hvclxuXHQgKi9cblx0bWF5YmVVcGRhdGVTY3JvbGxQb3NpdGlvblN0YXRlXygpIHtcblx0XHR2YXIgaGFzaCA9IGdsb2JhbHMud2luZG93LmxvY2F0aW9uLmhhc2g7XG5cdFx0dmFyIGFuY2hvckVsZW1lbnQgPSBnbG9iYWxzLmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGhhc2guc3Vic3RyaW5nKDEpKTtcblx0XHRpZiAoYW5jaG9yRWxlbWVudCkge1xuXHRcdFx0Y29uc3Qge29mZnNldExlZnQsIG9mZnNldFRvcH0gPSB1dGlscy5nZXROb2RlT2Zmc2V0KGFuY2hvckVsZW1lbnQpO1xuXHRcdFx0dGhpcy5zYXZlSGlzdG9yeUN1cnJlbnRQYWdlU2Nyb2xsUG9zaXRpb25fKG9mZnNldFRvcCwgb2Zmc2V0TGVmdCk7XG5cdFx0fVxuXHR9XG5cblx0LyoqXG5cdCAqIE5hdmlnYXRlcyB0byB0aGUgc3BlY2lmaWVkIHBhdGggaWYgdGhlcmUgaXMgYSByb3V0ZSBoYW5kbGVyIHRoYXQgbWF0Y2hlcy5cblx0ICogQHBhcmFtIHshc3RyaW5nfSBwYXRoIFBhdGggdG8gbmF2aWdhdGUgY29udGFpbmluZyB0aGUgYmFzZSBwYXRoLlxuXHQgKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfcmVwbGFjZUhpc3RvcnkgUmVwbGFjZXMgYnJvd3NlciBoaXN0b3J5LlxuXHQgKiBAcGFyYW0ge0V2ZW50PX0gZXZlbnQgT3B0aW9uYWwgZXZlbnQgb2JqZWN0IHRoYXQgdHJpZ2dlcmVkIHRoZSBuYXZpZ2F0aW9uLlxuXHQgKiBAcmV0dXJuIHtDYW5jZWxsYWJsZVByb21pc2V9IFJldHVybnMgYSBwZW5kaW5nIHJlcXVlc3QgY2FuY2VsbGFibGUgcHJvbWlzZS5cblx0ICovXG5cdG5hdmlnYXRlKHBhdGgsIG9wdF9yZXBsYWNlSGlzdG9yeSwgb3B0X2V2ZW50KSB7XG5cdFx0aWYgKCF1dGlscy5pc0h0bWw1SGlzdG9yeVN1cHBvcnRlZCgpKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ0hUTUw1IEhpc3RvcnkgaXMgbm90IHN1cHBvcnRlZC4gU2VubmEgd2lsbCBub3QgaW50ZXJjZXB0IG5hdmlnYXRpb24uJyk7XG5cdFx0fVxuXG5cdFx0Ly8gV2hlbiByZWxvYWRpbmcgdGhlIHNhbWUgcGF0aCBkbyByZXBsYWNlU3RhdGUgaW5zdGVhZCBvZiBwdXNoU3RhdGUgdG9cblx0XHQvLyBhdm9pZCBwb2xsdXRpbmcgaGlzdG9yeSB3aXRoIHN0YXRlcyB3aXRoIHRoZSBzYW1lIHBhdGguXG5cdFx0aWYgKHBhdGggPT09IHRoaXMuYWN0aXZlUGF0aCkge1xuXHRcdFx0b3B0X3JlcGxhY2VIaXN0b3J5ID0gdHJ1ZTtcblx0XHR9XG5cblx0XHR0aGlzLmVtaXQoJ2JlZm9yZU5hdmlnYXRlJywge1xuXHRcdFx0ZXZlbnQ6IG9wdF9ldmVudCxcblx0XHRcdHBhdGg6IHBhdGgsXG5cdFx0XHRyZXBsYWNlSGlzdG9yeTogISFvcHRfcmVwbGFjZUhpc3Rvcnlcblx0XHR9KTtcblxuXHRcdHJldHVybiB0aGlzLnBlbmRpbmdOYXZpZ2F0ZTtcblx0fVxuXG5cdC8qKlxuXHQgKiBCZWZvcmVzIG5hdmlnYXRpb24gdG8gYSBwYXRoLlxuXHQgKiBAcGFyYW0geyFFdmVudH0gZXZlbnQgRXZlbnQgZmFjYWRlIGNvbnRhaW5pbmcgPGNvZGU+cGF0aDwvY29kZT4gYW5kXG5cdCAqICAgICA8Y29kZT5yZXBsYWNlSGlzdG9yeTwvY29kZT4uXG5cdCAqIEBwcm90ZWN0ZWRcblx0ICovXG5cdG9uQmVmb3JlTmF2aWdhdGVfKGV2ZW50KSB7XG5cdFx0aWYgKGdsb2JhbHMuY2FwdHVyZWRGb3JtRWxlbWVudCkge1xuXHRcdFx0ZXZlbnQuZm9ybSA9IGdsb2JhbHMuY2FwdHVyZWRGb3JtRWxlbWVudDtcblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogQmVmb3JlcyBuYXZpZ2F0aW9uIHRvIGEgcGF0aC4gUnVucyBhZnRlciBleHRlcm5hbCBsaXN0ZW5lcnMuXG5cdCAqIEBwYXJhbSB7IUV2ZW50fSBldmVudCBFdmVudCBmYWNhZGUgY29udGFpbmluZyA8Y29kZT5wYXRoPC9jb2RlPiBhbmRcblx0ICogICAgIDxjb2RlPnJlcGxhY2VIaXN0b3J5PC9jb2RlPi5cblx0ICogQHByb3RlY3RlZFxuXHQgKi9cblx0b25CZWZvcmVOYXZpZ2F0ZURlZmF1bHRfKGV2ZW50KSB7XG5cdFx0aWYgKHRoaXMucGVuZGluZ05hdmlnYXRlKSB7XG5cdFx0XHRpZiAodGhpcy5wZW5kaW5nTmF2aWdhdGUucGF0aCA9PT0gZXZlbnQucGF0aCkge1xuXHRcdFx0XHRjb25zb2xlLmxvZygnV2FpdGluZy4uLicpO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0dGhpcy5lbWl0KCdiZWZvcmVVbmxvYWQnLCBldmVudCk7XG5cblx0XHR0aGlzLmVtaXQoJ3N0YXJ0TmF2aWdhdGUnLCB7XG5cdFx0XHRmb3JtOiBldmVudC5mb3JtLFxuXHRcdFx0cGF0aDogZXZlbnQucGF0aCxcblx0XHRcdHJlcGxhY2VIaXN0b3J5OiBldmVudC5yZXBsYWNlSGlzdG9yeVxuXHRcdH0pO1xuXHR9XG5cblx0LyoqXG5cdCAqIEN1c3RvbSBldmVudCBoYW5kbGVyIHRoYXQgZXhlY3V0ZXMgdGhlIG9yaWdpbmFsIGxpc3RlbmVyIHRoYXQgaGFzIGJlZW5cblx0ICogYWRkZWQgYnkgdGhlIGNsaWVudCBjb2RlIGFuZCB0ZXJtaW5hdGVzIHRoZSBuYXZpZ2F0aW9uIGFjY29yZGluZ2x5LlxuXHQgKiBAcGFyYW0geyFFdmVudH0gZXZlbnQgb3JpZ2luYWwgRXZlbnQgZmFjYWRlLlxuXHQgKiBAcHJvdGVjdGVkXG5cdCAqL1xuXHRvbkJlZm9yZVVubG9hZERlZmF1bHRfKGV2ZW50KSB7XG5cdFx0dmFyIGZ1bmMgPSB3aW5kb3cuX29uYmVmb3JldW5sb2FkO1xuXHRcdGlmIChmdW5jICYmICFmdW5jLl9vdmVybG9hZGVkICYmIGZ1bmMoKSkge1xuXHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogSW50ZXJjZXB0cyBkb2N1bWVudCBjbGlja3MgYW5kIHRlc3QgbGluayBlbGVtZW50cyBpbiBvcmRlciB0byBkZWNpZGVcblx0ICogd2hldGhlciBTdXJmYWNlIGFwcCBjYW4gbmF2aWdhdGUuXG5cdCAqIEBwYXJhbSB7IUV2ZW50fSBldmVudCBFdmVudCBmYWNhZGVcblx0ICogQHByb3RlY3RlZFxuXHQgKi9cblx0b25Eb2NDbGlja0RlbGVnYXRlXyhldmVudCkge1xuXHRcdGlmIChldmVudC5hbHRLZXkgfHwgZXZlbnQuY3RybEtleSB8fCBldmVudC5tZXRhS2V5IHx8IGV2ZW50LnNoaWZ0S2V5IHx8IGV2ZW50LmJ1dHRvbikge1xuXHRcdFx0Y29uc29sZS5sb2coJ05hdmlnYXRlIGFib3J0ZWQsIGludmFsaWQgbW91c2UgYnV0dG9uIG9yIG1vZGlmaWVyIGtleSBwcmVzc2VkLicpO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHR0aGlzLm1heWJlTmF2aWdhdGVfKGV2ZW50LmRlbGVnYXRlVGFyZ2V0LmhyZWYsIGV2ZW50KTtcblx0fVxuXG5cdC8qKlxuXHQgKiBJbnRlcmNlcHRzIGRvY3VtZW50IGZvcm0gc3VibWl0cyBhbmQgdGVzdCBhY3Rpb24gcGF0aCBpbiBvcmRlciB0byBkZWNpZGVcblx0ICogd2hldGhlciBTdXJmYWNlIGFwcCBjYW4gbmF2aWdhdGUuXG5cdCAqIEBwYXJhbSB7IUV2ZW50fSBldmVudCBFdmVudCBmYWNhZGVcblx0ICogQHByb3RlY3RlZFxuXHQgKi9cblx0b25Eb2NTdWJtaXREZWxlZ2F0ZV8oZXZlbnQpIHtcblx0XHR2YXIgZm9ybSA9IGV2ZW50LmRlbGVnYXRlVGFyZ2V0O1xuXHRcdGlmIChmb3JtLm1ldGhvZCA9PT0gJ2dldCcpIHtcblx0XHRcdGNvbnNvbGUubG9nKCdHRVQgbWV0aG9kIG5vdCBzdXBwb3J0ZWQnKTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0ZXZlbnQuY2FwdHVyZWRGb3JtRWxlbWVudCA9IGZvcm07XG5cdFx0Y29uc3QgYnV0dG9uU2VsZWN0b3IgPSAnYnV0dG9uOm5vdChbdHlwZV0pLGJ1dHRvblt0eXBlPXN1Ym1pdF0saW5wdXRbdHlwZT1zdWJtaXRdJztcblx0XHRpZiAobWF0Y2goZ2xvYmFscy5kb2N1bWVudC5hY3RpdmVFbGVtZW50LCBidXR0b25TZWxlY3RvcikpIHtcblx0XHRcdGV2ZW50LmNhcHR1cmVkRm9ybUJ1dHRvbkVsZW1lbnQgPSBnbG9iYWxzLmRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGV2ZW50LmNhcHR1cmVkRm9ybUJ1dHRvbkVsZW1lbnQgPSBmb3JtLnF1ZXJ5U2VsZWN0b3IoYnV0dG9uU2VsZWN0b3IpO1xuXHRcdH1cblx0XHR0aGlzLm1heWJlTmF2aWdhdGVfKGZvcm0uYWN0aW9uLCBldmVudCk7XG5cdH1cblxuXHQvKipcblx0ICogTGlzdGVucyB0byB0aGUgd2luZG93J3MgbG9hZCBldmVudCBpbiBvcmRlciB0byBhdm9pZCBpc3N1ZXMgd2l0aCBzb21lIGJyb3dzZXJzXG5cdCAqIHRoYXQgdHJpZ2dlciBwb3BzdGF0ZSBjYWxscyBvbiB0aGUgZmlyc3QgbG9hZC4gRm9yIG1vcmUgaW5mb3JtYXRpb24gc2VlXG5cdCAqIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNjQyMTc2OS9wb3BzdGF0ZS1vbi1wYWdlcy1sb2FkLWluLWNocm9tZS5cblx0ICogQHByb3RlY3RlZFxuXHQgKi9cblx0b25Mb2FkXygpIHtcblx0XHR0aGlzLnNraXBMb2FkUG9wc3RhdGUgPSB0cnVlO1xuXHRcdHNldFRpbWVvdXQoKCkgPT4ge1xuXHRcdFx0Ly8gVGhlIHRpbWVvdXQgZW5zdXJlcyB0aGF0IHBvcHN0YXRlIGV2ZW50cyB3aWxsIGJlIHVuYmxvY2tlZCByaWdodFxuXHRcdFx0Ly8gYWZ0ZXIgdGhlIGxvYWQgZXZlbnQgb2NjdXJlZCwgYnV0IG5vdCBpbiB0aGUgc2FtZSBldmVudC1sb29wIGN5Y2xlLlxuXHRcdFx0dGhpcy5za2lwTG9hZFBvcHN0YXRlID0gZmFsc2U7XG5cdFx0fSwgMCk7XG5cdFx0Ly8gVHJ5IHRvIHJlcG9zaXRpb24gc2Nyb2xsIHRvIHRoZSBoYXNoZWQgYW5jaG9yIHdoZW4gcGFnZSBsb2Fkcy5cblx0XHR0aGlzLm1heWJlUmVwb3NpdGlvblNjcm9sbFRvSGFzaGVkQW5jaG9yKCk7XG5cdH1cblxuXHQvKipcblx0ICogSGFuZGxlcyBicm93c2VyIGhpc3RvcnkgY2hhbmdlcyBhbmQgZmlyZXMgYXBwJ3MgbmF2aWdhdGlvbiBpZiB0aGUgc3RhdGVcblx0ICogYmVsb3dzIHRvIHVzLiBJZiB3ZSBkZXRlY3QgYSBwb3BzdGF0ZSBhbmQgdGhlIHN0YXRlIGlzIDxjb2RlPm51bGw8L2NvZGU+LFxuXHQgKiBhc3N1bWUgaXQgaXMgbmF2aWdhdGluZyB0byBhbiBleHRlcm5hbCBwYWdlIG9yIHRvIGEgcGFnZSB3ZSBkb24ndCBoYXZlXG5cdCAqIHJvdXRlLCB0aGVuIDxjb2RlPmdsb2JhbHMud2luZG93LmxvY2F0aW9uLnJlbG9hZCgpPC9jb2RlPiBpcyBpbnZva2VkIGluIG9yZGVyIHRvXG5cdCAqIHJlbG9hZCB0aGUgY29udGVudCB0byB0aGUgY3VycmVudCB1cmwuXG5cdCAqIEBwYXJhbSB7IUV2ZW50fSBldmVudCBFdmVudCBmYWNhZGVcblx0ICogQHByb3RlY3RlZFxuXHQgKi9cblx0b25Qb3BzdGF0ZV8oZXZlbnQpIHtcblx0XHRpZiAodGhpcy5za2lwTG9hZFBvcHN0YXRlKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gRG8gbm90IG5hdmlnYXRlIGlmIHRoZSBwb3BzdGF0ZSB3YXMgdHJpZ2dlcmVkIGJ5IGEgaGFzaCBjaGFuZ2UuXG5cdFx0aWYgKHV0aWxzLmlzQ3VycmVudEJyb3dzZXJQYXRoKHRoaXMuYnJvd3NlclBhdGhCZWZvcmVOYXZpZ2F0ZSkpIHtcblx0XHRcdHRoaXMubWF5YmVSZXBvc2l0aW9uU2Nyb2xsVG9IYXNoZWRBbmNob3IoKTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR2YXIgc3RhdGUgPSBldmVudC5zdGF0ZTtcblxuXHRcdGlmICghc3RhdGUpIHtcblx0XHRcdGlmIChnbG9iYWxzLndpbmRvdy5sb2NhdGlvbi5oYXNoKSB7XG5cdFx0XHRcdC8vIElmIHNlbm5hIGlzIG9uIGFuIHJlZGlyZWN0IHBhdGggYW5kIGEgaGFzaCBwb3BzdGF0ZSBoYXBwZW5zXG5cdFx0XHRcdC8vIHRvIGEgZGlmZmVyZW50IHVybCwgcmVsb2FkIHRoZSBicm93c2VyLiBUaGlzIGJlaGF2aW9yIGRvZXNuJ3Rcblx0XHRcdFx0Ly8gcmVxdWlyZSBzZW5uYSB0byByb3V0ZSBoYXNoZWQgbGlua3MgYW5kIGlzIGNsb3NlciB0byBuYXRpdmVcblx0XHRcdFx0Ly8gYnJvd3NlciBiZWhhdmlvci5cblx0XHRcdFx0aWYgKHRoaXMucmVkaXJlY3RQYXRoICYmICF1dGlscy5pc0N1cnJlbnRCcm93c2VyUGF0aCh0aGlzLnJlZGlyZWN0UGF0aCkpIHtcblx0XHRcdFx0XHR0aGlzLnJlbG9hZFBhZ2UoKTtcblx0XHRcdFx0fVxuXHRcdFx0XHQvLyBBbHdheXMgdHJ5IHRvIHJlcG9zaXRpb24gc2Nyb2xsIHRvIHRoZSBoYXNoZWQgYW5jaG9yIHdoZW5cblx0XHRcdFx0Ly8gaGFzaCBwb3BzdGF0ZSBoYXBwZW5zLlxuXHRcdFx0XHR0aGlzLm1heWJlUmVwb3NpdGlvblNjcm9sbFRvSGFzaGVkQW5jaG9yKCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0aGlzLnJlbG9hZFBhZ2UoKTtcblx0XHRcdH1cblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoc3RhdGUuc2VubmEpIHtcblx0XHRcdGNvbnNvbGUubG9nKCdIaXN0b3J5IG5hdmlnYXRpb24gdG8gWycgKyBzdGF0ZS5wYXRoICsgJ10nKTtcblx0XHRcdHRoaXMucG9wc3RhdGVTY3JvbGxUb3AgPSBzdGF0ZS5zY3JvbGxUb3A7XG5cdFx0XHR0aGlzLnBvcHN0YXRlU2Nyb2xsTGVmdCA9IHN0YXRlLnNjcm9sbExlZnQ7XG5cdFx0XHRpZiAoIXRoaXMubmF0aXZlU2Nyb2xsUmVzdG9yYXRpb25TdXBwb3J0ZWQpIHtcblx0XHRcdFx0dGhpcy5sb2NrSGlzdG9yeVNjcm9sbFBvc2l0aW9uXygpO1xuXHRcdFx0fVxuXHRcdFx0dGhpcy5vbmNlKCdlbmROYXZpZ2F0ZScsICgpID0+IHtcblx0XHRcdFx0aWYgKHN0YXRlLnJlZmVycmVyKSB7XG5cdFx0XHRcdFx0dXRpbHMuc2V0UmVmZXJyZXIoc3RhdGUucmVmZXJyZXIpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHRcdHRoaXMubmF2aWdhdGUoc3RhdGUucGF0aCwgdHJ1ZSk7XG5cdFx0fVxuXHR9XG5cblx0LyoqXG5cdCAqIExpc3RlbnMgZG9jdW1lbnQgc2Nyb2xsIGNoYW5nZXMgaW4gb3JkZXIgdG8gY2FwdHVyZSB0aGUgcG9zc2libGUgbG9ja1xuXHQgKiBzY3JvbGwgcG9zaXRpb24gZm9yIGhpc3Rvcnkgc2Nyb2xsaW5nLlxuXHQgKiBAcHJvdGVjdGVkXG5cdCAqL1xuXHRvblNjcm9sbF8oKSB7XG5cdFx0aWYgKHRoaXMuY2FwdHVyZVNjcm9sbFBvc2l0aW9uRnJvbVNjcm9sbEV2ZW50KSB7XG5cdFx0XHR0aGlzLnNhdmVIaXN0b3J5Q3VycmVudFBhZ2VTY3JvbGxQb3NpdGlvbl8oZ2xvYmFscy53aW5kb3cucGFnZVlPZmZzZXQsIGdsb2JhbHMud2luZG93LnBhZ2VYT2Zmc2V0KTtcblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogU3RhcnRzIG5hdmlnYXRpb24gdG8gYSBwYXRoLlxuXHQgKiBAcGFyYW0geyFFdmVudH0gZXZlbnQgRXZlbnQgZmFjYWRlIGNvbnRhaW5pbmcgPGNvZGU+cGF0aDwvY29kZT4gYW5kXG5cdCAqICAgICA8Y29kZT5yZXBsYWNlSGlzdG9yeTwvY29kZT4uXG5cdCAqIEBwcm90ZWN0ZWRcblx0ICovXG5cdG9uU3RhcnROYXZpZ2F0ZV8oZXZlbnQpIHtcblx0XHR0aGlzLm1heWJlRGlzYWJsZU5hdGl2ZVNjcm9sbFJlc3RvcmF0aW9uKCk7XG5cdFx0dGhpcy5jYXB0dXJlU2Nyb2xsUG9zaXRpb25Gcm9tU2Nyb2xsRXZlbnQgPSBmYWxzZTtcblx0XHRhZGRDbGFzc2VzKGdsb2JhbHMuZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LCB0aGlzLmxvYWRpbmdDc3NDbGFzcyk7XG5cblx0XHR2YXIgZW5kTmF2aWdhdGVQYXlsb2FkID0ge1xuXHRcdFx0Zm9ybTogZXZlbnQuZm9ybSxcblx0XHRcdHBhdGg6IGV2ZW50LnBhdGhcblx0XHR9O1xuXG5cdFx0dGhpcy5wZW5kaW5nTmF2aWdhdGUgPSB0aGlzLmRvTmF2aWdhdGVfKGV2ZW50LnBhdGgsIGV2ZW50LnJlcGxhY2VIaXN0b3J5KVxuXHRcdFx0LmNhdGNoKChyZWFzb24pID0+IHtcblx0XHRcdFx0ZW5kTmF2aWdhdGVQYXlsb2FkLmVycm9yID0gcmVhc29uO1xuXHRcdFx0XHR0aHJvdyByZWFzb247XG5cdFx0XHR9KVxuXHRcdFx0LnRoZW5BbHdheXMoKCkgPT4ge1xuXHRcdFx0XHRpZiAoIXRoaXMucGVuZGluZ05hdmlnYXRlKSB7XG5cdFx0XHRcdFx0cmVtb3ZlQ2xhc3NlcyhnbG9iYWxzLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudCwgdGhpcy5sb2FkaW5nQ3NzQ2xhc3MpO1xuXHRcdFx0XHRcdHRoaXMubWF5YmVSZXN0b3JlTmF0aXZlU2Nyb2xsUmVzdG9yYXRpb24oKTtcblx0XHRcdFx0XHR0aGlzLmNhcHR1cmVTY3JvbGxQb3NpdGlvbkZyb21TY3JvbGxFdmVudCA9IHRydWU7XG5cdFx0XHRcdH1cblx0XHRcdFx0dGhpcy5lbWl0KCdlbmROYXZpZ2F0ZScsIGVuZE5hdmlnYXRlUGF5bG9hZCk7XG5cdFx0XHR9KTtcblxuXHRcdHRoaXMucGVuZGluZ05hdmlnYXRlLnBhdGggPSBldmVudC5wYXRoO1xuXHR9XG5cblx0LyoqXG5cdCAqIFByZWZldGNoZXMgdGhlIHNwZWNpZmllZCBwYXRoIGlmIHRoZXJlIGlzIGEgcm91dGUgaGFuZGxlciB0aGF0IG1hdGNoZXMuXG5cdCAqIEBwYXJhbSB7IXN0cmluZ30gcGF0aCBQYXRoIHRvIG5hdmlnYXRlIGNvbnRhaW5pbmcgdGhlIGJhc2UgcGF0aC5cblx0ICogQHJldHVybiB7Q2FuY2VsbGFibGVQcm9taXNlfSBSZXR1cm5zIGEgcGVuZGluZyByZXF1ZXN0IGNhbmNlbGxhYmxlIHByb21pc2UuXG5cdCAqL1xuXHRwcmVmZXRjaChwYXRoKSB7XG5cdFx0dmFyIHJvdXRlID0gdGhpcy5maW5kUm91dGUocGF0aCk7XG5cdFx0aWYgKCFyb3V0ZSkge1xuXHRcdFx0cmV0dXJuIENhbmNlbGxhYmxlUHJvbWlzZS5yZWplY3QobmV3IENhbmNlbGxhYmxlUHJvbWlzZS5DYW5jZWxsYXRpb25FcnJvcignTm8gcm91dGUgZm9yICcgKyBwYXRoKSk7XG5cdFx0fVxuXG5cdFx0Y29uc29sZS5sb2coJ1ByZWZldGNoaW5nIFsnICsgcGF0aCArICddJyk7XG5cblx0XHR2YXIgbmV4dFNjcmVlbiA9IHRoaXMuY3JlYXRlU2NyZWVuSW5zdGFuY2UocGF0aCwgcm91dGUpO1xuXG5cdFx0cmV0dXJuIG5leHRTY3JlZW4ubG9hZChwYXRoKVxuXHRcdFx0LnRoZW4oKCkgPT4gdGhpcy5zY3JlZW5zW3BhdGhdID0gbmV4dFNjcmVlbilcblx0XHRcdC5jYXRjaCgocmVhc29uKSA9PiB7XG5cdFx0XHRcdHRoaXMuaGFuZGxlTmF2aWdhdGVFcnJvcl8ocGF0aCwgbmV4dFNjcmVlbiwgcmVhc29uKTtcblx0XHRcdFx0dGhyb3cgcmVhc29uO1xuXHRcdFx0fSk7XG5cdH1cblxuXHQvKipcblx0ICogUHJlcGFyZXMgc2NyZWVuIGZsaXAuIFVwZGF0ZXMgaGlzdG9yeSBzdGF0ZSBhbmQgc3VyZmFjZXMgY29udGVudC5cblx0ICogQHBhcmFtIHshc3RyaW5nfSBwYXRoIFBhdGggY29udGFpbmluZyB0aGUgcXVlcnlzdHJpbmcgcGFydC5cblx0ICogQHBhcmFtIHshU2NyZWVufSBuZXh0U2NyZWVuXG5cdCAqIEBwYXJhbSB7Ym9vbGVhbj19IG9wdF9yZXBsYWNlSGlzdG9yeSBSZXBsYWNlcyBicm93c2VyIGhpc3RvcnkuXG5cdCAqL1xuXHRwcmVwYXJlTmF2aWdhdGVIaXN0b3J5XyhwYXRoLCBuZXh0U2NyZWVuLCBvcHRfcmVwbGFjZUhpc3RvcnkpIHtcblx0XHRsZXQgdGl0bGUgPSBuZXh0U2NyZWVuLmdldFRpdGxlKCk7XG5cdFx0aWYgKCFpc1N0cmluZyh0aXRsZSkpIHtcblx0XHRcdHRpdGxlID0gdGhpcy5nZXREZWZhdWx0VGl0bGUoKTtcblx0XHR9XG5cdFx0bGV0IHJlZGlyZWN0UGF0aCA9IG5leHRTY3JlZW4uYmVmb3JlVXBkYXRlSGlzdG9yeVBhdGgocGF0aCk7XG5cdFx0Y29uc3QgaGlzdG9yeVN0YXRlID0ge1xuXHRcdFx0Zm9ybTogaXNEZWZBbmROb3ROdWxsKGdsb2JhbHMuY2FwdHVyZWRGb3JtRWxlbWVudCksXG5cdFx0XHRwYXRoLFxuXHRcdFx0cmVkaXJlY3RQYXRoLFxuXHRcdFx0c2Nyb2xsTGVmdDogMCxcblx0XHRcdHNjcm9sbFRvcDogMCxcblx0XHRcdHNlbm5hOiB0cnVlXG5cdFx0fTtcblx0XHRpZiAob3B0X3JlcGxhY2VIaXN0b3J5KSB7XG5cdFx0XHRoaXN0b3J5U3RhdGUuc2Nyb2xsVG9wID0gdGhpcy5wb3BzdGF0ZVNjcm9sbFRvcDtcblx0XHRcdGhpc3RvcnlTdGF0ZS5zY3JvbGxMZWZ0ID0gdGhpcy5wb3BzdGF0ZVNjcm9sbExlZnQ7XG5cdFx0fVxuXHRcdGNvbnN0IGhhc2ggPSBuZXcgVXJpKHBhdGgpLmdldEhhc2goKTtcblx0XHRyZWRpcmVjdFBhdGggPSB0aGlzLm1heWJlUmVzdG9yZVJlZGlyZWN0UGF0aEhhc2hfKHBhdGgsIHJlZGlyZWN0UGF0aCwgaGFzaCk7XG5cdFx0dGhpcy51cGRhdGVIaXN0b3J5Xyh0aXRsZSwgcmVkaXJlY3RQYXRoLCBuZXh0U2NyZWVuLmJlZm9yZVVwZGF0ZUhpc3RvcnlTdGF0ZShoaXN0b3J5U3RhdGUpLCBvcHRfcmVwbGFjZUhpc3RvcnkpO1xuXHRcdHRoaXMucmVkaXJlY3RQYXRoID0gcmVkaXJlY3RQYXRoO1xuXHR9XG5cblx0LyoqXG5cdCAqIFByZXBhcmVzIHNjcmVlbiBmbGlwLiBVcGRhdGVzIGhpc3Rvcnkgc3RhdGUgYW5kIHN1cmZhY2VzIGNvbnRlbnQuXG5cdCAqIEBwYXJhbSB7IVNjcmVlbn0gbmV4dFNjcmVlblxuXHQgKiBAcGFyYW0geyFPYmplY3R9IHN1cmZhY2VzIE1hcCBvZiBzdXJmYWNlcyB0byBmbGlwIGtleWVkIGJ5IHN1cmZhY2UgaWQuXG5cdCAqIEBwYXJhbSB7IU9iamVjdH0gcGFyYW1zIFBhcmFtcyBleHRyYWN0ZWQgZnJvbSB0aGUgY3VycmVudCBwYXRoLlxuXHQgKi9cblx0cHJlcGFyZU5hdmlnYXRlU3VyZmFjZXNfKG5leHRTY3JlZW4sIHN1cmZhY2VzLCBwYXJhbXMpIHtcblx0XHRPYmplY3Qua2V5cyhzdXJmYWNlcykuZm9yRWFjaCgoaWQpID0+IHtcblx0XHRcdHZhciBzdXJmYWNlQ29udGVudCA9IG5leHRTY3JlZW4uZ2V0U3VyZmFjZUNvbnRlbnQoaWQsIHBhcmFtcyk7XG5cdFx0XHRzdXJmYWNlc1tpZF0uYWRkQ29udGVudChuZXh0U2NyZWVuLmdldElkKCksIHN1cmZhY2VDb250ZW50KTtcblx0XHRcdGNvbnNvbGUubG9nKCdTY3JlZW4gWycgKyBuZXh0U2NyZWVuLmdldElkKCkgKyAnXSBhZGQgY29udGVudCB0byBzdXJmYWNlICcgK1xuXHRcdFx0XHQnWycgKyBzdXJmYWNlc1tpZF0gKyAnXSBbJyArIChpc0RlZkFuZE5vdE51bGwoc3VyZmFjZUNvbnRlbnQpID8gJy4uLicgOiAnZW1wdHknKSArICddJyk7XG5cdFx0fSk7XG5cdH1cblxuXHQvKipcblx0ICogUmVsb2FkcyB0aGUgcGFnZSBieSBwZXJmb3JtaW5nIGB3aW5kb3cubG9jYXRpb24ucmVsb2FkKClgLlxuXHQgKi9cblx0cmVsb2FkUGFnZSgpIHtcblx0XHRnbG9iYWxzLndpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBSZW1vdmVzIHJvdXRlIGluc3RhbmNlIGZyb20gYXBwIHJvdXRlcy5cblx0ICogQHBhcmFtIHtSb3V0ZX0gcm91dGVcblx0ICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiBhbiBlbGVtZW50IHdhcyByZW1vdmVkLlxuXHQgKi9cblx0cmVtb3ZlUm91dGUocm91dGUpIHtcblx0XHRyZXR1cm4gYXJyYXkucmVtb3ZlKHRoaXMucm91dGVzLCByb3V0ZSk7XG5cdH1cblxuXHQvKipcblx0ICogUmVtb3ZlcyBhIHNjcmVlbi5cblx0ICogQHBhcmFtIHshc3RyaW5nfSBwYXRoIFBhdGggY29udGFpbmluZyB0aGUgcXVlcnlzdHJpbmcgcGFydC5cblx0ICovXG5cdHJlbW92ZVNjcmVlbihwYXRoKSB7XG5cdFx0dmFyIHNjcmVlbiA9IHRoaXMuc2NyZWVuc1twYXRoXTtcblx0XHRpZiAoc2NyZWVuKSB7XG5cdFx0XHRPYmplY3Qua2V5cyh0aGlzLnN1cmZhY2VzKS5mb3JFYWNoKChzdXJmYWNlSWQpID0+IHRoaXMuc3VyZmFjZXNbc3VyZmFjZUlkXS5yZW1vdmUoc2NyZWVuLmdldElkKCkpKTtcblx0XHRcdHNjcmVlbi5kaXNwb3NlKCk7XG5cdFx0XHRkZWxldGUgdGhpcy5zY3JlZW5zW3BhdGhdO1xuXHRcdH1cblx0fVxuXG5cdC8qKlxuXHQgKiBTYXZlcyBnaXZlbiBzY3JvbGwgcG9zaXRpb24gaW50byBoaXN0b3J5IHN0YXRlLlxuXHQgKiBAcGFyYW0geyFudW1iZXJ9IHNjcm9sbFRvcCBOdW1iZXIgY29udGFpbmluZyB0aGUgdG9wIHNjcm9sbCBwb3NpdGlvbiB0byBiZSBzYXZlZC5cblx0ICogQHBhcmFtIHshbnVtYmVyfSBzY3JvbGxMZWZ0IE51bWJlciBjb250YWluaW5nIHRoZSBsZWZ0IHNjcm9sbCBwb3NpdGlvbiB0byBiZSBzYXZlZC5cblx0ICovXG5cdHNhdmVIaXN0b3J5Q3VycmVudFBhZ2VTY3JvbGxQb3NpdGlvbl8oc2Nyb2xsVG9wLCBzY3JvbGxMZWZ0KSB7XG5cdFx0dmFyIHN0YXRlID0gZ2xvYmFscy53aW5kb3cuaGlzdG9yeS5zdGF0ZTtcblx0XHRpZiAoc3RhdGUgJiYgc3RhdGUuc2VubmEpIHtcblx0XHRcdFtzdGF0ZS5zY3JvbGxUb3AsIHN0YXRlLnNjcm9sbExlZnRdID0gW3Njcm9sbFRvcCwgc2Nyb2xsTGVmdF07XG5cdFx0XHRnbG9iYWxzLndpbmRvdy5oaXN0b3J5LnJlcGxhY2VTdGF0ZShzdGF0ZSwgbnVsbCwgbnVsbCk7XG5cdFx0fVxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgYWxsb3cgcHJldmVudCBuYXZpZ2F0ZS5cblx0ICogQHBhcmFtIHtib29sZWFufSBhbGxvd1ByZXZlbnROYXZpZ2F0ZVxuXHQgKi9cblx0c2V0QWxsb3dQcmV2ZW50TmF2aWdhdGUoYWxsb3dQcmV2ZW50TmF2aWdhdGUpIHtcblx0XHR0aGlzLmFsbG93UHJldmVudE5hdmlnYXRlID0gYWxsb3dQcmV2ZW50TmF2aWdhdGU7XG5cdH1cblxuXHQvKipcblx0ICogU2V0cyBsaW5rIGJhc2UgcGF0aC5cblx0ICogQHBhcmFtIHshc3RyaW5nfSBwYXRoXG5cdCAqL1xuXHRzZXRCYXNlUGF0aChiYXNlUGF0aCkge1xuXHRcdHRoaXMuYmFzZVBhdGggPSB1dGlscy5yZW1vdmVQYXRoVHJhaWxpbmdTbGFzaChiYXNlUGF0aCk7XG5cdH1cblxuXHQvKipcblx0ICogU2V0cyB0aGUgZGVmYXVsdCBwYWdlIHRpdGxlLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gZGVmYXVsdFRpdGxlXG5cdCAqL1xuXHRzZXREZWZhdWx0VGl0bGUoZGVmYXVsdFRpdGxlKSB7XG5cdFx0dGhpcy5kZWZhdWx0VGl0bGUgPSBkZWZhdWx0VGl0bGU7XG5cdH1cblxuXHQvKipcblx0ICogU2V0cyB0aGUgZm9ybSBzZWxlY3Rvci5cblx0ICogQHBhcmFtIHshc3RyaW5nfSBmb3JtU2VsZWN0b3Jcblx0ICovXG5cdHNldEZvcm1TZWxlY3Rvcihmb3JtU2VsZWN0b3IpIHtcblx0XHR0aGlzLmZvcm1TZWxlY3RvciA9IGZvcm1TZWxlY3Rvcjtcblx0XHRpZiAodGhpcy5mb3JtRXZlbnRIYW5kbGVyXykge1xuXHRcdFx0dGhpcy5mb3JtRXZlbnRIYW5kbGVyXy5yZW1vdmVMaXN0ZW5lcigpO1xuXHRcdH1cblx0XHR0aGlzLmZvcm1FdmVudEhhbmRsZXJfID0gZGVsZWdhdGUoZG9jdW1lbnQsICdzdWJtaXQnLCB0aGlzLmZvcm1TZWxlY3RvciwgdGhpcy5vbkRvY1N1Ym1pdERlbGVnYXRlXy5iaW5kKHRoaXMpLCB0aGlzLmFsbG93UHJldmVudE5hdmlnYXRlKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBTZXRzIGlmIHJvdXRlIG1hdGNoaW5nIHNob3VsZCBpZ25vcmUgcXVlcnkgc3RyaW5nIGZyb20gdGhlIHJvdXRlIHBhdGguXG5cdCAqIEBwYXJhbSB7Ym9vbGVhbn0gaWdub3JlUXVlcnlTdHJpbmdGcm9tUm91dGVQYXRoXG5cdCAqL1xuXHRzZXRJZ25vcmVRdWVyeVN0cmluZ0Zyb21Sb3V0ZVBhdGgoaWdub3JlUXVlcnlTdHJpbmdGcm9tUm91dGVQYXRoKSB7XG5cdFx0dGhpcy5pZ25vcmVRdWVyeVN0cmluZ0Zyb21Sb3V0ZVBhdGggPSBpZ25vcmVRdWVyeVN0cmluZ0Zyb21Sb3V0ZVBhdGg7XG5cdH1cblxuXHQvKipcblx0ICogU2V0cyB0aGUgbGluayBzZWxlY3Rvci5cblx0ICogQHBhcmFtIHshc3RyaW5nfSBsaW5rU2VsZWN0b3Jcblx0ICovXG5cdHNldExpbmtTZWxlY3RvcihsaW5rU2VsZWN0b3IpIHtcblx0XHR0aGlzLmxpbmtTZWxlY3RvciA9IGxpbmtTZWxlY3Rvcjtcblx0XHRpZiAodGhpcy5saW5rRXZlbnRIYW5kbGVyXykge1xuXHRcdFx0dGhpcy5saW5rRXZlbnRIYW5kbGVyXy5yZW1vdmVMaXN0ZW5lcigpO1xuXHRcdH1cblx0XHR0aGlzLmxpbmtFdmVudEhhbmRsZXJfID0gZGVsZWdhdGUoZG9jdW1lbnQsICdjbGljaycsIHRoaXMubGlua1NlbGVjdG9yLCB0aGlzLm9uRG9jQ2xpY2tEZWxlZ2F0ZV8uYmluZCh0aGlzKSwgdGhpcy5hbGxvd1ByZXZlbnROYXZpZ2F0ZSk7XG5cdH1cblxuXHQvKipcblx0ICogU2V0cyB0aGUgbG9hZGluZyBjc3MgY2xhc3MuXG5cdCAqIEBwYXJhbSB7IXN0cmluZ30gbG9hZGluZ0Nzc0NsYXNzXG5cdCAqL1xuXHRzZXRMb2FkaW5nQ3NzQ2xhc3MobG9hZGluZ0Nzc0NsYXNzKSB7XG5cdFx0dGhpcy5sb2FkaW5nQ3NzQ2xhc3MgPSBsb2FkaW5nQ3NzQ2xhc3M7XG5cdH1cblxuXHQvKipcblx0ICogU2V0cyB0aGUgdXBkYXRlIHNjcm9sbCBwb3NpdGlvbiB2YWx1ZS5cblx0ICogQHBhcmFtIHtib29sZWFufSB1cGRhdGVTY3JvbGxQb3NpdGlvblxuXHQgKi9cblx0c2V0VXBkYXRlU2Nyb2xsUG9zaXRpb24odXBkYXRlU2Nyb2xsUG9zaXRpb24pIHtcblx0XHR0aGlzLnVwZGF0ZVNjcm9sbFBvc2l0aW9uID0gdXBkYXRlU2Nyb2xsUG9zaXRpb247XG5cdH1cblxuXHQvKipcblx0ICogQ2FuY2VscyBwZW5kaW5nIG5hdmlnYXRlIHdpdGggPGNvZGU+Q2FuY2VsIHBlbmRpbmcgbmF2aWdhdGlvbjwvY29kZT4gZXJyb3IuXG5cdCAqIEBwcm90ZWN0ZWRcblx0ICovXG5cdHN0b3BQZW5kaW5nTmF2aWdhdGVfKCkge1xuXHRcdGlmICh0aGlzLnBlbmRpbmdOYXZpZ2F0ZSkge1xuXHRcdFx0dGhpcy5wZW5kaW5nTmF2aWdhdGUuY2FuY2VsKCdDYW5jZWwgcGVuZGluZyBuYXZpZ2F0aW9uJyk7XG5cdFx0XHR0aGlzLnBlbmRpbmdOYXZpZ2F0ZSA9IG51bGw7XG5cdFx0fVxuXHR9XG5cblx0LyoqXG5cdCAqIFN5bmMgZG9jdW1lbnQgc2Nyb2xsIHBvc2l0aW9uIHR3aWNlLCB0aGUgZmlyc3Qgb25lIHN5bmNocm9ub3VzIGFuZCB0aGVuXG5cdCAqIG9uZSBpbnNpZGUgPGNvZGU+YXN5bmMubmV4dFRpY2s8L2NvZGU+LiBSZWxldmFudCB0byBicm93c2VycyB0aGF0IGZpcmVzXG5cdCAqIHNjcm9sbCByZXN0b3JhdGlvbiBhc3luY2hyb25vdXNseSBhZnRlciBwb3BzdGF0ZS5cblx0ICogQHByb3RlY3RlZFxuXHQgKiBAcmV0dXJuIHs/Q2FuY2VsbGFibGVQcm9taXNlPX1cblx0ICovXG5cdHN5bmNTY3JvbGxQb3NpdGlvblN5bmNUaGVuQXN5bmNfKCkge1xuXHRcdHZhciBzdGF0ZSA9IGdsb2JhbHMud2luZG93Lmhpc3Rvcnkuc3RhdGU7XG5cdFx0aWYgKCFzdGF0ZSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHZhciBzY3JvbGxUb3AgPSBzdGF0ZS5zY3JvbGxUb3A7XG5cdFx0dmFyIHNjcm9sbExlZnQgPSBzdGF0ZS5zY3JvbGxMZWZ0O1xuXG5cdFx0dmFyIHN5bmMgPSAoKSA9PiB7XG5cdFx0XHRpZiAodGhpcy51cGRhdGVTY3JvbGxQb3NpdGlvbikge1xuXHRcdFx0XHRnbG9iYWxzLndpbmRvdy5zY3JvbGxUbyhzY3JvbGxMZWZ0LCBzY3JvbGxUb3ApO1xuXHRcdFx0fVxuXHRcdH07XG5cblx0XHRyZXR1cm4gbmV3IENhbmNlbGxhYmxlUHJvbWlzZSgocmVzb2x2ZSkgPT4gc3luYygpICYgYXN5bmMubmV4dFRpY2soKCkgPT4gc3luYygpICYgcmVzb2x2ZSgpKSk7XG5cdH1cblxuXHQvKipcblx0ICogVXBkYXRlcyBvciByZXBsYWNlIGJyb3dzZXIgaGlzdG9yeS5cblx0ICogQHBhcmFtIHs/c3RyaW5nfSB0aXRsZSBEb2N1bWVudCB0aXRsZS5cblx0ICogQHBhcmFtIHshc3RyaW5nfSBwYXRoIFBhdGggY29udGFpbmluZyB0aGUgcXVlcnlzdHJpbmcgcGFydC5cblx0ICogQHBhcmFtIHshb2JqZWN0fSBzdGF0ZVxuXHQgKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfcmVwbGFjZUhpc3RvcnkgUmVwbGFjZXMgYnJvd3NlciBoaXN0b3J5LlxuXHQgKiBAcHJvdGVjdGVkXG5cdCAqL1xuXHR1cGRhdGVIaXN0b3J5Xyh0aXRsZSwgcGF0aCwgc3RhdGUsIG9wdF9yZXBsYWNlSGlzdG9yeSkge1xuXHRcdGNvbnN0IHJlZmVycmVyID0gZ2xvYmFscy53aW5kb3cubG9jYXRpb24uaHJlZjtcblxuXHRcdGlmIChzdGF0ZSkge1xuXHRcdFx0c3RhdGUucmVmZXJyZXIgPSByZWZlcnJlcjtcblx0XHR9XG5cblx0XHRpZiAob3B0X3JlcGxhY2VIaXN0b3J5KSB7XG5cdFx0XHRnbG9iYWxzLndpbmRvdy5oaXN0b3J5LnJlcGxhY2VTdGF0ZShzdGF0ZSwgdGl0bGUsIHBhdGgpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRnbG9iYWxzLndpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZShzdGF0ZSwgdGl0bGUsIHBhdGgpO1xuXHRcdH1cblxuXHRcdHV0aWxzLnNldFJlZmVycmVyKHJlZmVycmVyKTtcblxuXHRcdGxldCB0aXRsZU5vZGUgPSBnbG9iYWxzLmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ3RpdGxlJyk7XG5cdFx0aWYgKHRpdGxlTm9kZSkge1xuXHRcdFx0dGl0bGVOb2RlLmlubmVySFRNTCA9IHRpdGxlO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRnbG9iYWxzLmRvY3VtZW50LnRpdGxlID0gdGl0bGU7XG5cdFx0fVxuXHR9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgQXBwO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgeyBpc0RlZiwgaXNEZWZBbmROb3ROdWxsIH0gZnJvbSAnbWV0YWwnO1xuaW1wb3J0IFVyaSBmcm9tICdtZXRhbC11cmknO1xuaW1wb3J0IHsgQ2FuY2VsbGFibGVQcm9taXNlIGFzIFByb21pc2UgfSBmcm9tICdtZXRhbC1wcm9taXNlJztcblxuY2xhc3MgQWpheCB7XG5cblx0LyoqXG5cdCAqIFhtbEh0dHBSZXF1ZXN0J3MgZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCkgbWV0aG9kIHJldHVybnMgYSBzdHJpbmcgb2Zcblx0ICogcmVzcG9uc2UgaGVhZGVycyBhY2NvcmRpbmcgdG8gdGhlIGZvcm1hdCBkZXNjcmliZWQgb24gdGhlIHNwZWM6XG5cdCAqIHtAbGluayBodHRwOi8vd3d3LnczLm9yZy9UUi9YTUxIdHRwUmVxdWVzdC8jdGhlLWdldGFsbHJlc3BvbnNlaGVhZGVycy1tZXRob2R9LlxuXHQgKiBUaGlzIG1ldGhvZCBwYXJzZXMgdGhhdCBzdHJpbmcgaW50byBhIHVzZXItZnJpZW5kbHkgbmFtZS92YWx1ZSBwYWlyXG5cdCAqIG9iamVjdC5cblx0ICogQHBhcmFtIHtzdHJpbmd9IGFsbEhlYWRlcnMgQWxsIGhlYWRlcnMgYXMgc3RyaW5nLlxuXHQgKiBAcmV0dXJuIHshQXJyYXkuPE9iamVjdDxzdHJpbmcsIHN0cmluZz4+fVxuXHQgKi9cblx0c3RhdGljIHBhcnNlUmVzcG9uc2VIZWFkZXJzKGFsbEhlYWRlcnMpIHtcblx0XHR2YXIgaGVhZGVycyA9IFtdO1xuXHRcdGlmICghYWxsSGVhZGVycykge1xuXHRcdFx0cmV0dXJuIGhlYWRlcnM7XG5cdFx0fVxuXHRcdHZhciBwYWlycyA9IGFsbEhlYWRlcnMuc3BsaXQoJ1xcdTAwMGRcXHUwMDBhJyk7XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBwYWlycy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGluZGV4ID0gcGFpcnNbaV0uaW5kZXhPZignXFx1MDAzYVxcdTAwMjAnKTtcblx0XHRcdGlmIChpbmRleCA+IDApIHtcblx0XHRcdFx0dmFyIG5hbWUgPSBwYWlyc1tpXS5zdWJzdHJpbmcoMCwgaW5kZXgpO1xuXHRcdFx0XHR2YXIgdmFsdWUgPSBwYWlyc1tpXS5zdWJzdHJpbmcoaW5kZXggKyAyKTtcblx0XHRcdFx0aGVhZGVycy5wdXNoKHtcblx0XHRcdFx0XHRuYW1lOiBuYW1lLFxuXHRcdFx0XHRcdHZhbHVlOiB2YWx1ZVxuXHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIGhlYWRlcnM7XG5cdH1cblxuXHQvKipcblx0ICogUmVxdWVzdHMgdGhlIHVybCB1c2luZyBYTUxIdHRwUmVxdWVzdC5cblx0ICogQHBhcmFtIHshc3RyaW5nfSB1cmxcblx0ICogQHBhcmFtIHshc3RyaW5nfSBtZXRob2Rcblx0ICogQHBhcmFtIHs/c3RyaW5nfSBib2R5XG5cdCAqIEBwYXJhbSB7TXVsdGlNYXA9fSBvcHRfaGVhZGVyc1xuXHQgKiBAcGFyYW0ge011bHRpTWFwPX0gb3B0X3BhcmFtc1xuXHQgKiBAcGFyYW0ge251bWJlcj19IG9wdF90aW1lb3V0XG5cdCAqIEBwYXJhbSB7Ym9vbGVhbj19IG9wdF9zeW5jXG5cdCAqIEBwYXJhbSB7Ym9vbGVhbj19IG9wdF93aXRoQ3JlZGVudGlhbHNcblx0ICogQHJldHVybiB7UHJvbWlzZX0gRGVmZXJyZWQgYWpheCByZXF1ZXN0LlxuXHQgKiBAcHJvdGVjdGVkXG5cdCAqL1xuXHRzdGF0aWMgcmVxdWVzdCh1cmwsIG1ldGhvZCwgYm9keSwgb3B0X2hlYWRlcnMsIG9wdF9wYXJhbXMsIG9wdF90aW1lb3V0LCBvcHRfc3luYywgb3B0X3dpdGhDcmVkZW50aWFscykge1xuXHRcdHVybCA9IHVybCB8fCAnJztcblx0XHRtZXRob2QgPSBtZXRob2QgfHwgJ0dFVCc7XG5cblx0XHR2YXIgcmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuXHRcdHZhciBwcmV2aW91c1JlYWR5U3RhdGUgPSAwO1xuXG5cdFx0dmFyIHByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcblx0XHRcdHJlcXVlc3Qub25sb2FkID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmIChyZXF1ZXN0LmFib3J0ZWQpIHtcblx0XHRcdFx0XHRyZXF1ZXN0Lm9uZXJyb3IoKTtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblx0XHRcdFx0cmVzb2x2ZShyZXF1ZXN0KTtcblx0XHRcdH07XG5cdFx0XHRyZXF1ZXN0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAocHJldmlvdXNSZWFkeVN0YXRlICYmIHByZXZpb3VzUmVhZHlTdGF0ZSA8IDMgJiYgNCA9PT0gcmVxdWVzdC5yZWFkeVN0YXRlKSB7XG5cdFx0XHRcdFx0cmVxdWVzdC50ZXJtaW5hdGVkUHJlbWF0dXJlbHkgPSB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHByZXZpb3VzUmVhZHlTdGF0ZSA9IHJlcXVlc3QucmVhZHlTdGF0ZTtcblx0XHRcdH07XG5cdFx0XHRyZXF1ZXN0Lm9uZXJyb3IgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIG1lc3NhZ2UgPSAnUmVxdWVzdCBlcnJvcic7XG5cdFx0XHRcdGlmIChyZXF1ZXN0LnRlcm1pbmF0ZWRQcmVtYXR1cmVseSkge1xuXHRcdFx0XHRcdG1lc3NhZ2UgPSAnUmVxdWVzdCB0ZXJtaW5hdGVkIHByZW1hdHVyZWx5Jztcblx0XHRcdFx0fSBcblx0XHRcdFx0dmFyIGVycm9yID0gbmV3IEVycm9yKG1lc3NhZ2UpO1xuXHRcdFx0XHRlcnJvci5yZXF1ZXN0ID0gcmVxdWVzdDtcblx0XHRcdFx0cmVqZWN0KGVycm9yKTtcblx0XHRcdH07XG5cdFx0fSkudGhlbkNhdGNoKGZ1bmN0aW9uKHJlYXNvbikge1xuXHRcdFx0cmVxdWVzdC5hYm9ydCgpO1xuXHRcdFx0dGhyb3cgcmVhc29uO1xuXHRcdH0pLnRoZW5BbHdheXMoZnVuY3Rpb24oKSB7XG5cdFx0XHRjbGVhclRpbWVvdXQodGltZW91dCk7XG5cdFx0fSk7XG5cblx0XHR1cmwgPSBuZXcgVXJpKHVybCk7XG5cblx0XHRpZiAob3B0X3BhcmFtcykge1xuXHRcdFx0dXJsLmFkZFBhcmFtZXRlcnNGcm9tTXVsdGlNYXAob3B0X3BhcmFtcykudG9TdHJpbmcoKTtcblx0XHR9XG5cblx0XHR1cmwgPSB1cmwudG9TdHJpbmcoKTtcblxuXHRcdHJlcXVlc3Qub3BlbihtZXRob2QsIHVybCwgIW9wdF9zeW5jKTtcblxuXHRcdGlmIChvcHRfd2l0aENyZWRlbnRpYWxzKSB7XG5cdFx0XHRyZXF1ZXN0LndpdGhDcmVkZW50aWFscyA9IHRydWU7XG5cdFx0fVxuXG5cdFx0aWYgKG9wdF9oZWFkZXJzKSB7XG5cdFx0XHRvcHRfaGVhZGVycy5uYW1lcygpLmZvckVhY2goZnVuY3Rpb24obmFtZSkge1xuXHRcdFx0XHRyZXF1ZXN0LnNldFJlcXVlc3RIZWFkZXIobmFtZSwgb3B0X2hlYWRlcnMuZ2V0QWxsKG5hbWUpLmpvaW4oJywgJykpO1xuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0cmVxdWVzdC5zZW5kKGlzRGVmKGJvZHkpID8gYm9keSA6IG51bGwpO1xuXG5cdFx0aWYgKGlzRGVmQW5kTm90TnVsbChvcHRfdGltZW91dCkpIHtcblx0XHRcdHZhciB0aW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcblx0XHRcdFx0cHJvbWlzZS5jYW5jZWwoJ1JlcXVlc3QgdGltZW91dCcpO1xuXHRcdFx0fSwgb3B0X3RpbWVvdXQpO1xuXHRcdH1cblxuXHRcdHJldHVybiBwcm9taXNlO1xuXHR9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgQWpheDtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBIb2xkcyB2YWx1ZSBlcnJvciBtZXNzYWdlcy5cbiAqIEBjb25zdFxuICovXG5jbGFzcyBlcnJvcnMge1xufVxuXG4vKipcbiAqIEludmFsaWQgc3RhdHVzIGVycm9yIG1lc3NhZ2UuXG4gKiBAdHlwZSB7c3RyaW5nfVxuICogQHN0YXRpY1xuICovXG5lcnJvcnMuSU5WQUxJRF9TVEFUVVMgPSAnSW52YWxpZCBzdGF0dXMgY29kZSc7XG5cbi8qKlxuICogUmVxdWVzdCBlcnJvciBtZXNzYWdlLlxuICogQHR5cGUge3N0cmluZ31cbiAqIEBzdGF0aWNcbiAqL1xuZXJyb3JzLlJFUVVFU1RfRVJST1IgPSAnUmVxdWVzdCBlcnJvcic7XG5cbi8qKlxuICogUmVxdWVzdCB0aW1lb3V0IGVycm9yIG1lc3NhZ2UuXG4gKiBAdHlwZSB7c3RyaW5nfVxuICogQHN0YXRpY1xuICovXG5lcnJvcnMuUkVRVUVTVF9USU1FT1VUID0gJ1JlcXVlc3QgdGltZW91dCc7XG5cbi8qKlxuICogUmVxdWVzdCBpcyBibG9ja2VkIGJ5IENPUlMgaXNzdWUgbWVzc2FnZS5cbiAqIEB0eXBlIHtzdHJpbmd9XG4gKiBAc3RhdGljXG4gKi9cbmVycm9ycy5SRVFVRVNUX1BSRU1BVFVSRV9URVJNSU5BVElPTiA9ICdSZXF1ZXN0IHRlcm1pbmF0ZWQgcHJlbWF0dXJlbHknO1xuXG5leHBvcnQgZGVmYXVsdCBlcnJvcnM7XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogTWV0YWwuanMgYnJvd3NlciB1c2VyIGFnZW50IGRldGVjdGlvbi4gSXQncyBleHRyZW1lbHkgcmVjb21tZW5kZWQgdGhlIHVzYWdlXG4gKiBvZiBmZWF0dXJlIGNoZWNraW5nIG92ZXIgYnJvd3NlciB1c2VyIGFnZW50IHNuaWZmaW5nLiBVbmZvcnR1bmF0ZWx5LCBpbiBzb21lXG4gKiBzaXR1YXRpb25zIGZlYXR1cmUgY2hlY2tpbmcgY2FuIGJlIHNsb3cgb3IgZXZlbiBpbXBvc3NpYmxlLCB0aGVyZWZvcmUgdXNlXG4gKiB0aGlzIHV0aWxpdHkgd2l0aCBjYXV0aW9uLlxuICogQHNlZSA8YSBocmVmPVwiaHR0cDovL3d3dy51c2VyYWdlbnRzdHJpbmcuY29tL1wiPlVzZXIgYWdlbnQgc3RyaW5nczwvYT4uXG4gKi9cbmNsYXNzIFVBIHtcblx0LyoqXG5cdCAqIEdldHMgdGhlIG5hdGl2ZSB1c2VyQWdlbnQgc3RyaW5nIGZyb20gbmF2aWdhdG9yIGlmIGl0IGV4aXN0cy4gSWZcblx0ICogbmF2aWdhdG9yIG9yIG5hdmlnYXRvci51c2VyQWdlbnQgc3RyaW5nIGlzIG1pc3NpbmcsIHJldHVybnMgYW4gZW1wdHlcblx0ICogc3RyaW5nLlxuXHQgKiBAcmV0dXJuIHtzdHJpbmd9XG5cdCAqIEBwcml2YXRlXG5cdCAqIEBzdGF0aWNcblx0ICovXG5cdHN0YXRpYyBnZXROYXRpdmVVc2VyQWdlbnQoKSB7XG5cdFx0dmFyIG5hdmlnYXRvciA9IFVBLmdsb2JhbHMud2luZG93Lm5hdmlnYXRvcjtcblx0XHRpZiAobmF2aWdhdG9yKSB7XG5cdFx0XHR2YXIgdXNlckFnZW50ID0gbmF2aWdhdG9yLnVzZXJBZ2VudDtcblx0XHRcdGlmICh1c2VyQWdlbnQpIHtcblx0XHRcdFx0cmV0dXJuIHVzZXJBZ2VudDtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuICcnO1xuXHR9XG5cblx0LyoqXG5cdCAqIEdldHMgdGhlIG5hdGl2ZSBwbGF0Zm9ybSBzdHJpbmcgZnJvbSBuYXZpZ2F0b3IgaWYgaXQgZXhpc3RzLiBJZlxuXHQgKiBuYXZpZ2F0b3Igb3IgbmF2aWdhdG9yLnBsYXRmb3JtIHN0cmluZyBpcyBtaXNzaW5nLCByZXR1cm5zIGFuIGVtcHR5XG5cdCAqIHN0cmluZy5cblx0ICogQHJldHVybiB7c3RyaW5nfVxuXHQgKiBAcHJpdmF0ZVxuXHQgKiBAc3RhdGljXG5cdCAqL1xuXHRzdGF0aWMgZ2V0TmF0aXZlUGxhdGZvcm0oKSB7XG5cdFx0dmFyIG5hdmlnYXRvciA9IFVBLmdsb2JhbHMud2luZG93Lm5hdmlnYXRvcjtcblx0XHRpZiAobmF2aWdhdG9yKSB7XG5cdFx0XHR2YXIgcGxhdGZvcm0gPSBuYXZpZ2F0b3IucGxhdGZvcm07XG5cdFx0XHRpZiAocGxhdGZvcm0pIHtcblx0XHRcdFx0cmV0dXJuIHBsYXRmb3JtO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gJyc7XG5cdH1cblxuXHQvKipcblx0ICogV2hldGhlciB0aGUgcGxhdGZvcm0gY29udGFpbnMgdGhlIGdpdmVuIHN0cmluZywgaWdub3JpbmcgY2FzZS5cblx0ICogQHBhcmFtIHtzdHJpbmd9IHN0clxuXHQgKiBAcmV0dXJuIHtib29sZWFufVxuXHQgKiBAcHJpdmF0ZVxuXHQgKiBAc3RhdGljXG5cdCovXG5cdHN0YXRpYyBtYXRjaFBsYXRmb3JtKHN0cikge1xuXHRcdHJldHVybiBVQS5wbGF0Zm9ybS5pbmRleE9mKHN0cikgIT09IC0xO1xuXHR9XG5cblx0LyoqXG5cdCAqIFdoZXRoZXIgdGhlIHVzZXIgYWdlbnQgY29udGFpbnMgdGhlIGdpdmVuIHN0cmluZywgaWdub3JpbmcgY2FzZS5cblx0ICogQHBhcmFtIHtzdHJpbmd9IHN0clxuXHQgKiBAcmV0dXJuIHtib29sZWFufVxuXHQgKiBAcHJpdmF0ZVxuXHQgKiBAc3RhdGljXG5cdCovXG5cdHN0YXRpYyBtYXRjaFVzZXJBZ2VudChzdHIpIHtcblx0XHRyZXR1cm4gVUEudXNlckFnZW50LmluZGV4T2Yoc3RyKSAhPT0gLTE7XG5cdH1cblxuXHQvKipcblx0ICogVGVzdHMgdGhlIHVzZXIgYWdlbnQuXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSB1c2VyQWdlbnQgVGhlIHVzZXIgYWdlbnQgc3RyaW5nLlxuXHQgKiBAc3RhdGljXG5cdCAqL1xuXHRzdGF0aWMgdGVzdFVzZXJBZ2VudCh1c2VyQWdlbnQgPSAnJywgcGxhdGZvcm0gPSAnJykge1xuXHRcdC8qKlxuXHRcdCAqIEhvbGRzIHRoZSB1c2VyIGFnZW50IHZhbHVlIGV4dHJhY3RlZCBmcm9tIGJyb3dzZXIgbmF0aXZlIHVzZXIgYWdlbnQuXG5cdFx0ICogQHR5cGUge3N0cmluZ31cblx0XHQgKiBAc3RhdGljXG5cdFx0ICovXG5cdFx0VUEudXNlckFnZW50ID0gdXNlckFnZW50O1xuXG5cdFx0LyoqXG5cdFx0ICogSG9sZHMgdGhlIHBsYXRmb3JtIHZhbHVlIGV4dHJhY3RlZCBmcm9tIGJyb3dzZXIgbmF0aXZlIHBsYXRmb3JtLlxuXHRcdCAqIEB0eXBlIHtzdHJpbmd9XG5cdFx0ICogQHN0YXRpY1xuXHRcdCAqL1xuXHRcdFVBLnBsYXRmb3JtID0gcGxhdGZvcm07XG5cblx0XHQvKipcblx0XHQgKiBXaGV0aGVyIHRoZSB1c2VyJ3MgT1MgaXMgTWFjLlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEBzdGF0aWNcblx0XHQgKi9cblx0XHRVQS5pc01hYyA9IFVBLm1hdGNoUGxhdGZvcm0oJ01hYycpO1xuXG5cdFx0LyoqXG5cdFx0ICogV2hldGhlciB0aGUgdXNlcidzIE9TIGlzIFdpbi5cblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAc3RhdGljXG5cdFx0ICovXG5cdFx0VUEuaXNXaW4gPSBVQS5tYXRjaFBsYXRmb3JtKCdXaW4nKTtcblxuXHRcdC8qKlxuXHRcdCAqIFdoZXRoZXIgdGhlIHVzZXIncyBicm93c2VyIGlzIE9wZXJhLlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEBzdGF0aWNcblx0XHQgKi9cblx0XHRVQS5pc09wZXJhID0gVUEubWF0Y2hVc2VyQWdlbnQoJ09wZXJhJykgfHwgVUEubWF0Y2hVc2VyQWdlbnQoJ09QUicpO1xuXG5cdFx0LyoqXG5cdFx0ICogV2hldGhlciB0aGUgdXNlcidzIGJyb3dzZXIgaXMgSUUuXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQHN0YXRpY1xuXHRcdCAqL1xuXHRcdFVBLmlzSWUgPSBVQS5tYXRjaFVzZXJBZ2VudCgnVHJpZGVudCcpIHx8IFVBLm1hdGNoVXNlckFnZW50KCdNU0lFJyk7XG5cblx0XHQvKipcblx0XHQgKiBXaGV0aGVyIHRoZSB1c2VyJ3MgYnJvd3NlciBpcyBFZGdlLlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEBzdGF0aWNcblx0XHQgKi9cblx0XHRVQS5pc0VkZ2UgPSBVQS5tYXRjaFVzZXJBZ2VudCgnRWRnZScpO1xuXG5cdFx0LyoqXG5cdFx0ICogV2hldGhlciB0aGUgdXNlcidzIGJyb3dzZXIgaXMgSUUgb3IgRWRnZS5cblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAc3RhdGljXG5cdFx0ICovXG5cdFx0VUEuaXNJZU9yRWRnZSA9IFVBLmlzSWUgfHwgVUEuaXNFZGdlO1xuXG5cdFx0LyoqXG5cdFx0ICogV2hldGhlciB0aGUgdXNlcidzIGJyb3dzZXIgaXMgQ2hyb21lLlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEBzdGF0aWNcblx0XHQgKi9cblx0XHRVQS5pc0Nocm9tZSA9IChVQS5tYXRjaFVzZXJBZ2VudCgnQ2hyb21lJykgfHwgVUEubWF0Y2hVc2VyQWdlbnQoJ0NyaU9TJykpICYmICFVQS5pc09wZXJhICYmICFVQS5pc0VkZ2U7XG5cblx0XHQvKipcblx0XHQgKiBXaGV0aGVyIHRoZSB1c2VyJ3MgYnJvd3NlciBpcyBTYWZhcmkuXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQHN0YXRpY1xuXHRcdCAqL1xuXHRcdFVBLmlzU2FmYXJpID0gVUEubWF0Y2hVc2VyQWdlbnQoJ1NhZmFyaScpICYmICEoVUEuaXNDaHJvbWUgfHwgVUEuaXNPcGVyYSB8fCBVQS5pc0VkZ2UpO1xuXG5cdFx0LyoqXG5cdFx0ICogV2hldGhlciB0aGUgdXNlcidzIGJyb3dzZXIgaXMgRmlyZWZveC5cblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAc3RhdGljXG5cdFx0ICovXG5cdFx0VUEuaXNGaXJlZm94ID0gVUEubWF0Y2hVc2VyQWdlbnQoJ0ZpcmVmb3gnKTtcblx0fVxufVxuXG4vKipcbiAqIEV4cG9zZXMgZ2xvYmFsIHJlZmVyZW5jZXMuXG4gKiBAdHlwZSB7b2JqZWN0fVxuICogQHN0YXRpY1xuICovXG5VQS5nbG9iYWxzID0ge1xuXHR3aW5kb3c6IHdpbmRvd1xufTtcblxuVUEudGVzdFVzZXJBZ2VudChVQS5nZXROYXRpdmVVc2VyQWdlbnQoKSwgVUEuZ2V0TmF0aXZlUGxhdGZvcm0oKSk7XG5cbmV4cG9ydCBkZWZhdWx0IFVBO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgeyBpc0RlZkFuZE5vdE51bGwgfSBmcm9tICdtZXRhbCc7XG5pbXBvcnQgQWpheCBmcm9tICdtZXRhbC1hamF4JztcbmltcG9ydCB7IE11bHRpTWFwIH0gZnJvbSAnbWV0YWwtc3RydWN0cyc7XG5pbXBvcnQgQ2FuY2VsbGFibGVQcm9taXNlIGZyb20gJ21ldGFsLXByb21pc2UnO1xuaW1wb3J0IGVycm9ycyBmcm9tICcuLi9lcnJvcnMvZXJyb3JzJztcbmltcG9ydCB1dGlscyBmcm9tICcuLi91dGlscy91dGlscyc7XG5pbXBvcnQgZ2xvYmFscyBmcm9tICcuLi9nbG9iYWxzL2dsb2JhbHMnO1xuaW1wb3J0IFNjcmVlbiBmcm9tICcuL1NjcmVlbic7XG5pbXBvcnQgVXJpIGZyb20gJ21ldGFsLXVyaSc7XG5pbXBvcnQgVUEgZnJvbSAnbWV0YWwtdXNlcmFnZW50JztcblxuY2xhc3MgUmVxdWVzdFNjcmVlbiBleHRlbmRzIFNjcmVlbiB7XG5cblx0LyoqXG5cdCAqIFJlcXVlc3Qgc2NyZWVuIGFic3RyYWN0IGNsYXNzIHRvIHBlcmZvcm0gaW8gb3BlcmF0aW9ucyBvbiBkZXNjZW5kYW50XG5cdCAqIHNjcmVlbnMuXG5cdCAqIEBjb25zdHJ1Y3RvclxuXHQgKiBAZXh0ZW5kcyB7U2NyZWVufVxuXHQgKi9cblx0Y29uc3RydWN0b3IoKSB7XG5cdFx0c3VwZXIoKTtcblxuXHRcdC8qKlxuXHRcdCAqIEBpbmhlcml0RG9jXG5cdFx0ICogQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqL1xuXHRcdHRoaXMuY2FjaGVhYmxlID0gdHJ1ZTtcblxuXHRcdC8qKlxuXHRcdCAqIEhvbGRzIGRlZmF1bHQgaHR0cCBoZWFkZXJzIHRvIHNldCBvbiByZXF1ZXN0LlxuXHRcdCAqIEB0eXBlIHs/T2JqZWN0PX1cblx0XHQgKiBAZGVmYXVsdCB7XG5cdFx0ICogICAnWC1QSkFYJzogJ3RydWUnLFxuXHRcdCAqICAgJ1gtUmVxdWVzdGVkLVdpdGgnOiAnWE1MSHR0cFJlcXVlc3QnXG5cdFx0ICogfVxuXHRcdCAqIEBwcm90ZWN0ZWRcblx0XHQgKi9cblx0XHR0aGlzLmh0dHBIZWFkZXJzID0ge1xuXHRcdFx0J1gtUEpBWCc6ICd0cnVlJyxcblx0XHRcdCdYLVJlcXVlc3RlZC1XaXRoJzogJ1hNTEh0dHBSZXF1ZXN0J1xuXHRcdH07XG5cblx0XHQvKipcblx0XHQgKiBIb2xkcyBkZWZhdWx0IGh0dHAgbWV0aG9kIHRvIHBlcmZvcm0gdGhlIHJlcXVlc3QuXG5cdFx0ICogQHR5cGUgeyFzdHJpbmd9XG5cdFx0ICogQGRlZmF1bHQgUmVxdWVzdFNjcmVlbi5HRVRcblx0XHQgKiBAcHJvdGVjdGVkXG5cdFx0ICovXG5cdFx0dGhpcy5odHRwTWV0aG9kID0gUmVxdWVzdFNjcmVlbi5HRVQ7XG5cblx0XHQvKipcblx0XHQgKiBIb2xkcyB0aGUgWEhSIG9iamVjdCByZXNwb25zaWJsZSBmb3IgdGhlIHJlcXVlc3QuXG5cdFx0ICogQHR5cGUge1hNTEh0dHBSZXF1ZXN0fVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKiBAcHJvdGVjdGVkXG5cdFx0ICovXG5cdFx0dGhpcy5yZXF1ZXN0ID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIEhvbGRzIHRoZSByZXF1ZXN0IHRpbWVvdXQgaW4gbWlsbGlzZWNvbmRzLlxuXHRcdCAqIEB0eXBlIHshbnVtYmVyfVxuXHRcdCAqIEBkZWZhdWx0IDMwMDAwXG5cdFx0ICogQHByb3RlY3RlZFxuXHRcdCAqL1xuXHRcdHRoaXMudGltZW91dCA9IDMwMDAwO1xuXHR9XG5cblx0LyoqXG5cdCAqIEFzc2VydHMgdGhhdCByZXNwb25zZSBzdGF0dXMgY29kZSBpcyB2YWxpZC5cblx0ICogQHBhcmFtIHtudW1iZXJ9IHN0YXR1c1xuXHQgKiBAcHJvdGVjdGVkXG5cdCAqL1xuXHRhc3NlcnRWYWxpZFJlc3BvbnNlU3RhdHVzQ29kZShzdGF0dXMpIHtcblx0XHRpZiAoIXRoaXMuaXNWYWxpZFJlc3BvbnNlU3RhdHVzQ29kZShzdGF0dXMpKSB7XG5cdFx0XHR2YXIgZXJyb3IgPSBuZXcgRXJyb3IoZXJyb3JzLklOVkFMSURfU1RBVFVTKTtcblx0XHRcdGVycm9yLmludmFsaWRTdGF0dXMgPSB0cnVlO1xuXHRcdFx0ZXJyb3Iuc3RhdHVzQ29kZSA9IHN0YXR1cztcblx0XHRcdHRocm93IGVycm9yO1xuXHRcdH1cblx0fVxuXG5cdC8qKlxuXHQgKiBAaW5oZXJpdERvY1xuXHQgKi9cblx0YmVmb3JlVXBkYXRlSGlzdG9yeVBhdGgocGF0aCkge1xuXHRcdHZhciByZWRpcmVjdFBhdGggPSB0aGlzLmdldFJlcXVlc3RQYXRoKCk7XG5cdFx0aWYgKHJlZGlyZWN0UGF0aCAmJiByZWRpcmVjdFBhdGggIT09IHBhdGgpIHtcblx0XHRcdHJldHVybiByZWRpcmVjdFBhdGg7XG5cdFx0fVxuXHRcdHJldHVybiBwYXRoO1xuXHR9XG5cblx0LyoqXG5cdCAqIEBpbmhlcml0RG9jXG5cdCAqL1xuXHRiZWZvcmVVcGRhdGVIaXN0b3J5U3RhdGUoc3RhdGUpIHtcblx0XHQvLyBJZiBzdGF0ZSBpcyBvdXJzIGFuZCBuYXZpZ2F0ZSB0byBwb3N0LXdpdGhvdXQtcmVkaXJlY3QtZ2V0IHNldFxuXHRcdC8vIGhpc3Rvcnkgc3RhdGUgdG8gbnVsbCwgdGhhdCB3YXkgU2VubmEgd2lsbCByZWxvYWQgdGhlIHBhZ2Ugb25cblx0XHQvLyBwb3BzdGF0ZSBzaW5jZSBpdCBjYW5ub3QgcHJlZGljdCBwb3N0IGRhdGEuXG5cdFx0aWYgKHN0YXRlLnNlbm5hICYmIHN0YXRlLmZvcm0gJiYgc3RhdGUucmVkaXJlY3RQYXRoID09PSBzdGF0ZS5wYXRoKSB7XG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9XG5cdFx0cmV0dXJuIHN0YXRlO1xuXHR9XG5cblx0LyoqXG5cdCAqIEZvcm1hdHMgbG9hZCBwYXRoIGJlZm9yZSBpbnZva2luZyBhamF4IGNhbGwuXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoXG5cdCAqIEByZXR1cm4ge3N0cmluZ30gRm9ybWF0dGVkIHBhdGg7XG5cdCAqIEBwcm90ZWN0ZWRcblx0ICovXG5cdGZvcm1hdExvYWRQYXRoKHBhdGgpIHtcblx0XHR2YXIgdXJpID0gbmV3IFVyaShwYXRoKTtcblxuXHRcdHVyaS5zZXRIb3N0bmFtZShnbG9iYWxzLndpbmRvdy5sb2NhdGlvbi5ob3N0bmFtZSk7XG5cdFx0dXJpLnNldFByb3RvY29sKGdsb2JhbHMud2luZG93LmxvY2F0aW9uLnByb3RvY29sKTtcblxuXHRcdGlmIChnbG9iYWxzLndpbmRvdy5sb2NhdGlvbi5wb3J0KSB7XG5cdFx0XHR1cmkuc2V0UG9ydChnbG9iYWxzLndpbmRvdy5sb2NhdGlvbi5wb3J0KTtcblx0XHR9XG5cblx0XHRpZiAoVUEuaXNJZU9yRWRnZSAmJiB0aGlzLmh0dHBNZXRob2QgPT09IFJlcXVlc3RTY3JlZW4uR0VUKSB7XG5cdFx0XHRyZXR1cm4gdXJpLm1ha2VVbmlxdWUoKS50b1N0cmluZygpO1xuXHRcdH1cblxuXHRcdHJldHVybiB1cmkudG9TdHJpbmcoKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBHZXRzIHRoZSBodHRwIGhlYWRlcnMuXG5cdCAqIEByZXR1cm4gez9PYmplY3Q9fVxuXHQgKi9cblx0Z2V0SHR0cEhlYWRlcnMoKSB7XG5cdFx0cmV0dXJuIHRoaXMuaHR0cEhlYWRlcnM7XG5cdH1cblxuXHQvKipcblx0ICogR2V0cyB0aGUgaHR0cCBtZXRob2QuXG5cdCAqIEByZXR1cm4geyFzdHJpbmd9XG5cdCAqL1xuXHRnZXRIdHRwTWV0aG9kKCkge1xuXHRcdHJldHVybiB0aGlzLmh0dHBNZXRob2Q7XG5cdH1cblxuXHQvKipcblx0ICogR2V0cyByZXF1ZXN0IHBhdGguXG5cdCAqIEByZXR1cm4ge3N0cmluZz19XG5cdCAqL1xuXHRnZXRSZXF1ZXN0UGF0aCgpIHtcblx0XHR2YXIgcmVxdWVzdCA9IHRoaXMuZ2V0UmVxdWVzdCgpO1xuXHRcdGlmIChyZXF1ZXN0KSB7XG5cdFx0XHR2YXIgcmVxdWVzdFBhdGggPSByZXF1ZXN0LnJlcXVlc3RQYXRoO1xuXHRcdFx0dmFyIHJlc3BvbnNlVXJsID0gdGhpcy5tYXliZUV4dHJhY3RSZXNwb25zZVVybEZyb21SZXF1ZXN0KHJlcXVlc3QpO1xuXHRcdFx0aWYgKHJlc3BvbnNlVXJsKSB7XG5cdFx0XHRcdHJlcXVlc3RQYXRoID0gcmVzcG9uc2VVcmw7XG5cdFx0XHR9XG5cdFx0XHRpZiAoVUEuaXNJZU9yRWRnZSAmJiB0aGlzLmh0dHBNZXRob2QgPT09IFJlcXVlc3RTY3JlZW4uR0VUKSB7XG5cdFx0XHRcdHJlcXVlc3RQYXRoID0gbmV3IFVyaShyZXF1ZXN0UGF0aCkucmVtb3ZlVW5pcXVlKCkudG9TdHJpbmcoKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiB1dGlscy5nZXRVcmxQYXRoKHJlcXVlc3RQYXRoKTtcblx0XHR9XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHQvKipcblx0ICogR2V0cyB0aGUgcmVxdWVzdCBvYmplY3QuXG5cdCAqIEByZXR1cm4gez9PYmplY3R9XG5cdCAqL1xuXHRnZXRSZXF1ZXN0KCkge1xuXHRcdHJldHVybiB0aGlzLnJlcXVlc3Q7XG5cdH1cblxuXHQvKipcblx0ICogR2V0cyB0aGUgcmVxdWVzdCB0aW1lb3V0LlxuXHQgKiBAcmV0dXJuIHshbnVtYmVyfVxuXHQgKi9cblx0Z2V0VGltZW91dCgpIHtcblx0XHRyZXR1cm4gdGhpcy50aW1lb3V0O1xuXHR9XG5cblx0LyoqXG5cdCAqIENoZWNrcyBpZiByZXNwb25zZSBzdWNjZWVkZWQuIEFueSBzdGF0dXMgY29kZSAyeHggb3IgM3h4IGlzIGNvbnNpZGVyZWRcblx0ICogdmFsaWQuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBzdGF0dXNDb2RlXG5cdCAqL1xuXHRpc1ZhbGlkUmVzcG9uc2VTdGF0dXNDb2RlKHN0YXR1c0NvZGUpIHtcblx0XHRyZXR1cm4gc3RhdHVzQ29kZSA+PSAyMDAgJiYgc3RhdHVzQ29kZSA8PSAzOTk7XG5cdH1cblxuXHQvKipcblx0ICogQGluaGVyaXREb2Ncblx0ICovXG5cdGxvYWQocGF0aCkge1xuXHRcdGNvbnN0IGNhY2hlID0gdGhpcy5nZXRDYWNoZSgpO1xuXHRcdGlmIChpc0RlZkFuZE5vdE51bGwoY2FjaGUpKSB7XG5cdFx0XHRyZXR1cm4gQ2FuY2VsbGFibGVQcm9taXNlLnJlc29sdmUoY2FjaGUpO1xuXHRcdH1cblx0XHRsZXQgYm9keSA9IG51bGw7XG5cdFx0bGV0IGh0dHBNZXRob2QgPSB0aGlzLmh0dHBNZXRob2Q7XG5cdFx0Y29uc3QgaGVhZGVycyA9IG5ldyBNdWx0aU1hcCgpO1xuXHRcdE9iamVjdC5rZXlzKHRoaXMuaHR0cEhlYWRlcnMpLmZvckVhY2goaGVhZGVyID0+IGhlYWRlcnMuYWRkKGhlYWRlciwgdGhpcy5odHRwSGVhZGVyc1toZWFkZXJdKSk7XG5cdFx0aWYgKGdsb2JhbHMuY2FwdHVyZWRGb3JtRWxlbWVudCkge1xuXHRcdFx0dGhpcy5hZGRTYWZhcmlYSFJQb2x5ZmlsbCgpO1xuXHRcdFx0Ym9keSA9IG5ldyBGb3JtRGF0YShnbG9iYWxzLmNhcHR1cmVkRm9ybUVsZW1lbnQpO1xuXHRcdFx0dGhpcy5tYXliZUFwcGVuZFN1Ym1pdEJ1dHRvblZhbHVlXyhib2R5KTtcblx0XHRcdGh0dHBNZXRob2QgPSBSZXF1ZXN0U2NyZWVuLlBPU1Q7XG5cdFx0XHRpZiAoVUEuaXNJZU9yRWRnZSkge1xuXHRcdFx0XHRoZWFkZXJzLmFkZCgnSWYtTm9uZS1NYXRjaCcsICdcIjBcIicpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRjb25zdCByZXF1ZXN0UGF0aCA9IHRoaXMuZm9ybWF0TG9hZFBhdGgocGF0aCk7XG5cdFx0cmV0dXJuIEFqYXhcblx0XHRcdC5yZXF1ZXN0KHJlcXVlc3RQYXRoLCBodHRwTWV0aG9kLCBib2R5LCBoZWFkZXJzLCBudWxsLCB0aGlzLnRpbWVvdXQpXG5cdFx0XHQudGhlbih4aHIgPT4ge1xuXHRcdFx0XHR0aGlzLnJlbW92ZVNhZmFyaVhIUlBvbHlmaWxsKCk7XG5cdFx0XHRcdHRoaXMuc2V0UmVxdWVzdCh4aHIpO1xuXHRcdFx0XHR0aGlzLmFzc2VydFZhbGlkUmVzcG9uc2VTdGF0dXNDb2RlKHhoci5zdGF0dXMpO1xuXHRcdFx0XHRpZiAoaHR0cE1ldGhvZCA9PT0gUmVxdWVzdFNjcmVlbi5HRVQgJiYgdGhpcy5pc0NhY2hlYWJsZSgpKSB7XG5cdFx0XHRcdFx0dGhpcy5hZGRDYWNoZSh4aHIucmVzcG9uc2VUZXh0KTtcblx0XHRcdFx0fVxuXHRcdFx0XHR4aHIucmVxdWVzdFBhdGggPSByZXF1ZXN0UGF0aDtcblx0XHRcdFx0cmV0dXJuIHhoci5yZXNwb25zZVRleHQ7XG5cdFx0XHR9KVxuXHRcdFx0LmNhdGNoKChyZWFzb24pID0+IHtcblx0XHRcdFx0dGhpcy5yZW1vdmVTYWZhcmlYSFJQb2x5ZmlsbCgpO1xuXHRcdFx0XHRzd2l0Y2ggKHJlYXNvbi5tZXNzYWdlKSB7XG5cdFx0XHRcdFx0Y2FzZSBlcnJvcnMuUkVRVUVTVF9USU1FT1VUOlxuXHRcdFx0XHRcdFx0cmVhc29uLnRpbWVvdXQgPSB0cnVlO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSBlcnJvcnMuUkVRVUVTVF9FUlJPUjpcblx0XHRcdFx0XHRcdHJlYXNvbi5yZXF1ZXN0RXJyb3IgPSB0cnVlO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSBlcnJvcnMuUkVRVUVTVF9QUkVNQVRVUkVfVEVSTUlOQVRJT046XG5cdFx0XHRcdFx0XHRyZWFzb24ucmVxdWVzdEVycm9yID0gdHJ1ZTtcblx0XHRcdFx0XHRcdHJlYXNvbi5yZXF1ZXN0UHJlbWF0dXJlVGVybWluYXRpb24gPSB0cnVlO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdFx0dGhyb3cgcmVhc29uO1xuXHRcdFx0fSk7XG5cdH1cblxuXHQvKipcblx0ICogQWRkcyBhZGl0aW9uYWwgZGF0YSB0byB0aGUgYm9keSBvZiB0aGUgcmVxdWVzdCBpbiBjYXNlIGEgc3VibWl0IGJ1dHRvblxuXHQgKiBpcyBjYXB0dXJlZCBkdXJpbmcgZm9ybSBzdWJtaXNzaW9uLlxuXHQgKiBAcGFyYW0geyFGb3JtRGF0YX0gYm9keSBUaGUgRm9ybURhdGEgY29udGFpbmluZyB0aGUgcmVxdWVzdCBib2R5LlxuXHQgKiBAcHJvdGVjdGVkXG5cdCAqL1xuXHRtYXliZUFwcGVuZFN1Ym1pdEJ1dHRvblZhbHVlXyhib2R5KSB7XG5cdFx0Y29uc3QgYnV0dG9uID0gZ2xvYmFscy5jYXB0dXJlZEZvcm1CdXR0b25FbGVtZW50O1xuXHRcdGlmIChidXR0b24gJiYgYnV0dG9uLm5hbWUpIHtcblx0XHRcdGJvZHkuYXBwZW5kKGJ1dHRvbi5uYW1lLCBidXR0b24udmFsdWUpO1xuXHRcdH1cblx0fVxuXG5cdC8qKlxuXHQgKiBUaGUgZm9sbG93aW5nIG1ldGhvZCB0cmllcyB0byBleHRyYWN0IHRoZSByZXNwb25zZSB1cmwgdmFsdWUgYnkgY2hlY2tpbmdcblx0ICogdGhlIGN1c3RvbSByZXNwb25zZSBoZWFkZXIgJ1gtUmVxdWVzdC1VUkwnIGlmIHByb3BlciB2YWx1ZSBpcyBub3QgcHJlc2VudFxuXHQgKiBpbiBYTUxIdHRwUmVxdWVzdC4gVGhlIHZhbHVlIG9mIHJlc3BvbnNlVVJMIHdpbGwgYmUgdGhlIGZpbmFsIFVSTFxuXHQgKiBvYnRhaW5lZCBhZnRlciBhbnkgcmVkaXJlY3RzLiBJbnRlcm5ldCBFeHBsb3JlciwgRWRnZSBhbmQgU2FmYXJpIDw9IDdcblx0ICogZG9lcyBub3QgeWV0IHN1cHBvcnQgdGhlIGZlYXR1cmUuIEZvciBtb3JlIGluZm9ybWF0aW9uIHNlZTpcblx0ICogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1hNTEh0dHBSZXF1ZXN0L3Jlc3BvbnNlVVJMXG5cdCAqIGh0dHBzOi8veGhyLnNwZWMud2hhdHdnLm9yZy8jdGhlLXJlc3BvbnNldXJsLWF0dHJpYnV0ZVxuXHQgKiBAcGFyYW0ge1hNTEh0dHBSZXF1ZXN0fSByZXF1ZXN0XG5cdCAqIEByZXR1cm4gez9zdHJpbmd9IFJlc3BvbnNlIHVybCBiZXN0IG1hdGNoLlxuXHQgKi9cblx0bWF5YmVFeHRyYWN0UmVzcG9uc2VVcmxGcm9tUmVxdWVzdChyZXF1ZXN0KSB7XG5cdFx0dmFyIHJlc3BvbnNlVXJsID0gcmVxdWVzdC5yZXNwb25zZVVSTDtcblx0XHRpZiAocmVzcG9uc2VVcmwpIHtcblx0XHRcdHJldHVybiByZXNwb25zZVVybDtcblx0XHR9XG5cdFx0cmV0dXJuIHJlcXVlc3QuZ2V0UmVzcG9uc2VIZWFkZXIoUmVxdWVzdFNjcmVlbi5YX1JFUVVFU1RfVVJMX0hFQURFUik7XG5cdH1cblxuXHQvKipcblx0ICogVGhpcyBmdW5jdGlvbiBzZXQgYXR0cmlidXRlIGRhdGEtc2FmYXJpLXRlbXAtZGlzYWJsZWQgdG8gXG5cdCAqIHRydWUgYW5kIHNldCBkaXNhYmxlIGF0dHJpYnV0ZSBvZiBhbiBpbnB1dCB0eXBlPVwiZmlsZVwiIHRhZ1xuXHQgKiBpcyB1c2VkIGFzIGEgcG9seWZpbGwgZm9yIGlPUyAxMS4zIFNhZmFyaSAvIG1hY09TIFNhZmFyaSAxMS4xIFxuXHQgKiBlbXB0eSA8aW5wdXQgdHlwZT1cImZpbGVcIj4gWEhSIGJ1Zy5cblx0ICogaHR0cHM6Ly9naXRodWIuY29tL3JhaWxzL3JhaWxzL2lzc3Vlcy8zMjQ0MFxuXHQgKiBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTg0NDkwXG5cdCAqL1xuXHRhZGRTYWZhcmlYSFJQb2x5ZmlsbCgpIHtcblx0XHRpZiAoZ2xvYmFscy5jYXB0dXJlZEZvcm1FbGVtZW50ICYmIFVBLmlzU2FmYXJpKSB7XG5cdFx0XHRsZXQgaW5wdXRzID0gZ2xvYmFscy5jYXB0dXJlZEZvcm1FbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2lucHV0W3R5cGU9XCJmaWxlXCJdOm5vdChbZGlzYWJsZWRdKScpO1xuXHRcdFx0Zm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IGlucHV0cy5sZW5ndGg7IGluZGV4KyspIHtcblx0XHRcdFx0bGV0IGlucHV0ID0gaW5wdXRzW2luZGV4XTtcblx0XHRcdFx0aWYgKGlucHV0LmZpbGVzLmxlbmd0aCA+IDApIHtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblx0XHRcdFx0aW5wdXQuc2V0QXR0cmlidXRlKCdkYXRhLXNhZmFyaS10ZW1wLWRpc2FibGVkJywgJ3RydWUnKTtcblx0XHRcdFx0aW5wdXQuc2V0QXR0cmlidXRlKCdkaXNhYmxlZCcsICcnKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogVGhpcyBmdW5jdGlvbiByZW1vdmUgYXR0cmlidXRlIGRhdGEtc2FmYXJpLXRlbXAtZGlzYWJsZWQgYW5kIGRpc2FibGUgYXR0cmlidXRlXG5cdCAqIG9mIGFuIGlucHV0IHR5cGU9XCJmaWxlXCIgdGFnIGlzIHVzZWQgYXMgYSBwb2x5ZmlsbCBmb3IgaU9TIDExLjMgU2FmYXJpIC8gbWFjT1MgU2FmYXJpIDExLjFcblx0ICogZW1wdHkgPGlucHV0IHR5cGU9XCJmaWxlXCI+IFhIUiBidWcuXG5cdCAqIGh0dHBzOi8vZ2l0aHViLmNvbS9yYWlscy9yYWlscy9pc3N1ZXMvMzI0NDBcblx0ICogaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTE4NDQ5MFxuXHQgKi9cblx0cmVtb3ZlU2FmYXJpWEhSUG9seWZpbGwoKSB7XG5cdFx0aWYgKGdsb2JhbHMuY2FwdHVyZWRGb3JtRWxlbWVudCAmJiBVQS5pc1NhZmFyaSkge1xuXHRcdFx0bGV0IGlucHV0cyA9IGdsb2JhbHMuY2FwdHVyZWRGb3JtRWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKCdpbnB1dFt0eXBlPVwiZmlsZVwiXVtkYXRhLXNhZmFyaS10ZW1wLWRpc2FibGVkXScpO1xuXHRcdFx0Zm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IGlucHV0cy5sZW5ndGg7IGluZGV4KyspIHtcblx0XHRcdFx0Y29uc3QgaW5wdXQgPSBpbnB1dHNbaW5kZXhdO1xuXHRcdFx0XHRpbnB1dC5yZW1vdmVBdHRyaWJ1dGUoJ2RhdGEtc2FmYXJpLXRlbXAtZGlzYWJsZWQnKTtcblx0XHRcdFx0aW5wdXQucmVtb3ZlQXR0cmlidXRlKCdkaXNhYmxlZCcpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8qKlxuXHQgKiBTZXRzIHRoZSBodHRwIGhlYWRlcnMuXG5cdCAqIEBwYXJhbSB7P09iamVjdD19IGh0dHBIZWFkZXJzXG5cdCAqL1xuXHRzZXRIdHRwSGVhZGVycyhodHRwSGVhZGVycykge1xuXHRcdHRoaXMuaHR0cEhlYWRlcnMgPSBodHRwSGVhZGVycztcblx0fVxuXG5cdC8qKlxuXHQgKiBTZXRzIHRoZSBodHRwIG1ldGhvZC5cblx0ICogQHBhcmFtIHshc3RyaW5nfSBodHRwTWV0aG9kXG5cdCAqL1xuXHRzZXRIdHRwTWV0aG9kKGh0dHBNZXRob2QpIHtcblx0XHR0aGlzLmh0dHBNZXRob2QgPSBodHRwTWV0aG9kLnRvTG93ZXJDYXNlKCk7XG5cdH1cblxuXHQvKipcblx0ICogU2V0cyB0aGUgcmVxdWVzdCBvYmplY3QuXG5cdCAqIEBwYXJhbSB7P09iamVjdH0gcmVxdWVzdFxuXHQgKi9cblx0c2V0UmVxdWVzdChyZXF1ZXN0KSB7XG5cdFx0dGhpcy5yZXF1ZXN0ID0gcmVxdWVzdDtcblx0fVxuXG5cdC8qKlxuXHQgKiBTZXRzIHRoZSByZXF1ZXN0IHRpbWVvdXQgaW4gbWlsbGlzZWNvbmRzLlxuXHQgKiBAcGFyYW0geyFudW1iZXJ9IHRpbWVvdXRcblx0ICovXG5cdHNldFRpbWVvdXQodGltZW91dCkge1xuXHRcdHRoaXMudGltZW91dCA9IHRpbWVvdXQ7XG5cdH1cblxufVxuXG4vKipcbiAqIEhvbGRzIHZhbHVlIGZvciBtZXRob2QgZ2V0LlxuICogQHR5cGUge3N0cmluZ31cbiAqIEBkZWZhdWx0ICdnZXQnXG4gKiBAc3RhdGljXG4gKi9cblJlcXVlc3RTY3JlZW4uR0VUID0gJ2dldCc7XG5cbi8qKlxuICogSG9sZHMgdmFsdWUgZm9yIG1ldGhvZCBwb3N0LlxuICogQHR5cGUge3N0cmluZ31cbiAqIEBkZWZhdWx0ICdwb3N0J1xuICogQHN0YXRpY1xuICovXG5SZXF1ZXN0U2NyZWVuLlBPU1QgPSAncG9zdCc7XG5cbi8qKlxuICogRmFsbGJhY2sgaHR0cCBoZWFkZXIgdG8gcmV0cmlldmUgcmVzcG9uc2UgcmVxdWVzdCB1cmwuXG4gKiBAdHlwZSB7c3RyaW5nfVxuICogQGRlZmF1bHQgJ1gtUmVxdWVzdC1VUkwnXG4gKiBAc3RhdGljXG4gKi9cblJlcXVlc3RTY3JlZW4uWF9SRVFVRVNUX1VSTF9IRUFERVIgPSAnWC1SZXF1ZXN0LVVSTCc7XG5cbmV4cG9ydCBkZWZhdWx0IFJlcXVlc3RTY3JlZW47XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB7IGdldFVpZCB9IGZyb20gJ21ldGFsJztcbmltcG9ydCB7IGJ1aWxkRnJhZ21lbnQsIGV4aXREb2N1bWVudCwgZ2xvYmFsRXZhbCwgZ2xvYmFsRXZhbFN0eWxlcywgbWF0Y2ggfSBmcm9tICdtZXRhbC1kb20nO1xuaW1wb3J0IENhbmNlbGxhYmxlUHJvbWlzZSBmcm9tICdtZXRhbC1wcm9taXNlJztcbmltcG9ydCBnbG9iYWxzIGZyb20gJy4uL2dsb2JhbHMvZ2xvYmFscyc7XG5pbXBvcnQgUmVxdWVzdFNjcmVlbiBmcm9tICcuL1JlcXVlc3RTY3JlZW4nO1xuaW1wb3J0IFN1cmZhY2UgZnJvbSAnLi4vc3VyZmFjZS9TdXJmYWNlJztcbmltcG9ydCBVQSBmcm9tICdtZXRhbC11c2VyYWdlbnQnO1xuaW1wb3J0IFVyaSBmcm9tICdtZXRhbC11cmknO1xuaW1wb3J0IHV0aWxzIGZyb20gJy4uL3V0aWxzL3V0aWxzJztcblxuY2xhc3MgSHRtbFNjcmVlbiBleHRlbmRzIFJlcXVlc3RTY3JlZW4ge1xuXG5cdC8qKlxuXHQgKiBTY3JlZW4gY2xhc3MgdGhhdCBwZXJmb3JtIGEgcmVxdWVzdCBhbmQgZXh0cmFjdHMgc3VyZmFjZSBjb250ZW50cyBmcm9tXG5cdCAqIHRoZSByZXNwb25zZSBjb250ZW50LlxuXHQgKiBAY29uc3RydWN0b3Jcblx0ICogQGV4dGVuZHMge1JlcXVlc3RTY3JlZW59XG5cdCAqL1xuXHRjb25zdHJ1Y3RvcigpIHtcblx0XHRzdXBlcigpO1xuXG5cdFx0LyoqXG5cdFx0ICogSG9sZHMgdGhlIHRpdGxlIHNlbGVjdG9yLiBSZWxldmFudCB0byBleHRyYWN0IHRoZSA8Y29kZT48dGl0bGU+PC9jb2RlPlxuXHRcdCAqIGVsZW1lbnQgZnJvbSByZXF1ZXN0IGZyYWdtZW50cyB0byB1c2UgYXMgdGhlIHNjcmVlbiB0aXRsZS5cblx0XHQgKiBAdHlwZSB7IXN0cmluZ31cblx0XHQgKiBAZGVmYXVsdCB0aXRsZVxuXHRcdCAqIEBwcm90ZWN0ZWRcblx0XHQgKi9cblx0XHR0aGlzLnRpdGxlU2VsZWN0b3IgPSAndGl0bGUnO1xuXHR9XG5cblx0LyoqXG5cdCAqIEBpbmhlcml0RG9jXG5cdCAqL1xuXHRhY3RpdmF0ZSgpIHtcblx0XHRzdXBlci5hY3RpdmF0ZSgpO1xuXHRcdHRoaXMucmVsZWFzZVZpcnR1YWxEb2N1bWVudCgpO1xuXHRcdHRoaXMucGVuZGluZ1N0eWxlcyA9IG51bGw7XG5cdH1cblxuXHQvKipcblx0ICogQWxsb2NhdGVzIHZpcnR1YWwgZG9jdW1lbnQgZm9yIGNvbnRlbnQuIEFmdGVyIGFsbG9jYXRlZCB2aXJ0dWFsIGRvY3VtZW50XG5cdCAqIGNhbiBiZSBhY2Nlc3NlZCBieSA8Y29kZT50aGlzLnZpcnR1YWxEb2N1bWVudDwvY29kZT4uXG5cdCAqIEBwYXJhbSB7IXN0cmluZ30gaHRtbFN0cmluZ1xuXHQgKi9cblx0YWxsb2NhdGVWaXJ0dWFsRG9jdW1lbnRGb3JDb250ZW50KGh0bWxTdHJpbmcpIHtcblx0XHRpZiAoIXRoaXMudmlydHVhbERvY3VtZW50KSB7XG5cdFx0XHR0aGlzLnZpcnR1YWxEb2N1bWVudCA9IGdsb2JhbHMuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaHRtbCcpO1xuXHRcdH1cblxuXHRcdHRoaXMuY29weU5vZGVBdHRyaWJ1dGVzRnJvbUNvbnRlbnRfKGh0bWxTdHJpbmcsIHRoaXMudmlydHVhbERvY3VtZW50KTtcblxuXHRcdHRoaXMudmlydHVhbERvY3VtZW50LmlubmVySFRNTCA9IGh0bWxTdHJpbmc7XG5cdH1cblxuXHQvKipcblx0ICogQ3VzdG9taXplcyBsb2dpYyB0byBhcHBlbmQgc3R5bGVzIGludG8gZG9jdW1lbnQuIFJlbGV2YW50IHRvIHdoZW5cblx0ICogdHJhY2tpbmcgYSBzdHlsZSBieSBpZCBtYWtlIHN1cmUgdG8gcmUtcG9zaXRpb25zIHRoZSBuZXcgc3R5bGUgaW4gdGhlXG5cdCAqIHNhbWUgZG9tIG9yZGVyLlxuXHQgKiBAcGFyYW0ge0VsZW1lbnR9IG5ld1N0eWxlXG5cdCAqL1xuXHRhcHBlbmRTdHlsZUludG9Eb2N1bWVudF8obmV3U3R5bGUpIHtcblx0XHR2YXIgaXNUZW1wb3JhcnlTdHlsZSA9IG1hdGNoKG5ld1N0eWxlLCBIdG1sU2NyZWVuLnNlbGVjdG9ycy5zdHlsZXNUZW1wb3JhcnkpO1xuXHRcdGlmIChpc1RlbXBvcmFyeVN0eWxlKSB7XG5cdFx0XHR0aGlzLnBlbmRpbmdTdHlsZXMucHVzaChuZXdTdHlsZSk7XG5cdFx0fVxuXHRcdGlmIChuZXdTdHlsZS5pZCkge1xuXHRcdFx0dmFyIHN0eWxlSW5Eb2MgPSBnbG9iYWxzLmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG5ld1N0eWxlLmlkKTtcblx0XHRcdGlmIChzdHlsZUluRG9jKSB7XG5cdFx0XHRcdHN0eWxlSW5Eb2MucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobmV3U3R5bGUsIHN0eWxlSW5Eb2MubmV4dFNpYmxpbmcpO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGdsb2JhbHMuZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChuZXdTdHlsZSk7XG5cdH1cblxuXHQvKipcblx0ICogSWYgYm9keSBpcyB1c2VkIGFzIHN1cmZhY2UgZm9yY2VzIHRoZSByZXF1ZXN0ZWQgZG9jdW1lbnRzIHRvIGhhdmUgc2FtZSBpZFxuXHQgKiBvZiB0aGUgaW5pdGlhbCBwYWdlLlxuXHQgKi9cblx0YXNzZXJ0U2FtZUJvZHlJZEluVmlydHVhbERvY3VtZW50KCkge1xuXHRcdHZhciBib2R5U3VyZmFjZSA9IHRoaXMudmlydHVhbERvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2JvZHknKTtcblx0XHRpZiAoIWdsb2JhbHMuZG9jdW1lbnQuYm9keS5pZCkge1xuXHRcdFx0Z2xvYmFscy5kb2N1bWVudC5ib2R5LmlkID0gJ3Nlbm5hX3N1cmZhY2VfJyArIGdldFVpZCgpO1xuXHRcdH1cblx0XHRpZiAoYm9keVN1cmZhY2UpIHtcblx0XHRcdGJvZHlTdXJmYWNlLmlkID0gZ2xvYmFscy5kb2N1bWVudC5ib2R5LmlkO1xuXHRcdH1cblx0fVxuXG5cdC8qKlxuXHQgKiBDb3BpZXMgYXR0cmlidXRlcyBmcm9tIHRoZSA8aHRtbD4gdGFnIG9mIGNvbnRlbnQgdG8gdGhlIGdpdmVuIG5vZGUuXG5cdCAqL1xuXHRjb3B5Tm9kZUF0dHJpYnV0ZXNGcm9tQ29udGVudF8oY29udGVudCwgbm9kZSkge1xuXHRcdGNvbnRlbnQgPSBjb250ZW50LnJlcGxhY2UoL1s8XVxccypodG1sL2lnLCAnPHNlbm5hJyk7XG5cdFx0Y29udGVudCA9IGNvbnRlbnQucmVwbGFjZSgvXFwvaHRtbFxccypcXD4vaWcsICcvc2VubmE+Jyk7XG5cdFx0bm9kZS5pbm5lckhUTUwgPSBjb250ZW50O1xuXHRcdHZhciBwbGFjZWhvbGRlciA9IG5vZGUucXVlcnlTZWxlY3Rvcignc2VubmEnKTtcblx0XHRpZiAocGxhY2Vob2xkZXIpIHtcblx0XHRcdHV0aWxzLmNsZWFyTm9kZUF0dHJpYnV0ZXMobm9kZSk7XG5cdFx0XHR1dGlscy5jb3B5Tm9kZUF0dHJpYnV0ZXMocGxhY2Vob2xkZXIsIG5vZGUpO1xuXHRcdH1cblx0fVxuXG5cdC8qKlxuXHQgKiBAT3ZlcnJpZGVcblx0ICovXG5cdGRpc3Bvc2VJbnRlcm5hbCgpIHtcblx0XHR0aGlzLmRpc3Bvc2VQZW5kaW5nU3R5bGVzKCk7XG5cdFx0c3VwZXIuZGlzcG9zZUludGVybmFsKCk7XG5cdH1cblxuXHQvKipcblx0ICogRGlzcG9zZXMgcGVuZGluZyBzdHlsZXMgaWYgc2NyZWVuIGdldCBkaXNwb3NlZCBwcmlvciB0byBpdHMgbG9hZGluZy5cblx0ICovXG5cdGRpc3Bvc2VQZW5kaW5nU3R5bGVzKCkge1xuXHRcdGlmICh0aGlzLnBlbmRpbmdTdHlsZXMpIHtcblx0XHRcdHRoaXMucGVuZGluZ1N0eWxlcy5mb3JFYWNoKChzdHlsZSkgPT4gZXhpdERvY3VtZW50KHN0eWxlKSk7XG5cdFx0fVxuXHR9XG5cblx0LyoqXG5cdCAqIEBPdmVycmlkZVxuXHQgKi9cblx0ZXZhbHVhdGVTY3JpcHRzKHN1cmZhY2VzKSB7XG5cdFx0dmFyIGV2YWx1YXRlVHJhY2tlZFNjcmlwdHMgPSB0aGlzLmV2YWx1YXRlVHJhY2tlZFJlc291cmNlc18oXG5cdFx0XHRnbG9iYWxFdmFsLnJ1blNjcmlwdHNJbkVsZW1lbnQsIEh0bWxTY3JlZW4uc2VsZWN0b3JzLnNjcmlwdHMsXG5cdFx0XHRIdG1sU2NyZWVuLnNlbGVjdG9ycy5zY3JpcHRzVGVtcG9yYXJ5LCBIdG1sU2NyZWVuLnNlbGVjdG9ycy5zY3JpcHRzUGVybWFuZW50KTtcblxuXHRcdHJldHVybiBldmFsdWF0ZVRyYWNrZWRTY3JpcHRzLnRoZW4oKCkgPT4gc3VwZXIuZXZhbHVhdGVTY3JpcHRzKHN1cmZhY2VzKSk7XG5cdH1cblxuXHQvKipcblx0ICogQE92ZXJyaWRlXG5cdCAqL1xuXHRldmFsdWF0ZVN0eWxlcyhzdXJmYWNlcykge1xuXHRcdHRoaXMucGVuZGluZ1N0eWxlcyA9IFtdO1xuXHRcdHZhciBldmFsdWF0ZVRyYWNrZWRTdHlsZXMgPSB0aGlzLmV2YWx1YXRlVHJhY2tlZFJlc291cmNlc18oXG5cdFx0XHRnbG9iYWxFdmFsU3R5bGVzLnJ1blN0eWxlc0luRWxlbWVudCwgSHRtbFNjcmVlbi5zZWxlY3RvcnMuc3R5bGVzLFxuXHRcdFx0SHRtbFNjcmVlbi5zZWxlY3RvcnMuc3R5bGVzVGVtcG9yYXJ5LCBIdG1sU2NyZWVuLnNlbGVjdG9ycy5zdHlsZXNQZXJtYW5lbnQsXG5cdFx0XHR0aGlzLmFwcGVuZFN0eWxlSW50b0RvY3VtZW50Xy5iaW5kKHRoaXMpKTtcblxuXHRcdHJldHVybiBldmFsdWF0ZVRyYWNrZWRTdHlsZXMudGhlbigoKSA9PiBzdXBlci5ldmFsdWF0ZVN0eWxlcyhzdXJmYWNlcykpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEV2YWx1YXRlcyB0cmFja2VkIHJlc291cmNlcyBpbnNpZGUgaW5jb21pbmcgZnJhZ21lbnQgYW5kIHJlbW92ZSBleGlzdGluZ1xuXHQgKiB0ZW1wb3JhcnkgcmVzb3VyY2VzLlxuXHQgKiBAcGFyYW0gez9mdW5jdGlvbigpfSBhcHBlbmRGbiBGdW5jdGlvbiB0byBhcHBlbmQgdGhlIG5vZGUgaW50byBkb2N1bWVudC5cblx0ICogQHBhcmFtIHshc3RyaW5nfSBzZWxlY3RvciBTZWxlY3RvciB1c2VkIHRvIGZpbmQgcmVzb3VyY2VzIHRvIHRyYWNrLlxuXHQgKiBAcGFyYW0geyFzdHJpbmd9IHNlbGVjdG9yVGVtcG9yYXJ5IFNlbGVjdG9yIHVzZWQgdG8gZmluZCB0ZW1wb3Jhcnlcblx0ICogICAgIHJlc291cmNlcyB0byB0cmFjay5cblx0ICogQHBhcmFtIHshc3RyaW5nfSBzZWxlY3RvclBlcm1hbmVudCBTZWxlY3RvciB1c2VkIHRvIGZpbmQgcGVybWFuZW50XG5cdCAqICAgICByZXNvdXJjZXMgdG8gdHJhY2suXG5cdCAqIEBwYXJhbSB7IWZ1bmN0aW9ufSBvcHRfYXBwZW5kUmVzb3VyY2VGbiBPcHRpb25hbCBmdW5jdGlvbiB1c2VkIHRvXG5cdCAqICAgICBldmFsdWF0ZSBmcmFnbWVudCBjb250YWluaW5nIHJlc291cmNlcy5cblx0ICogQHJldHVybiB7Q2FuY2VsbGFibGVQcm9taXNlfSBEZWZlcnJlZCB0aGF0IHdhaXRzIHJlc291cmNlcyBldmFsdWF0aW9uIHRvXG5cdCAqICAgICBjb21wbGV0ZS5cblx0ICogQHByaXZhdGVcblx0ICovXG5cdGV2YWx1YXRlVHJhY2tlZFJlc291cmNlc18oZXZhbHVhdG9yRm4sIHNlbGVjdG9yLCBzZWxlY3RvclRlbXBvcmFyeSwgc2VsZWN0b3JQZXJtYW5lbnQsIG9wdF9hcHBlbmRSZXNvdXJjZUZuKSB7XG5cdFx0dmFyIHRyYWNrZWQgPSB0aGlzLnZpcnR1YWxRdWVyeVNlbGVjdG9yQWxsXyhzZWxlY3Rvcik7XG5cdFx0dmFyIHRlbXBvcmFyaWVzSW5Eb2MgPSB0aGlzLnF1ZXJ5U2VsZWN0b3JBbGxfKHNlbGVjdG9yVGVtcG9yYXJ5KTtcblx0XHR2YXIgcGVybWFuZW50c0luRG9jID0gdGhpcy5xdWVyeVNlbGVjdG9yQWxsXyhzZWxlY3RvclBlcm1hbmVudCk7XG5cblx0XHQvLyBBZGRzIHBlcm1hbmVudCByZXNvdXJjZXMgaW4gZG9jdW1lbnQgdG8gY2FjaGUuXG5cdFx0cGVybWFuZW50c0luRG9jLmZvckVhY2goKHJlc291cmNlKSA9PiB7XG5cdFx0XHR2YXIgcmVzb3VyY2VLZXkgPSB0aGlzLmdldFJlc291cmNlS2V5XyhyZXNvdXJjZSk7XG5cdFx0XHRpZiAocmVzb3VyY2VLZXkpIHtcblx0XHRcdFx0SHRtbFNjcmVlbi5wZXJtYW5lbnRSZXNvdXJjZXNJbkRvY1tyZXNvdXJjZUtleV0gPSB0cnVlO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0dmFyIGZyYWcgPSBidWlsZEZyYWdtZW50KCk7XG5cdFx0dHJhY2tlZC5mb3JFYWNoKChyZXNvdXJjZSkgPT4ge1xuXHRcdFx0dmFyIHJlc291cmNlS2V5ID0gdGhpcy5nZXRSZXNvdXJjZUtleV8ocmVzb3VyY2UpO1xuXHRcdFx0Ly8gRG8gbm90IGxvYWQgcGVybWFuZW50IHJlc291cmNlcyBpZiBhbHJlYWR5IGluIGRvY3VtZW50LlxuXHRcdFx0aWYgKCFIdG1sU2NyZWVuLnBlcm1hbmVudFJlc291cmNlc0luRG9jW3Jlc291cmNlS2V5XSkge1xuXHRcdFx0XHRmcmFnLmFwcGVuZENoaWxkKHJlc291cmNlKTtcblx0XHRcdH1cblx0XHRcdC8vIElmIHJlc291cmNlIGhhcyBrZXkgYW5kIGlzIHBlcm1hbmVudCBhZGQgdG8gY2FjaGUuXG5cdFx0XHRpZiAocmVzb3VyY2VLZXkgJiYgbWF0Y2gocmVzb3VyY2UsIHNlbGVjdG9yUGVybWFuZW50KSkge1xuXHRcdFx0XHRIdG1sU2NyZWVuLnBlcm1hbmVudFJlc291cmNlc0luRG9jW3Jlc291cmNlS2V5XSA9IHRydWU7XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHRyZXR1cm4gbmV3IENhbmNlbGxhYmxlUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuXHRcdFx0ZXZhbHVhdG9yRm4oZnJhZywgKCkgPT4ge1xuXHRcdFx0XHR0ZW1wb3Jhcmllc0luRG9jLmZvckVhY2goKHJlc291cmNlKSA9PiBleGl0RG9jdW1lbnQocmVzb3VyY2UpKTtcblx0XHRcdFx0cmVzb2x2ZSgpO1xuXHRcdFx0fSwgb3B0X2FwcGVuZFJlc291cmNlRm4pO1xuXHRcdH0pO1xuXHR9XG5cblx0LyoqXG5cdCAqIEBPdmVycmlkZVxuXHQgKi9cblx0ZmxpcChzdXJmYWNlcykge1xuXHRcdHJldHVybiBzdXBlci5mbGlwKHN1cmZhY2VzKS50aGVuKCgpID0+IHtcblx0XHRcdHV0aWxzLmNsZWFyTm9kZUF0dHJpYnV0ZXMoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KTtcblx0XHRcdHV0aWxzLmNvcHlOb2RlQXR0cmlidXRlcyh0aGlzLnZpcnR1YWxEb2N1bWVudCwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KTtcblx0XHR9KTtcblx0fVxuXG5cdC8qKlxuXHQgKiBFeHRyYWN0cyBhIGtleSB0byBpZGVudGlmeSB0aGUgcmVzb3VyY2UgYmFzZWQgb24gaXRzIGF0dHJpYnV0ZXMuXG5cdCAqIEBwYXJhbSB7RWxlbWVudH0gcmVzb3VyY2Vcblx0ICogQHJldHVybiB7c3RyaW5nfSBFeHRyYWN0ZWQga2V5IGJhc2VkIG9uIHJlc291cmNlIGF0dHJpYnV0ZXMgaW4gb3JkZXIgb2Zcblx0ICogICAgIHByZWZlcmVuY2U6IGlkLCBocmVmLCBzcmMuXG5cdCAqL1xuXHRnZXRSZXNvdXJjZUtleV8ocmVzb3VyY2UpIHtcblx0XHRyZXR1cm4gcmVzb3VyY2UuaWQgfHwgcmVzb3VyY2UuaHJlZiB8fCByZXNvdXJjZS5zcmMgfHwgJyc7XG5cdH1cblxuXHQvKipcblx0ICogQGluaGVyaXREb2Ncblx0ICovXG5cdGdldFN1cmZhY2VDb250ZW50KHN1cmZhY2VJZCkge1xuXHRcdHZhciBzdXJmYWNlID0gdGhpcy52aXJ0dWFsRG9jdW1lbnQucXVlcnlTZWxlY3RvcignIycgKyBzdXJmYWNlSWQpO1xuXHRcdGlmIChzdXJmYWNlKSB7XG5cdFx0XHR2YXIgZGVmYXVsdENoaWxkID0gc3VyZmFjZS5xdWVyeVNlbGVjdG9yKCcjJyArIHN1cmZhY2VJZCArICctJyArIFN1cmZhY2UuREVGQVVMVCk7XG5cdFx0XHRpZiAoZGVmYXVsdENoaWxkKSB7XG5cdFx0XHRcdHJldHVybiBkZWZhdWx0Q2hpbGQuaW5uZXJIVE1MO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHN1cmZhY2UuaW5uZXJIVE1MOyAvLyBJZiBkZWZhdWx0IGNvbnRlbnQgbm90IGZvdW5kLCB1c2Ugc3VyZmFjZSBjb250ZW50XG5cdFx0fVxuXHR9XG5cblx0LyoqXG5cdCAqIEdldHMgdGhlIHRpdGxlIHNlbGVjdG9yLlxuXHQgKiBAcmV0dXJuIHshc3RyaW5nfVxuXHQgKi9cblx0Z2V0VGl0bGVTZWxlY3RvcigpIHtcblx0XHRyZXR1cm4gdGhpcy50aXRsZVNlbGVjdG9yO1xuXHR9XG5cblx0LyoqXG5cdCAqIEBpbmhlcml0RG9jXG5cdCAqL1xuXHRsb2FkKHBhdGgpIHtcblx0XHRyZXR1cm4gc3VwZXIubG9hZChwYXRoKVxuXHRcdFx0LnRoZW4oY29udGVudCA9PiB7XG5cdFx0XHRcdHRoaXMuYWxsb2NhdGVWaXJ0dWFsRG9jdW1lbnRGb3JDb250ZW50KGNvbnRlbnQpO1xuXHRcdFx0XHR0aGlzLnJlc29sdmVUaXRsZUZyb21WaXJ0dWFsRG9jdW1lbnQoKTtcblx0XHRcdFx0dGhpcy5hc3NlcnRTYW1lQm9keUlkSW5WaXJ0dWFsRG9jdW1lbnQoKTtcblx0XHRcdFx0aWYgKFVBLmlzSWUpIHtcblx0XHRcdFx0XHR0aGlzLm1ha2VUZW1wb3JhcnlTdHlsZXNIcmVmc1VuaXF1ZV8oKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gY29udGVudDtcblx0XHRcdH0pO1xuXHR9XG5cblx0LyoqXG5cdCAqIFF1ZXJpZXMgdGVtcG9yYXJ5IHN0eWxlcyBmcm9tIHZpcnR1YWwgZG9jdW1lbnQsIGFuZCBtYWtlcyB0aGVtIHVuaXF1ZS5cblx0ICogVGhpcyBpcyBuZWNlc3NhcnkgZm9yIGNhY2hpbmcgYW5kIGxvYWQgZXZlbnQgZmlyaW5nIGlzc3VlcyBzcGVjaWZpYyB0b1xuXHQgKiBJRTExLiBodHRwczovL2RldmVsb3Blci5taWNyb3NvZnQuY29tL2VuLXVzL21pY3Jvc29mdC1lZGdlL3BsYXRmb3JtL2lzc3Vlcy83OTQwMTcxL1xuXHQgKi9cblx0bWFrZVRlbXBvcmFyeVN0eWxlc0hyZWZzVW5pcXVlXygpIHtcblx0XHR2YXIgdGVtcG9yYXJpZXNJbkRvYyA9IHRoaXMudmlydHVhbFF1ZXJ5U2VsZWN0b3JBbGxfKEh0bWxTY3JlZW4uc2VsZWN0b3JzLnN0eWxlc1RlbXBvcmFyeSk7XG5cdFx0dGVtcG9yYXJpZXNJbkRvYy5mb3JFYWNoKChzdHlsZSkgPT4gdGhpcy5yZXBsYWNlU3R5bGVBbmRNYWtlVW5pcXVlXyhzdHlsZSkpO1xuXHR9XG5cblx0LyoqXG5cdCAqIENyZWF0ZXMgYSBuZXcgZWxlbWVudCBmcm9tIGdpdmVuLCBjb3BpZXMgYXR0cmlidXRlcywgbXV0YXRlcyBocmVmIHRvIGJlXG5cdCAqIHVuaXF1ZSB0byBwcmV2ZW50IGNhY2hpbmcgYW5kIG1vcmUgdGhhbiBvbmUgbG9hZC9lcnJvciBldmVudCBmcm9tIGZpcmluZy5cblx0ICovXG5cdHJlcGxhY2VTdHlsZUFuZE1ha2VVbmlxdWVfKHN0eWxlKSB7XG5cdFx0aWYgKHN0eWxlLmhyZWYpIHtcblx0XHRcdHZhciBuZXdTdHlsZSA9IGdsb2JhbHMuZG9jdW1lbnQuY3JlYXRlRWxlbWVudChzdHlsZS50YWdOYW1lKTtcblx0XHRcdHN0eWxlLmhyZWYgPSBuZXcgVXJpKHN0eWxlLmhyZWYpLm1ha2VVbmlxdWUoKS50b1N0cmluZygpO1xuXHRcdFx0dXRpbHMuY29weU5vZGVBdHRyaWJ1dGVzKHN0eWxlLCBuZXdTdHlsZSk7XG5cdFx0XHRzdHlsZS5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZChuZXdTdHlsZSwgc3R5bGUpO1xuXHRcdFx0c3R5bGUuZGlzYWJsZWQgPSB0cnVlO1xuXHRcdH1cblx0fVxuXG5cdC8qKlxuXHQgKiBRdWVyaWVzIGVsZW1lbnRzIGZyb20gdmlydHVhbCBkb2N1bWVudCBhbmQgcmV0dXJucyBhbiBhcnJheSBvZiBlbGVtZW50cy5cblx0ICogQHBhcmFtIHshc3RyaW5nfSBzZWxlY3RvclxuXHQgKiBAcmV0dXJuIHthcnJheS48RWxlbWVudD59XG5cdCAqL1xuXHR2aXJ0dWFsUXVlcnlTZWxlY3RvckFsbF8oc2VsZWN0b3IpIHtcblx0XHRyZXR1cm4gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwodGhpcy52aXJ0dWFsRG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3RvcikpO1xuXHR9XG5cblx0LyoqXG5cdCAqIFF1ZXJpZXMgZWxlbWVudHMgZnJvbSBkb2N1bWVudCBhbmQgcmV0dXJucyBhbiBhcnJheSBvZiBlbGVtZW50cy5cblx0ICogQHBhcmFtIHshc3RyaW5nfSBzZWxlY3RvclxuXHQgKiBAcmV0dXJuIHthcnJheS48RWxlbWVudD59XG5cdCAqL1xuXHRxdWVyeVNlbGVjdG9yQWxsXyhzZWxlY3Rvcikge1xuXHRcdHJldHVybiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChnbG9iYWxzLmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBSZWxlYXNlcyB2aXJ0dWFsIGRvY3VtZW50IGFsbG9jYXRlZCBmb3IgY29udGVudC5cblx0ICovXG5cdHJlbGVhc2VWaXJ0dWFsRG9jdW1lbnQoKSB7XG5cdFx0dGhpcy52aXJ0dWFsRG9jdW1lbnQgPSBudWxsO1xuXHR9XG5cblx0LyoqXG5cdCAqIFJlc29sdmVzIHRpdGxlIGZyb20gYWxsb2NhdGVkIHZpcnR1YWwgZG9jdW1lbnQuXG5cdCAqL1xuXHRyZXNvbHZlVGl0bGVGcm9tVmlydHVhbERvY3VtZW50KCkge1xuXHRcdHZhciB0aXRsZSA9IHRoaXMudmlydHVhbERvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGhpcy50aXRsZVNlbGVjdG9yKTtcblx0XHRpZiAodGl0bGUpIHtcblx0XHRcdHRoaXMuc2V0VGl0bGUodGl0bGUudGV4dENvbnRlbnQudHJpbSgpKTtcblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogU2V0cyB0aGUgdGl0bGUgc2VsZWN0b3IuXG5cdCAqIEBwYXJhbSB7IXN0cmluZ30gdGl0bGVTZWxlY3RvclxuXHQgKi9cblx0c2V0VGl0bGVTZWxlY3Rvcih0aXRsZVNlbGVjdG9yKSB7XG5cdFx0dGhpcy50aXRsZVNlbGVjdG9yID0gdGl0bGVTZWxlY3Rvcjtcblx0fVxuXG59XG5cbi8qKlxuICogSGVscGVyIHNlbGVjdG9ycyBmb3IgdHJhY2tpbmcgcmVzb3VyY2VzLlxuICogQHR5cGUge29iamVjdH1cbiAqIEBwcm90ZWN0ZWRcbiAqIEBzdGF0aWNcbiAqL1xuSHRtbFNjcmVlbi5zZWxlY3RvcnMgPSB7XG5cdHNjcmlwdHM6ICdzY3JpcHRbZGF0YS1zZW5uYS10cmFja10nLFxuXHRzY3JpcHRzUGVybWFuZW50OiAnc2NyaXB0W2RhdGEtc2VubmEtdHJhY2s9XCJwZXJtYW5lbnRcIl0nLFxuXHRzY3JpcHRzVGVtcG9yYXJ5OiAnc2NyaXB0W2RhdGEtc2VubmEtdHJhY2s9XCJ0ZW1wb3JhcnlcIl0nLFxuXHRzdHlsZXM6ICdzdHlsZVtkYXRhLXNlbm5hLXRyYWNrXSxsaW5rW2RhdGEtc2VubmEtdHJhY2tdJyxcblx0c3R5bGVzUGVybWFuZW50OiAnc3R5bGVbZGF0YS1zZW5uYS10cmFjaz1cInBlcm1hbmVudFwiXSxsaW5rW2RhdGEtc2VubmEtdHJhY2s9XCJwZXJtYW5lbnRcIl0nLFxuXHRzdHlsZXNUZW1wb3Jhcnk6ICdzdHlsZVtkYXRhLXNlbm5hLXRyYWNrPVwidGVtcG9yYXJ5XCJdLGxpbmtbZGF0YS1zZW5uYS10cmFjaz1cInRlbXBvcmFyeVwiXSdcbn07XG5cbi8qKlxuICogQ2FjaGVzIHBlcm1hbmVudCByZXNvdXJjZSBrZXlzLlxuICogQHR5cGUge29iamVjdH1cbiAqIEBwcm90ZWN0ZWRcbiAqIEBzdGF0aWNcbiAqL1xuSHRtbFNjcmVlbi5wZXJtYW5lbnRSZXNvdXJjZXNJbkRvYyA9IHt9O1xuXG5leHBvcnQgZGVmYXVsdCBIdG1sU2NyZWVuO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgeyBEaXNwb3NhYmxlLCBnZXRVaWQsIGlzRGVmQW5kTm90TnVsbCwgaXNFbGVtZW50LCBvYmplY3QgfSBmcm9tICdtZXRhbCc7XG5pbXBvcnQgZGF0YUF0dHJpYnV0ZXMgZnJvbSAnLi9kYXRhQXR0cmlidXRlcyc7XG5pbXBvcnQgZ2xvYmFscyBmcm9tICcuLi9nbG9iYWxzL2dsb2JhbHMnO1xuaW1wb3J0IEFwcCBmcm9tICcuL0FwcCc7XG5pbXBvcnQgSHRtbFNjcmVlbiBmcm9tICcuLi9zY3JlZW4vSHRtbFNjcmVlbic7XG5pbXBvcnQgUm91dGUgZnJvbSAnLi4vcm91dGUvUm91dGUnO1xuXG5jbGFzcyBBcHBEYXRhQXR0cmlidXRlSGFuZGxlciBleHRlbmRzIERpc3Bvc2FibGUge1xuXG5cdC8qKlxuXHQgKiBJbml0aWxpemVzIEFwcCwgcmVnaXN0ZXIgc3VyZmFjZXMgYW5kIHJvdXRlcyBmcm9tIGRhdGEgYXR0cmlidXRlcy5cblx0ICogQGNvbnN0cnVjdG9yXG5cdCAqL1xuXHRjb25zdHJ1Y3RvcigpIHtcblx0XHRzdXBlcigpO1xuXG5cdFx0LyoqXG5cdFx0ICogSG9sZHMgdGhlIGFwcCByZWZlcmVuY2UgaW5pdGlhbGl6ZWQgYnkgZGF0YSBhdHRyaWJ1dGVzLlxuXHRcdCAqIEB0eXBlIHtBcHB9XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMuYXBwID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIEhvbGRzIHRoZSBiYXNlIGVsZW1lbnQgdG8gc2VhcmNoIGluaXRpYWxpemF0aW9uIGRhdGEgYXR0cmlidXRlcy4gVGhpc1xuXHRcdCAqIGVsZW1lbnQgaXMgdGhlIGNvbnRhaW5lciB1c2VkIHRvIGVuYWJsZSBpbml0aWFsaXphdGlvbiBiYXNlZCBvbiB0aGVcblx0XHQgKiBwcmVzZW5jZSBvZiBgZGF0YS1zZW5uYWAgYXR0cmlidXRlLlxuXHRcdCAqIEB0eXBlIHtFbGVtZW50fVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLmJhc2VFbGVtZW50ID0gbnVsbDtcblx0fVxuXG5cdC8qKlxuXHQgKiBJbml0cyBhcHBsaWNhdGlvbiBiYXNlZCBvbiBpbmZvcm1hdGlvbiBzY2FubmVkIGZyb20gZG9jdW1lbnQuXG5cdCAqL1xuXHRoYW5kbGUoKSB7XG5cdFx0aWYgKCFpc0VsZW1lbnQodGhpcy5iYXNlRWxlbWVudCkpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcignU2VubmEgZGF0YSBhdHRyaWJ1dGUgaGFuZGxlciBiYXNlIGVsZW1lbnQgJyArXG5cdFx0XHRcdCdub3Qgc2V0IG9yIGludmFsaWQsIHRyeSBzZXR0aW5nIGEgdmFsaWQgZWxlbWVudCB0aGF0ICcgK1xuXHRcdFx0XHQnY29udGFpbnMgYSBgZGF0YS1zZW5uYWAgYXR0cmlidXRlLicpO1xuXHRcdH1cblxuXHRcdGlmICghdGhpcy5iYXNlRWxlbWVudC5oYXNBdHRyaWJ1dGUoZGF0YUF0dHJpYnV0ZXMuc2VubmEpKSB7XG5cdFx0XHRjb25zb2xlLmxvZygnU2VubmEgd2FzIG5vdCBpbml0aWFsaXplZCBmcm9tIGRhdGEgYXR0cmlidXRlcy4gJyArXG5cdFx0XHRcdCdJbiBvcmRlciB0byBlbmFibGUgaXRzIHVzYWdlIGZyb20gZGF0YSBhdHRyaWJ1dGVzIHRyeSBzZXR0aW5nICcgK1xuXHRcdFx0XHQnaW4gdGhlIGJhc2UgZWxlbWVudCwgZS5nLiBgPGJvZHkgZGF0YS1zZW5uYT5gLicpO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICh0aGlzLmFwcCkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCdTZW5uYSBhcHAgd2FzIGFscmVhZHkgaW5pdGlhbGl6ZWQuJyk7XG5cdFx0fVxuXG5cdFx0Y29uc29sZS5sb2coJ1Nlbm5hIGluaXRpYWxpemVkIGZyb20gZGF0YSBhdHRyaWJ1dGUuJyk7XG5cblx0XHR0aGlzLmFwcCA9IG5ldyBBcHAoKTtcblx0XHR0aGlzLm1heWJlQWRkUm91dGVzXygpO1xuXHRcdHRoaXMubWF5YmVBZGRTdXJmYWNlc18oKTtcblx0XHR0aGlzLm1heWJlU2V0QmFzZVBhdGhfKCk7XG5cdFx0dGhpcy5tYXliZVNldExpbmtTZWxlY3Rvcl8oKTtcblx0XHR0aGlzLm1heWJlU2V0TG9hZGluZ0Nzc0NsYXNzXygpO1xuXHRcdHRoaXMubWF5YmVTZXRVcGRhdGVTY3JvbGxQb3NpdGlvbl8oKTtcblx0XHR0aGlzLm1heWJlRGlzcGF0Y2hfKCk7XG5cdH1cblxuXHQvKipcblx0ICogRGlzcG9zZXMgb2YgdGhpcyBpbnN0YW5jZSdzIG9iamVjdCByZWZlcmVuY2VzLlxuXHQgKiBAb3ZlcnJpZGVcblx0ICovXG5cdGRpc3Bvc2VJbnRlcm5hbCgpIHtcblx0XHRpZiAodGhpcy5hcHApIHtcblx0XHRcdHRoaXMuYXBwLmRpc3Bvc2UoKTtcblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogR2V0cyB0aGUgYXBwIHJlZmVyZW5jZS5cblx0ICogQHJldHVybiB7QXBwfVxuXHQgKi9cblx0Z2V0QXBwKCkge1xuXHRcdHJldHVybiB0aGlzLmFwcDtcblx0fVxuXG5cdC8qKlxuXHQgKiBHZXRzIHRoZSBiYXNlIGVsZW1lbnQuXG5cdCAqIEByZXR1cm4ge0VsZW1lbnR9IGJhc2VFbGVtZW50XG5cdCAqL1xuXHRnZXRCYXNlRWxlbWVudCgpIHtcblx0XHRyZXR1cm4gdGhpcy5iYXNlRWxlbWVudDtcblx0fVxuXG5cdC8qKlxuXHQgKiBNYXliZSBhZGRzIGFwcCByb3V0ZXMgZnJvbSBsaW5rIGVsZW1lbnRzIHRoYXQgYXJlIGBzZW5uYS1yb3V0ZWAuXG5cdCAqL1xuXHRtYXliZUFkZFJvdXRlc18oKSB7XG5cdFx0dmFyIHJvdXRlc1NlbGVjdG9yID0gJ2xpbmtbcmVsPVwic2VubmEtcm91dGVcIl0nO1xuXHRcdHRoaXMucXVlcnlTZWxlY3RvckFsbEFzQXJyYXlfKHJvdXRlc1NlbGVjdG9yKS5mb3JFYWNoKChsaW5rKSA9PiB0aGlzLm1heWJlUGFyc2VMaW5rUm91dGVfKGxpbmspKTtcblx0XHRpZiAoIXRoaXMuYXBwLmhhc1JvdXRlcygpKSB7XG5cdFx0XHR0aGlzLmFwcC5hZGRSb3V0ZXMobmV3IFJvdXRlKC8uKi8sIEh0bWxTY3JlZW4pKTtcblx0XHRcdGNvbnNvbGUubG9nKCdTZW5uYSBjYW5cXCd0IGZpbmQgcm91dGUgZWxlbWVudHMsIGFkZGluZyBkZWZhdWx0LicpO1xuXHRcdH1cblx0fVxuXG5cdC8qKlxuXHQgKiBNYXliZSBhZGRzIGFwcCBzdXJmYWNlcyBieSBzY2FubmluZyBgZGF0YS1zZW5uYS1zdXJmYWNlYCBkYXRhIGF0dHJpYnV0ZS5cblx0ICovXG5cdG1heWJlQWRkU3VyZmFjZXNfKCkge1xuXHRcdHZhciBzdXJmYWNlc1NlbGVjdG9yID0gJ1snICsgZGF0YUF0dHJpYnV0ZXMuc3VyZmFjZSArICddJztcblx0XHR0aGlzLnF1ZXJ5U2VsZWN0b3JBbGxBc0FycmF5XyhzdXJmYWNlc1NlbGVjdG9yKS5mb3JFYWNoKChzdXJmYWNlRWxlbWVudCkgPT4ge1xuXHRcdFx0dGhpcy51cGRhdGVFbGVtZW50SWRJZlNwZWNpYWxTdXJmYWNlXyhzdXJmYWNlRWxlbWVudCk7XG5cdFx0XHR0aGlzLmFwcC5hZGRTdXJmYWNlcyhzdXJmYWNlRWxlbWVudC5pZCk7XG5cdFx0fSk7XG5cdH1cblxuXHQvKipcblx0ICogRGlzcGF0Y2hlcyBhcHAgbmF2aWdhdGlvbiB0byB0aGUgY3VycmVudCBwYXRoIHdoZW4gaW5pdGlhbGl6ZXMuXG5cdCAqL1xuXHRtYXliZURpc3BhdGNoXygpIHtcblx0XHRpZiAodGhpcy5iYXNlRWxlbWVudC5oYXNBdHRyaWJ1dGUoZGF0YUF0dHJpYnV0ZXMuZGlzcGF0Y2gpKSB7XG5cdFx0XHR0aGlzLmFwcC5kaXNwYXRjaCgpO1xuXHRcdH1cblx0fVxuXG5cdC8qKlxuXHQgKiBBZGRzIGFwcCByb3V0ZSBieSBwYXJzaW5nIHZhbGlkIGxpbmsgZWxlbWVudHMuIEEgdmFsaWQgbGluayBlbGVtZW50IGlzIG9mXG5cdCAqIHRoZSBraW5kIGByZWw9XCJzZW5uYS1yb3V0ZVwiYC5cblx0ICogQHBhcmFtIHtFbGVtZW50fSBsaW5rXG5cdCAqL1xuXHRtYXliZVBhcnNlTGlua1JvdXRlXyhsaW5rKSB7XG5cdFx0dmFyIHJvdXRlID0gbmV3IFJvdXRlKHRoaXMubWF5YmVQYXJzZUxpbmtSb3V0ZVBhdGhfKGxpbmspLCB0aGlzLm1heWJlUGFyc2VMaW5rUm91dGVIYW5kbGVyXyhsaW5rKSk7XG5cdFx0dGhpcy5hcHAuYWRkUm91dGVzKHJvdXRlKTtcblx0XHRjb25zb2xlLmxvZygnU2VubmEgc2Nhbm5lZCByb3V0ZSAnICsgcm91dGUuZ2V0UGF0aCgpKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBNYXliZSBwYXJzZSBsaW5rIHJvdXRlIGhhbmRsZXIuXG5cdCAqIEBwYXJhbSB7RWxlbWVudH0gbGlua1xuXHQgKiBAcmV0dXJuIHs/c3RyaW5nfVxuXHQgKi9cblx0bWF5YmVQYXJzZUxpbmtSb3V0ZUhhbmRsZXJfKGxpbmspIHtcblx0XHR2YXIgaGFuZGxlciA9IGxpbmsuZ2V0QXR0cmlidXRlKCd0eXBlJyk7XG5cdFx0aWYgKGlzRGVmQW5kTm90TnVsbChoYW5kbGVyKSkge1xuXHRcdFx0aGFuZGxlciA9IG9iamVjdC5nZXRPYmplY3RCeU5hbWUoaGFuZGxlcik7XG5cdFx0fVxuXHRcdHJldHVybiBoYW5kbGVyO1xuXHR9XG5cblx0LyoqXG5cdCAqIE1heWJlIHBhcnNlIGxpbmsgcm91dGUgcGF0aC5cblx0ICogQHBhcmFtIHtFbGVtZW50fSBsaW5rXG5cdCAqIEByZXR1cm4gez9zdHJpbmd9XG5cdCAqL1xuXHRtYXliZVBhcnNlTGlua1JvdXRlUGF0aF8obGluaykge1xuXHRcdHZhciBwYXRoID0gbGluay5nZXRBdHRyaWJ1dGUoJ2hyZWYnKTtcblx0XHRpZiAoaXNEZWZBbmROb3ROdWxsKHBhdGgpKSB7XG5cdFx0XHRpZiAocGF0aC5pbmRleE9mKCdyZWdleDonKSA9PT0gMCkge1xuXHRcdFx0XHRwYXRoID0gbmV3IFJlZ0V4cChwYXRoLnN1YnN0cmluZyg2KSk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBwYXRoO1xuXHR9XG5cblx0LyoqXG5cdCAqIE1heWJlIHNldHMgYXBwIGJhc2UgcGF0aCBmcm9tIGBkYXRhLXNlbm5hLWJhc2UtcGF0aGAgZGF0YSBhdHRyaWJ1dGUuXG5cdCAqL1xuXHRtYXliZVNldEJhc2VQYXRoXygpIHtcblx0XHR2YXIgYmFzZVBhdGggPSB0aGlzLmJhc2VFbGVtZW50LmdldEF0dHJpYnV0ZShkYXRhQXR0cmlidXRlcy5iYXNlUGF0aCk7XG5cdFx0aWYgKGlzRGVmQW5kTm90TnVsbChiYXNlUGF0aCkpIHtcblx0XHRcdHRoaXMuYXBwLnNldEJhc2VQYXRoKGJhc2VQYXRoKTtcblx0XHRcdGNvbnNvbGUubG9nKCdTZW5uYSBzY2FubmVkIGJhc2UgcGF0aCAnICsgYmFzZVBhdGgpO1xuXHRcdH1cblx0fVxuXG5cdC8qKlxuXHQgKiBNYXliZSBzZXRzIGFwcCBsaW5rIHNlbGVjdG9yIGZyb20gYGRhdGEtc2VubmEtbGluay1zZWxlY3RvcmAgZGF0YVxuXHQgKiBhdHRyaWJ1dGUuXG5cdCAqL1xuXHRtYXliZVNldExpbmtTZWxlY3Rvcl8oKSB7XG5cdFx0dmFyIGxpbmtTZWxlY3RvciA9IHRoaXMuYmFzZUVsZW1lbnQuZ2V0QXR0cmlidXRlKGRhdGFBdHRyaWJ1dGVzLmxpbmtTZWxlY3Rvcik7XG5cdFx0aWYgKGlzRGVmQW5kTm90TnVsbChsaW5rU2VsZWN0b3IpKSB7XG5cdFx0XHR0aGlzLmFwcC5zZXRMaW5rU2VsZWN0b3IobGlua1NlbGVjdG9yKTtcblx0XHRcdGNvbnNvbGUubG9nKCdTZW5uYSBzY2FubmVkIGxpbmsgc2VsZWN0b3IgJyArIGxpbmtTZWxlY3Rvcik7XG5cdFx0fVxuXHR9XG5cblx0LyoqXG5cdCAqIE1heWJlIHNldHMgYXBwIGxpbmsgbG9hZGluZyBjc3MgY2xhc3MgZnJvbSBgZGF0YS1zZW5uYS1sb2FkaW5nLWNzcy1jbGFzc2Bcblx0ICogZGF0YSBhdHRyaWJ1dGUuXG5cdCAqL1xuXHRtYXliZVNldExvYWRpbmdDc3NDbGFzc18oKSB7XG5cdFx0dmFyIGxvYWRpbmdDc3NDbGFzcyA9IHRoaXMuYmFzZUVsZW1lbnQuZ2V0QXR0cmlidXRlKGRhdGFBdHRyaWJ1dGVzLmxvYWRpbmdDc3NDbGFzcyk7XG5cdFx0aWYgKGlzRGVmQW5kTm90TnVsbChsb2FkaW5nQ3NzQ2xhc3MpKSB7XG5cdFx0XHR0aGlzLmFwcC5zZXRMb2FkaW5nQ3NzQ2xhc3MobG9hZGluZ0Nzc0NsYXNzKTtcblx0XHRcdGNvbnNvbGUubG9nKCdTZW5uYSBzY2FubmVkIGxvYWRpbmcgY3NzIGNsYXNzICcgKyBsb2FkaW5nQ3NzQ2xhc3MpO1xuXHRcdH1cblx0fVxuXG5cdC8qKlxuXHQgKiBNYXliZSBzZXRzIGFwcCB1cGRhdGUgc2Nyb2xsIHBvc2l0aW9uIGZyb21cblx0ICogYGRhdGEtc2VubmEtdXBkYXRlLXNjcm9sbC1wb3NpdGlvbmAgZGF0YSBhdHRyaWJ1dGUuXG5cdCAqL1xuXHRtYXliZVNldFVwZGF0ZVNjcm9sbFBvc2l0aW9uXygpIHtcblx0XHR2YXIgdXBkYXRlU2Nyb2xsUG9zaXRpb24gPSB0aGlzLmJhc2VFbGVtZW50LmdldEF0dHJpYnV0ZShkYXRhQXR0cmlidXRlcy51cGRhdGVTY3JvbGxQb3NpdGlvbik7XG5cdFx0aWYgKGlzRGVmQW5kTm90TnVsbCh1cGRhdGVTY3JvbGxQb3NpdGlvbikpIHtcblx0XHRcdGlmICh1cGRhdGVTY3JvbGxQb3NpdGlvbiA9PT0gJ2ZhbHNlJykge1xuXHRcdFx0XHR0aGlzLmFwcC5zZXRVcGRhdGVTY3JvbGxQb3NpdGlvbihmYWxzZSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0aGlzLmFwcC5zZXRVcGRhdGVTY3JvbGxQb3NpdGlvbih0cnVlKTtcblx0XHRcdH1cblx0XHRcdGNvbnNvbGUubG9nKCdTZW5uYSBzY2FubmVkIHVwZGF0ZSBzY3JvbGwgcG9zaXRpb24gJyArIHVwZGF0ZVNjcm9sbFBvc2l0aW9uKTtcblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogUXVlcmllcyBlbGVtZW50cyBmcm9tIGRvY3VtZW50IGFuZCByZXR1cm5zIGFuIGFycmF5IG9mIGVsZW1lbnRzLlxuXHQgKiBAcGFyYW0geyFzdHJpbmd9IHNlbGVjdG9yXG5cdCAqIEByZXR1cm4ge2FycmF5LjxFbGVtZW50Pn1cblx0ICovXG5cdHF1ZXJ5U2VsZWN0b3JBbGxBc0FycmF5XyhzZWxlY3Rvcikge1xuXHRcdHJldHVybiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChnbG9iYWxzLmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBVcGRhdGVzIGVsZW1lbnQgaWQgaWYgaGFuZGxlZCBhcyBzcGVjaWFsIHN1cmZhY2UgZWxlbWVudC4gU29tZSBzdXJmYWNlc1xuXHQgKiBhcmUgc2xpZ2h0bHkgZGlmZmVyZW50IGZyb20gb3RoZXJzLCBsaWtlIHdoZW4gdGhyZWF0aW5nIDxjb2RlPmJvZHk8L2NvZGU+XG5cdCAqIGFzIHN1cmZhY2UuXG5cdCAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudFxuXHQgKi9cblx0dXBkYXRlRWxlbWVudElkSWZTcGVjaWFsU3VyZmFjZV8oZWxlbWVudCkge1xuXHRcdGlmICghZWxlbWVudC5pZCAmJiBlbGVtZW50ID09PSBnbG9iYWxzLmRvY3VtZW50LmJvZHkpIHtcblx0XHRcdGVsZW1lbnQuaWQgPSAnc2VubmFfc3VyZmFjZV8nICsgZ2V0VWlkKCk7XG5cdFx0fVxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgdGhlIGJhc2UgZWxlbWVudC5cblx0ICogQHBhcmFtIHtFbGVtZW50fSBiYXNlRWxlbWVudFxuXHQgKi9cblx0c2V0QmFzZUVsZW1lbnQoYmFzZUVsZW1lbnQpIHtcblx0XHR0aGlzLmJhc2VFbGVtZW50ID0gYmFzZUVsZW1lbnQ7XG5cdH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBBcHBEYXRhQXR0cmlidXRlSGFuZGxlcjtcbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IGdsb2JhbHMgZnJvbSAnLi4vZ2xvYmFscy9nbG9iYWxzJztcbmltcG9ydCBBcHBEYXRhQXR0cmlidXRlSGFuZGxlciBmcm9tICcuL0FwcERhdGFBdHRyaWJ1dGVIYW5kbGVyJztcblxuLyoqXG4gKiBEYXRhIGF0dHJpYnV0ZSBoYW5kbGVyLlxuICogQHR5cGUge0FwcERhdGFBdHRyaWJ1dGVIYW5kbGVyfVxuICovXG52YXIgZGF0YUF0dHJpYnV0ZUhhbmRsZXIgPSBuZXcgQXBwRGF0YUF0dHJpYnV0ZUhhbmRsZXIoKTtcblxuZ2xvYmFscy5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgZnVuY3Rpb24oKSB7XG5cdGRhdGFBdHRyaWJ1dGVIYW5kbGVyLnNldEJhc2VFbGVtZW50KGdsb2JhbHMuZG9jdW1lbnQuYm9keSk7XG5cdGRhdGFBdHRyaWJ1dGVIYW5kbGVyLmhhbmRsZSgpO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IGRhdGFBdHRyaWJ1dGVIYW5kbGVyOyIsIi8qKlxuICogQHJldHVybnMgU3RyaW5nIGN1cnJlbnQgc2VubmEgdmVyc2lvblxuICovXG5leHBvcnQgZGVmYXVsdCAnPCU9IHZlcnNpb24gJT4nOyJdLCJuYW1lcyI6WyJnbG9iYWxzIiwid2luZG93IiwiZG9jdW1lbnQiLCJjb21wYXRpYmlsaXR5TW9kZURhdGFfIiwidW5pcXVlSWRDb3VudGVyXyIsIlVJRF9QUk9QRVJUWSIsIk1hdGgiLCJyYW5kb20iLCJhYnN0cmFjdE1ldGhvZCIsIkVycm9yIiwiZGlzYWJsZUNvbXBhdGliaWxpdHlNb2RlIiwidW5kZWZpbmVkIiwiZW5hYmxlQ29tcGF0aWJpbGl0eU1vZGUiLCJvcHRfZGF0YSIsImdldENvbXBhdGliaWxpdHlNb2RlRGF0YSIsIl9fTUVUQUxfQ09NUEFUSUJJTElUWV9fIiwiZ2V0Rmlyc3RUcnV0aHlfIiwiYSIsImIiLCJnZXRGdW5jdGlvbk5hbWUiLCJmbiIsIm5hbWUiLCJzdHIiLCJ0b1N0cmluZyIsInN1YnN0cmluZyIsImluZGV4T2YiLCJnZXRTdGF0aWNQcm9wZXJ0eSIsImN0b3IiLCJwcm9wZXJ0eU5hbWUiLCJvcHRfbWVyZ2VGbiIsIm1lcmdlZE5hbWUiLCJoYXNPd25Qcm9wZXJ0eSIsIm1lcmdlZCIsIl9fcHJvdG9fXyIsImlzUHJvdG90eXBlT2YiLCJGdW5jdGlvbiIsIm1lcmdlRm4iLCJnZXRVaWQiLCJvcHRfb2JqZWN0Iiwib3B0X25vSW5oZXJpdGFuY2UiLCJpZCIsImlkZW50aXR5RnVuY3Rpb24iLCJvcHRfcmV0dXJuVmFsdWUiLCJpc0Jvb2xlYW4iLCJ2YWwiLCJpc0RlZiIsImlzRGVmQW5kTm90TnVsbCIsImlzTnVsbCIsImlzRG9jdW1lbnQiLCJub2RlVHlwZSIsImlzRG9jdW1lbnRGcmFnbWVudCIsImlzRWxlbWVudCIsImlzRnVuY3Rpb24iLCJpc051bWJlciIsImlzV2luZG93IiwiaXNPYmplY3QiLCJ0eXBlIiwiaXNQcm9taXNlIiwidGhlbiIsImlzU3RyaW5nIiwiU3RyaW5nIiwiaXNTZXJ2ZXJTaWRlIiwicHJvY2VzcyIsImVudiIsIk5PREVfRU5WIiwiYnJvd3NlciIsIm51bGxGdW5jdGlvbiIsImFycmF5IiwiYXJyMSIsImFycjIiLCJsZW5ndGgiLCJpIiwiYXJyIiwib3B0X291dHB1dCIsIm91dHB1dCIsIkFycmF5IiwiaXNBcnJheSIsImZsYXR0ZW4iLCJwdXNoIiwib2JqIiwicnYiLCJyZW1vdmVBdCIsInByb3RvdHlwZSIsInNwbGljZSIsImNhbGwiLCJzdGFydCIsIm9wdF9lbmQiLCJzbGljZWQiLCJlbmQiLCJhc3luYyIsInRocm93RXhjZXB0aW9uIiwiZXhjZXB0aW9uIiwibmV4dFRpY2siLCJydW4iLCJjYWxsYmFjayIsIm9wdF9jb250ZXh0Iiwid29ya1F1ZXVlU2NoZWR1bGVkXyIsInByb2Nlc3NXb3JrUXVldWUiLCJ3b3JrUXVldWVfIiwiV29ya0l0ZW1fIiwid29ya0l0ZW1zIiwid29ya0l0ZW0iLCJzY29wZSIsImUiLCJjYiIsImJpbmQiLCJ3cmFwQ2FsbGJhY2tfIiwic2V0SW1tZWRpYXRlIiwic2V0SW1tZWRpYXRlXyIsImdldFNldEltbWVkaWF0ZUVtdWxhdG9yXyIsIkNoYW5uZWwiLCJNZXNzYWdlQ2hhbm5lbCIsInBvc3RNZXNzYWdlIiwiYWRkRXZlbnRMaXN0ZW5lciIsImlmcmFtZSIsImNyZWF0ZUVsZW1lbnQiLCJzdHlsZSIsImRpc3BsYXkiLCJzcmMiLCJkb2N1bWVudEVsZW1lbnQiLCJhcHBlbmRDaGlsZCIsIndpbiIsImNvbnRlbnRXaW5kb3ciLCJkb2MiLCJvcGVuIiwid3JpdGUiLCJjbG9zZSIsIm1lc3NhZ2UiLCJvcmlnaW4iLCJsb2NhdGlvbiIsInByb3RvY29sIiwiaG9zdCIsIm9ubWVzc2FnZSIsImRhdGEiLCJwb3J0MSIsInBvcnQyIiwiY2hhbm5lbCIsImhlYWQiLCJ0YWlsIiwibmV4dCIsInNjcmlwdCIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsIkRpc3Bvc2FibGUiLCJkaXNwb3NlZF8iLCJkaXNwb3NlSW50ZXJuYWwiLCJvYmplY3QiLCJ0YXJnZXQiLCJrZXkiLCJzb3VyY2UiLCJhcmd1bWVudHMiLCJvcHRfb2JqIiwicGFydHMiLCJzcGxpdCIsInJlZHVjZSIsInBhcnQiLCJtYXBwZWRPYmoiLCJrZXlzIiwiT2JqZWN0Iiwib2JqMSIsIm9iajIiLCJrZXlzMSIsImtleXMyIiwic3RyaW5nIiwic3RyMSIsInN0cjIiLCJ0ZXN0MSIsInRvTG93ZXJDYXNlIiwidGVzdDIiLCJyZXBsYWNlIiwieCIsImZsb29yIiwiYWJzIiwiRGF0ZSIsIm5vdyIsImhhc2giLCJsZW4iLCJjaGFyQ29kZUF0IiwidmFsdWUiLCJwYXJzZUZyb21BbmNob3IiLCJvcHRfdXJpIiwibGluayIsImhyZWYiLCJ0ZXN0IiwiVHlwZUVycm9yIiwiaG9zdG5hbWUiLCJwYXNzd29yZCIsInBhdGhuYW1lIiwicG9ydCIsInNlYXJjaCIsInVzZXJuYW1lIiwicGFyc2UiLCJVUkwiLCJ1cmwiLCJjcmVhdGUiLCJNdWx0aU1hcCIsInZhbHVlcyIsInNpemUiLCJtYXAiLCJuYW1lcyIsIkpTT04iLCJzdHJpbmdpZnkiLCJzZXQiLCJUcmVlTm9kZSIsInZhbHVlXyIsInBhcmVudF8iLCJjaGlsZHJlbl8iLCJjaGlsZCIsInNldFBhcmVudCIsIm5vZGUiLCJjdXJyZW50IiwiZ2V0UGFyZW50IiwiYW5jZXN0b3JzIiwiaW5kZXgiLCJnZXRDaGlsZHJlbiIsIkVNUFRZX0FSUkFZIiwiZGVwdGgiLCJyb290IiwiZ2V0Q2hpbGRDb3VudCIsInJlbW92ZSIsInBhcmVudCIsIm9wdF9wcmVvcmRlckZuIiwib3B0X3Bvc3RvcmRlckZuIiwiZm9yRWFjaCIsInRyYXZlcnNlIiwiYXNzZXJ0Q2hpbGRIYXNOb1BhcmVudCIsInBhcnNlRm5fIiwiVXJpIiwibWF5YmVBZGRQcm90b2NvbEFuZEhvc3RuYW1lXyIsIm11bHRpbWFwIiwiZ2V0QWxsIiwiYWRkUGFyYW1ldGVyVmFsdWUiLCJlbnN1cmVRdWVyeUluaXRpYWxpemVkXyIsInF1ZXJ5IiwiYWRkIiwicGFyYW0iLCJ1cmxEZWNvZGUiLCJnZXRIb3N0bmFtZSIsImdldFBvcnQiLCJIT1NUTkFNRV9QTEFDRUhPTERFUiIsImdldEhvc3QiLCJnZXRQcm90b2NvbCIsImdldCIsInF1ZXJ5c3RyaW5nIiwiZ2V0UGFyYW1ldGVyTmFtZXMiLCJnZXRQYXJhbWV0ZXJWYWx1ZXMiLCJlbmNvZGVVUklDb21wb25lbnQiLCJzbGljZSIsImNvbnRhaW5zIiwic2V0UGFyYW1ldGVyVmFsdWUiLCJSQU5ET01fUEFSQU0iLCJnZXRSYW5kb21TdHJpbmciLCJERUZBVUxUX1BST1RPQ09MIiwiY2hhckF0IiwicmVtb3ZlUGFyYW1ldGVyIiwiZ2V0UGF0aG5hbWUiLCJnZXRTZWFyY2giLCJnZXRIYXNoIiwicGFyc2VGbiIsImJhc2VQYXRoIiwicGF0aHMiLCJwYXRoIiwiY29uY2F0Iiwiam9pbiIsImRlY29kZVVSSUNvbXBvbmVudCIsImlzU2VjdXJlIiwidXRpbHMiLCJhdHRyaWJ1dGVzIiwiYXR0cmlidXRlIiwic2V0QXR0cmlidXRlIiwiZ2V0Q3VycmVudEJyb3dzZXJQYXRoV2l0aG91dEhhc2giLCJvZmZzZXRMZWZ0Iiwib2Zmc2V0VG9wIiwib2Zmc2V0UGFyZW50IiwidXJpIiwiY3VycmVudEJyb3dzZXJQYXRoIiwiZ2V0VXJsUGF0aFdpdGhvdXRIYXNoIiwiZ2V0VXJsUGF0aCIsImhpc3RvcnkiLCJwdXNoU3RhdGUiLCJlcnIiLCJlcnJvciIsInJlbW92ZUF0dHJpYnV0ZSIsInN1YnN0ciIsInJlZmVycmVyIiwiZGVmaW5lUHJvcGVydHkiLCJNRVRBTF9EQVRBIiwiZG9tRGF0YSIsImVsZW1lbnQiLCJvcHRfbmFtZSIsIm9wdF9pbml0aWFsVmFsIiwiRXZlbnRIYW5kbGUiLCJlbWl0dGVyIiwiZXZlbnQiLCJsaXN0ZW5lciIsImVtaXR0ZXJfIiwiZXZlbnRfIiwibGlzdGVuZXJfIiwicmVtb3ZlTGlzdGVuZXIiLCJpc0Rpc3Bvc2VkIiwic2luZ2xlQXJyYXlfIiwiRXZlbnRFbWl0dGVyIiwiZXZlbnRzXyIsImxpc3RlbmVySGFuZGxlcnNfIiwic2hvdWxkVXNlRmFjYWRlXyIsImhvbGRlciIsImhhbmRsZXIiLCJvcHRfZGVmYXVsdCIsInZhbGlkYXRlTGlzdGVuZXJfIiwiZXZlbnRzIiwidG9FdmVudHNBcnJheV8iLCJhZGRTaW5nbGVMaXN0ZW5lcl8iLCJvcHRfb3JpZ2luIiwicnVuTGlzdGVuZXJIYW5kbGVyc18iLCJhZGRIYW5kbGVyXyIsImdldFNob3VsZFVzZUZhY2FkZSIsImZhY2FkZSIsInByZXZlbnRlZERlZmF1bHQiLCJsaXN0ZW5lcnMiLCJnZXRSYXdMaXN0ZW5lcnNfIiwiYXJncyIsInJ1bkxpc3RlbmVyc18iLCJidWlsZEZhY2FkZV8iLCJkaXJlY3RMaXN0ZW5lcnMiLCJ0b0FycmF5IiwiYW1vdW50IiwibWFueV8iLCJzZWxmIiwiaGFuZGxlckludGVybmFsIiwiYXBwbHkiLCJsaXN0ZW5lck9iaiIsInJlbW92ZU1hdGNoaW5nTGlzdGVuZXJPYmpzXyIsImFkZExpc3RlbmVyIiwibWFueSIsIm9wdF9ldmVudHMiLCJsaXN0ZW5lck9ianMiLCJmaW5hbExpc3RlbmVycyIsIm1hdGNoZXNMaXN0ZW5lcl8iLCJvZmYiLCJoYW5kbGVycyIsImRlZmF1bHRMaXN0ZW5lcnMiLCJkZWZhdWx0IiwiaiIsInNob3VsZFVzZUZhY2FkZSIsIkV2ZW50RW1pdHRlclByb3h5Iiwib3JpZ2luRW1pdHRlciIsInRhcmdldEVtaXR0ZXIiLCJvcHRfYmxhY2tsaXN0Iiwib3B0X3doaXRlbGlzdCIsImJsYWNrbGlzdF8iLCJvcmlnaW5FbWl0dGVyXyIsInBlbmRpbmdFdmVudHNfIiwicHJveGllZEV2ZW50c18iLCJ0YXJnZXRFbWl0dGVyXyIsIndoaXRlbGlzdF8iLCJzdGFydFByb3h5XyIsIm9uIiwicmVtb3ZlTGlzdGVuZXJzXyIsImVtaXQiLCJzaG91bGRQcm94eUV2ZW50XyIsInRyeVRvQWRkTGlzdGVuZXJfIiwicHJveHlFdmVudCIsIm9uTGlzdGVuZXIiLCJhZGRMaXN0ZW5lcl8iLCJlbWl0T25UYXJnZXRfIiwiRXZlbnRIYW5kbGVyIiwiZXZlbnRIYW5kbGVzXyIsIkRvbURlbGVnYXRlZEV2ZW50SGFuZGxlIiwib3B0X3NlbGVjdG9yIiwic2VsZWN0b3JfIiwiZGVsZWdhdGluZyIsInNlbGVjdG9yIiwic2VsZWN0b3JzIiwiRG9tRXZlbnRIYW5kbGUiLCJvcHRfY2FwdHVyZSIsImNhcHR1cmVfIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImVsZW1lbnRzQnlUYWdfIiwic3VwcG9ydENhY2hlXyIsImN1c3RvbUV2ZW50cyIsIkxBU1RfQ09OVEFJTkVSIiwiVVNFX0NBUFRVUkUiLCJhZGRDbGFzc2VzIiwiZWxlbWVudHMiLCJjbGFzc2VzIiwiYWRkQ2xhc3Nlc1dpdGhOYXRpdmVfIiwiY2xhc3NOYW1lIiwiY2xhc3NMaXN0IiwiYWRkQ2xhc3Nlc1dpdGhvdXROYXRpdmVfIiwiZWxlbWVudENsYXNzTmFtZSIsImNsYXNzZXNUb0FwcGVuZCIsImFkZEVsZW1lbnRMaXN0ZW5lcl8iLCJldmVudE5hbWUiLCJhZGRTZWxlY3Rvckxpc3RlbmVyXyIsImRlbGVnYXRpbmdEYXRhIiwiYWRkVG9BcnJfIiwiYXR0YWNoRGVsZWdhdGVFdmVudF8iLCJoYW5kbGVEZWxlZ2F0ZUV2ZW50XyIsImNsb3Nlc3QiLCJtYXRjaCIsImFwcGVuZCIsImJ1aWxkRnJhZ21lbnQiLCJOb2RlTGlzdCIsImNoaWxkQXJyIiwiaHRtbFN0cmluZyIsInRlbXBEaXYiLCJpbm5lckhUTUwiLCJmaXJzdENoaWxkIiwiZnJhZ21lbnQiLCJjcmVhdGVEb2N1bWVudEZyYWdtZW50IiwiZWxlbWVudDEiLCJlbGVtZW50MiIsImRlbGVnYXRlIiwic2VsZWN0b3JPclRhcmdldCIsImN1c3RvbUNvbmZpZyIsIm9yaWdpbmFsRXZlbnQiLCJkZWZhdWx0TGlzdGVuZXJfIiwiaXNBYmxlVG9JbnRlcmFjdFdpdGhfIiwib3B0X2V2ZW50T2JqIiwiYnV0dG9uIiwibWF0Y2hlc1NlbGVjdG9yIiwidGFnTmFtZSIsImRpc2FibGVkIiwiZXhpdERvY3VtZW50IiwicmV0IiwiY29udGFpbmVyIiwiY3VycmVudFRhcmdldCIsImRlZkZucyIsInRyaWdnZXJEZWxlZ2F0ZWRMaXN0ZW5lcnNfIiwidHJpZ2dlckRlZmF1bHREZWxlZ2F0ZWRMaXN0ZW5lcnNfIiwiZGVsZWdhdGVUYXJnZXQiLCJwIiwiRWxlbWVudCIsIm0iLCJtYXRjaGVzIiwid2Via2l0TWF0Y2hlc1NlbGVjdG9yIiwibW96TWF0Y2hlc1NlbGVjdG9yIiwibXNNYXRjaGVzU2VsZWN0b3IiLCJvTWF0Y2hlc1NlbGVjdG9yIiwibWF0Y2hGYWxsYmFja18iLCJub2RlcyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJub3JtYWxpemVEZWxlZ2F0ZUV2ZW50XyIsInN0b3BQcm9wYWdhdGlvbiIsInN0b3BQcm9wYWdhdGlvbl8iLCJzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb25fIiwib25jZSIsImRvbUV2ZW50SGFuZGxlIiwicmVnaXN0ZXJDdXN0b21FdmVudCIsInJlbW92ZUNoaWxkcmVuIiwicmVtb3ZlQ2xhc3NlcyIsInJlbW92ZUNsYXNzZXNXaXRoTmF0aXZlXyIsInJlbW92ZUNsYXNzZXNXaXRob3V0TmF0aXZlXyIsInRyaW0iLCJzdG9wcGVkIiwic3RvcHBlZEltbWVkaWF0ZSIsInN1cHBvcnRzRXZlbnQiLCJ0YWciLCJkZWZhdWx0UHJldmVudGVkIiwiZGVmYXVsdEZucyIsImN1cnJFbGVtZW50IiwibGltaXQiLCJ0cmlnZ2VyRWxlbWVudExpc3RlbmVyc18iLCJ0cmlnZ2VyU2VsZWN0b3JMaXN0ZW5lcnNfIiwibGFzdENvbnRhaW5lciIsInRyaWdnZXJMaXN0ZW5lcnNfIiwiRG9tRXZlbnRFbWl0dGVyUHJveHkiLCJpc0RlbGVnYXRlRXZlbnRfIiwiYmFiZWxIZWxwZXJzLmdldCIsImlzU3VwcG9ydGVkRG9tRXZlbnRfIiwiZmVhdHVyZXMiLCJhbmltYXRpb25FdmVudE5hbWVfIiwiY2hlY2tBbmltYXRpb25FdmVudE5hbWVfIiwicHJlZml4ZXMiLCJ0eXBlVGl0bGVDYXNlIiwicmVwbGFjZUludGVydmFsIiwidG9VcHBlckNhc2UiLCJzdWZmaXhlcyIsImFuaW1hdGlvbkVsZW1lbnRfIiwiYXR0ck9yZGVyQ2hhbmdlXyIsIm9yaWdpbmFsQ29udGVudCIsImdsb2JhbEV2YWwiLCJ0ZXh0Iiwib3B0X2FwcGVuZEZuIiwib3B0X2NhbGxiYWNrIiwicnVuRmlsZSIsInNjcmlwdHMiLCJydW5TY3JpcHRzSW5PcmRlciIsInJ1blNjcmlwdCIsIml0ZW0iLCJnbG9iYWxFdmFsU3R5bGVzIiwicmVsIiwicnVuU3R5bGUiLCJzdHlsZXMiLCJsb2FkQ291bnQiLCJtb3VzZUV2ZW50TWFwIiwicmVsYXRlZCIsInJlbGF0ZWRUYXJnZXQiLCJjdXN0b21UeXBlIiwiYW5pbWF0aW9uRXZlbnRNYXAiLCJldmVudFR5cGUiLCJjaGVja0FuaW1hdGlvbkV2ZW50TmFtZSIsIlRoZW5hYmxlIiwiSU1QTEVNRU5URURfQllfUFJPUCIsImFkZEltcGxlbWVudGF0aW9uIiwiJGdvb2dfVGhlbmFibGUiLCJpc0ltcGxlbWVudGVkQnkiLCJwYXJ0aWFsIiwibmV3QXJncyIsIkNhbmNlbGxhYmxlUHJvbWlzZSIsInJlc29sdmVyIiwic3RhdGVfIiwiU3RhdGVfIiwiUEVORElORyIsInJlc3VsdF8iLCJjYWxsYmFja0VudHJpZXNfIiwiZXhlY3V0aW5nXyIsIlVOSEFORExFRF9SRUpFQ1RJT05fREVMQVkiLCJ1bmhhbmRsZWRSZWplY3Rpb25JZF8iLCJoYWRVbmhhbmRsZWRSZWplY3Rpb25fIiwicmVzb2x2ZV8iLCJGVUxGSUxMRUQiLCJyZWFzb24iLCJSRUpFQ1RFRCIsIkNhbGxiYWNrRW50cnlfIiwicmVzb2x2ZSIsIm9wdF92YWx1ZSIsInJlamVjdCIsIm9wdF9yZWFzb24iLCJyYWNlIiwicHJvbWlzZXMiLCJwcm9taXNlIiwiYWxsIiwidG9GdWxmaWxsIiwib25GdWxmaWxsIiwib25SZWplY3QiLCJmaXJzdEZ1bGZpbGxlZCIsInRvUmVqZWN0IiwicmVhc29ucyIsIm9wdF9vbkZ1bGZpbGxlZCIsIm9wdF9vblJlamVjdGVkIiwiYWRkQ2hpbGRQcm9taXNlXyIsInRoZW5BbHdheXMiLCJvblJlc29sdmVkIiwiaGFuZGxlUmVqZWN0aW9uXyIsImFkZENhbGxiYWNrRW50cnlfIiwidGhlbkNhdGNoIiwib25SZWplY3RlZCIsImNhdGNoIiwiY2FuY2VsIiwib3B0X21lc3NhZ2UiLCJDYW5jZWxsYXRpb25FcnJvciIsIklTX0NBTkNFTExBVElPTl9FUlJPUiIsImNhbmNlbEludGVybmFsXyIsImNhbmNlbENoaWxkXyIsImNoaWxkUHJvbWlzZSIsImNoaWxkQ291bnQiLCJjaGlsZEluZGV4IiwiZW50cnkiLCJjYWxsYmFja0VudHJ5IiwiZXhlY3V0ZUNhbGxiYWNrXyIsInNjaGVkdWxlQ2FsbGJhY2tzXyIsIm9uRnVsZmlsbGVkIiwicmVzdWx0IiwidW5ibG9ja0FuZEZ1bGZpbGxfIiwiQkxPQ0tFRCIsInVuYmxvY2tBbmRSZWplY3RfIiwic3RhdGUiLCJ0cnlUaGVuXyIsImFkZFVuaGFuZGxlZFJlamVjdGlvbl8iLCJ0aGVuYWJsZSIsImNhbGxlZCIsImV4ZWN1dGVDYWxsYmFja3NfIiwiZW50cmllcyIsInJlbW92ZVVuaGFuZGxlZFJlamVjdGlvbl8iLCJzZXRUaW1lb3V0Iiwic2V0VW5oYW5kbGVkUmVqZWN0aW9uSGFuZGxlciIsImRlYm91bmNlIiwiZGVsYXkiLCJkZWJvdW5jZWQiLCJjYW5jZWxEZWJvdW5jZSIsIlJFR0VYIiwiY29udmVydE1hdGNoZXNUb09iaiIsImNvbnZlcnRUb2tlbnNUb1JlZ2V4IiwidG9rZW5zIiwicmVnZXgiLCJjb3JlIiwiZXNjYXBlIiwiY2FwdHVyZSIsImVuY2xvc2VOb25DYXB0dXJpbmdHcm91cCIsInBhdHRlcm4iLCJyZXBlYXQiLCJwcmVmaXgiLCJvcHRpb25hbCIsIlJlZ0V4cCIsIm1ha2VUcmFpbGluZ1NsYXNoT3B0aW9uYWwiLCJyb3V0ZU9yVG9rZW5zIiwicm91dGUiLCJ1bm5hbWVkQ291bnQiLCJjdXJyUGF0aCIsImV4ZWMiLCJwYXJhbVBhdHRlcm4iLCJ1bm5hbWVkUGF0dGVybiIsIm1vZGlmaWVyIiwidG9SZWdleCIsImV4dHJhY3REYXRhIiwicGFyYW1JbmRleCIsIlJvdXRlIiwicGFyc2VkRGF0YV8iLCJidWlsZFBhcnNlZERhdGFfIiwiQ2FjaGVhYmxlIiwiY2FjaGUiLCJjYWNoZWFibGUiLCJjb250ZW50IiwiY2xlYXJDYWNoZSIsIlNjcmVlbiIsIm1ha2VJZF8iLCJ0aXRsZSIsImxvZyIsInN1cmZhY2VzIiwic0lkIiwiYWN0aXZlQ2hpbGQiLCJydW5TY3JpcHRzSW5FbGVtZW50IiwidHJhbnNpdGlvbnMiLCJzdXJmYWNlIiwiZGVmZXJyZWQiLCJzaG93IiwiU3VyZmFjZSIsImRlZmF1bHRDaGlsZCIsInRyYW5zaXRpb25GbiIsImdldENoaWxkIiwiREVGQVVMVCIsIm1heWJlV3JhcENvbnRlbnRBc0RlZmF1bHRfIiwic2NyZWVuSWQiLCJvcHRfY29udGVudCIsImNyZWF0ZUNoaWxkIiwidHJhbnNpdGlvbiIsImdldEVsZW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsImFkZENvbnRlbnQiLCJmcm9tIiwidG8iLCJkZWZhdWx0VHJhbnNpdGlvbiIsIkFwcCIsImFjdGl2ZVNjcmVlbiIsImFjdGl2ZVBhdGgiLCJhbGxvd1ByZXZlbnROYXZpZ2F0ZSIsImJyb3dzZXJQYXRoQmVmb3JlTmF2aWdhdGUiLCJjYXB0dXJlU2Nyb2xsUG9zaXRpb25Gcm9tU2Nyb2xsRXZlbnQiLCJkZWZhdWx0VGl0bGUiLCJmb3JtU2VsZWN0b3IiLCJpZ25vcmVRdWVyeVN0cmluZ0Zyb21Sb3V0ZVBhdGgiLCJsaW5rU2VsZWN0b3IiLCJsb2FkaW5nQ3NzQ2xhc3MiLCJuYXRpdmVTY3JvbGxSZXN0b3JhdGlvblN1cHBvcnRlZCIsImlzTmF2aWdhdGlvblBlbmRpbmciLCJwZW5kaW5nTmF2aWdhdGUiLCJwb3BzdGF0ZVNjcm9sbExlZnQiLCJwb3BzdGF0ZVNjcm9sbFRvcCIsInJlZGlyZWN0UGF0aCIsInJvdXRlcyIsInNjcmVlbnMiLCJza2lwTG9hZFBvcHN0YXRlIiwidXBkYXRlU2Nyb2xsUG9zaXRpb24iLCJhcHBFdmVudEhhbmRsZXJzXyIsIm9uU2Nyb2xsXyIsIm9uTG9hZF8iLCJvblBvcHN0YXRlXyIsIm9uU3RhcnROYXZpZ2F0ZV8iLCJvbkJlZm9yZU5hdmlnYXRlXyIsIm9uQmVmb3JlTmF2aWdhdGVEZWZhdWx0XyIsIm9uQmVmb3JlVW5sb2FkRGVmYXVsdF8iLCJzZXRMaW5rU2VsZWN0b3IiLCJzZXRGb3JtU2VsZWN0b3IiLCJtYXliZU92ZXJsb2FkQmVmb3JlVW5sb2FkXyIsImdldElkIiwiaXNXZWJVcmkiLCJpc0xpbmtTYW1lT3JpZ2luXyIsImlzU2FtZUJhc2VQYXRoXyIsImlzQ3VycmVudEJyb3dzZXJQYXRoIiwiZmluZFJvdXRlIiwicmVtb3ZlU2NyZWVuIiwic2NyZWVuIiwiZ2V0SGFuZGxlciIsImNsZWFyU2NyZWVuc0NhY2hlIiwiZm9ybUV2ZW50SGFuZGxlcl8iLCJsaW5rRXZlbnRIYW5kbGVyXyIsInJlbW92ZUFsbExpc3RlbmVycyIsIm5hdmlnYXRlIiwiZ2V0Q3VycmVudEJyb3dzZXJQYXRoIiwib3B0X3JlcGxhY2VIaXN0b3J5Iiwic3RvcFBlbmRpbmdOYXZpZ2F0ZV8iLCJuZXh0U2NyZWVuIiwiY3JlYXRlU2NyZWVuSW5zdGFuY2UiLCJtYXliZVByZXZlbnREZWFjdGl2YXRlXyIsIm1heWJlUHJldmVudEFjdGl2YXRlXyIsImxvYWQiLCJkZWFjdGl2YXRlIiwicHJlcGFyZU5hdmlnYXRlSGlzdG9yeV8iLCJwcmVwYXJlTmF2aWdhdGVTdXJmYWNlc18iLCJleHRyYWN0UGFyYW1zIiwiZXZhbHVhdGVTdHlsZXMiLCJmbGlwIiwiZXZhbHVhdGVTY3JpcHRzIiwibWF5YmVVcGRhdGVTY3JvbGxQb3NpdGlvblN0YXRlXyIsInN5bmNTY3JvbGxQb3NpdGlvblN5bmNUaGVuQXN5bmNfIiwiZmluYWxpemVOYXZpZ2F0ZV8iLCJoYW5kbGVOYXZpZ2F0ZUVycm9yXyIsImdldFJvdXRlUGF0aCIsImFjdGl2YXRlIiwiaXNDYWNoZWFibGUiLCJjYXB0dXJlZEZvcm1FbGVtZW50IiwiY2FwdHVyZWRGb3JtQnV0dG9uRWxlbWVudCIsIm1hdGNoZXNQYXRoIiwiZ2V0SWdub3JlUXVlcnlTdHJpbmdGcm9tUm91dGVQYXRoIiwiZ2V0VXJsUGF0aFdpdGhvdXRIYXNoQW5kU2VhcmNoIiwid2lubmVyIiwic3dpdGNoU2Nyb2xsUG9zaXRpb25SYWNlIiwic2Nyb2xsVG8iLCJzY3JvbGxMZWZ0Iiwic2Nyb2xsVG9wIiwibmF0aXZlU2Nyb2xsUmVzdG9yYXRpb25fIiwic2Nyb2xsUmVzdG9yYXRpb24iLCJjYW5OYXZpZ2F0ZSIsIm5hdmlnYXRlRmFpbGVkIiwicHJldmVudERlZmF1bHQiLCJvbmJlZm9yZXVubG9hZCIsIl9vbmJlZm9yZXVubG9hZCIsIl9vdmVybG9hZGVkIiwiYmVmb3JlQWN0aXZhdGUiLCJwcmV2ZW50IiwiYmVmb3JlRGVhY3RpdmF0ZSIsImFuY2hvckVsZW1lbnQiLCJnZXROb2RlT2Zmc2V0Iiwic2F2ZUhpc3RvcnlDdXJyZW50UGFnZVNjcm9sbFBvc2l0aW9uXyIsIm9wdF9ldmVudCIsImlzSHRtbDVIaXN0b3J5U3VwcG9ydGVkIiwiZm9ybSIsInJlcGxhY2VIaXN0b3J5IiwiZnVuYyIsImFsdEtleSIsImN0cmxLZXkiLCJtZXRhS2V5Iiwic2hpZnRLZXkiLCJtYXliZU5hdmlnYXRlXyIsIm1ldGhvZCIsImJ1dHRvblNlbGVjdG9yIiwiYWN0aXZlRWxlbWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJhY3Rpb24iLCJtYXliZVJlcG9zaXRpb25TY3JvbGxUb0hhc2hlZEFuY2hvciIsInJlbG9hZFBhZ2UiLCJzZW5uYSIsImxvY2tIaXN0b3J5U2Nyb2xsUG9zaXRpb25fIiwic2V0UmVmZXJyZXIiLCJwYWdlWU9mZnNldCIsInBhZ2VYT2Zmc2V0IiwibWF5YmVEaXNhYmxlTmF0aXZlU2Nyb2xsUmVzdG9yYXRpb24iLCJlbmROYXZpZ2F0ZVBheWxvYWQiLCJkb05hdmlnYXRlXyIsIm1heWJlUmVzdG9yZU5hdGl2ZVNjcm9sbFJlc3RvcmF0aW9uIiwiZ2V0VGl0bGUiLCJnZXREZWZhdWx0VGl0bGUiLCJiZWZvcmVVcGRhdGVIaXN0b3J5UGF0aCIsImhpc3RvcnlTdGF0ZSIsIm1heWJlUmVzdG9yZVJlZGlyZWN0UGF0aEhhc2hfIiwidXBkYXRlSGlzdG9yeV8iLCJiZWZvcmVVcGRhdGVIaXN0b3J5U3RhdGUiLCJwYXJhbXMiLCJzdXJmYWNlQ29udGVudCIsImdldFN1cmZhY2VDb250ZW50IiwicmVsb2FkIiwic3VyZmFjZUlkIiwiZGlzcG9zZSIsInJlcGxhY2VTdGF0ZSIsInJlbW92ZVBhdGhUcmFpbGluZ1NsYXNoIiwib25Eb2NTdWJtaXREZWxlZ2F0ZV8iLCJvbkRvY0NsaWNrRGVsZWdhdGVfIiwic3luYyIsInRpdGxlTm9kZSIsIkFqYXgiLCJhbGxIZWFkZXJzIiwiaGVhZGVycyIsInBhaXJzIiwiYm9keSIsIm9wdF9oZWFkZXJzIiwib3B0X3BhcmFtcyIsIm9wdF90aW1lb3V0Iiwib3B0X3N5bmMiLCJvcHRfd2l0aENyZWRlbnRpYWxzIiwicmVxdWVzdCIsIlhNTEh0dHBSZXF1ZXN0IiwicHJldmlvdXNSZWFkeVN0YXRlIiwiUHJvbWlzZSIsIm9ubG9hZCIsImFib3J0ZWQiLCJvbmVycm9yIiwicmVhZHlTdGF0ZSIsInRlcm1pbmF0ZWRQcmVtYXR1cmVseSIsImFib3J0IiwidGltZW91dCIsImFkZFBhcmFtZXRlcnNGcm9tTXVsdGlNYXAiLCJ3aXRoQ3JlZGVudGlhbHMiLCJzZXRSZXF1ZXN0SGVhZGVyIiwic2VuZCIsImVycm9ycyIsIklOVkFMSURfU1RBVFVTIiwiUkVRVUVTVF9FUlJPUiIsIlJFUVVFU1RfVElNRU9VVCIsIlJFUVVFU1RfUFJFTUFUVVJFX1RFUk1JTkFUSU9OIiwiVUEiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJwbGF0Zm9ybSIsImlzTWFjIiwibWF0Y2hQbGF0Zm9ybSIsImlzV2luIiwiaXNPcGVyYSIsIm1hdGNoVXNlckFnZW50IiwiaXNJZSIsImlzRWRnZSIsImlzSWVPckVkZ2UiLCJpc0Nocm9tZSIsImlzU2FmYXJpIiwiaXNGaXJlZm94IiwidGVzdFVzZXJBZ2VudCIsImdldE5hdGl2ZVVzZXJBZ2VudCIsImdldE5hdGl2ZVBsYXRmb3JtIiwiUmVxdWVzdFNjcmVlbiIsImh0dHBIZWFkZXJzIiwiaHR0cE1ldGhvZCIsIkdFVCIsInN0YXR1cyIsImlzVmFsaWRSZXNwb25zZVN0YXR1c0NvZGUiLCJpbnZhbGlkU3RhdHVzIiwic3RhdHVzQ29kZSIsImdldFJlcXVlc3RQYXRoIiwic2V0SG9zdG5hbWUiLCJzZXRQcm90b2NvbCIsInNldFBvcnQiLCJtYWtlVW5pcXVlIiwiZ2V0UmVxdWVzdCIsInJlcXVlc3RQYXRoIiwicmVzcG9uc2VVcmwiLCJtYXliZUV4dHJhY3RSZXNwb25zZVVybEZyb21SZXF1ZXN0IiwicmVtb3ZlVW5pcXVlIiwiZ2V0Q2FjaGUiLCJoZWFkZXIiLCJhZGRTYWZhcmlYSFJQb2x5ZmlsbCIsIkZvcm1EYXRhIiwibWF5YmVBcHBlbmRTdWJtaXRCdXR0b25WYWx1ZV8iLCJQT1NUIiwiZm9ybWF0TG9hZFBhdGgiLCJyZW1vdmVTYWZhcmlYSFJQb2x5ZmlsbCIsInNldFJlcXVlc3QiLCJ4aHIiLCJhc3NlcnRWYWxpZFJlc3BvbnNlU3RhdHVzQ29kZSIsImFkZENhY2hlIiwicmVzcG9uc2VUZXh0IiwicmVxdWVzdEVycm9yIiwicmVxdWVzdFByZW1hdHVyZVRlcm1pbmF0aW9uIiwicmVzcG9uc2VVUkwiLCJnZXRSZXNwb25zZUhlYWRlciIsIlhfUkVRVUVTVF9VUkxfSEVBREVSIiwiaW5wdXRzIiwiaW5wdXQiLCJmaWxlcyIsIkh0bWxTY3JlZW4iLCJ0aXRsZVNlbGVjdG9yIiwicmVsZWFzZVZpcnR1YWxEb2N1bWVudCIsInBlbmRpbmdTdHlsZXMiLCJ2aXJ0dWFsRG9jdW1lbnQiLCJjb3B5Tm9kZUF0dHJpYnV0ZXNGcm9tQ29udGVudF8iLCJuZXdTdHlsZSIsImlzVGVtcG9yYXJ5U3R5bGUiLCJzdHlsZXNUZW1wb3JhcnkiLCJzdHlsZUluRG9jIiwiaW5zZXJ0QmVmb3JlIiwibmV4dFNpYmxpbmciLCJib2R5U3VyZmFjZSIsInBsYWNlaG9sZGVyIiwiY2xlYXJOb2RlQXR0cmlidXRlcyIsImNvcHlOb2RlQXR0cmlidXRlcyIsImRpc3Bvc2VQZW5kaW5nU3R5bGVzIiwiZXZhbHVhdGVUcmFja2VkU2NyaXB0cyIsImV2YWx1YXRlVHJhY2tlZFJlc291cmNlc18iLCJzY3JpcHRzVGVtcG9yYXJ5Iiwic2NyaXB0c1Blcm1hbmVudCIsImV2YWx1YXRlVHJhY2tlZFN0eWxlcyIsInJ1blN0eWxlc0luRWxlbWVudCIsInN0eWxlc1Blcm1hbmVudCIsImFwcGVuZFN0eWxlSW50b0RvY3VtZW50XyIsImV2YWx1YXRvckZuIiwic2VsZWN0b3JUZW1wb3JhcnkiLCJzZWxlY3RvclBlcm1hbmVudCIsIm9wdF9hcHBlbmRSZXNvdXJjZUZuIiwidHJhY2tlZCIsInZpcnR1YWxRdWVyeVNlbGVjdG9yQWxsXyIsInRlbXBvcmFyaWVzSW5Eb2MiLCJxdWVyeVNlbGVjdG9yQWxsXyIsInBlcm1hbmVudHNJbkRvYyIsInJlc291cmNlIiwicmVzb3VyY2VLZXkiLCJnZXRSZXNvdXJjZUtleV8iLCJwZXJtYW5lbnRSZXNvdXJjZXNJbkRvYyIsImZyYWciLCJhbGxvY2F0ZVZpcnR1YWxEb2N1bWVudEZvckNvbnRlbnQiLCJyZXNvbHZlVGl0bGVGcm9tVmlydHVhbERvY3VtZW50IiwiYXNzZXJ0U2FtZUJvZHlJZEluVmlydHVhbERvY3VtZW50IiwibWFrZVRlbXBvcmFyeVN0eWxlc0hyZWZzVW5pcXVlXyIsInJlcGxhY2VTdHlsZUFuZE1ha2VVbmlxdWVfIiwicmVwbGFjZUNoaWxkIiwic2V0VGl0bGUiLCJ0ZXh0Q29udGVudCIsIkFwcERhdGFBdHRyaWJ1dGVIYW5kbGVyIiwiYXBwIiwiYmFzZUVsZW1lbnQiLCJoYXNBdHRyaWJ1dGUiLCJkYXRhQXR0cmlidXRlcyIsIm1heWJlQWRkUm91dGVzXyIsIm1heWJlQWRkU3VyZmFjZXNfIiwibWF5YmVTZXRCYXNlUGF0aF8iLCJtYXliZVNldExpbmtTZWxlY3Rvcl8iLCJtYXliZVNldExvYWRpbmdDc3NDbGFzc18iLCJtYXliZVNldFVwZGF0ZVNjcm9sbFBvc2l0aW9uXyIsIm1heWJlRGlzcGF0Y2hfIiwicm91dGVzU2VsZWN0b3IiLCJxdWVyeVNlbGVjdG9yQWxsQXNBcnJheV8iLCJtYXliZVBhcnNlTGlua1JvdXRlXyIsImhhc1JvdXRlcyIsImFkZFJvdXRlcyIsInN1cmZhY2VzU2VsZWN0b3IiLCJzdXJmYWNlRWxlbWVudCIsInVwZGF0ZUVsZW1lbnRJZElmU3BlY2lhbFN1cmZhY2VfIiwiYWRkU3VyZmFjZXMiLCJkaXNwYXRjaCIsIm1heWJlUGFyc2VMaW5rUm91dGVQYXRoXyIsIm1heWJlUGFyc2VMaW5rUm91dGVIYW5kbGVyXyIsImdldFBhdGgiLCJnZXRBdHRyaWJ1dGUiLCJnZXRPYmplY3RCeU5hbWUiLCJzZXRCYXNlUGF0aCIsInNldExvYWRpbmdDc3NDbGFzcyIsInNldFVwZGF0ZVNjcm9sbFBvc2l0aW9uIiwiZGF0YUF0dHJpYnV0ZUhhbmRsZXIiLCJzZXRCYXNlRWxlbWVudCIsImhhbmRsZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsSUFBSUEsVUFBVUEsV0FBVyxFQUF6Qjs7QUFFQSxJQUFJLE9BQU9DLE1BQVAsS0FBa0IsV0FBdEIsRUFBbUM7U0FDMUJBLE1BQVIsR0FBaUJBLE1BQWpCOzs7QUFHRCxJQUFJLE9BQU9DLFFBQVAsS0FBb0IsV0FBeEIsRUFBcUM7U0FDNUJBLFFBQVIsR0FBbUJBLFFBQW5COzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNMRDs7Ozs7QUFLQSxJQUFJQywrQkFBSjs7Ozs7OztBQU9BLElBQUlDLG1CQUFtQixDQUF2Qjs7Ozs7OztBQU9BLEFBQU8sSUFBTUMsMEJBQXlCQyxLQUFLQyxNQUFMLEtBQWdCLEdBQWpCLEtBQTBCLENBQWxELENBQU47Ozs7Ozs7Ozs7OztBQVlQLEFBQU8sU0FBU0MsY0FBVCxHQUEwQjtRQUMxQkMsTUFBTSwrQkFBTixDQUFOOzs7Ozs7QUFNRCxBQUFPLFNBQVNDLHdCQUFULEdBQW9DOzJCQUNqQkMsU0FBekI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFtQkQsQUFBTyxTQUFTQyx1QkFBVCxHQUFnRDtNQUFmQyxRQUFlLHVFQUFKLEVBQUk7OzJCQUM3QkEsUUFBekI7Ozs7Ozs7O0FBUUQsQUFBTyxTQUFTQyx3QkFBVCxHQUFvQzs7TUFFdENYLDJCQUEyQlEsU0FBL0IsRUFBMEM7UUFDckMsT0FBT1YsTUFBUCxLQUFrQixXQUFsQixJQUFpQ0EsT0FBT2MsdUJBQTVDLEVBQXFFOzhCQUM1Q2QsT0FBT2MsdUJBQS9COzs7U0FHS1osc0JBQVA7Ozs7Ozs7Ozs7QUFVRCxTQUFTYSxlQUFULENBQXlCQyxDQUF6QixFQUE0QkMsQ0FBNUIsRUFBK0I7U0FDdkJELEtBQUtDLENBQVo7Ozs7Ozs7Ozs7QUFVRCxBQUFPLFNBQVNDLGVBQVQsQ0FBeUJDLEVBQXpCLEVBQTZCO01BQy9CLENBQUNBLEdBQUdDLElBQVIsRUFBYztRQUNQQyxNQUFNRixHQUFHRyxRQUFILEVBQVo7T0FDR0YsSUFBSCxHQUFVQyxJQUFJRSxTQUFKLENBQWMsQ0FBZCxFQUFpQkYsSUFBSUcsT0FBSixDQUFZLEdBQVosQ0FBakIsQ0FBVjs7U0FFTUwsR0FBR0MsSUFBVjs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFpQkQsQUFBTyxTQUFTSyxpQkFBVCxDQUEyQkMsSUFBM0IsRUFBaUNDLFlBQWpDLEVBQStDQyxXQUEvQyxFQUE0RDtNQUM1REMsYUFBYUYsZUFBZSxTQUFsQztNQUNJLENBQUNELEtBQUtJLGNBQUwsQ0FBb0JELFVBQXBCLENBQUwsRUFBc0M7UUFDakNFLFNBQVNMLEtBQUtJLGNBQUwsQ0FBb0JILFlBQXBCLElBQW9DRCxLQUFLQyxZQUFMLENBQXBDLEdBQXlELElBQXRFO1FBQ0lELEtBQUtNLFNBQUwsSUFBa0IsQ0FBQ04sS0FBS00sU0FBTCxDQUFlQyxhQUFmLENBQTZCQyxRQUE3QixDQUF2QixFQUErRDtVQUN4REMsVUFBVVAsZUFBZWIsZUFBL0I7ZUFDU29CLFFBQ1JKLE1BRFEsRUFFUk4sa0JBQWtCQyxLQUFLTSxTQUF2QixFQUFrQ0wsWUFBbEMsRUFBZ0RRLE9BQWhELENBRlEsQ0FBVDs7U0FLSU4sVUFBTCxJQUFtQkUsTUFBbkI7O1NBRU1MLEtBQUtHLFVBQUwsQ0FBUDs7Ozs7Ozs7Ozs7Ozs7QUFjRCxBQUFPLFNBQVNPLE1BQVQsQ0FBZ0JDLFVBQWhCLEVBQTRCQyxpQkFBNUIsRUFBK0M7TUFDakRELFVBQUosRUFBZ0I7UUFDWEUsS0FBS0YsV0FBV2pDLFlBQVgsQ0FBVDtRQUNJa0MscUJBQXFCLENBQUNELFdBQVdQLGNBQVgsQ0FBMEIxQixZQUExQixDQUExQixFQUFtRTtXQUM3RCxJQUFMOztXQUVNbUMsT0FBT0YsV0FBV2pDLFlBQVgsSUFBMkJELGtCQUFsQyxDQUFQOztTQUVNQSxrQkFBUDs7Ozs7Ozs7QUFRRCxBQUFPLFNBQVNxQyxnQkFBVCxDQUEwQkMsZUFBMUIsRUFBMkM7U0FDMUNBLGVBQVA7Ozs7Ozs7O0FBUUQsQUFBTyxTQUFTQyxTQUFULENBQW1CQyxHQUFuQixFQUF3QjtTQUN2QixPQUFPQSxHQUFQLEtBQWUsU0FBdEI7Ozs7Ozs7O0FBUUQsQUFBTyxTQUFTQyxLQUFULENBQWVELEdBQWYsRUFBb0I7U0FDbkJBLFFBQVFqQyxTQUFmOzs7Ozs7OztBQVFELEFBQU8sU0FBU21DLGVBQVQsQ0FBeUJGLEdBQXpCLEVBQThCO1NBQzdCQyxNQUFNRCxHQUFOLEtBQWMsQ0FBQ0csT0FBT0gsR0FBUCxDQUF0Qjs7Ozs7Ozs7QUFRRCxBQUFPLFNBQVNJLFVBQVQsQ0FBb0JKLEdBQXBCLEVBQXlCO1NBQ3hCQSxPQUFPLFFBQU9BLEdBQVAseUNBQU9BLEdBQVAsT0FBZSxRQUF0QixJQUFrQ0EsSUFBSUssUUFBSixLQUFpQixDQUExRDs7Ozs7Ozs7QUFRRCxBQUFPLFNBQVNDLGtCQUFULENBQTRCTixHQUE1QixFQUFpQztTQUNoQ0EsT0FBTyxRQUFPQSxHQUFQLHlDQUFPQSxHQUFQLE9BQWUsUUFBdEIsSUFBa0NBLElBQUlLLFFBQUosS0FBaUIsRUFBMUQ7Ozs7Ozs7O0FBUUQsQUFBTyxTQUFTRSxTQUFULENBQW1CUCxHQUFuQixFQUF3QjtTQUN2QkEsT0FBTyxRQUFPQSxHQUFQLHlDQUFPQSxHQUFQLE9BQWUsUUFBdEIsSUFBa0NBLElBQUlLLFFBQUosS0FBaUIsQ0FBMUQ7Ozs7Ozs7O0FBUUQsQUFBTyxTQUFTRyxVQUFULENBQW9CUixHQUFwQixFQUF5QjtTQUN4QixPQUFPQSxHQUFQLEtBQWUsVUFBdEI7Ozs7Ozs7O0FBUUQsQUFBTyxTQUFTRyxNQUFULENBQWdCSCxHQUFoQixFQUFxQjtTQUNwQkEsUUFBUSxJQUFmOzs7Ozs7OztBQVFELEFBQU8sU0FBU1MsUUFBVCxDQUFrQlQsR0FBbEIsRUFBdUI7U0FDdEIsT0FBT0EsR0FBUCxLQUFlLFFBQXRCOzs7Ozs7OztBQVFELEFBQU8sU0FBU1UsUUFBVCxDQUFrQlYsR0FBbEIsRUFBdUI7U0FDdEJBLFFBQVEsSUFBUixJQUFnQkEsUUFBUUEsSUFBSTNDLE1BQW5DOzs7Ozs7Ozs7QUFTRCxBQUFPLFNBQVNzRCxRQUFULENBQWtCWCxHQUFsQixFQUF1QjtNQUN2QlksY0FBY1osR0FBZCx5Q0FBY0EsR0FBZCxDQUFOO1NBQ09ZLFNBQVMsUUFBVCxJQUFxQlosUUFBUSxJQUE3QixJQUFxQ1ksU0FBUyxVQUFyRDs7Ozs7Ozs7QUFRRCxBQUFPLFNBQVNDLFNBQVQsQ0FBbUJiLEdBQW5CLEVBQXdCO1NBQ3ZCQSxPQUFPLFFBQU9BLEdBQVAseUNBQU9BLEdBQVAsT0FBZSxRQUF0QixJQUFrQyxPQUFPQSxJQUFJYyxJQUFYLEtBQW9CLFVBQTdEOzs7Ozs7OztBQVFELEFBQU8sU0FBU0MsUUFBVCxDQUFrQmYsR0FBbEIsRUFBdUI7U0FDdEIsT0FBT0EsR0FBUCxLQUFlLFFBQWYsSUFBMkJBLGVBQWVnQixNQUFqRDs7Ozs7Ozs7O0FBU0QsQUFBTyxTQUFTQyxZQUFULEdBQXdCO1NBQ3ZCLE9BQU9DLE9BQVAsS0FBbUIsV0FBbkIsSUFDTixPQUFPQSxRQUFRQyxHQUFmLEtBQXVCLFdBRGpCLElBRU5ELFFBQVFDLEdBQVIsQ0FBWUMsUUFBWixLQUF5QixNQUZuQixJQUdOLENBQUNGLFFBQVFHLE9BSFY7Ozs7Ozs7QUFVRCxBQUFPLFNBQVNDLFlBQVQsR0FBd0I7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUM1Uy9COzs7OztJQ0VNQzs7Ozs7Ozs7Ozs7Ozs7d0JBT1FDLE1BQU1DLE1BQU07T0FDcEJELFNBQVNDLElBQWIsRUFBbUI7V0FDWCxJQUFQOztPQUVHRCxLQUFLRSxNQUFMLEtBQWdCRCxLQUFLQyxNQUF6QixFQUFpQztXQUN6QixLQUFQOztRQUVJLElBQUlDLElBQUksQ0FBYixFQUFnQkEsSUFBSUgsS0FBS0UsTUFBekIsRUFBaUNDLEdBQWpDLEVBQXNDO1FBQ2pDSCxLQUFLRyxDQUFMLE1BQVlGLEtBQUtFLENBQUwsQ0FBaEIsRUFBeUI7WUFDakIsS0FBUDs7O1VBR0ssSUFBUDs7Ozs7Ozs7Ozs7b0NBUXdCQyxLQUFLO1FBQ3hCLElBQUlELElBQUksQ0FBYixFQUFnQkEsSUFBSUMsSUFBSUYsTUFBeEIsRUFBZ0NDLEdBQWhDLEVBQXFDO1FBQ2hDQyxJQUFJRCxDQUFKLE1BQVc1RCxTQUFmLEVBQTBCO1lBQ2xCNkQsSUFBSUQsQ0FBSixDQUFQOzs7Ozs7Ozs7Ozs7OzswQkFXWUMsS0FBS0MsWUFBWTtPQUMzQkMsU0FBU0QsY0FBYyxFQUEzQjtRQUNLLElBQUlGLElBQUksQ0FBYixFQUFnQkEsSUFBSUMsSUFBSUYsTUFBeEIsRUFBZ0NDLEdBQWhDLEVBQXFDO1FBQ2hDSSxNQUFNQyxPQUFOLENBQWNKLElBQUlELENBQUosQ0FBZCxDQUFKLEVBQTJCO1dBQ3BCTSxPQUFOLENBQWNMLElBQUlELENBQUosQ0FBZCxFQUFzQkcsTUFBdEI7S0FERCxNQUVPO1lBQ0NJLElBQVAsQ0FBWU4sSUFBSUQsQ0FBSixDQUFaOzs7VUFHS0csTUFBUDs7Ozs7Ozs7Ozs7Ozt5QkFVYUYsS0FBS08sS0FBSztPQUNqQlIsSUFBSUMsSUFBSS9DLE9BQUosQ0FBWXNELEdBQVosQ0FBVjtPQUNJQyxXQUFKO09BQ01BLEtBQUtULEtBQUssQ0FBaEIsRUFBcUI7VUFDZFUsUUFBTixDQUFlVCxHQUFmLEVBQW9CRCxDQUFwQjs7VUFFTVMsRUFBUDs7Ozs7Ozs7Ozs7OzJCQVNlUixLQUFLRCxHQUFHO1VBQ2hCSSxNQUFNTyxTQUFOLENBQWdCQyxNQUFoQixDQUF1QkMsSUFBdkIsQ0FBNEJaLEdBQTVCLEVBQWlDRCxDQUFqQyxFQUFvQyxDQUFwQyxFQUF1Q0QsTUFBdkMsS0FBa0QsQ0FBekQ7Ozs7Ozs7Ozs7Ozs7Ozs7d0JBYVlFLEtBQUthLE9BQU9DLFNBQVM7T0FDM0JDLFNBQVMsRUFBZjtPQUNNQyxNQUFNM0MsTUFBTXlDLE9BQU4sSUFBaUJBLE9BQWpCLEdBQTJCZCxJQUFJRixNQUEzQztRQUNLLElBQUlDLElBQUljLEtBQWIsRUFBb0JkLElBQUlpQixHQUF4QixFQUE2QmpCLEdBQTdCLEVBQWtDO1dBQzFCTyxJQUFQLENBQVlOLElBQUlELENBQUosQ0FBWjs7VUFFTWdCLE1BQVA7Ozs7OztBQ25HRjs7Ozs7QUFLQSxBQUVBLElBQU1FLFFBQVEsRUFBZDs7Ozs7Ozs7O0FBVUFBLE1BQU1DLGNBQU4sR0FBdUIsVUFBU0MsU0FBVCxFQUFvQjs7T0FFcENDLFFBQU4sQ0FBZSxZQUFXO1FBQ25CRCxTQUFOO0VBREQ7Q0FGRDs7Ozs7Ozs7OztBQWdCQUYsTUFBTUksR0FBTixHQUFZLFVBQVNDLFFBQVQsRUFBbUJDLFdBQW5CLEVBQWdDO0tBQ3ZDLENBQUNOLE1BQU1JLEdBQU4sQ0FBVUcsbUJBQWYsRUFBb0M7O1FBRTdCSixRQUFOLENBQWVILE1BQU1JLEdBQU4sQ0FBVUksZ0JBQXpCO1FBQ01KLEdBQU4sQ0FBVUcsbUJBQVYsR0FBZ0MsSUFBaEM7OztPQUdLSCxHQUFOLENBQVVLLFVBQVYsQ0FBcUJwQixJQUFyQixDQUNDLElBQUlXLE1BQU1JLEdBQU4sQ0FBVU0sU0FBZCxDQUF3QkwsUUFBeEIsRUFBa0NDLFdBQWxDLENBREQ7Q0FQRDs7O0FBYUFOLE1BQU1JLEdBQU4sQ0FBVUcsbUJBQVYsR0FBZ0MsS0FBaEM7OztBQUlBUCxNQUFNSSxHQUFOLENBQVVLLFVBQVYsR0FBdUIsRUFBdkI7Ozs7Ozs7QUFPQVQsTUFBTUksR0FBTixDQUFVSSxnQkFBVixHQUE2QixZQUFXOztRQUVoQ1IsTUFBTUksR0FBTixDQUFVSyxVQUFWLENBQXFCNUIsTUFBNUIsRUFBb0M7O01BRTdCOEIsWUFBWVgsTUFBTUksR0FBTixDQUFVSyxVQUE1QjtRQUNNTCxHQUFOLENBQVVLLFVBQVYsR0FBdUIsRUFBdkI7T0FDSyxJQUFJM0IsSUFBSSxDQUFiLEVBQWdCQSxJQUFJNkIsVUFBVTlCLE1BQTlCLEVBQXNDQyxHQUF0QyxFQUEyQztPQUNwQzhCLFdBQVdELFVBQVU3QixDQUFWLENBQWpCO09BQ0k7YUFDTW5ELEVBQVQsQ0FBWWdFLElBQVosQ0FBaUJpQixTQUFTQyxLQUExQjtJQURELENBRUUsT0FBT0MsQ0FBUCxFQUFVO1VBQ0xiLGNBQU4sQ0FBcUJhLENBQXJCOzs7Ozs7T0FNR1YsR0FBTixDQUFVRyxtQkFBVixHQUFnQyxLQUFoQztDQWpCRDs7Ozs7Ozs7Ozs7QUE4QkFQLE1BQU1JLEdBQU4sQ0FBVU0sU0FBVixHQUFzQixVQUFTL0UsRUFBVCxFQUFha0YsS0FBYixFQUFvQjs7TUFFcENsRixFQUFMLEdBQVVBLEVBQVY7O01BRUtrRixLQUFMLEdBQWFBLEtBQWI7Q0FKRDs7Ozs7Ozs7Ozs7QUFpQkFiLE1BQU1HLFFBQU4sR0FBaUIsVUFBU0UsUUFBVCxFQUFtQkMsV0FBbkIsRUFBZ0M7S0FDNUNTLEtBQUtWLFFBQVQ7S0FDSUMsV0FBSixFQUFpQjtPQUNYRCxTQUFTVyxJQUFULENBQWNWLFdBQWQsQ0FBTDs7TUFFSU4sTUFBTUcsUUFBTixDQUFlYyxhQUFmLENBQTZCRixFQUE3QixDQUFMOzs7Ozs7S0FNSSxPQUFPRyxZQUFQLEtBQXdCLFVBQTVCLEVBQXdDO2VBQzFCSCxFQUFiOzs7O0tBSUcsQ0FBQ2YsTUFBTUcsUUFBTixDQUFlZ0IsYUFBcEIsRUFBbUM7UUFDNUJoQixRQUFOLENBQWVnQixhQUFmLEdBQStCbkIsTUFBTUcsUUFBTixDQUFlaUIsd0JBQWYsRUFBL0I7O09BRUtqQixRQUFOLENBQWVnQixhQUFmLENBQTZCSixFQUE3QjtDQW5CRDs7Ozs7OztBQTRCQWYsTUFBTUcsUUFBTixDQUFlZ0IsYUFBZixHQUErQixJQUEvQjs7Ozs7Ozs7QUFTQW5CLE1BQU1HLFFBQU4sQ0FBZWlCLHdCQUFmLEdBQTBDLFlBQVc7OztLQUdoREMsZ0JBQUo7Ozs7OztLQU1JLE9BQU9DLGNBQVAsS0FBMEIsVUFBOUIsRUFBMEM7WUFDL0JBLGNBQVY7Ozs7Ozs7S0FPRyxPQUFPRCxPQUFQLEtBQW1CLFdBQW5CLElBQWtDLE9BQU83RyxNQUFQLEtBQWtCLFdBQXBELElBQ0hBLE9BQU8rRyxXQURKLElBQ21CL0csT0FBT2dILGdCQUQ5QixFQUNnRDs7WUFFckMsbUJBQVc7O09BRWRDLFNBQVNoSCxTQUFTaUgsYUFBVCxDQUF1QixRQUF2QixDQUFmO1VBQ09DLEtBQVAsQ0FBYUMsT0FBYixHQUF1QixNQUF2QjtVQUNPQyxHQUFQLEdBQWEsRUFBYjtZQUNTQyxlQUFULENBQXlCQyxXQUF6QixDQUFxQ04sTUFBckM7T0FDTU8sTUFBTVAsT0FBT1EsYUFBbkI7T0FDTUMsTUFBTUYsSUFBSXZILFFBQWhCO09BQ0kwSCxJQUFKO09BQ0lDLEtBQUosQ0FBVSxFQUFWO09BQ0lDLEtBQUo7T0FDTUMsVUFBVSxrQkFBa0J6SCxLQUFLQyxNQUFMLEVBQWxDO09BQ015SCxTQUFTUCxJQUFJUSxRQUFKLENBQWFDLFFBQWIsR0FBd0IsSUFBeEIsR0FBK0JULElBQUlRLFFBQUosQ0FBYUUsSUFBM0Q7T0FDTUMsWUFBWSxVQUFTN0IsQ0FBVCxFQUFZOzs7UUFHekJBLEVBQUV5QixNQUFGLEtBQWFBLE1BQWIsSUFBdUJ6QixFQUFFOEIsSUFBRixLQUFXTixPQUF0QyxFQUErQzs7O1NBRzFDTyxLQUFMLENBQVdGLFNBQVg7SUFOaUIsQ0FPaEIzQixJQVBnQixDQU9YLElBUFcsQ0FBbEI7T0FRSVEsZ0JBQUosQ0FBcUIsU0FBckIsRUFBZ0NtQixTQUFoQyxFQUEyQyxLQUEzQztRQUNLRSxLQUFMLEdBQWEsRUFBYjtRQUNLQyxLQUFMLEdBQWE7aUJBQ0MsdUJBQVc7U0FDbkJ2QixXQUFKLENBQWdCZSxPQUFoQixFQUF5QkMsTUFBekI7O0lBRkY7R0F2QkQ7O0tBOEJHLE9BQU9sQixPQUFQLEtBQW1CLFdBQXZCLEVBQW9DO01BQzdCMEIsVUFBVSxJQUFJMUIsT0FBSixFQUFoQjs7TUFFSTJCLE9BQU8sRUFBWDtNQUNJQyxPQUFPRCxJQUFYO1VBQ1FILEtBQVIsQ0FBY0YsU0FBZCxHQUEwQixZQUFXO1VBQzdCSyxLQUFLRSxJQUFaO09BQ01uQyxLQUFLaUMsS0FBS2pDLEVBQWhCO1FBQ0tBLEVBQUwsR0FBVSxJQUFWOztHQUhEO1NBTU8sVUFBU0EsRUFBVCxFQUFhO1FBQ2RtQyxJQUFMLEdBQVk7UUFDUG5DO0lBREw7VUFHT2tDLEtBQUtDLElBQVo7V0FDUUosS0FBUixDQUFjdkIsV0FBZCxDQUEwQixDQUExQjtHQUxEOzs7O0tBVUcsT0FBTzlHLFFBQVAsS0FBb0IsV0FBcEIsSUFBbUMsd0JBQ3RDQSxTQUFTaUgsYUFBVCxDQUF1QixRQUF2QixDQURELEVBQ21DO1NBQzNCLFVBQVNYLEVBQVQsRUFBYTtPQUNmb0MsU0FBUzFJLFNBQVNpSCxhQUFULENBQXVCLFFBQXZCLENBQWI7VUFDTzBCLGtCQUFQLEdBQTRCLFlBQVc7O1dBRS9CQSxrQkFBUCxHQUE0QixJQUE1QjtXQUNPQyxVQUFQLENBQWtCQyxXQUFsQixDQUE4QkgsTUFBOUI7YUFDUyxJQUFUOztTQUVLLElBQUw7SUFORDtZQVFTckIsZUFBVCxDQUF5QkMsV0FBekIsQ0FBcUNvQixNQUFyQztHQVZEOzs7O1FBZU0sVUFBU3BDLEVBQVQsRUFBYTthQUNSQSxFQUFYLEVBQWUsQ0FBZjtFQUREO0NBeEZEOzs7Ozs7Ozs7QUFxR0FmLE1BQU1HLFFBQU4sQ0FBZWMsYUFBZixHQUErQixVQUFTaEUsZUFBVCxFQUEwQjtRQUNqREEsZUFBUDtDQUREOztBQ2hQQTs7Ozs7Ozs7SUFPTXNHO3VCQUNTOzs7Ozs7OztPQU1SQyxTQUFMLEdBQWlCLEtBQWpCOzs7Ozs7Ozs7OzRCQU1TO09BQ0wsQ0FBQyxLQUFLQSxTQUFWLEVBQXFCO1NBQ2ZDLGVBQUw7U0FDS0QsU0FBTCxHQUFpQixJQUFqQjs7Ozs7Ozs7Ozs7O29DQVNnQjs7Ozs7Ozs7OytCQU1MO1VBQ0wsS0FBS0EsU0FBWjs7Ozs7O0lDdkNJRTs7Ozs7Ozs7Ozs7Ozs7d0JBT1FDLFFBQVE7T0FDaEJDLFlBQUo7T0FBU0MsZUFBVDtRQUNLLElBQUkvRSxJQUFJLENBQWIsRUFBZ0JBLElBQUlnRixVQUFVakYsTUFBOUIsRUFBc0NDLEdBQXRDLEVBQTJDO2FBQ2pDZ0YsVUFBVWhGLENBQVYsQ0FBVDtTQUNLOEUsR0FBTCxJQUFZQyxNQUFaLEVBQW9CO1lBQ1pELEdBQVAsSUFBY0MsT0FBT0QsR0FBUCxDQUFkOzs7VUFHS0QsTUFBUDs7Ozs7Ozs7Ozs7OztrQ0FVc0IvSCxNQUFNbUksU0FBUztPQUMvQmxELFFBQVFrRCxXQUFXdkosTUFBekI7T0FDTXdKLFFBQVFwSSxLQUFLcUksS0FBTCxDQUFXLEdBQVgsQ0FBZDtVQUNPRCxNQUFNRSxNQUFOLENBQWEsVUFBQ0MsSUFBRCxFQUFPUCxHQUFQO1dBQWVPLEtBQUtQLEdBQUwsQ0FBZjtJQUFiLEVBQXVDL0MsS0FBdkMsQ0FBUDs7Ozs7Ozs7Ozs7OztzQkFVVXZCLEtBQUszRCxJQUFJO09BQ2J5SSxZQUFZLEVBQWxCO09BQ01DLE9BQU9DLE9BQU9ELElBQVAsQ0FBWS9FLEdBQVosQ0FBYjtRQUNLLElBQUlSLElBQUksQ0FBYixFQUFnQkEsSUFBSXVGLEtBQUt4RixNQUF6QixFQUFpQ0MsR0FBakMsRUFBc0M7Y0FDM0J1RixLQUFLdkYsQ0FBTCxDQUFWLElBQXFCbkQsR0FBRzBJLEtBQUt2RixDQUFMLENBQUgsRUFBWVEsSUFBSStFLEtBQUt2RixDQUFMLENBQUosQ0FBWixDQUFyQjs7VUFFTXNGLFNBQVA7Ozs7Ozs7Ozs7OytCQVFtQkcsTUFBTUMsTUFBTTtPQUMzQkQsU0FBU0MsSUFBYixFQUFtQjtXQUNYLElBQVA7OztPQUdLQyxRQUFRSCxPQUFPRCxJQUFQLENBQVlFLElBQVosQ0FBZDtPQUNNRyxRQUFRSixPQUFPRCxJQUFQLENBQVlHLElBQVosQ0FBZDtPQUNJQyxNQUFNNUYsTUFBTixLQUFpQjZGLE1BQU03RixNQUEzQixFQUFtQztXQUMzQixLQUFQOzs7UUFHSSxJQUFJQyxJQUFJLENBQWIsRUFBZ0JBLElBQUkyRixNQUFNNUYsTUFBMUIsRUFBa0NDLEdBQWxDLEVBQXVDO1FBQ2xDeUYsS0FBS0UsTUFBTTNGLENBQU4sQ0FBTCxNQUFtQjBGLEtBQUtDLE1BQU0zRixDQUFOLENBQUwsQ0FBdkIsRUFBdUM7WUFDL0IsS0FBUDs7O1VBR0ssSUFBUDs7Ozs7O0lDcEVJNkY7Ozs7Ozs7Ozs7Ozs7Ozt5Q0FReUJDLE1BQU1DLE1BQU07T0FDbkNDLFFBQVEzRyxPQUFPeUcsSUFBUCxFQUFhRyxXQUFiLEVBQWQ7T0FDTUMsUUFBUTdHLE9BQU8wRyxJQUFQLEVBQWFFLFdBQWIsRUFBZDs7T0FFSUQsUUFBUUUsS0FBWixFQUFtQjtXQUNYLENBQUMsQ0FBUjtJQURELE1BRU8sSUFBSUYsVUFBVUUsS0FBZCxFQUFxQjtXQUNwQixDQUFQO0lBRE0sTUFFQTtXQUNDLENBQVA7Ozs7Ozs7Ozs7Ozs7O3lDQVc0Qm5KLEtBQUs7VUFDM0JBLElBQUlvSixPQUFKLENBQVksYUFBWixFQUEyQixHQUEzQixFQUFnQ0EsT0FBaEMsQ0FBd0MsMEJBQXhDLEVBQW9FLEVBQXBFLENBQVA7Ozs7Ozs7Ozs7Ozs4QkFTa0JwSixLQUFLO1VBQ2hCc0MsT0FBT3RDLEdBQVAsRUFDTG9KLE9BREssQ0FDRywrQkFESCxFQUNvQyxNQURwQyxFQUVMQSxPQUZLLENBRUcsT0FGSCxFQUVZLE9BRlosQ0FBUDs7Ozs7Ozs7OztvQ0FTd0I7T0FDbEJDLElBQUksVUFBVjtVQUNPckssS0FBS3NLLEtBQUwsQ0FBV3RLLEtBQUtDLE1BQUwsS0FBZ0JvSyxDQUEzQixFQUE4QnBKLFFBQTlCLENBQXVDLEVBQXZDLElBQ05qQixLQUFLdUssR0FBTCxDQUFTdkssS0FBS3NLLEtBQUwsQ0FBV3RLLEtBQUtDLE1BQUwsS0FBZ0JvSyxDQUEzQixJQUFnQ0csS0FBS0MsR0FBTCxFQUF6QyxFQUFxRHhKLFFBQXJELENBQThELEVBQTlELENBREQ7Ozs7Ozs7Ozs7Ozs7OzsyQkFhZXFCLEtBQUs7T0FDaEJvSSxPQUFPLENBQVg7UUFDSyxJQUFJekcsSUFBSSxDQUFSLEVBQVcwRyxNQUFNckksSUFBSTBCLE1BQTFCLEVBQWtDQyxJQUFJMEcsR0FBdEMsRUFBMkMxRyxHQUEzQyxFQUFnRDtXQUN4QyxLQUFLeUcsSUFBTCxHQUFZcEksSUFBSXNJLFVBQUosQ0FBZTNHLENBQWYsQ0FBbkI7WUFDUSxXQUFSOztVQUVNeUcsSUFBUDs7Ozs7Ozs7Ozs7Ozs7O2tDQVlzQjFKLEtBQUsrRCxPQUFPRyxLQUFLMkYsT0FBTztVQUN2QzdKLElBQUlFLFNBQUosQ0FBYyxDQUFkLEVBQWlCNkQsS0FBakIsSUFBMEI4RixLQUExQixHQUFrQzdKLElBQUlFLFNBQUosQ0FBY2dFLEdBQWQsQ0FBekM7Ozs7OztBQ2xGRjs7Ozs7QUFJQSxTQUFTNEYsZUFBVCxDQUF5QkMsT0FBekIsRUFBa0M7S0FDN0JDLE9BQU9wTCxTQUFTaUgsYUFBVCxDQUF1QixHQUF2QixDQUFYO01BQ0tvRSxJQUFMLEdBQVlGLE9BQVo7O0tBRUdDLEtBQUtwRCxRQUFMLEtBQWtCLEdBQWxCLElBQXlCLENBQUMsSUFBSXNELElBQUosQ0FBU0YsS0FBS0MsSUFBZCxDQUE3QixFQUFrRDtRQUMzQyxJQUFJRSxTQUFKLENBQWlCSixPQUFqQix5QkFBTjs7O1FBR007UUFDQUMsS0FBS04sSUFETDtZQUVJTSxLQUFLSSxRQUZUO1lBR0lKLEtBQUtLLFFBSFQ7WUFJSUwsS0FBS00sUUFBTCxDQUFjLENBQWQsTUFBcUIsR0FBckIsR0FBMkJOLEtBQUtNLFFBQWhDLEdBQTJDLE1BQU1OLEtBQUtNLFFBSjFEO1FBS0FOLEtBQUtPLElBTEw7WUFNSVAsS0FBS3BELFFBTlQ7VUFPRW9ELEtBQUtRLE1BUFA7WUFRSVIsS0FBS1M7RUFSaEI7OztBQ1REOzs7OztBQUtBLFNBQVNDLEtBQVQsQ0FBZVgsT0FBZixFQUF3QjtLQUNuQmpJLFdBQVc2SSxHQUFYLEtBQW1CQSxJQUFJM0gsTUFBM0IsRUFBbUM7TUFDNUI0SCxNQUFNLElBQUlELEdBQUosQ0FBUVosT0FBUixDQUFaOzs7OztNQUtJYSxJQUFJTCxJQUFKLElBQVlLLElBQUlYLElBQUosQ0FBUzlKLE9BQVQsQ0FBaUJ5SyxJQUFJTCxJQUFyQixNQUErQixDQUFDLENBQWhELEVBQW1EO1NBQzVDLElBQUlKLFNBQUosQ0FBaUJKLE9BQWpCLHlCQUFOOzs7U0FHTWEsR0FBUDtFQVZELE1BV087U0FDQ2QsZ0JBQWdCQyxPQUFoQixDQUFQOzs7O0FDbkJGOzs7QUFHQSxJQUFJYyxTQUFTcEMsT0FBT29DLE1BQXBCOzs7Ozs7OztJQU9NQzs7O3FCQUNTOzs7OztRQUVSdEMsSUFBTCxHQUFZcUMsT0FBTyxJQUFQLENBQVo7UUFDS0UsTUFBTCxHQUFjRixPQUFPLElBQVAsQ0FBZDs7Ozs7Ozs7Ozs7Ozs7c0JBU0c5SyxNQUFNOEosT0FBTztRQUNYckIsSUFBTCxDQUFVekksS0FBS21KLFdBQUwsRUFBVixJQUFnQ25KLElBQWhDO1FBQ0tnTCxNQUFMLENBQVloTCxLQUFLbUosV0FBTCxFQUFaLElBQWtDLEtBQUs2QixNQUFMLENBQVloTCxLQUFLbUosV0FBTCxFQUFaLEtBQW1DLEVBQXJFO1FBQ0s2QixNQUFMLENBQVloTCxLQUFLbUosV0FBTCxFQUFaLEVBQWdDMUYsSUFBaEMsQ0FBcUNxRyxLQUFyQztVQUNPLElBQVA7Ozs7Ozs7Ozs7MEJBT087UUFDRnJCLElBQUwsR0FBWXFDLE9BQU8sSUFBUCxDQUFaO1FBQ0tFLE1BQUwsR0FBY0YsT0FBTyxJQUFQLENBQWQ7VUFDTyxJQUFQOzs7Ozs7Ozs7Ozs7MkJBU1E5SyxNQUFNO1VBQ1BBLEtBQUttSixXQUFMLE1BQXNCLEtBQUs2QixNQUFsQzs7Ozs7Ozs7O29DQU1pQjtRQUNaQSxNQUFMLEdBQWMsSUFBZDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozt5QkF1QkdoTCxNQUFNO09BQ0xnTCxTQUFTLEtBQUtBLE1BQUwsQ0FBWWhMLEtBQUttSixXQUFMLEVBQVosQ0FBYjtPQUNJNkIsTUFBSixFQUFZO1dBQ0pBLE9BQU8sQ0FBUCxDQUFQOzs7Ozs7Ozs7Ozs7eUJBU0toTCxNQUFNO1VBQ0wsS0FBS2dMLE1BQUwsQ0FBWWhMLEtBQUttSixXQUFMLEVBQVosQ0FBUDs7Ozs7Ozs7Ozs0QkFPUztVQUNGLEtBQUs4QixJQUFMLE9BQWdCLENBQXZCOzs7Ozs7Ozs7OzBCQU9POzs7VUFDQXZDLE9BQU9ELElBQVAsQ0FBWSxLQUFLdUMsTUFBakIsRUFBeUJFLEdBQXpCLENBQTZCLFVBQUNsRCxHQUFEO1dBQVMsT0FBS1MsSUFBTCxDQUFVVCxHQUFWLENBQVQ7SUFBN0IsQ0FBUDs7Ozs7Ozs7Ozs7eUJBUU1oSSxNQUFNO1VBQ0wsS0FBS3lJLElBQUwsQ0FBVXpJLEtBQUttSixXQUFMLEVBQVYsQ0FBUDtVQUNPLEtBQUs2QixNQUFMLENBQVloTCxLQUFLbUosV0FBTCxFQUFaLENBQVA7VUFDTyxJQUFQOzs7Ozs7Ozs7Ozs7O3lCQVVHbkosTUFBTThKLE9BQU87UUFDWHJCLElBQUwsQ0FBVXpJLEtBQUttSixXQUFMLEVBQVYsSUFBZ0NuSixJQUFoQztRQUNLZ0wsTUFBTCxDQUFZaEwsS0FBS21KLFdBQUwsRUFBWixJQUFrQyxDQUFDVyxLQUFELENBQWxDO1VBQ08sSUFBUDs7Ozs7Ozs7Ozt5QkFPTTtVQUNDLEtBQUtxQixLQUFMLEdBQWFsSSxNQUFwQjs7Ozs7Ozs7Ozs2QkFPVTtVQUNIbUksS0FBS0MsU0FBTCxDQUFlLEtBQUtMLE1BQXBCLENBQVA7Ozs7NkJBcEZpQnRILEtBQUs7T0FDbEJ3SCxNQUFNLElBQUlILFFBQUosRUFBVjtPQUNJdEMsT0FBT0MsT0FBT0QsSUFBUCxDQUFZL0UsR0FBWixDQUFYO1FBQ0ssSUFBSVIsSUFBSSxDQUFiLEVBQWdCQSxJQUFJdUYsS0FBS3hGLE1BQXpCLEVBQWlDQyxHQUFqQyxFQUFzQztRQUNqQ29JLEdBQUosQ0FBUTdDLEtBQUt2RixDQUFMLENBQVIsRUFBaUJRLElBQUkrRSxLQUFLdkYsQ0FBTCxDQUFKLENBQWpCOztVQUVNZ0ksR0FBUDs7OztFQTFEcUJ2RDs7QUNWdkI7Ozs7OztJQUtNNEQ7bUJBRU96QixLQUFaLEVBQW1COzs7Ozs7O09BS2IwQixNQUFMLEdBQWMxQixLQUFkOzs7Ozs7T0FNSzJCLE9BQUwsR0FBZSxJQUFmOzs7Ozs7T0FNS0MsU0FBTCxHQUFpQixJQUFqQjs7Ozs7Ozs7Ozs7MkJBT1FDLE9BQU87MEJBQ1FBLEtBQXZCO1NBQ01DLFNBQU4sQ0FBZ0IsSUFBaEI7UUFDS0YsU0FBTCxHQUFpQixLQUFLQSxTQUFMLElBQWtCLEVBQW5DO1FBQ0tBLFNBQUwsQ0FBZWpJLElBQWYsQ0FBb0JrSSxLQUFwQjs7Ozs7Ozs7Ozs7MkJBUVFFLE1BQU07T0FDVkMsVUFBVUQsS0FBS0UsU0FBTCxFQUFkO1VBQ09ELE9BQVAsRUFBZ0I7UUFDWEEsWUFBWSxJQUFoQixFQUFzQjtZQUNkLElBQVA7O2NBRVNBLFFBQVFDLFNBQVIsRUFBVjs7VUFFTSxLQUFQOzs7Ozs7Ozs7aUNBTWM7T0FDVkMsWUFBWSxFQUFoQjtPQUNJSCxPQUFPLEtBQUtFLFNBQUwsRUFBWDtVQUNPRixJQUFQLEVBQWE7Y0FDRnBJLElBQVYsQ0FBZW9JLElBQWY7V0FDT0EsS0FBS0UsU0FBTCxFQUFQOztVQUVNQyxTQUFQOzs7Ozs7Ozs7Ozs7NkJBU1VDLE9BQU87VUFDVixLQUFLQyxXQUFMLEdBQW1CRCxLQUFuQixLQUE2QixJQUFwQzs7Ozs7Ozs7O2dDQU1hO1VBQ04sS0FBS1AsU0FBTCxJQUFrQkgsU0FBU1ksV0FBbEM7Ozs7Ozs7OztrQ0FNZTtVQUNSLEtBQUtELFdBQUwsR0FBbUJqSixNQUExQjs7Ozs7Ozs7OzZCQU1VO09BQ05tSixRQUFRLENBQVo7T0FDSVAsT0FBTyxJQUFYO1VBQ09BLEtBQUtFLFNBQUwsRUFBUCxFQUF5Qjs7V0FFakJGLEtBQUtFLFNBQUwsRUFBUDs7VUFFTUssS0FBUDs7Ozs7Ozs7OzhCQU1XO1VBQ0osS0FBS1gsT0FBWjs7Ozs7Ozs7Ozs0QkFPUztPQUNMWSxPQUFPLElBQVg7VUFDT0EsS0FBS04sU0FBTCxFQUFQLEVBQXlCO1dBQ2pCTSxLQUFLTixTQUFMLEVBQVA7O1VBRU1NLElBQVA7Ozs7Ozs7Ozs7NkJBT1U7VUFDSCxLQUFLYixNQUFaOzs7Ozs7Ozs7MkJBTVE7VUFDRCxDQUFDLEtBQUtjLGFBQUwsRUFBUjs7Ozs7Ozs7Ozs7OEJBUVdYLE9BQU87T0FDZDdJLE1BQU15SixNQUFOLENBQWEsS0FBS0wsV0FBTCxFQUFiLEVBQWlDUCxLQUFqQyxDQUFKLEVBQTZDO1dBQ3JDQSxLQUFQOztVQUVNLElBQVA7Ozs7Ozs7Ozs7Ozs7NEJBVVNhLFFBQVE7UUFDWmYsT0FBTCxHQUFlZSxNQUFmOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7MkJBcUJRQyxnQkFBZ0JDLGlCQUFpQjtPQUNyQ0QsY0FBSixFQUFvQjttQkFDSixJQUFmOztRQUVJUCxXQUFMLEdBQW1CUyxPQUFuQixDQUEyQixVQUFDaEIsS0FBRDtXQUFXQSxNQUFNaUIsUUFBTixDQUFlSCxjQUFmLEVBQStCQyxlQUEvQixDQUFYO0lBQTNCO09BQ0lBLGVBQUosRUFBcUI7b0JBQ0osSUFBaEI7Ozs7Ozs7Ozs7Ozs7QUFVSG5CLFNBQVNZLFdBQVQsR0FBdUIsRUFBdkI7Ozs7Ozs7QUFPQSxJQUFNVSx5QkFBeUIsU0FBekJBLHNCQUF5QixDQUFTbEIsS0FBVCxFQUFnQjtLQUMxQ0EsTUFBTUksU0FBTixFQUFKLEVBQXVCO1FBQ2hCLElBQUkzTSxLQUFKLENBQVUsK0JBQVYsQ0FBTjs7Q0FGRjs7QUN4TUEsSUFBSTBOLFdBQVduQyxLQUFmOztJQUVNb0M7Ozs7Ozs7Ozs7Ozs7Ozs7O2dCQWlCcUI7TUFBZC9DLE9BQWMsdUVBQUosRUFBSTs7O09BQ3BCYSxHQUFMLEdBQVdrQyxJQUFJcEMsS0FBSixDQUFVLEtBQUtxQyw0QkFBTCxDQUFrQ2hELE9BQWxDLENBQVYsQ0FBWDs7Ozs7Ozs7Ozs7Ozs7NENBVXlCaUQsVUFBVTs7O1lBQzFCOUIsS0FBVCxHQUFpQndCLE9BQWpCLENBQXlCLFVBQUMzTSxJQUFELEVBQVU7YUFDekJrTixNQUFULENBQWdCbE4sSUFBaEIsRUFBc0IyTSxPQUF0QixDQUE4QixVQUFDN0MsS0FBRCxFQUFXO1dBQ25DcUQsaUJBQUwsQ0FBdUJuTixJQUF2QixFQUE2QjhKLEtBQTdCO0tBREQ7SUFERDtVQUtPLElBQVA7Ozs7Ozs7Ozs7OztvQ0FTaUI5SixNQUFNOEosT0FBTztRQUN6QnNELHVCQUFMO09BQ0k1TCxNQUFNc0ksS0FBTixDQUFKLEVBQWtCO1lBQ1R2SCxPQUFPdUgsS0FBUCxDQUFSOztRQUVJdUQsS0FBTCxDQUFXQyxHQUFYLENBQWV0TixJQUFmLEVBQXFCOEosS0FBckI7VUFDTyxJQUFQOzs7Ozs7Ozs7Ozs7cUNBU2tCOUosTUFBTWdMLFFBQVE7OztVQUN6QjJCLE9BQVAsQ0FBZSxVQUFDN0MsS0FBRDtXQUFXLE9BQUtxRCxpQkFBTCxDQUF1Qm5OLElBQXZCLEVBQTZCOEosS0FBN0IsQ0FBWDtJQUFmO1VBQ08sSUFBUDs7Ozs7Ozs7Ozs7NENBUXlCOzs7T0FDckIsS0FBS3VELEtBQVQsRUFBZ0I7OztRQUdYQSxLQUFMLEdBQWEsSUFBSXRDLFFBQUosRUFBYjtPQUNJTixTQUFTLEtBQUtJLEdBQUwsQ0FBU0osTUFBdEI7T0FDSUEsTUFBSixFQUFZO1dBQ0p0SyxTQUFQLENBQWlCLENBQWpCLEVBQW9Ca0ksS0FBcEIsQ0FBMEIsR0FBMUIsRUFBK0JzRSxPQUEvQixDQUF1QyxVQUFDWSxLQUFELEVBQVc7d0JBQzlCQSxNQUFNbEYsS0FBTixDQUFZLEdBQVosQ0FEOEI7O1NBQzVDTCxHQUQ0QztTQUN2QzhCLEtBRHVDOztTQUU3Q3RJLE1BQU1zSSxLQUFOLENBQUosRUFBa0I7Y0FDVGlELElBQUlTLFNBQUosQ0FBYzFELEtBQWQsQ0FBUjs7WUFFSXFELGlCQUFMLENBQXVCbkYsR0FBdkIsRUFBNEI4QixLQUE1QjtLQUxEOzs7Ozs7Ozs7Ozs0QkFjUTtVQUNGLEtBQUtlLEdBQUwsQ0FBU2xCLElBQVQsSUFBaUIsRUFBeEI7Ozs7Ozs7Ozs7NEJBT1M7T0FDTDdDLE9BQU8sS0FBSzJHLFdBQUwsRUFBWDtPQUNJM0csSUFBSixFQUFVO1FBQ0wwRCxPQUFPLEtBQUtrRCxPQUFMLEVBQVg7UUFDSWxELFFBQVFBLFNBQVMsSUFBckIsRUFBMkI7YUFDbEIsTUFBTUEsSUFBZDs7O1VBR0sxRCxJQUFQOzs7Ozs7Ozs7O2dDQU9hO09BQ1R1RCxXQUFXLEtBQUtRLEdBQUwsQ0FBU1IsUUFBeEI7T0FDSUEsYUFBYTBDLElBQUlZLG9CQUFyQixFQUEyQztXQUNuQyxFQUFQOztVQUVNdEQsUUFBUDs7Ozs7Ozs7Ozs4QkFPVztPQUNQdkQsT0FBTyxLQUFLOEcsT0FBTCxFQUFYO09BQ0k5RyxJQUFKLEVBQVU7V0FDRixLQUFLK0csV0FBTCxLQUFxQixJQUFyQixHQUE0Qi9HLElBQW5DOztVQUVNLEVBQVA7Ozs7Ozs7Ozs7Ozs7O29DQVdpQjlHLE1BQU07UUFDbEJvTix1QkFBTDtVQUNPLEtBQUtDLEtBQUwsQ0FBV1MsR0FBWCxDQUFlOU4sSUFBZixDQUFQOzs7Ozs7Ozs7Ozs7O3FDQVVrQkEsTUFBTTtRQUNuQm9OLHVCQUFMO1VBQ08sS0FBS0MsS0FBTCxDQUFXSCxNQUFYLENBQWtCbE4sSUFBbEIsQ0FBUDs7Ozs7Ozs7Ozs7c0NBUW1CO1FBQ2RvTix1QkFBTDtVQUNPLEtBQUtDLEtBQUwsQ0FBV2xDLEtBQVgsRUFBUDs7Ozs7Ozs7Ozs7Ozs7OztnQ0FlYTtVQUNOLEtBQUtOLEdBQUwsQ0FBU04sUUFBaEI7Ozs7Ozs7Ozs7NEJBT1M7VUFDRixLQUFLTSxHQUFMLENBQVNMLElBQWhCOzs7Ozs7Ozs7O2dDQU9hO1VBQ04sS0FBS0ssR0FBTCxDQUFTaEUsUUFBaEI7Ozs7Ozs7Ozs7OzhCQVFXOzs7T0FDUDRELFNBQVMsRUFBYjtPQUNJc0QsY0FBYyxFQUFsQjtRQUNLQyxpQkFBTCxHQUF5QnJCLE9BQXpCLENBQWlDLFVBQUMzTSxJQUFELEVBQVU7V0FDckNpTyxrQkFBTCxDQUF3QmpPLElBQXhCLEVBQThCMk0sT0FBOUIsQ0FBc0MsVUFBQzdDLEtBQUQsRUFBVztvQkFDakM5SixJQUFmO1NBQ0l3QixNQUFNc0ksS0FBTixDQUFKLEVBQWtCO3FCQUNGLE1BQU1vRSxtQkFBbUJwRSxLQUFuQixDQUFyQjs7b0JBRWMsR0FBZjtLQUxEO0lBREQ7aUJBU2NpRSxZQUFZSSxLQUFaLENBQWtCLENBQWxCLEVBQXFCLENBQUMsQ0FBdEIsQ0FBZDtPQUNJSixXQUFKLEVBQWlCO2NBQ04sTUFBTUEsV0FBaEI7O1VBRU10RCxNQUFQOzs7Ozs7Ozs7OzsrQkFRWXpLLE1BQU07UUFDYm9OLHVCQUFMO1VBQ08sS0FBS0MsS0FBTCxDQUFXZSxRQUFYLENBQW9CcE8sSUFBcEIsQ0FBUDs7Ozs7Ozs7OzsrQkFPWTtRQUNQcU8saUJBQUwsQ0FBdUJ0QixJQUFJdUIsWUFBM0IsRUFBeUN2RixPQUFPd0YsZUFBUCxFQUF6QztVQUNPLElBQVA7Ozs7Ozs7Ozs7OzsrQ0FTNEJ2RSxTQUFTO09BQ2pDYSxNQUFNYixPQUFWO09BQ0lBLFFBQVE1SixPQUFSLENBQWdCLEtBQWhCLE1BQTJCLENBQUMsQ0FBNUIsSUFDSDRKLFFBQVE1SixPQUFSLENBQWdCLGFBQWhCLE1BQW1DLENBRHBDLEVBQ3VDOzs7VUFFaEMyTSxJQUFJeUIsZ0JBQVY7UUFDSXhFLFFBQVEsQ0FBUixNQUFlLEdBQWYsSUFBc0JBLFFBQVEsQ0FBUixNQUFlLEdBQXpDLEVBQThDO1lBQ3RDLElBQVA7OztZQUdPQSxRQUFReUUsTUFBUixDQUFlLENBQWYsQ0FBUjtVQUNNLEdBQUw7VUFDSyxHQUFMO1VBQ0ssR0FBTDthQUNRMUIsSUFBSVksb0JBQVg7YUFDTyxHQUFQO2FBQ08zRCxPQUFQOztVQUVJLEVBQUw7VUFDSyxHQUFMO1VBQ0tBLFFBQVEsQ0FBUixNQUFlLEdBQW5CLEVBQXdCO2NBQ2hCK0MsSUFBSVksb0JBQVg7O2FBRU0zRCxPQUFQOzs7YUFHT0EsT0FBUDs7O1VBR0lhLEdBQVA7Ozs7Ozs7Ozs7Ozs7Ozs7O2tDQWdCZTdLLE1BQU07UUFDaEJvTix1QkFBTDtRQUNLQyxLQUFMLENBQVdkLE1BQVgsQ0FBa0J2TSxJQUFsQjtVQUNPLElBQVA7Ozs7Ozs7Ozs7aUNBT2M7UUFDVDBPLGVBQUwsQ0FBcUIzQixJQUFJdUIsWUFBekI7VUFDTyxJQUFQOzs7Ozs7Ozs7OzswQkFRTzNFLE1BQU07UUFDUmtCLEdBQUwsQ0FBU2xCLElBQVQsR0FBZ0JBLElBQWhCO1VBQ08sSUFBUDs7Ozs7Ozs7Ozs7OEJBUVdVLFVBQVU7UUFDaEJRLEdBQUwsQ0FBU1IsUUFBVCxHQUFvQkEsUUFBcEI7VUFDTyxJQUFQOzs7Ozs7Ozs7Ozs7O29DQVVpQnJLLE1BQU04SixPQUFPO1FBQ3pCNEUsZUFBTCxDQUFxQjFPLElBQXJCO1FBQ0ttTixpQkFBTCxDQUF1Qm5OLElBQXZCLEVBQTZCOEosS0FBN0I7VUFDTyxJQUFQOzs7Ozs7Ozs7Ozs7O3FDQVVrQjlKLE1BQU1nTCxRQUFROzs7UUFDM0IwRCxlQUFMLENBQXFCMU8sSUFBckI7VUFDTzJNLE9BQVAsQ0FBZSxVQUFDN0MsS0FBRDtXQUFXLE9BQUtxRCxpQkFBTCxDQUF1Qm5OLElBQXZCLEVBQTZCOEosS0FBN0IsQ0FBWDtJQUFmO1VBQ08sSUFBUDs7Ozs7Ozs7Ozs7OEJBUVdTLFVBQVU7UUFDaEJNLEdBQUwsQ0FBU04sUUFBVCxHQUFvQkEsUUFBcEI7VUFDTyxJQUFQOzs7Ozs7Ozs7OzswQkFRT0MsTUFBTTtRQUNSSyxHQUFMLENBQVNMLElBQVQsR0FBZ0JBLElBQWhCO1VBQ08sSUFBUDs7Ozs7Ozs7Ozs7Ozs7Ozs7OzhCQWlCVzNELFVBQVU7UUFDaEJnRSxHQUFMLENBQVNoRSxRQUFULEdBQW9CQSxRQUFwQjtPQUNJLEtBQUtnRSxHQUFMLENBQVNoRSxRQUFULENBQWtCLEtBQUtnRSxHQUFMLENBQVNoRSxRQUFULENBQWtCNUQsTUFBbEIsR0FBMkIsQ0FBN0MsTUFBb0QsR0FBeEQsRUFBNkQ7U0FDdkQ0SCxHQUFMLENBQVNoRSxRQUFULElBQXFCLEdBQXJCOztVQUVNLElBQVA7Ozs7Ozs7Ozs7NkJBT1U7T0FDTnFELE9BQU8sRUFBWDtPQUNJcEQsT0FBTyxLQUFLOEcsT0FBTCxFQUFYO09BQ0k5RyxJQUFKLEVBQVU7WUFDRCxLQUFLK0csV0FBTCxLQUFxQixJQUE3Qjs7V0FFTy9HLE9BQU8sS0FBSzZILFdBQUwsRUFBUCxHQUE0QixLQUFLQyxTQUFMLEVBQTVCLEdBQStDLEtBQUtDLE9BQUwsRUFBdkQ7VUFDTzNFLElBQVA7Ozs7Ozs7Ozs7OzsrQkE1T21CO1VBQ1o0QyxRQUFQOzs7OzJCQWdIWTlDLFNBQVM7VUFDZDhDLFNBQVM5QyxPQUFULENBQVA7Ozs7NkJBOEZpQjhFLFNBQVM7Y0FDZkEsT0FBWDs7Ozs0QkFvQ2dCQyxVQUFvQjtxQ0FBUEMsS0FBTztTQUFBOzs7T0FDaENELFNBQVNOLE1BQVQsQ0FBZ0JNLFNBQVM5TCxNQUFULEdBQWtCLENBQWxDLE1BQXlDLEdBQTdDLEVBQWtEO2VBQ3RDOEwsU0FBUzVPLFNBQVQsQ0FBbUIsQ0FBbkIsRUFBc0I0TyxTQUFTOUwsTUFBVCxHQUFrQixDQUF4QyxDQUFYOztXQUVPK0wsTUFBTTlELEdBQU4sQ0FBVTtXQUFRK0QsS0FBS1IsTUFBTCxDQUFZLENBQVosTUFBbUIsR0FBbkIsR0FBeUJRLEtBQUs5TyxTQUFMLENBQWUsQ0FBZixDQUF6QixHQUE2QzhPLElBQXJEO0lBQVYsQ0FBUjtVQUNPLENBQUNGLFFBQUQsRUFBV0csTUFBWCxDQUFrQkYsS0FBbEIsRUFBeUJHLElBQXpCLENBQThCLEdBQTlCLEVBQW1DOUYsT0FBbkMsQ0FBMkMsS0FBM0MsRUFBa0QsRUFBbEQsQ0FBUDs7Ozs7Ozs7Ozs7OzRCQVNnQnBKLEtBQUs7VUFDZG1QLG1CQUFtQm5QLElBQUlvSixPQUFKLENBQVksS0FBWixFQUFtQixHQUFuQixDQUFuQixDQUFQOzs7Ozs7Ozs7Ozs7OztBQVdGLElBQU1nRyxXQUFXLFNBQVhBLFFBQVc7UUFDZixPQUFPelEsTUFBUCxLQUFrQixXQUFsQixJQUNBQSxPQUFPZ0ksUUFEUCxJQUVBaEksT0FBT2dJLFFBQVAsQ0FBZ0JDLFFBRmhCLElBR0FqSSxPQUFPZ0ksUUFBUCxDQUFnQkMsUUFBaEIsQ0FBeUJ6RyxPQUF6QixDQUFpQyxPQUFqQyxNQUE4QyxDQUovQjtDQUFqQjs7QUFNQTJNLElBQUl5QixnQkFBSixHQUF1QmEsYUFBYSxRQUFiLEdBQXdCLE9BQS9DOzs7Ozs7O0FBT0F0QyxJQUFJWSxvQkFBSixHQUEyQixhQUFhbEUsS0FBS0MsR0FBTCxFQUF4Qzs7Ozs7OztBQU9BcUQsSUFBSXVCLFlBQUosR0FBbUIsSUFBbkI7O0FDamRBOzs7OztJQUlNZ0I7Ozs7Ozs7Ozs7Ozs7O3FDQU9xQnJILFFBQVFGLFFBQVE7U0FDbkNsRSxTQUFOLENBQWdCc0ssS0FBaEIsQ0FBc0JwSyxJQUF0QixDQUEyQmtFLE9BQU9zSCxVQUFsQyxFQUE4QzVDLE9BQTlDLENBQXNELFVBQUM2QyxTQUFEO1dBQWV6SCxPQUFPMEgsWUFBUCxDQUFvQkQsVUFBVXhQLElBQTlCLEVBQW9Dd1AsVUFBVTFGLEtBQTlDLENBQWY7SUFBdEQ7Ozs7Ozs7Ozs7OzBDQVE4QjtVQUN2QixLQUFLNEYsZ0NBQUwsS0FBMEMvUSxRQUFRQyxNQUFSLENBQWVnSSxRQUFmLENBQXdCK0MsSUFBekU7Ozs7Ozs7Ozs7O3FEQVF5QztVQUNsQ2hMLFFBQVFDLE1BQVIsQ0FBZWdJLFFBQWYsQ0FBd0IyRCxRQUF4QixHQUFtQzVMLFFBQVFDLE1BQVIsQ0FBZWdJLFFBQWYsQ0FBd0I2RCxNQUFsRTs7Ozs7Ozs7Ozs7Z0NBUW9Cb0IsTUFBTTtPQUNyQjhELFVBRHFCLEdBQ0ssQ0FETDtPQUNUQyxTQURTLEdBQ1EsQ0FEUjs7TUFFdkI7a0JBQ1kvRCxLQUFLOEQsVUFBbkI7aUJBQ2E5RCxLQUFLK0QsU0FBbEI7V0FDTy9ELEtBQUtnRSxZQUFaO0lBSEQsUUFJU2hFLElBSlQ7VUFLTzswQkFBQTs7SUFBUDs7Ozs7Ozs7Ozs7NkJBV2lCaEIsS0FBSztPQUNsQmlGLE1BQU0sSUFBSS9DLEdBQUosQ0FBUWxDLEdBQVIsQ0FBVjtVQUNPaUYsSUFBSW5CLFdBQUosS0FBb0JtQixJQUFJbEIsU0FBSixFQUFwQixHQUFzQ2tCLElBQUlqQixPQUFKLEVBQTdDOzs7Ozs7Ozs7Ozt3Q0FRNEJoRSxLQUFLO09BQzdCaUYsTUFBTSxJQUFJL0MsR0FBSixDQUFRbEMsR0FBUixDQUFWO1VBQ09pRixJQUFJbkIsV0FBSixLQUFvQm1CLElBQUlsQixTQUFKLEVBQTNCOzs7Ozs7Ozs7OztpREFRcUMvRCxLQUFLO09BQ3RDaUYsTUFBTSxJQUFJL0MsR0FBSixDQUFRbEMsR0FBUixDQUFWO1VBQ09pRixJQUFJbkIsV0FBSixFQUFQOzs7Ozs7Ozs7Ozs7dUNBUzJCOUQsS0FBSztPQUM1QkEsR0FBSixFQUFTO1FBQ0ZrRixxQkFBcUIsS0FBS0wsZ0NBQUwsRUFBM0I7OztXQUdPSixNQUFNVSxxQkFBTixDQUE0Qm5GLEdBQTVCLE1BQXFDLEtBQUtvRixVQUFMLENBQWdCRixrQkFBaEIsQ0FBNUM7O1VBRU0sS0FBUDs7Ozs7Ozs7Ozs7NENBUWdDO1VBQ3pCLENBQUMsRUFBRXBSLFFBQVFDLE1BQVIsQ0FBZXNSLE9BQWYsSUFBMEJ2UixRQUFRQyxNQUFSLENBQWVzUixPQUFmLENBQXVCQyxTQUFuRCxDQUFSOzs7Ozs7Ozs7Ozs7MkJBU2V0RixLQUFLO09BQ2hCO1dBQ0ksSUFBSWtDLEdBQUosQ0FBUWxDLEdBQVIsQ0FBUDtJQURELENBRUUsT0FBT3VGLEdBQVAsRUFBWTtZQUNMQyxLQUFSLENBQWlCRCxJQUFJMUosT0FBckIsU0FBZ0NtRSxHQUFoQztXQUNPLEtBQVA7Ozs7Ozs7Ozs7OztzQ0FTeUJnQixNQUFNO1NBQzFCaEksU0FBTixDQUFnQnNLLEtBQWhCLENBQXNCcEssSUFBdEIsQ0FBMkI4SCxLQUFLMEQsVUFBaEMsRUFBNEM1QyxPQUE1QyxDQUFvRCxVQUFDNkMsU0FBRDtXQUFlM0QsS0FBS3lFLGVBQUwsQ0FBcUJkLFVBQVV4UCxJQUEvQixDQUFmO0lBQXBEOzs7Ozs7Ozs7OzswQ0FROEJpUCxNQUFNO09BQ2hDaE0sU0FBU2dNLE9BQU9BLEtBQUtoTSxNQUFaLEdBQXFCLENBQWxDO09BQ0lBLFNBQVMsQ0FBVCxJQUFjZ00sS0FBS2hNLFNBQVMsQ0FBZCxNQUFxQixHQUF2QyxFQUE0QztXQUNwQ2dNLEtBQUtzQixNQUFMLENBQVksQ0FBWixFQUFldE4sU0FBUyxDQUF4QixDQUFQOztVQUVNZ00sSUFBUDs7Ozs7Ozs7Ozs7OEJBUWtCdUIsVUFBVTtVQUNyQkMsY0FBUCxDQUFzQjlSLFFBQVFFLFFBQTlCLEVBQXdDLFVBQXhDLEVBQW9EO2tCQUNyQyxJQURxQztTQUU5QyxrQkFBVztZQUNSMlIsUUFBUDs7SUFIRjs7Ozs7O0FDeEpGLHFCQUFlO1dBQ0osc0JBREk7ZUFFQSwwQkFGQTtrQkFHRyw4QkFISDtRQUlQLFlBSk87V0FLSixxQkFMSTtVQU1MLG9CQU5LO3VCQU9RO0NBUHZCOztBQ0FBLElBQU1FLGFBQWEsZ0JBQW5COztJQUVNQzs7Ozs7Ozs7Ozs7Ozs7Ozt5QkFTTUMsU0FBU0MsVUFBVUMsZ0JBQWdCO09BQ3pDLENBQUNGLFFBQVFGLFVBQVIsQ0FBTCxFQUEwQjtZQUNqQkEsVUFBUixJQUFzQixFQUF0Qjs7T0FFRyxDQUFDRyxRQUFMLEVBQWU7V0FDUEQsUUFBUUYsVUFBUixDQUFQOztPQUVHLENBQUNFLFFBQVFGLFVBQVIsRUFBb0JHLFFBQXBCLENBQUQsSUFBa0NDLGNBQXRDLEVBQXNEO1lBQzdDSixVQUFSLEVBQW9CRyxRQUFwQixJQUFnQ0MsY0FBaEM7O1VBRU1GLFFBQVFGLFVBQVIsRUFBb0JHLFFBQXBCLENBQVA7Ozs7Ozs7Ozs7O3NCQVFVRCxTQUFTO1VBQ1osQ0FBQyxDQUFDQSxRQUFRRixVQUFSLENBQVQ7Ozs7OztBQzVCRjs7Ozs7Ozs7Ozs7OztJQVlNSzs7O3NCQUNPQyxPQUFaLEVBQXFCQyxLQUFyQixFQUE0QkMsUUFBNUIsRUFBc0M7Ozs7Ozs7Ozs7UUFRaENDLFFBQUwsR0FBZ0JILE9BQWhCOzs7Ozs7O1FBT0tJLE1BQUwsR0FBY0gsS0FBZDs7Ozs7OztRQU9LSSxTQUFMLEdBQWlCSCxRQUFqQjs7Ozs7Ozs7Ozs7O29DQU9pQjtRQUNaSSxjQUFMO1FBQ0tILFFBQUwsR0FBZ0IsSUFBaEI7UUFDS0UsU0FBTCxHQUFpQixJQUFqQjs7Ozs7Ozs7O21DQU1nQjtPQUNaLENBQUMsS0FBS0YsUUFBTCxDQUFjSSxVQUFkLEVBQUwsRUFBaUM7U0FDM0JKLFFBQUwsQ0FBY0csY0FBZCxDQUE2QixLQUFLRixNQUFsQyxFQUEwQyxLQUFLQyxTQUEvQzs7Ozs7RUF6Q3VCMUo7O0FDWDFCLElBQU02SixlQUFlLENBQUMsQ0FBRCxDQUFyQjs7Ozs7Ozs7SUFPTUM7Ozt5QkFDUzs7Ozs7Ozs7OztRQVFSQyxPQUFMLEdBQWUsSUFBZjs7Ozs7O1FBTUtDLGlCQUFMLEdBQXlCLElBQXpCOzs7Ozs7Ozs7UUFTS0MsZ0JBQUwsR0FBd0IsS0FBeEI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs4QkFhV0MsUUFBUUMsU0FBUztPQUN4QixDQUFDRCxNQUFMLEVBQWE7YUFDSEMsT0FBVDtJQURELE1BRU87UUFDRixDQUFDeE8sTUFBTUMsT0FBTixDQUFjc08sTUFBZCxDQUFMLEVBQTRCO2NBQ2xCLENBQUNBLE1BQUQsQ0FBVDs7V0FFTXBPLElBQVAsQ0FBWXFPLE9BQVo7O1VBRU1ELE1BQVA7Ozs7Ozs7Ozs7Ozs7Ozs4QkFZV1osT0FBT0MsVUFBVWEsYUFBYTtRQUNwQ0MsaUJBQUwsQ0FBdUJkLFFBQXZCOztPQUVNZSxTQUFTLEtBQUtDLGNBQUwsQ0FBb0JqQixLQUFwQixDQUFmO1FBQ0ssSUFBSS9OLElBQUksQ0FBYixFQUFnQkEsSUFBSStPLE9BQU9oUCxNQUEzQixFQUFtQ0MsR0FBbkMsRUFBd0M7U0FDbENpUCxrQkFBTCxDQUF3QkYsT0FBTy9PLENBQVAsQ0FBeEIsRUFBbUNnTyxRQUFuQyxFQUE2Q2EsV0FBN0M7OztVQUdNLElBQUloQixXQUFKLENBQWdCLElBQWhCLEVBQXNCRSxLQUF0QixFQUE2QkMsUUFBN0IsQ0FBUDs7Ozs7Ozs7Ozs7Ozs7Ozs7O3FDQWVrQkQsT0FBT0MsVUFBVWEsYUFBYUssWUFBWTtRQUN2REMsb0JBQUwsQ0FBMEJwQixLQUExQjtPQUNJYyxlQUFlSyxVQUFuQixFQUErQjtlQUNuQjtjQUNETCxXQURDO1NBRU5iLFFBRk07YUFHRmtCO0tBSFQ7O1FBTUlWLE9BQUwsR0FBZSxLQUFLQSxPQUFMLElBQWdCLEVBQS9CO1FBQ0tBLE9BQUwsQ0FBYVQsS0FBYixJQUFzQixLQUFLcUIsV0FBTCxDQUFpQixLQUFLWixPQUFMLENBQWFULEtBQWIsQ0FBakIsRUFBc0NDLFFBQXRDLENBQXRCOzs7Ozs7Ozs7Ozs7K0JBU1lELE9BQU87T0FDZixLQUFLc0Isa0JBQUwsRUFBSixFQUErQjtRQUN4QkMsU0FBUztxQkFDRSwwQkFBVzthQUNuQkMsZ0JBQVAsR0FBMEIsSUFBMUI7TUFGYTthQUlOLElBSk07V0FLUnhCO0tBTFA7V0FPT3VCLE1BQVA7Ozs7Ozs7Ozs7O29DQVFnQjtRQUNaZCxPQUFMLEdBQWUsSUFBZjs7Ozs7Ozs7Ozs7O3VCQVNJVCxPQUFPO09BQ0x5QixZQUFZLEtBQUtDLGdCQUFMLENBQXNCMUIsS0FBdEIsQ0FBbEI7T0FDSXlCLFVBQVV6UCxNQUFWLEtBQXFCLENBQXpCLEVBQTRCO1dBQ3BCLEtBQVA7OztPQUdLMlAsT0FBTzlQLE1BQU1xTCxLQUFOLENBQVlqRyxTQUFaLEVBQXVCLENBQXZCLENBQWI7UUFDSzJLLGFBQUwsQ0FBbUJILFNBQW5CLEVBQThCRSxJQUE5QixFQUFvQyxLQUFLRSxZQUFMLENBQWtCN0IsS0FBbEIsQ0FBcEM7VUFDTyxJQUFQOzs7Ozs7Ozs7Ozs7bUNBU2dCQSxPQUFPO09BQ2pCOEIsa0JBQWtCQyxVQUFRLEtBQUt0QixPQUFMLElBQWdCLEtBQUtBLE9BQUwsQ0FBYVQsS0FBYixDQUF4QixDQUF4QjtVQUNPOEIsZ0JBQWdCN0QsTUFBaEIsQ0FBdUI4RCxVQUFRLEtBQUt0QixPQUFMLElBQWdCLEtBQUtBLE9BQUwsQ0FBYSxHQUFiLENBQXhCLENBQXZCLENBQVA7Ozs7Ozs7Ozs7Ozt1Q0FTb0I7VUFDYixLQUFLRSxnQkFBWjs7Ozs7Ozs7Ozs7NEJBUVNYLE9BQU87VUFDVCxLQUFLMEIsZ0JBQUwsQ0FBc0IxQixLQUF0QixFQUE2Qi9GLEdBQTdCLENBQ047V0FBWWdHLFNBQVNuUixFQUFULEdBQWNtUixTQUFTblIsRUFBdkIsR0FBNEJtUixRQUF4QztJQURNLENBQVA7Ozs7Ozs7Ozs7Ozs7Ozs7dUJBZUlELE9BQU9nQyxRQUFRL0IsVUFBVTtPQUN2QmUsU0FBUyxLQUFLQyxjQUFMLENBQW9CakIsS0FBcEIsQ0FBZjtRQUNLLElBQUkvTixJQUFJLENBQWIsRUFBZ0JBLElBQUkrTyxPQUFPaFAsTUFBM0IsRUFBbUNDLEdBQW5DLEVBQXdDO1NBQ2xDZ1EsS0FBTCxDQUFXakIsT0FBTy9PLENBQVAsQ0FBWCxFQUFzQitQLE1BQXRCLEVBQThCL0IsUUFBOUI7OztVQUdNLElBQUlILFdBQUosQ0FBZ0IsSUFBaEIsRUFBc0JFLEtBQXRCLEVBQTZCQyxRQUE3QixDQUFQOzs7Ozs7Ozs7Ozs7Ozs7O3dCQWFLRCxPQUFPZ0MsUUFBUS9CLFVBQVU7T0FDeEJpQyxPQUFPLElBQWI7O09BRUlGLFVBQVUsQ0FBZCxFQUFpQjs7OztZQUlSRyxlQUFULEdBQTJCO1FBQ3RCLEVBQUVILE1BQUYsS0FBYSxDQUFqQixFQUFvQjtVQUNkM0IsY0FBTCxDQUFvQkwsS0FBcEIsRUFBMkJtQyxlQUEzQjs7YUFFUUMsS0FBVCxDQUFlRixJQUFmLEVBQXFCakwsU0FBckI7OztRQUdJaUssa0JBQUwsQ0FBd0JsQixLQUF4QixFQUErQm1DLGVBQS9CLEVBQWdELEtBQWhELEVBQXVEbEMsUUFBdkQ7Ozs7Ozs7Ozs7Ozs7O21DQVdnQm9DLGFBQWFwQyxVQUFVO09BQ2pDblIsS0FBS3VULFlBQVl2VCxFQUFaLElBQWtCdVQsV0FBN0I7VUFDT3ZULE9BQU9tUixRQUFQLElBQ0xvQyxZQUFZM00sTUFBWixJQUFzQjJNLFlBQVkzTSxNQUFaLEtBQXVCdUssUUFEL0M7Ozs7Ozs7Ozs7Ozs7c0JBV0dELE9BQU9DLFVBQVU7UUFDZmMsaUJBQUwsQ0FBdUJkLFFBQXZCO09BQ0ksQ0FBQyxLQUFLUSxPQUFWLEVBQW1CO1dBQ1gsSUFBUDs7O09BR0tPLFNBQVMsS0FBS0MsY0FBTCxDQUFvQmpCLEtBQXBCLENBQWY7UUFDSyxJQUFJL04sSUFBSSxDQUFiLEVBQWdCQSxJQUFJK08sT0FBT2hQLE1BQTNCLEVBQW1DQyxHQUFuQyxFQUF3QztTQUNsQ3dPLE9BQUwsQ0FBYU8sT0FBTy9PLENBQVAsQ0FBYixJQUEwQixLQUFLcVEsMkJBQUwsQ0FDekJQLFVBQVEsS0FBS3RCLE9BQUwsQ0FBYU8sT0FBTy9PLENBQVAsQ0FBYixDQUFSLENBRHlCLEVBRXpCZ08sUUFGeUIsQ0FBMUI7OztVQU1NLElBQVA7Ozs7Ozs7Ozs7Ozt1QkFTSTtVQUNHLEtBQUtzQyxXQUFMLENBQWlCSCxLQUFqQixDQUF1QixJQUF2QixFQUE2Qm5MLFNBQTdCLENBQVA7Ozs7Ozs7Ozs7OzZCQVFVNEosU0FBUztRQUNkSCxpQkFBTCxHQUF5QixLQUFLVyxXQUFMLENBQWlCLEtBQUtYLGlCQUF0QixFQUF5Q0csT0FBekMsQ0FBekI7Ozs7Ozs7Ozs7Ozs7dUJBVUlHLFFBQVFmLFVBQVU7VUFDZixLQUFLdUMsSUFBTCxDQUFVeEIsTUFBVixFQUFrQixDQUFsQixFQUFxQmYsUUFBckIsQ0FBUDs7Ozs7Ozs7Ozs7OztxQ0FVa0J3QyxZQUFZO09BQzFCLEtBQUtoQyxPQUFULEVBQWtCO1FBQ2JnQyxVQUFKLEVBQWdCO1NBQ1R6QixTQUFTLEtBQUtDLGNBQUwsQ0FBb0J3QixVQUFwQixDQUFmO1VBQ0ssSUFBSXhRLElBQUksQ0FBYixFQUFnQkEsSUFBSStPLE9BQU9oUCxNQUEzQixFQUFtQ0MsR0FBbkMsRUFBd0M7V0FDbEN3TyxPQUFMLENBQWFPLE9BQU8vTyxDQUFQLENBQWIsSUFBMEIsSUFBMUI7O0tBSEYsTUFLTztVQUNEd08sT0FBTCxHQUFlLElBQWY7OztVQUdLLElBQVA7Ozs7Ozs7Ozs7Ozs7OzhDQVcyQmlDLGNBQWN6QyxVQUFVO09BQzdDMEMsaUJBQWlCLEVBQXZCO1FBQ0ssSUFBSTFRLElBQUksQ0FBYixFQUFnQkEsSUFBSXlRLGFBQWExUSxNQUFqQyxFQUF5Q0MsR0FBekMsRUFBOEM7UUFDekMsQ0FBQyxLQUFLMlEsZ0JBQUwsQ0FBc0JGLGFBQWF6USxDQUFiLENBQXRCLEVBQXVDZ08sUUFBdkMsQ0FBTCxFQUF1RDtvQkFDdkN6TixJQUFmLENBQW9Ca1EsYUFBYXpRLENBQWIsQ0FBcEI7OztVQUdLMFEsZUFBZTNRLE1BQWYsR0FBd0IsQ0FBeEIsR0FBNEIyUSxjQUE1QixHQUE2QyxJQUFwRDs7Ozs7Ozs7Ozs7OzttQ0FVZ0I7VUFDVCxLQUFLRSxHQUFMLENBQVNULEtBQVQsQ0FBZSxJQUFmLEVBQXFCbkwsU0FBckIsQ0FBUDs7Ozs7Ozs7Ozs7dUNBUW9CK0ksT0FBTztPQUN2QjhDLFdBQVcsS0FBS3BDLGlCQUFwQjtPQUNJb0MsUUFBSixFQUFjO2VBQ0ZmLFVBQVFlLFFBQVIsQ0FBWDtTQUNLLElBQUk3USxJQUFJLENBQWIsRUFBZ0JBLElBQUk2USxTQUFTOVEsTUFBN0IsRUFBcUNDLEdBQXJDLEVBQTBDO2NBQ2hDQSxDQUFULEVBQVkrTixLQUFaOzs7Ozs7Ozs7Ozs7Ozs7Z0NBWVd5QixXQUFXRSxNQUFNSixRQUFRO09BQ2xDQSxNQUFKLEVBQVk7U0FDTi9PLElBQUwsQ0FBVStPLE1BQVY7OztPQUdLd0IsbUJBQW1CLEVBQXpCO1FBQ0ssSUFBSTlRLElBQUksQ0FBYixFQUFnQkEsSUFBSXdQLFVBQVV6UCxNQUE5QixFQUFzQ0MsR0FBdEMsRUFBMkM7UUFDcENnTyxXQUFXd0IsVUFBVXhQLENBQVYsRUFBYW5ELEVBQWIsSUFBbUIyUyxVQUFVeFAsQ0FBVixDQUFwQztRQUNJd1AsVUFBVXhQLENBQVYsRUFBYStRLE9BQWpCLEVBQTBCO3NCQUNSeFEsSUFBakIsQ0FBc0J5TixRQUF0QjtLQURELE1BRU87Y0FDR21DLEtBQVQsQ0FBZSxJQUFmLEVBQXFCVCxJQUFyQjs7O09BR0UsQ0FBQ0osTUFBRCxJQUFXLENBQUNBLE9BQU9DLGdCQUF2QixFQUF5QztTQUNuQyxJQUFJeUIsSUFBSSxDQUFiLEVBQWdCQSxJQUFJRixpQkFBaUIvUSxNQUFyQyxFQUE2Q2lSLEdBQTdDLEVBQWtEO3NCQUNoQ0EsQ0FBakIsRUFBb0JiLEtBQXBCLENBQTBCLElBQTFCLEVBQWdDVCxJQUFoQzs7Ozs7Ozs7Ozs7Ozs7O3FDQVlnQnVCLGlCQUFpQjtRQUM5QnZDLGdCQUFMLEdBQXdCdUMsZUFBeEI7VUFDTyxJQUFQOzs7Ozs7Ozs7Ozs7OztpQ0FXY2xDLFFBQVE7T0FDbEIzUCxTQUFTMlAsTUFBVCxDQUFKLEVBQXNCO2lCQUNSLENBQWIsSUFBa0JBLE1BQWxCO2FBQ1NULFlBQVQ7O1VBRU1TLE1BQVA7Ozs7Ozs7Ozs7O29DQVFpQmYsVUFBVTtPQUN2QixDQUFDblAsV0FBV21QLFFBQVgsQ0FBTCxFQUEyQjtVQUNwQixJQUFJOUcsU0FBSixDQUFjLDZCQUFkLENBQU47Ozs7O0VBNVp3QnpDOztBQWlhM0IsU0FBU3FMLFNBQVQsQ0FBaUJ6UixHQUFqQixFQUFzQjtPQUNmQSxPQUFPLEVBQWI7UUFDTytCLE1BQU1DLE9BQU4sQ0FBY2hDLEdBQWQsSUFBcUJBLEdBQXJCLEdBQTJCLENBQUNBLEdBQUQsQ0FBbEM7OztBQzNhRDs7Ozs7Ozs7Ozs7Ozs7O0lBY002Uzs7OzRCQUNPQyxhQUFaLEVBQTJCQyxhQUEzQixFQUEwQ0MsYUFBMUMsRUFBeURDLGFBQXpELEVBQXdFOzs7Ozs7Ozs7O1FBUWxFQyxVQUFMLEdBQWtCRixhQUFsQjs7Ozs7Ozs7UUFRS0csY0FBTCxHQUFzQkwsYUFBdEI7Ozs7Ozs7OztRQVNLTSxjQUFMLEdBQXNCLElBQXRCOzs7Ozs7O1FBT0tDLGNBQUwsR0FBc0IsSUFBdEI7Ozs7Ozs7O1FBUUtDLGNBQUwsR0FBc0JQLGFBQXRCOzs7Ozs7O1FBT0tRLFVBQUwsR0FBa0JOLGFBQWxCOztRQUVLTyxXQUFMOzs7Ozs7Ozs7Ozs7Ozs7K0JBVVk5RCxPQUFPQyxVQUFVO1VBQ3RCLEtBQUt3RCxjQUFMLENBQW9CTSxFQUFwQixDQUF1Qi9ELEtBQXZCLEVBQThCQyxRQUE5QixDQUFQOzs7Ozs7Ozs7b0NBTWlCO1FBQ1orRCxnQkFBTDtRQUNLTCxjQUFMLEdBQXNCLElBQXRCO1FBQ0tGLGNBQUwsR0FBc0IsSUFBdEI7UUFDS0csY0FBTCxHQUFzQixJQUF0Qjs7Ozs7Ozs7OztrQ0FPZTtRQUNWQSxjQUFMLENBQW9CSyxJQUFwQixDQUF5QjdCLEtBQXpCLENBQStCLEtBQUt3QixjQUFwQyxFQUFvRDNNLFNBQXBEOzs7Ozs7Ozs7OzZCQU9VK0ksT0FBTztPQUNiLEtBQUtrRSxpQkFBTCxDQUF1QmxFLEtBQXZCLENBQUosRUFBbUM7U0FDN0JtRSxpQkFBTCxDQUF1Qm5FLEtBQXZCOzs7Ozs7Ozs7OztxQ0FRaUI7T0FDZCxLQUFLMkQsY0FBVCxFQUF5QjtRQUNsQjNDLFNBQVN2SixPQUFPRCxJQUFQLENBQVksS0FBS21NLGNBQWpCLENBQWY7U0FDSyxJQUFJMVIsSUFBSSxDQUFiLEVBQWdCQSxJQUFJK08sT0FBT2hQLE1BQTNCLEVBQW1DQyxHQUFuQyxFQUF3QztVQUNsQzBSLGNBQUwsQ0FBb0IzQyxPQUFPL08sQ0FBUCxDQUFwQixFQUErQm9PLGNBQS9COztTQUVJc0QsY0FBTCxHQUFzQixJQUF0Qjs7UUFFSUQsY0FBTCxHQUFzQixJQUF0Qjs7Ozs7Ozs7Ozs7O21DQVNnQk4sZUFBZTs7O09BQ3pCcEMsU0FBUyxLQUFLeUMsY0FBTCxJQUF1QixLQUFLRSxjQUE1QixHQUNkbE0sT0FBT0QsSUFBUCxDQUFZLEtBQUttTSxjQUFqQixDQURjLEdBRWQsS0FBS0QsY0FGTjtRQUdLRCxjQUFMLEdBQXNCTCxhQUF0QjtPQUNJcEMsTUFBSixFQUFZO1NBQ05nRCxnQkFBTDtXQUNPdEksT0FBUCxDQUFlO1lBQVMsT0FBSzBJLFVBQUwsQ0FBZ0JwRSxLQUFoQixDQUFUO0tBQWY7Ozs7Ozs7Ozs7Ozs7b0NBVWdCQSxPQUFPO09BQ3BCLEtBQUs2RCxVQUFMLElBQW1CLENBQUMsS0FBS0EsVUFBTCxDQUFnQjdELEtBQWhCLENBQXhCLEVBQWdEO1dBQ3hDLEtBQVA7O09BRUcsS0FBS3dELFVBQUwsSUFBbUIsS0FBS0EsVUFBTCxDQUFnQnhELEtBQWhCLENBQXZCLEVBQStDO1dBQ3ZDLEtBQVA7O1VBRU0sQ0FBQyxLQUFLMkQsY0FBTixJQUF3QixDQUFDLEtBQUtBLGNBQUwsQ0FBb0IzRCxLQUFwQixDQUFoQzs7Ozs7Ozs7OztnQ0FPYTtRQUNSNEQsY0FBTCxDQUFvQlMsVUFBcEIsQ0FBK0IsS0FBS0QsVUFBTCxDQUFnQmpRLElBQWhCLENBQXFCLElBQXJCLENBQS9COzs7Ozs7Ozs7Ozs7b0NBU2lCNkwsT0FBTztPQUNwQixLQUFLeUQsY0FBVCxFQUF5QjtTQUNuQkUsY0FBTCxHQUFzQixLQUFLQSxjQUFMLElBQXVCLEVBQTdDO1NBQ0tBLGNBQUwsQ0FBb0IzRCxLQUFwQixJQUE2QixLQUFLc0UsWUFBTCxDQUM1QnRFLEtBRDRCLEVBRTVCLEtBQUt1RSxhQUFMLENBQW1CcFEsSUFBbkIsQ0FBd0IsSUFBeEIsRUFBOEI2TCxLQUE5QixDQUY0QixDQUE3QjtJQUZELE1BTU87U0FDRDBELGNBQUwsR0FBc0IsS0FBS0EsY0FBTCxJQUF1QixFQUE3QztTQUNLQSxjQUFMLENBQW9CbFIsSUFBcEIsQ0FBeUJ3TixLQUF6Qjs7Ozs7RUFuSzZCdEo7O0FDZGhDOzs7Ozs7O0lBTU04Tjs7O3lCQUNTOzs7Ozs7Ozs7OztRQVNSQyxhQUFMLEdBQXFCLEVBQXJCOzs7Ozs7Ozs7Ozs7O3dCQVFLO1FBQ0EsSUFBSXhTLElBQUksQ0FBYixFQUFnQkEsSUFBSWdGLFVBQVVqRixNQUE5QixFQUFzQ0MsR0FBdEMsRUFBMkM7U0FDckN3UyxhQUFMLENBQW1CalMsSUFBbkIsQ0FBd0J5RSxVQUFVaEYsQ0FBVixDQUF4Qjs7Ozs7Ozs7Ozs7b0NBUWdCO1FBQ1p3UyxhQUFMLEdBQXFCLElBQXJCOzs7Ozs7Ozs7dUNBTW9CO1FBQ2YsSUFBSXhTLElBQUksQ0FBYixFQUFnQkEsSUFBSSxLQUFLd1MsYUFBTCxDQUFtQnpTLE1BQXZDLEVBQStDQyxHQUEvQyxFQUFvRDtTQUM5Q3dTLGFBQUwsQ0FBbUJ4UyxDQUFuQixFQUFzQm9PLGNBQXRCOzs7UUFHSW9FLGFBQUwsR0FBcUIsRUFBckI7Ozs7RUF4Q3lCL047O0FDSjNCOzs7Ozs7SUFLTWdPOzs7Ozs7Ozs7Ozs7a0NBVU8zRSxPQUFaLEVBQXFCQyxLQUFyQixFQUE0QkMsUUFBNUIsRUFBc0MwRSxZQUF0QyxFQUFvRDs7OytJQUM3QzVFLE9BRDZDLEVBQ3BDQyxLQURvQyxFQUM3QkMsUUFENkI7O1FBRTlDMkUsU0FBTCxHQUFpQkQsWUFBakI7Ozs7Ozs7Ozs7O21DQU1nQjtPQUNWRSxhQUFhbkYsUUFBUTdDLEdBQVIsQ0FBWSxLQUFLcUQsUUFBakIsRUFBMkIsWUFBM0IsRUFBeUMsRUFBekMsQ0FBbkI7T0FDTXVCLFlBQVkvQixRQUFRN0MsR0FBUixDQUFZLEtBQUtxRCxRQUFqQixFQUEyQixXQUEzQixFQUF3QyxFQUF4QyxDQUFsQjtPQUNNNEUsV0FBVyxLQUFLRixTQUF0QjtPQUNNMVMsTUFBTWIsU0FBU3lULFFBQVQsSUFBcUJELFdBQVcsS0FBSzFFLE1BQWhCLEVBQXdCNEUsU0FBN0MsR0FBeUR0RCxTQUFyRTtPQUNNMUssTUFBTTFGLFNBQVN5VCxRQUFULElBQXFCQSxRQUFyQixHQUFnQyxLQUFLM0UsTUFBakQ7O1NBRU03RSxNQUFOLENBQWFwSixJQUFJNkUsR0FBSixLQUFZLEVBQXpCLEVBQTZCLEtBQUtxSixTQUFsQztPQUNJbE8sSUFBSTZFLEdBQUosS0FBWTdFLElBQUk2RSxHQUFKLEVBQVMvRSxNQUFULEtBQW9CLENBQXBDLEVBQXVDO1dBQy9CRSxJQUFJNkUsR0FBSixDQUFQOzs7OztFQTNCbUMrSTs7QUNQdEM7Ozs7OztJQUtNa0Y7Ozs7Ozs7Ozs7Ozt5QkFVT2pGLE9BQVosRUFBcUJDLEtBQXJCLEVBQTRCQyxRQUE1QixFQUFzQ2dGLFdBQXRDLEVBQW1EOzs7NkhBQzVDbEYsT0FENEMsRUFDbkNDLEtBRG1DLEVBQzVCQyxRQUQ0Qjs7UUFFN0NpRixRQUFMLEdBQWdCRCxXQUFoQjs7Ozs7Ozs7Ozs7bUNBTWdCO1FBQ1gvRSxRQUFMLENBQWNpRixtQkFBZCxDQUFrQyxLQUFLaEYsTUFBdkMsRUFBK0MsS0FBS0MsU0FBcEQsRUFBK0QsS0FBSzhFLFFBQXBFOzs7O0VBbkIyQnBGOztBQ0Y3QixJQUFNc0YsaUJBQWlCLEVBQXZCO0FBQ0EsSUFBTUMsZ0JBQWdCLEVBQXRCO0FBQ0EsQUFBTyxJQUFNQyxlQUFlLEVBQXJCOztBQUVQLElBQU1DLGlCQUFpQiwwQkFBdkI7QUFDQSxJQUFNQyxjQUFjO09BQ2IsSUFEYTtRQUVaLElBRlk7UUFHWixJQUhZO1VBSVYsSUFKVTtPQUtiLElBTGE7U0FNWDtDQU5UOzs7Ozs7O0FBY0EsQUFBTyxTQUFTQyxVQUFULENBQW9CQyxRQUFwQixFQUE4QkMsT0FBOUIsRUFBdUM7S0FDekMsQ0FBQzFVLFNBQVN5VSxRQUFULENBQUQsSUFBdUIsQ0FBQ3JVLFNBQVNzVSxPQUFULENBQTVCLEVBQStDOzs7O0tBSTNDLENBQUNELFNBQVMxVCxNQUFkLEVBQXNCO2FBQ1YsQ0FBQzBULFFBQUQsQ0FBWDs7O01BR0ksSUFBSXpULElBQUksQ0FBYixFQUFnQkEsSUFBSXlULFNBQVMxVCxNQUE3QixFQUFxQ0MsR0FBckMsRUFBMEM7TUFDckMsZUFBZXlULFNBQVN6VCxDQUFULENBQW5CLEVBQWdDO3lCQUNUeVQsU0FBU3pULENBQVQsQ0FBdEIsRUFBbUMwVCxPQUFuQztHQURELE1BRU87NEJBQ21CRCxTQUFTelQsQ0FBVCxDQUF6QixFQUFzQzBULE9BQXRDOzs7Ozs7Ozs7OztBQVdILFNBQVNDLHFCQUFULENBQStCakcsT0FBL0IsRUFBd0NnRyxPQUF4QyxFQUFpRDtTQUN4Q3ZPLEtBQVIsQ0FBYyxHQUFkLEVBQW1Cc0UsT0FBbkIsQ0FBMkIsVUFBU21LLFNBQVQsRUFBb0I7TUFDMUNBLFNBQUosRUFBZTtXQUNOQyxTQUFSLENBQWtCekosR0FBbEIsQ0FBc0J3SixTQUF0Qjs7RUFGRjs7Ozs7Ozs7O0FBYUQsU0FBU0Usd0JBQVQsQ0FBa0NwRyxPQUFsQyxFQUEyQ2dHLE9BQTNDLEVBQW9EO0tBQzdDSyx5QkFBdUJyRyxRQUFRa0csU0FBL0IsTUFBTjtLQUNJSSxrQkFBa0IsRUFBdEI7O1dBRVVOLFFBQVF2TyxLQUFSLENBQWMsR0FBZCxDQUFWOztNQUVLLElBQUluRixJQUFJLENBQWIsRUFBZ0JBLElBQUkwVCxRQUFRM1QsTUFBNUIsRUFBb0NDLEdBQXBDLEVBQXlDO01BQ2xDNFQsWUFBWUYsUUFBUTFULENBQVIsQ0FBbEI7O01BRUkrVCxpQkFBaUI3VyxPQUFqQixPQUE2QjBXLFNBQTdCLFlBQStDLENBQUMsQ0FBcEQsRUFBdUQ7NEJBQy9CQSxTQUF2Qjs7OztLQUlFSSxlQUFKLEVBQXFCO1VBQ1pKLFNBQVIsR0FBb0JsRyxRQUFRa0csU0FBUixHQUFvQkksZUFBeEM7Ozs7Ozs7Ozs7O0FBV0YsU0FBU0MsbUJBQVQsQ0FBNkJ2RyxPQUE3QixFQUFzQ3dHLFNBQXRDLEVBQWlEbEcsUUFBakQsRUFBMkQ7V0FDaERQLFFBQVE3QyxHQUFSLENBQVk4QyxPQUFaLEVBQXFCLFdBQXJCLEVBQWtDLEVBQWxDLENBQVYsRUFBaUR3RyxTQUFqRCxFQUE0RGxHLFFBQTVEOzs7Ozs7Ozs7Ozs7QUFZRCxTQUFTbUcsb0JBQVQsQ0FBOEJ6RyxPQUE5QixFQUF1Q3dHLFNBQXZDLEVBQWtEckIsUUFBbEQsRUFBNEQ3RSxRQUE1RCxFQUFzRTtLQUMvRG9HLGlCQUFpQjNHLFFBQVE3QyxHQUFSLENBQVk4QyxPQUFaLEVBQXFCLFlBQXJCLEVBQW1DLEVBQW5DLENBQXZCO1dBQ1UwRyxlQUFlRixTQUFmLEVBQTBCcEIsU0FBcEMsRUFBK0NELFFBQS9DLEVBQXlEN0UsUUFBekQ7Ozs7Ozs7Ozs7O0FBV0QsU0FBU3FHLFNBQVQsQ0FBbUJwVSxHQUFuQixFQUF3QjZFLEdBQXhCLEVBQTZCOEIsS0FBN0IsRUFBb0M7S0FDL0IsQ0FBQzNHLElBQUk2RSxHQUFKLENBQUwsRUFBZTtNQUNWQSxHQUFKLElBQVcsRUFBWDs7S0FFR0EsR0FBSixFQUFTdkUsSUFBVCxDQUFjcUcsS0FBZDs7Ozs7Ozs7O0FBU0QsU0FBUzBOLG9CQUFULENBQThCNUcsT0FBOUIsRUFBdUN3RyxTQUF2QyxFQUFrRDtLQUM3Q0UsaUJBQWlCM0csUUFBUTdDLEdBQVIsQ0FBWThDLE9BQVosRUFBcUIsWUFBckIsRUFBbUMsRUFBbkMsQ0FBckI7S0FDSSxDQUFDMEcsZUFBZUYsU0FBZixDQUFMLEVBQWdDO2lCQUNoQkEsU0FBZixJQUE0QjtXQUNuQnBDLEdBQ1BwRSxPQURPLEVBRVB3RyxTQUZPLEVBR1BLLG9CQUhPLEVBSVAsQ0FBQyxDQUFDaEIsWUFBWVcsU0FBWixDQUpLLENBRG1CO2NBT2hCO0dBUFo7Ozs7Ozs7Ozs7O0FBbUJGLEFBQU8sU0FBU00sT0FBVCxDQUFpQjlHLE9BQWpCLEVBQTBCbUYsUUFBMUIsRUFBb0M7UUFDbkNuRixXQUFXLENBQUMrRyxNQUFNL0csT0FBTixFQUFlbUYsUUFBZixDQUFuQixFQUE2QztZQUNsQ25GLFFBQVFuSixVQUFsQjs7UUFFTW1KLE9BQVA7Ozs7Ozs7Ozs7O0FBV0QsQUFBTyxTQUFTZ0gsTUFBVCxDQUFnQnBMLE1BQWhCLEVBQXdCYixLQUF4QixFQUErQjtLQUNqQ3JKLFNBQVNxSixLQUFULENBQUosRUFBcUI7VUFDWmtNLGNBQWNsTSxLQUFkLENBQVI7O0tBRUdBLGlCQUFpQm1NLFFBQXJCLEVBQStCO01BQ3hCQyxXQUFXelUsTUFBTU8sU0FBTixDQUFnQnNLLEtBQWhCLENBQXNCcEssSUFBdEIsQ0FBMkI0SCxLQUEzQixDQUFqQjtPQUNLLElBQUl6SSxJQUFJLENBQWIsRUFBZ0JBLElBQUk2VSxTQUFTOVUsTUFBN0IsRUFBcUNDLEdBQXJDLEVBQTBDO1VBQ2xDaUQsV0FBUCxDQUFtQjRSLFNBQVM3VSxDQUFULENBQW5COztFQUhGLE1BS087U0FDQ2lELFdBQVAsQ0FBbUJ3RixLQUFuQjs7UUFFTUEsS0FBUDs7Ozs7Ozs7QUFRRCxBQUFPLFNBQVNrTSxhQUFULENBQXVCRyxVQUF2QixFQUFtQztLQUNuQ0MsVUFBVXBaLFNBQVNpSCxhQUFULENBQXVCLEtBQXZCLENBQWhCO1NBQ1FvUyxTQUFSLFlBQTJCRixVQUEzQjtTQUNRdFEsV0FBUixDQUFvQnVRLFFBQVFFLFVBQTVCOztLQUVNQyxXQUFXdlosU0FBU3daLHNCQUFULEVBQWpCO1FBQ09KLFFBQVFFLFVBQWYsRUFBMkI7V0FDakJoUyxXQUFULENBQXFCOFIsUUFBUUUsVUFBN0I7O1FBRU1DLFFBQVA7Ozs7Ozs7OztBQVNELEFBQU8sU0FBU2hLLFFBQVQsQ0FBa0JrSyxRQUFsQixFQUE0QkMsUUFBNUIsRUFBc0M7S0FDeEM1VyxXQUFXMlcsUUFBWCxDQUFKLEVBQTBCOztTQUVsQkEsU0FBU3BTLGVBQVQsQ0FBeUJrSSxRQUF6QixDQUFrQ21LLFFBQWxDLENBQVA7RUFGRCxNQUdPO1NBQ0NELFNBQVNsSyxRQUFULENBQWtCbUssUUFBbEIsQ0FBUDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFvQkYsQUFBTyxTQUFTQyxRQUFULENBQWtCNUgsT0FBbEIsRUFBMkJ3RyxTQUEzQixFQUFzQ3FCLGdCQUF0QyxFQUF3RGhVLFFBQXhELEVBQWtFc04sV0FBbEUsRUFBK0U7S0FDL0UyRyxlQUFlbkMsYUFBYWEsU0FBYixDQUFyQjtLQUNJc0IsZ0JBQWdCQSxhQUFhRixRQUFqQyxFQUEyQztjQUM5QkUsYUFBYUMsYUFBekI7YUFDV0QsYUFBYTVHLE9BQWIsQ0FBcUIxTSxJQUFyQixDQUEwQnNULFlBQTFCLEVBQXdDalUsUUFBeEMsQ0FBWDs7O0tBR0dzTixXQUFKLEVBQWlCOzthQUVMdE4sU0FBU1csSUFBVCxFQUFYO1dBQ1N3VCxnQkFBVCxHQUE0QixJQUE1Qjs7O3NCQUdvQmhJLE9BQXJCLEVBQThCd0csU0FBOUI7S0FDSTlVLFNBQVNtVyxnQkFBVCxDQUFKLEVBQWdDO3VCQUNWN0gsT0FBckIsRUFBOEJ3RyxTQUE5QixFQUF5Q3FCLGdCQUF6QyxFQUEyRGhVLFFBQTNEO0VBREQsTUFFTztzQkFDY2dVLGdCQUFwQixFQUFzQ3JCLFNBQXRDLEVBQWlEM1MsUUFBakQ7OztRQUdNLElBQUlrUix1QkFBSixDQUNOclQsU0FBU21XLGdCQUFULElBQTZCN0gsT0FBN0IsR0FBdUM2SCxnQkFEakMsRUFFTnJCLFNBRk0sRUFHTjNTLFFBSE0sRUFJTm5DLFNBQVNtVyxnQkFBVCxJQUE2QkEsZ0JBQTdCLEdBQWdELElBSjFDLENBQVA7Ozs7Ozs7Ozs7QUFlRCxTQUFTSSxxQkFBVCxDQUErQmhOLElBQS9CLEVBQXFDdUwsU0FBckMsRUFBZ0QwQixZQUFoRCxFQUE4RDtLQUN6REEsZ0JBQWdCMUIsY0FBYyxPQUE5QixJQUF5QzBCLGFBQWFDLE1BQWIsS0FBd0IsQ0FBckUsRUFBd0U7Ozs7U0FJaEUsS0FBUDs7O0tBR0tDLGtCQUFrQixDQUFDLFFBQUQsRUFBVyxPQUFYLEVBQW9CLFFBQXBCLEVBQThCLFVBQTlCLEVBQTBDLFVBQTFDLENBQXhCO0tBQ0k1QixjQUFjLE9BQWQsSUFBeUI0QixnQkFBZ0I1WSxPQUFoQixDQUF3QnlMLEtBQUtvTixPQUE3QixJQUF3QyxDQUFDLENBQXRFLEVBQXlFO1NBQ2pFLEVBQUVwTixLQUFLcU4sUUFBTCxJQUFpQjFNLE9BQU9YLElBQVAsRUFBYSxvQkFBYixDQUFuQixDQUFQOztRQUVNLElBQVA7Ozs7Ozs7QUFPRDs7Ozs7O0FBUUEsQUFBTyxTQUFTc04sWUFBVCxDQUFzQnROLElBQXRCLEVBQTRCO0tBQzlCQSxRQUFRQSxLQUFLcEUsVUFBakIsRUFBNkI7T0FDdkJBLFVBQUwsQ0FBZ0JDLFdBQWhCLENBQTRCbUUsSUFBNUI7Ozs7Ozs7Ozs7Ozs7QUFhRixTQUFTNEwsb0JBQVQsQ0FBOEJ4RyxLQUE5QixFQUFxQzt5QkFDWkEsS0FBeEI7S0FDSW1JLE1BQU0sSUFBVjtLQUNNQyxZQUFZcEksTUFBTXFJLGFBQXhCO0tBQ01DLFNBQVMsRUFBZjs7UUFFT0MsMkJBQTJCSCxTQUEzQixFQUFzQ3BJLEtBQXRDLEVBQTZDc0ksTUFBN0MsQ0FBUDtRQUNPRSxrQ0FBa0NGLE1BQWxDLEVBQTBDdEksS0FBMUMsQ0FBUDs7T0FFTXlJLGNBQU4sR0FBdUIsSUFBdkI7T0FDTWxELGNBQU4sSUFBd0I2QyxTQUF4QjtRQUNPRCxHQUFQOzs7Ozs7Ozs7QUFTRDs7QUFRQSxBQXNCQTs7Ozs7QUFLQTs7Ozs7Ozs7QUFVQSxBQUFPLFNBQVN6QixLQUFULENBQWUvRyxPQUFmLEVBQXdCbUYsUUFBeEIsRUFBa0M7S0FDcEMsQ0FBQ25GLE9BQUQsSUFBWUEsUUFBUWhQLFFBQVIsS0FBcUIsQ0FBckMsRUFBd0M7U0FDaEMsS0FBUDs7O0tBR0srWCxJQUFJQyxRQUFRL1YsU0FBbEI7S0FDTWdXLElBQUlGLEVBQUVHLE9BQUYsSUFBYUgsRUFBRUkscUJBQWYsSUFBd0NKLEVBQUVLLGtCQUExQyxJQUFnRUwsRUFBRU0saUJBQWxFLElBQXVGTixFQUFFTyxnQkFBbkc7S0FDSUwsQ0FBSixFQUFPO1NBQ0NBLEVBQUU5VixJQUFGLENBQU82TSxPQUFQLEVBQWdCbUYsUUFBaEIsQ0FBUDs7O1FBR01vRSxlQUFldkosT0FBZixFQUF3Qm1GLFFBQXhCLENBQVA7Ozs7Ozs7Ozs7O0FBV0QsU0FBU29FLGNBQVQsQ0FBd0J2SixPQUF4QixFQUFpQ21GLFFBQWpDLEVBQTJDO0tBQ3BDcUUsUUFBUXZiLFNBQVN3YixnQkFBVCxDQUEwQnRFLFFBQTFCLEVBQW9DbkYsUUFBUW5KLFVBQTVDLENBQWQ7TUFDSyxJQUFJdkUsSUFBSSxDQUFiLEVBQWdCQSxJQUFJa1gsTUFBTW5YLE1BQTFCLEVBQWtDLEVBQUVDLENBQXBDLEVBQXVDO01BQ2xDa1gsTUFBTWxYLENBQU4sTUFBYTBOLE9BQWpCLEVBQTBCO1VBQ2xCLElBQVA7OztRQUdLLEtBQVA7Ozs7Ozs7OztBQVNEOzs7Ozs7O0FBZUEsU0FBUzBKLHVCQUFULENBQWlDckosS0FBakMsRUFBd0M7T0FDakNzSixlQUFOLEdBQXdCQyxnQkFBeEI7T0FDTUMsd0JBQU4sR0FBaUNDLHlCQUFqQzs7Ozs7Ozs7Ozs7Ozs7OztBQWdCRCxBQUFPLFNBQVMxRixFQUFULENBQVlwRSxPQUFaLEVBQXFCd0csU0FBckIsRUFBZ0MzUyxRQUFoQyxFQUEwQ3lSLFdBQTFDLEVBQXVEO0tBQ3pENVQsU0FBU3NPLE9BQVQsQ0FBSixFQUF1QjtTQUNmNEgsU0FBUzNaLFFBQVQsRUFBbUJ1WSxTQUFuQixFQUE4QnhHLE9BQTlCLEVBQXVDbk0sUUFBdkMsQ0FBUDs7S0FFS2lVLGVBQWVuQyxhQUFhYSxTQUFiLENBQXJCO0tBQ0lzQixnQkFBZ0JBLGFBQWF6SCxLQUFqQyxFQUF3QztjQUMzQnlILGFBQWFDLGFBQXpCO2FBQ1dELGFBQWE1RyxPQUFiLENBQXFCMU0sSUFBckIsQ0FBMEJzVCxZQUExQixFQUF3Q2pVLFFBQXhDLENBQVg7O1NBRU9tQixnQkFBUixDQUF5QndSLFNBQXpCLEVBQW9DM1MsUUFBcEMsRUFBOEN5UixXQUE5QztRQUNPLElBQUlELGNBQUosQ0FBbUJyRixPQUFuQixFQUE0QndHLFNBQTVCLEVBQXVDM1MsUUFBdkMsRUFBaUR5UixXQUFqRCxDQUFQOzs7Ozs7Ozs7Ozs7O0FBYUQsQUFBTyxTQUFTeUUsSUFBVCxDQUFjL0osT0FBZCxFQUF1QndHLFNBQXZCLEVBQWtDM1MsUUFBbEMsRUFBNEM7S0FDNUNtVyxpQkFBaUI1RixHQUFHcEUsT0FBSCxFQUFZd0csU0FBWixFQUF1QixZQUFXO2lCQUN6QzlGLGNBQWY7U0FDTzdNLFNBQVM0TyxLQUFULENBQWUsSUFBZixFQUFxQm5MLFNBQXJCLENBQVA7RUFGc0IsQ0FBdkI7UUFJTzBTLGNBQVA7Ozs7Ozs7Ozs7QUFVRCxBQUFPLFNBQVNwTyxNQUFULENBQWdCb0UsT0FBaEIsRUFBeUJtRixRQUF6QixFQUFtQztRQUNsQzJCLFFBQVE5RyxRQUFRbkosVUFBaEIsRUFBNEJzTyxRQUE1QixDQUFQOzs7Ozs7Ozs7QUFTRCxBQUFPLFNBQVM4RSxtQkFBVCxDQUE2QnpELFNBQTdCLEVBQXdDc0IsWUFBeEMsRUFBc0Q7Y0FDL0N0QixTQUFiLElBQTBCc0IsWUFBMUI7Ozs7Ozs7QUFPRCxBQUFPLFNBQVNvQyxjQUFULENBQXdCalAsSUFBeEIsRUFBOEI7S0FDaENGLGNBQUo7UUFDUUEsUUFBUUUsS0FBS3NNLFVBQXJCLEVBQWtDO09BQzVCelEsV0FBTCxDQUFpQmlFLEtBQWpCOzs7Ozs7Ozs7QUFTRixBQUFPLFNBQVNvUCxhQUFULENBQXVCcEUsUUFBdkIsRUFBaUNDLE9BQWpDLEVBQTBDO0tBQzVDLENBQUMxVSxTQUFTeVUsUUFBVCxDQUFELElBQXVCLENBQUNyVSxTQUFTc1UsT0FBVCxDQUE1QixFQUErQzs7OztLQUkzQyxDQUFDRCxTQUFTMVQsTUFBZCxFQUFzQjthQUNWLENBQUMwVCxRQUFELENBQVg7OztNQUdJLElBQUl6VCxJQUFJLENBQWIsRUFBZ0JBLElBQUl5VCxTQUFTMVQsTUFBN0IsRUFBcUNDLEdBQXJDLEVBQTBDO01BQ3JDLGVBQWV5VCxTQUFTelQsQ0FBVCxDQUFuQixFQUFnQzs0QkFDTnlULFNBQVN6VCxDQUFULENBQXpCLEVBQXNDMFQsT0FBdEM7R0FERCxNQUVPOytCQUNzQkQsU0FBU3pULENBQVQsQ0FBNUIsRUFBeUMwVCxPQUF6Qzs7Ozs7Ozs7Ozs7QUFXSCxTQUFTb0Usd0JBQVQsQ0FBa0NwSyxPQUFsQyxFQUEyQ2dHLE9BQTNDLEVBQW9EO1NBQzNDdk8sS0FBUixDQUFjLEdBQWQsRUFBbUJzRSxPQUFuQixDQUEyQixVQUFTbUssU0FBVCxFQUFvQjtNQUMxQ0EsU0FBSixFQUFlO1dBQ05DLFNBQVIsQ0FBa0J4SyxNQUFsQixDQUF5QnVLLFNBQXpCOztFQUZGOzs7Ozs7Ozs7QUFhRCxTQUFTbUUsMkJBQVQsQ0FBcUNySyxPQUFyQyxFQUE4Q2dHLE9BQTlDLEVBQXVEO0tBQ2xESyx5QkFBdUJyRyxRQUFRa0csU0FBL0IsTUFBSjs7V0FFVUYsUUFBUXZPLEtBQVIsQ0FBYyxHQUFkLENBQVY7O01BRUssSUFBSW5GLElBQUksQ0FBYixFQUFnQkEsSUFBSTBULFFBQVEzVCxNQUE1QixFQUFvQ0MsR0FBcEMsRUFBeUM7cUJBQ3JCK1QsaUJBQWlCNU4sT0FBakIsT0FBNkJ1TixRQUFRMVQsQ0FBUixDQUE3QixRQUE0QyxHQUE1QyxDQUFuQjs7O1NBR080VCxTQUFSLEdBQW9CRyxpQkFBaUJpRSxJQUFqQixFQUFwQjs7Ozs7Ozs7QUFRRDs7Ozs7O0FBV0EsU0FBU1IseUJBQVQsR0FBcUM7S0FDOUJ6SixRQUFRLElBQWQsQ0FEb0M7T0FFOUJrSyxPQUFOLEdBQWdCLElBQWhCO09BQ01DLGdCQUFOLEdBQXlCLElBQXpCO09BQ012WCxTQUFOLENBQWdCNFcsd0JBQWhCLENBQXlDMVcsSUFBekMsQ0FBOENrTixLQUE5Qzs7Ozs7OztBQU9ELFNBQVN1SixnQkFBVCxHQUE0QjtLQUNyQnZKLFFBQVEsSUFBZCxDQUQyQjtPQUVyQmtLLE9BQU4sR0FBZ0IsSUFBaEI7T0FDTXRYLFNBQU4sQ0FBZ0IwVyxlQUFoQixDQUFnQ3hXLElBQWhDLENBQXFDa04sS0FBckM7Ozs7Ozs7OztBQVNELEFBQU8sU0FBU29LLGFBQVQsQ0FBdUJ6SyxPQUF2QixFQUFnQ3dHLFNBQWhDLEVBQTJDO0tBQzdDYixhQUFhYSxTQUFiLENBQUosRUFBNkI7U0FDckIsSUFBUDs7O0tBR0c5VSxTQUFTc08sT0FBVCxDQUFKLEVBQXVCO01BQ2xCLENBQUN5RixlQUFlekYsT0FBZixDQUFMLEVBQThCO2tCQUNkQSxPQUFmLElBQTBCL1IsU0FBU2lILGFBQVQsQ0FBdUI4SyxPQUF2QixDQUExQjs7WUFFU3lGLGVBQWV6RixPQUFmLENBQVY7OztLQUdLMEssTUFBTTFLLFFBQVFxSSxPQUFwQjtLQUNJLENBQUMzQyxjQUFjZ0YsR0FBZCxDQUFELElBQXVCLENBQUNoRixjQUFjZ0YsR0FBZCxFQUFtQjVhLGNBQW5CLENBQWtDMFcsU0FBbEMsQ0FBNUIsRUFBMEU7Z0JBQzNEa0UsR0FBZCxJQUFxQmhGLGNBQWNnRixHQUFkLEtBQXNCLEVBQTNDO2dCQUNjQSxHQUFkLEVBQW1CbEUsU0FBbkIsSUFBZ0MsT0FBT0EsU0FBUCxJQUFvQnhHLE9BQXBEOztRQUVNMEYsY0FBY2dGLEdBQWQsRUFBbUJsRSxTQUFuQixDQUFQOzs7Ozs7Ozs7OztBQVdELFNBQVNxQyxpQ0FBVCxDQUEyQ0YsTUFBM0MsRUFBbUR0SSxLQUFuRCxFQUEwRDtLQUNyRG1JLE1BQU0sSUFBVjs7TUFFSyxJQUFJbFcsSUFBSSxDQUFiLEVBQWdCQSxJQUFJcVcsT0FBT3RXLE1BQVgsSUFBcUIsQ0FBQ2dPLE1BQU1zSyxnQkFBNUMsRUFBOERyWSxHQUE5RCxFQUFtRTtRQUM1RHdXLGNBQU4sR0FBdUJILE9BQU9yVyxDQUFQLEVBQVUwTixPQUFqQztTQUNPMkksT0FBT3JXLENBQVAsRUFBVW5ELEVBQVYsQ0FBYWtSLEtBQWIsQ0FBUDs7O1FBR01tSSxHQUFQOzs7Ozs7Ozs7Ozs7OztBQWNELFNBQVNJLDBCQUFULENBQW9DSCxTQUFwQyxFQUErQ3BJLEtBQS9DLEVBQXNEdUssVUFBdEQsRUFBa0U7S0FDN0RwQyxNQUFNLElBQVY7S0FDSXFDLGNBQWN4SyxNQUFNbEosTUFBeEI7S0FDTTJULFFBQVFyQyxVQUFVNVIsVUFBeEI7O1FBRU9nVSxlQUFlQSxnQkFBZ0JDLEtBQS9CLElBQXdDLENBQUN6SyxNQUFNa0ssT0FBdEQsRUFBK0Q7TUFDMUR0QyxzQkFBc0I0QyxXQUF0QixFQUFtQ3hLLE1BQU05TyxJQUF6QyxFQUErQzhPLEtBQS9DLENBQUosRUFBMkQ7U0FDcER5SSxjQUFOLEdBQXVCK0IsV0FBdkI7VUFDT0UseUJBQXlCRixXQUF6QixFQUFzQ3hLLEtBQXRDLEVBQTZDdUssVUFBN0MsQ0FBUDtVQUNPSSwwQkFBMEJ2QyxTQUExQixFQUFxQ29DLFdBQXJDLEVBQWtEeEssS0FBbEQsRUFBeUR1SyxVQUF6RCxDQUFQOztnQkFFYUMsWUFBWWhVLFVBQTFCOzs7UUFHTTJSLEdBQVA7Ozs7Ozs7Ozs7QUFVRDs7Ozs7Ozs7QUFvQkE7O0FBWUEsQUEyQ0E7Ozs7Ozs7Ozs7O0FBV0EsU0FBU3VDLHdCQUFULENBQWtDL0ssT0FBbEMsRUFBMkNLLEtBQTNDLEVBQWtEdUssVUFBbEQsRUFBOEQ7S0FDdkRLLGdCQUFnQjVLLE1BQU11RixjQUFOLENBQXRCO0tBQ0ksQ0FBQ2hWLE1BQU1xYSxhQUFOLENBQUQsSUFBeUIsQ0FBQ3pOLFNBQVN5TixhQUFULEVBQXdCakwsT0FBeEIsQ0FBOUIsRUFBZ0U7TUFDekQ4QixZQUFZL0IsUUFBUTdDLEdBQVIsQ0FBWThDLE9BQVosRUFBcUIsV0FBckIsRUFBa0MsRUFBbEMsRUFBc0NLLE1BQU05TyxJQUE1QyxDQUFsQjtTQUNPMlosa0JBQWtCcEosU0FBbEIsRUFBNkJ6QixLQUE3QixFQUFvQ0wsT0FBcEMsRUFBNkM0SyxVQUE3QyxDQUFQOztRQUVNLElBQVA7Ozs7Ozs7Ozs7O0FBV0Q7Ozs7Ozs7Ozs7Ozs7QUFvQkEsU0FBU00saUJBQVQsQ0FBMkJwSixTQUEzQixFQUFzQ3pCLEtBQXRDLEVBQTZDTCxPQUE3QyxFQUFzRDRLLFVBQXRELEVBQWtFO0tBQzdEcEMsTUFBTSxJQUFWO2FBQ1kxRyxhQUFhLEVBQXpCO01BQ0ssSUFBSXhQLElBQUksQ0FBYixFQUFnQkEsSUFBSXdQLFVBQVV6UCxNQUFkLElBQXdCLENBQUNnTyxNQUFNbUssZ0JBQS9DLEVBQWlFbFksR0FBakUsRUFBc0U7TUFDakV3UCxVQUFVeFAsQ0FBVixFQUFhMFYsZ0JBQWpCLEVBQW1DO2NBQ3ZCblYsSUFBWCxDQUFnQjtvQkFBQTtRQUVYaVAsVUFBVXhQLENBQVY7SUFGTDtHQURELE1BS087VUFDQ3dQLFVBQVV4UCxDQUFWLEVBQWErTixLQUFiLENBQVA7OztRQUdLbUksR0FBUDs7Ozs7Ozs7Ozs7Ozs7QUFjRCxTQUFTd0MseUJBQVQsQ0FBbUN2QyxTQUFuQyxFQUE4Q3pJLE9BQTlDLEVBQXVESyxLQUF2RCxFQUE4RHVLLFVBQTlELEVBQTBFO0tBQ3JFcEMsTUFBTSxJQUFWO0tBQ01wUyxPQUFPMkosUUFBUTdDLEdBQVIsQ0FBWXVMLFNBQVosRUFBdUIsWUFBdkIsRUFBcUMsRUFBckMsQ0FBYjtLQUNNbk8sTUFBTWxFLEtBQUtpSyxNQUFNOU8sSUFBWCxFQUFpQjZULFNBQTdCO0tBQ01BLFlBQVl0TixPQUFPRCxJQUFQLENBQVl5QyxHQUFaLENBQWxCO01BQ0ssSUFBSWhJLElBQUksQ0FBYixFQUFnQkEsSUFBSThTLFVBQVUvUyxNQUFkLElBQXdCLENBQUNnTyxNQUFNbUssZ0JBQS9DLEVBQWlFbFksR0FBakUsRUFBc0U7TUFDakV5VSxNQUFNL0csT0FBTixFQUFlb0YsVUFBVTlTLENBQVYsQ0FBZixDQUFKLEVBQWtDO09BQzNCd1AsWUFBWXhILElBQUk4SyxVQUFVOVMsQ0FBVixDQUFKLENBQWxCO1VBQ080WSxrQkFBa0JwSixTQUFsQixFQUE2QnpCLEtBQTdCLEVBQW9DTCxPQUFwQyxFQUE2QzRLLFVBQTdDLENBQVA7OztRQUdLcEMsR0FBUDs7O0FDaDBCRDs7Ozs7QUNHQTs7Ozs7O0lBS00yQzs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsrQkFTUTlLLE9BQU9DLFVBQVU7T0FDekIsS0FBS3dELGNBQUwsQ0FBb0I5TyxnQkFBeEIsRUFBMEM7UUFDckMsS0FBS29XLGdCQUFMLENBQXNCL0ssS0FBdEIsQ0FBSixFQUFrQztTQUMzQmhGLFFBQVFnRixNQUFNN1EsT0FBTixDQUFjLEdBQWQsRUFBbUIsQ0FBbkIsQ0FBZDtTQUNNZ1gsWUFBWW5HLE1BQU05USxTQUFOLENBQWdCLENBQWhCLEVBQW1COEwsS0FBbkIsQ0FBbEI7U0FDTThKLFdBQVc5RSxNQUFNOVEsU0FBTixDQUFnQjhMLFFBQVEsQ0FBeEIsQ0FBakI7WUFDT3VNLFNBQVMsS0FBSzlELGNBQWQsRUFBOEIwQyxTQUE5QixFQUF5Q3JCLFFBQXpDLEVBQW1EN0UsUUFBbkQsQ0FBUDtLQUpELE1BS087WUFDQzhELEdBQUcsS0FBS04sY0FBUixFQUF3QnpELEtBQXhCLEVBQStCQyxRQUEvQixDQUFQOztJQVBGLE1BU087bUpBQ29CRCxLQUExQixFQUFpQ0MsUUFBakM7Ozs7Ozs7Ozs7Ozs7bUNBVWVELE9BQU87VUFDaEJBLE1BQU1WLE1BQU4sQ0FBYSxDQUFiLEVBQWdCLENBQWhCLE1BQXVCLFdBQTlCOzs7Ozs7Ozs7Ozt1Q0FRb0JVLE9BQU87T0FDdkIsQ0FBQyxLQUFLeUQsY0FBTixJQUF3QixDQUFDLEtBQUtBLGNBQUwsQ0FBb0I5TyxnQkFBakQsRUFBbUU7V0FDM0QsSUFBUDs7VUFFTyxLQUFLb1csZ0JBQUwsQ0FBc0IvSyxLQUF0QixLQUFnQ0EsTUFBTTdRLE9BQU4sQ0FBYyxHQUFkLEVBQW1CLENBQW5CLE1BQTBCLENBQUMsQ0FBNUQsSUFDTmliLGNBQWMsS0FBSzNHLGNBQW5CLEVBQW1DekQsS0FBbkMsQ0FERDs7Ozs7Ozs7Ozs7OztvQ0FXaUJBLE9BQU87VUFDakJnTCw2SUFBd0JoTCxLQUF4QixLQUFrQyxLQUFLaUwsb0JBQUwsQ0FBMEJqTCxLQUExQixDQUF6Qzs7OztFQXZEaUNtRDs7QUNMbkM7Ozs7SUFHTStIOzs7Ozs7Ozs7Ozs7Ozs0Q0FPNEI7T0FDNUJBLFNBQVNDLG1CQUFULEtBQWlDOWMsU0FBckMsRUFBZ0Q7YUFDdEM4YyxtQkFBVCxHQUErQjtnQkFDbkJELFNBQVNFLHdCQUFULENBQWtDLFdBQWxDLENBRG1CO2lCQUVsQkYsU0FBU0Usd0JBQVQsQ0FBa0MsWUFBbEM7S0FGYjs7VUFLTUYsU0FBU0MsbUJBQWhCOzs7Ozs7Ozs7OzsyQ0FRK0JqYSxNQUFNO09BQy9CbWEsV0FBVyxDQUFDLFFBQUQsRUFBVyxJQUFYLEVBQWlCLEdBQWpCLEVBQXNCLEVBQXRCLENBQWpCO09BQ01DLGdCQUFnQnhULE9BQU95VCxlQUFQLENBQXVCcmEsSUFBdkIsRUFBNkIsQ0FBN0IsRUFBZ0MsQ0FBaEMsRUFBbUNBLEtBQUtoQyxTQUFMLENBQWUsQ0FBZixFQUFrQixDQUFsQixFQUFxQnNjLFdBQXJCLEVBQW5DLENBQXRCO09BQ01DLFdBQVcsQ0FBSUgsYUFBSixVQUEyQkEsYUFBM0IsVUFBa0RBLGFBQWxELFVBQXlFcGEsSUFBekUsU0FBakI7UUFDSyxJQUFJZSxJQUFJLENBQWIsRUFBZ0JBLElBQUlvWixTQUFTclosTUFBN0IsRUFBcUNDLEdBQXJDLEVBQTBDO1FBQ3JDaVosU0FBU1EsaUJBQVQsQ0FBMkI1VyxLQUEzQixDQUFpQ3VXLFNBQVNwWixDQUFULElBQWNxWixhQUEvQyxNQUFrRWpkLFNBQXRFLEVBQWlGO1lBQ3pFZ2QsU0FBU3BaLENBQVQsRUFBWWlHLFdBQVosS0FBNEJ1VCxTQUFTeFosQ0FBVCxDQUFuQzs7O1VBR1FmLElBQVY7Ozs7Ozs7Ozs7Ozt5Q0FTNkI7T0FDekJnYSxTQUFTUyxnQkFBVCxLQUE4QnRkLFNBQWxDLEVBQTZDO1FBQ3RDdWQsa0JBQWtCLDJDQUF4QjtRQUNNak0sVUFBVS9SLFNBQVNpSCxhQUFULENBQXVCLEtBQXZCLENBQWhCO1dBQ084SyxPQUFQLEVBQWdCaU0sZUFBaEI7YUFDU0QsZ0JBQVQsR0FBNEJDLG9CQUFvQmpNLFFBQVFzSCxTQUF4RDs7VUFFTWlFLFNBQVNTLGdCQUFoQjs7Ozs7O0FBSUZULFNBQVNRLGlCQUFULEdBQTZCOWQsU0FBU2lILGFBQVQsQ0FBdUIsS0FBdkIsQ0FBN0I7QUFDQXFXLFNBQVNDLG1CQUFULEdBQStCOWMsU0FBL0I7QUFDQTZjLFNBQVNTLGdCQUFULEdBQTRCdGQsU0FBNUI7O0FDeERBOzs7O0lBR013ZDs7Ozs7Ozs7Ozs7Ozs7O3NCQVFNQyxNQUFNQyxjQUFjO09BQ3hCelYsU0FBUzFJLFNBQVNpSCxhQUFULENBQXVCLFFBQXZCLENBQWY7VUFDT2lYLElBQVAsR0FBY0EsSUFBZDtPQUNJQyxZQUFKLEVBQWtCO2lCQUNKelYsTUFBYjtJQURELE1BRU87YUFDR0gsSUFBVCxDQUFjakIsV0FBZCxDQUEwQm9CLE1BQTFCOztnQkFFWUEsTUFBYjtVQUNPQSxNQUFQOzs7Ozs7Ozs7Ozs7Ozs7MEJBWWN0QixLQUFLZ1gsY0FBY0QsY0FBYztPQUN6Q3pWLFNBQVMxSSxTQUFTaUgsYUFBVCxDQUF1QixRQUF2QixDQUFmO1VBQ09HLEdBQVAsR0FBYUEsR0FBYjs7T0FFTXhCLFdBQVcsU0FBWEEsUUFBVyxHQUFXO2lCQUNkOEMsTUFBYjtvQkFDZ0IwVixjQUFoQjtJQUZEO1FBSUsxVixNQUFMLEVBQWEsTUFBYixFQUFxQjlDLFFBQXJCO1FBQ0s4QyxNQUFMLEVBQWEsT0FBYixFQUFzQjlDLFFBQXRCOztPQUVJdVksWUFBSixFQUFrQjtpQkFDSnpWLE1BQWI7SUFERCxNQUVPO2FBQ0dILElBQVQsQ0FBY2pCLFdBQWQsQ0FBMEJvQixNQUExQjs7O1VBR01BLE1BQVA7Ozs7Ozs7Ozs7Ozs7Ozs0QkFZZ0JBLFFBQVEwVixjQUFjRCxjQUFjO09BQzlDdlksV0FBVyxTQUFYQSxRQUFXLEdBQVc7b0JBQ1h3WSxjQUFoQjtJQUREO09BR0kxVixPQUFPcEYsSUFBUCxJQUFlb0YsT0FBT3BGLElBQVAsS0FBZ0IsaUJBQW5DLEVBQXNEO1VBQy9Db0MsUUFBTixDQUFlRSxRQUFmOzs7Z0JBR1k4QyxNQUFiO09BQ0lBLE9BQU90QixHQUFYLEVBQWdCO1dBQ1I2VyxXQUFXSSxPQUFYLENBQW1CM1YsT0FBT3RCLEdBQTFCLEVBQStCZ1gsWUFBL0IsRUFBNkNELFlBQTdDLENBQVA7SUFERCxNQUVPO1VBQ0F6WSxRQUFOLENBQWVFLFFBQWY7V0FDT3FZLFdBQVd0WSxHQUFYLENBQWUrQyxPQUFPd1YsSUFBdEIsRUFBNEJDLFlBQTVCLENBQVA7Ozs7Ozs7Ozs7Ozs7OztzQ0FZeUJwTSxTQUFTcU0sY0FBY0QsY0FBYztPQUN6REcsVUFBVXZNLFFBQVF5SixnQkFBUixDQUF5QixRQUF6QixDQUFoQjtPQUNJOEMsUUFBUWxhLE1BQVosRUFBb0I7ZUFDUm1hLGlCQUFYLENBQTZCRCxPQUE3QixFQUFzQyxDQUF0QyxFQUF5Q0YsWUFBekMsRUFBdURELFlBQXZEO0lBREQsTUFFTyxJQUFJQyxZQUFKLEVBQWtCO1VBQ2xCMVksUUFBTixDQUFlMFksWUFBZjs7Ozs7Ozs7Ozs7Ozs7OztvQ0FhdUJFLFNBQVNsUixPQUFPZ1IsY0FBY0QsY0FBYztjQUN6REssU0FBWCxDQUFxQkYsUUFBUUcsSUFBUixDQUFhclIsS0FBYixDQUFyQixFQUEwQyxZQUFXO1FBQ2hEQSxRQUFRa1IsUUFBUWxhLE1BQVIsR0FBaUIsQ0FBN0IsRUFBZ0M7Z0JBQ3BCbWEsaUJBQVgsQ0FBNkJELE9BQTdCLEVBQXNDbFIsUUFBUSxDQUE5QyxFQUFpRGdSLFlBQWpELEVBQStERCxZQUEvRDtLQURELE1BRU8sSUFBSUMsWUFBSixFQUFrQjtXQUNsQjFZLFFBQU4sQ0FBZTBZLFlBQWY7O0lBSkYsRUFNR0QsWUFOSDs7Ozs7O0FDekdGOzs7O0lBR01POzs7Ozs7Ozs7Ozs7Ozs7c0JBUU1SLE1BQU1DLGNBQWM7T0FDeEJqWCxRQUFRbEgsU0FBU2lILGFBQVQsQ0FBdUIsT0FBdkIsQ0FBZDtTQUNNb1MsU0FBTixHQUFrQjZFLElBQWxCO09BQ0lDLFlBQUosRUFBa0I7aUJBQ0pqWCxLQUFiO0lBREQsTUFFTzthQUNHcUIsSUFBVCxDQUFjakIsV0FBZCxDQUEwQkosS0FBMUI7O1VBRU1BLEtBQVA7Ozs7Ozs7Ozs7Ozs7OzswQkFZY21FLE1BQU0rUyxjQUFjRCxjQUFjO09BQzFDL1MsT0FBT3BMLFNBQVNpSCxhQUFULENBQXVCLE1BQXZCLENBQWI7UUFDSzBYLEdBQUwsR0FBVyxZQUFYO1FBQ0t0VCxJQUFMLEdBQVlBLElBQVo7b0JBQ2lCdVQsUUFBakIsQ0FBMEJ4VCxJQUExQixFQUFnQ2dULFlBQWhDLEVBQThDRCxZQUE5QztVQUNPL1MsSUFBUDs7Ozs7Ozs7Ozs7Ozs7OzJCQVllbEUsT0FBT2tYLGNBQWNELGNBQWM7T0FDNUN2WSxXQUFXLFNBQVhBLFFBQVcsR0FBVztvQkFDWHdZLGNBQWhCO0lBREQ7T0FHSWxYLE1BQU15WCxHQUFOLElBQWF6WCxNQUFNeVgsR0FBTixLQUFjLFlBQS9CLEVBQTZDO1VBQ3RDalosUUFBTixDQUFlRSxRQUFmOzs7O09BSUdzQixNQUFNa1QsT0FBTixLQUFrQixPQUF0QixFQUErQjtVQUN4QjFVLFFBQU4sQ0FBZUUsUUFBZjtJQURELE1BRU87U0FDRHNCLEtBQUwsRUFBWSxNQUFaLEVBQW9CdEIsUUFBcEI7U0FDS3NCLEtBQUwsRUFBWSxPQUFaLEVBQXFCdEIsUUFBckI7OztPQUdHdVksWUFBSixFQUFrQjtpQkFDSmpYLEtBQWI7SUFERCxNQUVPO2FBQ0dxQixJQUFULENBQWNqQixXQUFkLENBQTBCSixLQUExQjs7O1VBR01BLEtBQVA7Ozs7Ozs7Ozs7Ozs7O3FDQVd5QjZLLFNBQVNxTSxjQUFjRCxjQUFjO09BQ3hEVSxTQUFTOU0sUUFBUXlKLGdCQUFSLENBQXlCLFlBQXpCLENBQWY7T0FDSXFELE9BQU96YSxNQUFQLEtBQWtCLENBQWxCLElBQXVCZ2EsWUFBM0IsRUFBeUM7VUFDbEMxWSxRQUFOLENBQWUwWSxZQUFmOzs7O09BSUdVLFlBQVksQ0FBaEI7T0FDTWxaLFdBQVcsU0FBWEEsUUFBVyxHQUFXO1FBQ3ZCd1ksZ0JBQWdCLEVBQUVVLFNBQUYsS0FBZ0JELE9BQU96YSxNQUEzQyxFQUFtRDtXQUM1Q3NCLFFBQU4sQ0FBZTBZLFlBQWY7O0lBRkY7UUFLSyxJQUFJL1osSUFBSSxDQUFiLEVBQWdCQSxJQUFJd2EsT0FBT3phLE1BQTNCLEVBQW1DQyxHQUFuQyxFQUF3QztxQkFDdEJ1YSxRQUFqQixDQUEwQkMsT0FBT3hhLENBQVAsQ0FBMUIsRUFBcUN1QixRQUFyQyxFQUErQ3VZLFlBQS9DOzs7Ozs7O0FDL0ZILElBQU1ZLGdCQUFnQjthQUNULFdBRFM7YUFFVCxVQUZTO2VBR1AsYUFITztlQUlQO0NBSmY7QUFNQWxWLE9BQU9ELElBQVAsQ0FBWW1WLGFBQVosRUFBMkJqUixPQUEzQixDQUFtQyxVQUFTeUssU0FBVCxFQUFvQjtxQkFDbENBLFNBQXBCLEVBQStCO1lBQ3BCLElBRG9CO1dBRXJCLGlCQUFTM1MsUUFBVCxFQUFtQndNLEtBQW5CLEVBQTBCO09BQzVCNE0sVUFBVTVNLE1BQU02TSxhQUF0QjtPQUNNL1YsU0FBU2tKLE1BQU15SSxjQUFyQjtPQUNJLENBQUNtRSxPQUFELElBQWFBLFlBQVk5VixNQUFaLElBQXNCLENBQUNxRyxTQUFTckcsTUFBVCxFQUFpQjhWLE9BQWpCLENBQXhDLEVBQW9FO1VBQzdERSxVQUFOLEdBQW1CM0csU0FBbkI7V0FDTzNTLFNBQVN3TSxLQUFULENBQVA7O0dBUDRCO2lCQVVmMk0sY0FBY3hHLFNBQWQ7RUFWaEI7Q0FERDs7QUFlQSxJQUFNNEcsb0JBQW9CO1lBQ2QsY0FEYzthQUViO0NBRmI7QUFJQXRWLE9BQU9ELElBQVAsQ0FBWXVWLGlCQUFaLEVBQStCclIsT0FBL0IsQ0FBdUMsVUFBU3NSLFNBQVQsRUFBb0I7S0FDcEQ3RyxZQUFZNEcsa0JBQWtCQyxTQUFsQixDQUFsQjtxQkFDb0I3RyxTQUFwQixFQUErQjtTQUN2QixJQUR1QjtZQUVwQixJQUZvQjtXQUdyQixpQkFBUzNTLFFBQVQsRUFBbUJ3TSxLQUFuQixFQUEwQjtTQUM1QjhNLFVBQU4sR0FBbUIzRyxTQUFuQjtVQUNPM1MsU0FBU3dNLEtBQVQsQ0FBUDtHQUw2QjtpQkFPZmtMLFNBQVMrQix1QkFBVCxHQUFtQ0QsU0FBbkM7RUFQaEI7Q0FGRDs7QUM5QkE7Ozs7Ozs7Ozs7QUFVQSxBQUtBOzs7Ozs7OztBQVFBLElBQUlFLFdBQVcsU0FBWEEsUUFBVyxHQUFXLEVBQTFCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQTZCQUEsU0FBU3RhLFNBQVQsQ0FBbUJ4QixJQUFuQixHQUEwQixZQUFXLEVBQXJDOzs7Ozs7Ozs7O0FBV0E4YixTQUFTQyxtQkFBVCxHQUErQixnQkFBL0I7Ozs7Ozs7Ozs7OztBQWFBRCxTQUFTRSxpQkFBVCxHQUE2QixVQUFTL2QsSUFBVCxFQUFlO09BQ3JDdUQsU0FBTCxDQUFleEIsSUFBZixHQUFzQi9CLEtBQUt1RCxTQUFMLENBQWV4QixJQUFyQztPQUNLd0IsU0FBTCxDQUFleWEsY0FBZixHQUFnQyxJQUFoQztDQUZGOzs7Ozs7O0FBV0FILFNBQVNJLGVBQVQsR0FBMkIsVUFBU3pXLFNBQVQsRUFBaUI7TUFDdEMsQ0FBQ0EsU0FBTCxFQUFhO1dBQ0osS0FBUDs7TUFFRTtXQUNLLENBQUMsQ0FBQ0EsVUFBT3dXLGNBQWhCO0dBREYsQ0FFRSxPQUFPcFosQ0FBUCxFQUFVOztXQUVILEtBQVA7O0NBUko7Ozs7Ozs7Ozs7Ozs7OztBQTBCQSxJQUFJc1osVUFBVSxTQUFWQSxPQUFVLENBQVN6ZSxFQUFULEVBQWE7TUFDckI2UyxPQUFPdFAsTUFBTU8sU0FBTixDQUFnQnNLLEtBQWhCLENBQXNCcEssSUFBdEIsQ0FBMkJtRSxTQUEzQixFQUFzQyxDQUF0QyxDQUFYO1NBQ08sWUFBVzs7O1FBR1p1VyxVQUFVN0wsS0FBS3pFLEtBQUwsRUFBZDtZQUNRMUssSUFBUixDQUFhNFAsS0FBYixDQUFtQm9MLE9BQW5CLEVBQTRCdlcsU0FBNUI7V0FDT25JLEdBQUdzVCxLQUFILENBQVMsSUFBVCxFQUFlb0wsT0FBZixDQUFQO0dBTEY7Q0FGRjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUEyREEsSUFBSUMscUJBQXFCLFNBQXJCQSxrQkFBcUIsQ0FBU0MsUUFBVCxFQUFtQmphLFdBQW5CLEVBQWdDOzs7Ozs7T0FNbERrYSxNQUFMLEdBQWNGLG1CQUFtQkcsTUFBbkIsQ0FBMEJDLE9BQXhDOzs7Ozs7O09BT0tDLE9BQUwsR0FBZXpmLFNBQWY7Ozs7OztPQU1LbU0sT0FBTCxHQUFlLElBQWY7Ozs7Ozs7T0FPS3VULGdCQUFMLEdBQXdCLElBQXhCOzs7Ozs7T0FNS0MsVUFBTCxHQUFrQixLQUFsQjs7TUFFSVAsbUJBQW1CUSx5QkFBbkIsR0FBK0MsQ0FBbkQsRUFBc0Q7Ozs7Ozs7Ozs7O1NBVy9DQyxxQkFBTCxHQUE2QixDQUE3QjtHQVhGLE1BWU8sSUFBSVQsbUJBQW1CUSx5QkFBbkIsS0FBaUQsQ0FBckQsRUFBd0Q7Ozs7Ozs7OztTQVN4REUsc0JBQUwsR0FBOEIsS0FBOUI7OztNQUdFO1FBQ0VqTSxPQUFPLElBQVg7YUFDU3BQLElBQVQsQ0FDRVcsV0FERixFQUNlLFVBQVNvRixLQUFULEVBQWdCO1dBQ3RCdVYsUUFBTCxDQUFjWCxtQkFBbUJHLE1BQW5CLENBQTBCUyxTQUF4QyxFQUFtRHhWLEtBQW5EO0tBRkosRUFHSyxVQUFTeVYsTUFBVCxFQUFpQjtXQUNiRixRQUFMLENBQWNYLG1CQUFtQkcsTUFBbkIsQ0FBMEJXLFFBQXhDLEVBQWtERCxNQUFsRDtLQUpKO0dBRkYsQ0FRRSxPQUFPcmEsQ0FBUCxFQUFVO1NBQ0xtYSxRQUFMLENBQWNYLG1CQUFtQkcsTUFBbkIsQ0FBMEJXLFFBQXhDLEVBQWtEdGEsQ0FBbEQ7O0NBbkVKOzs7Ozs7Ozs7OztBQWdGQXdaLG1CQUFtQlEseUJBQW5CLEdBQStDLENBQS9DOzs7Ozs7OztBQVNBUixtQkFBbUJHLE1BQW5CLEdBQTRCOztXQUVqQixDQUZpQjs7O1dBS2pCLENBTGlCOzs7YUFRZixDQVJlOzs7WUFXaEI7Q0FYWjs7Ozs7Ozs7Ozs7Ozs7QUEyQkFILG1CQUFtQmUsY0FBbkIsR0FBb0MsSUFBcEM7Ozs7Ozs7O0FBU0FmLG1CQUFtQmdCLE9BQW5CLEdBQTZCLFVBQVNDLFNBQVQsRUFBb0I7U0FDeEMsSUFBSWpCLGtCQUFKLENBQXVCLFVBQVNnQixPQUFULEVBQWtCO1lBQ3BDQyxTQUFSO0dBREcsQ0FBUDtDQURGOzs7Ozs7O0FBWUFqQixtQkFBbUJrQixNQUFuQixHQUE0QixVQUFTQyxVQUFULEVBQXFCO1NBQ3hDLElBQUluQixrQkFBSixDQUF1QixVQUFTZ0IsT0FBVCxFQUFrQkUsTUFBbEIsRUFBMEI7V0FDN0NDLFVBQVA7R0FERyxDQUFQO0NBREY7Ozs7Ozs7O0FBYUFuQixtQkFBbUJvQixJQUFuQixHQUEwQixVQUFTQyxRQUFULEVBQW1CO1NBQ3BDLElBQUlyQixrQkFBSixDQUF1QixVQUFTZ0IsT0FBVCxFQUFrQkUsTUFBbEIsRUFBMEI7UUFDaEQsQ0FBQ0csU0FBUzljLE1BQWQsRUFBc0I7Y0FDWjNELFNBQVI7O1NBRUcsSUFBSTRELElBQUksQ0FBUixFQUFXOGMsT0FBaEIsRUFBMEJBLFVBQVVELFNBQVM3YyxDQUFULENBQXBDLEVBQWtEQSxHQUFsRCxFQUF1RDtjQUM3Q2IsSUFBUixDQUFhcWQsT0FBYixFQUFzQkUsTUFBdEI7O0dBTEMsQ0FBUDtDQURGOzs7Ozs7Ozs7QUFtQkFsQixtQkFBbUJ1QixHQUFuQixHQUF5QixVQUFTRixRQUFULEVBQW1CO1NBQ25DLElBQUlyQixrQkFBSixDQUF1QixVQUFTZ0IsT0FBVCxFQUFrQkUsTUFBbEIsRUFBMEI7UUFDaERNLFlBQVlILFNBQVM5YyxNQUF6QjtRQUNJK0gsU0FBUyxFQUFiOztRQUVJLENBQUNrVixTQUFMLEVBQWdCO2NBQ05sVixNQUFSOzs7O1FBSUVtVixZQUFZLFNBQVpBLFNBQVksQ0FBU2xVLEtBQVQsRUFBZ0JuQyxLQUFoQixFQUF1Qjs7YUFFOUJtQyxLQUFQLElBQWdCbkMsS0FBaEI7VUFDSW9XLGNBQWMsQ0FBbEIsRUFBcUI7Z0JBQ1hsVixNQUFSOztLQUpKOztRQVFJb1YsV0FBVyxTQUFYQSxRQUFXLENBQVNiLE1BQVQsRUFBaUI7YUFDdkJBLE1BQVA7S0FERjs7U0FJSyxJQUFJcmMsSUFBSSxDQUFSLEVBQVc4YyxPQUFoQixFQUEwQkEsVUFBVUQsU0FBUzdjLENBQVQsQ0FBcEMsRUFBa0RBLEdBQWxELEVBQXVEO2NBQzdDYixJQUFSLENBQWFtYyxRQUFRMkIsU0FBUixFQUFtQmpkLENBQW5CLENBQWIsRUFBb0NrZCxRQUFwQzs7R0F0QkMsQ0FBUDtDQURGOzs7Ozs7Ozs7QUFvQ0ExQixtQkFBbUIyQixjQUFuQixHQUFvQyxVQUFTTixRQUFULEVBQW1CO1NBQzlDLElBQUlyQixrQkFBSixDQUF1QixVQUFTZ0IsT0FBVCxFQUFrQkUsTUFBbEIsRUFBMEI7UUFDaERVLFdBQVdQLFNBQVM5YyxNQUF4QjtRQUNJc2QsVUFBVSxFQUFkOztRQUVJLENBQUNELFFBQUwsRUFBZTtjQUNMaGhCLFNBQVI7Ozs7UUFJRTZnQixZQUFZLFNBQVpBLFNBQVksQ0FBU3JXLEtBQVQsRUFBZ0I7Y0FDdEJBLEtBQVI7S0FERjs7UUFJSXNXLFdBQVcsU0FBWEEsUUFBVyxDQUFTblUsS0FBVCxFQUFnQnNULE1BQWhCLEVBQXdCOztjQUU3QnRULEtBQVIsSUFBaUJzVCxNQUFqQjtVQUNJZSxhQUFhLENBQWpCLEVBQW9CO2VBQ1hDLE9BQVA7O0tBSko7O1NBUUssSUFBSXJkLElBQUksQ0FBUixFQUFXOGMsT0FBaEIsRUFBMEJBLFVBQVVELFNBQVM3YyxDQUFULENBQXBDLEVBQWtEQSxHQUFsRCxFQUF1RDtjQUM3Q2IsSUFBUixDQUFhOGQsU0FBYixFQUF3QjNCLFFBQVE0QixRQUFSLEVBQWtCbGQsQ0FBbEIsQ0FBeEI7O0dBdEJDLENBQVA7Q0FERjs7Ozs7Ozs7Ozs7Ozs7Ozs7QUE0Q0F3YixtQkFBbUI3YSxTQUFuQixDQUE2QnhCLElBQTdCLEdBQW9DLFVBQVNtZSxlQUFULEVBQTBCQyxjQUExQixFQUEwQy9iLFdBQTFDLEVBQXVEO1NBQ2xGLEtBQUtnYyxnQkFBTCxDQUNMM2UsV0FBV3llLGVBQVgsSUFBOEJBLGVBQTlCLEdBQWdELElBRDNDLEVBRUx6ZSxXQUFXMGUsY0FBWCxJQUE2QkEsY0FBN0IsR0FBOEMsSUFGekMsRUFHTC9iLFdBSEssQ0FBUDtDQURGO0FBTUF5WixTQUFTRSxpQkFBVCxDQUEyQkssa0JBQTNCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXdCQUEsbUJBQW1CN2EsU0FBbkIsQ0FBNkI4YyxVQUE3QixHQUEwQyxVQUFTQyxVQUFULEVBQXFCbGMsV0FBckIsRUFBa0M7TUFDdEVELFdBQVcsU0FBWEEsUUFBVyxHQUFXO1FBQ3BCOztpQkFFU1YsSUFBWCxDQUFnQlcsV0FBaEI7S0FGRixDQUdFLE9BQU8wTCxHQUFQLEVBQVk7eUJBQ095USxnQkFBbkIsQ0FBb0M5YyxJQUFwQyxDQUF5QyxJQUF6QyxFQUErQ3FNLEdBQS9DOztHQUxKOztPQVNLMFEsaUJBQUwsQ0FBdUI7V0FDZCxJQURjO2dCQUVUcmMsUUFGUztpQkFHUkE7R0FIZjtTQUtPLElBQVA7Q0FmRjs7Ozs7Ozs7Ozs7Ozs7O0FBZ0NBaWEsbUJBQW1CN2EsU0FBbkIsQ0FBNkJrZCxTQUE3QixHQUF5QyxVQUFTQyxVQUFULEVBQXFCdGMsV0FBckIsRUFBa0M7U0FDbEUsS0FBS2djLGdCQUFMLENBQXNCLElBQXRCLEVBQTRCTSxVQUE1QixFQUF3Q3RjLFdBQXhDLENBQVA7Q0FERjs7Ozs7QUFPQWdhLG1CQUFtQjdhLFNBQW5CLENBQTZCb2QsS0FBN0IsR0FBcUN2QyxtQkFBbUI3YSxTQUFuQixDQUE2QmtkLFNBQWxFOzs7Ozs7Ozs7Ozs7OztBQWVBckMsbUJBQW1CN2EsU0FBbkIsQ0FBNkJxZCxNQUE3QixHQUFzQyxVQUFTQyxXQUFULEVBQXNCO01BQ3RELEtBQUt2QyxNQUFMLEtBQWdCRixtQkFBbUJHLE1BQW5CLENBQTBCQyxPQUE5QyxFQUF1RDtVQUMvQ3RhLEdBQU4sQ0FBVSxZQUFXO1VBQ2Y0TCxNQUFNLElBQUlzTyxtQkFBbUIwQyxpQkFBdkIsQ0FBeUNELFdBQXpDLENBQVY7VUFDSUUscUJBQUosR0FBNEIsSUFBNUI7V0FDS0MsZUFBTCxDQUFxQmxSLEdBQXJCO0tBSEYsRUFJRyxJQUpIOztDQUZKOzs7Ozs7OztBQWlCQXNPLG1CQUFtQjdhLFNBQW5CLENBQTZCeWQsZUFBN0IsR0FBK0MsVUFBU2xSLEdBQVQsRUFBYztNQUN2RCxLQUFLd08sTUFBTCxLQUFnQkYsbUJBQW1CRyxNQUFuQixDQUEwQkMsT0FBOUMsRUFBdUQ7UUFDakQsS0FBS3JULE9BQVQsRUFBa0I7O1dBRVhBLE9BQUwsQ0FBYThWLFlBQWIsQ0FBMEIsSUFBMUIsRUFBZ0NuUixHQUFoQztLQUZGLE1BR087V0FDQWlQLFFBQUwsQ0FBY1gsbUJBQW1CRyxNQUFuQixDQUEwQlcsUUFBeEMsRUFBa0RwUCxHQUFsRDs7O0NBTk47Ozs7Ozs7Ozs7OztBQXNCQXNPLG1CQUFtQjdhLFNBQW5CLENBQTZCMGQsWUFBN0IsR0FBNEMsVUFBU0MsWUFBVCxFQUF1QnBSLEdBQXZCLEVBQTRCO01BQ2xFLENBQUMsS0FBSzRPLGdCQUFWLEVBQTRCOzs7TUFHeEJ5QyxhQUFhLENBQWpCO01BQ0lDLGFBQWEsQ0FBQyxDQUFsQjs7OztPQUlLLElBQUl4ZSxJQUFJLENBQVIsRUFBV3llLEtBQWhCLEVBQXdCQSxRQUFRLEtBQUszQyxnQkFBTCxDQUFzQjliLENBQXRCLENBQWhDLEVBQTJEQSxHQUEzRCxFQUFnRTtRQUMxRHlJLFFBQVFnVyxNQUFNaFcsS0FBbEI7UUFDSUEsS0FBSixFQUFXOztVQUVMQSxVQUFVNlYsWUFBZCxFQUE0QjtxQkFDYnRlLENBQWI7O1VBRUV3ZSxjQUFjLENBQWQsSUFBbUJELGFBQWEsQ0FBcEMsRUFBdUM7Ozs7Ozs7O01BUXZDQyxjQUFjLENBQWxCLEVBQXFCO1FBQ2YsS0FBSzlDLE1BQUwsS0FBZ0JGLG1CQUFtQkcsTUFBbkIsQ0FBMEJDLE9BQTFDLElBQXFEMkMsZUFBZSxDQUF4RSxFQUEyRTtXQUNwRUgsZUFBTCxDQUFxQmxSLEdBQXJCO0tBREYsTUFFTztVQUNEd1IsZ0JBQWdCLEtBQUs1QyxnQkFBTCxDQUFzQmxiLE1BQXRCLENBQTZCNGQsVUFBN0IsRUFBeUMsQ0FBekMsRUFBNEMsQ0FBNUMsQ0FBcEI7V0FDS0csZ0JBQUwsQ0FDRUQsYUFERixFQUNpQmxELG1CQUFtQkcsTUFBbkIsQ0FBMEJXLFFBRDNDLEVBQ3FEcFAsR0FEckQ7OztDQTdCTjs7Ozs7Ozs7Ozs7QUE2Q0FzTyxtQkFBbUI3YSxTQUFuQixDQUE2QmlkLGlCQUE3QixHQUFpRCxVQUFTYyxhQUFULEVBQXdCO01BQ25FLENBQUMsQ0FBQyxLQUFLNUMsZ0JBQU4sSUFBMEIsQ0FBQyxLQUFLQSxnQkFBTCxDQUFzQi9iLE1BQWxELE1BQ0QsS0FBSzJiLE1BQUwsS0FBZ0JGLG1CQUFtQkcsTUFBbkIsQ0FBMEJTLFNBQTFDLElBQ0QsS0FBS1YsTUFBTCxLQUFnQkYsbUJBQW1CRyxNQUFuQixDQUEwQlcsUUFGeEMsQ0FBSixFQUV1RDtTQUNoRHNDLGtCQUFMOztNQUVFLENBQUMsS0FBSzlDLGdCQUFWLEVBQTRCO1NBQ3JCQSxnQkFBTCxHQUF3QixFQUF4Qjs7T0FFR0EsZ0JBQUwsQ0FBc0J2YixJQUF0QixDQUEyQm1lLGFBQTNCO0NBVEY7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWdDQWxELG1CQUFtQjdhLFNBQW5CLENBQTZCNmMsZ0JBQTdCLEdBQWdELFVBQ2hEcUIsV0FEZ0QsRUFDbkNmLFVBRG1DLEVBQ3ZCdGMsV0FEdUIsRUFDVjs7TUFFaENrZCxnQkFBZ0I7V0FDWCxJQURXO2lCQUVMLElBRks7Z0JBR047R0FIZDs7Z0JBTWNqVyxLQUFkLEdBQXNCLElBQUkrUyxrQkFBSixDQUF1QixVQUFTZ0IsT0FBVCxFQUFrQkUsTUFBbEIsRUFBMEI7O2tCQUV2RG1DLFdBQWQsR0FBNEJBLGNBQWMsVUFBU2pZLEtBQVQsRUFBZ0I7VUFDcEQ7WUFDRWtZLFNBQVNELFlBQVloZSxJQUFaLENBQWlCVyxXQUFqQixFQUE4Qm9GLEtBQTlCLENBQWI7Z0JBQ1FrWSxNQUFSO09BRkYsQ0FHRSxPQUFPNVIsR0FBUCxFQUFZO2VBQ0xBLEdBQVA7O0tBTHdCLEdBT3hCc1AsT0FQSjs7O2tCQVVjc0IsVUFBZCxHQUEyQkEsYUFBYSxVQUFTekIsTUFBVCxFQUFpQjtVQUNuRDtZQUNFeUMsU0FBU2hCLFdBQVdqZCxJQUFYLENBQWdCVyxXQUFoQixFQUE2QjZhLE1BQTdCLENBQWI7WUFDSSxDQUFDL2QsTUFBTXdnQixNQUFOLENBQUQsSUFBa0J6QyxPQUFPOEIscUJBQTdCLEVBQW9EOztpQkFFM0M5QixNQUFQO1NBRkYsTUFHTztrQkFDR3lDLE1BQVI7O09BTkosQ0FRRSxPQUFPNVIsR0FBUCxFQUFZO2VBQ0xBLEdBQVA7O0tBVnVCLEdBWXZCd1AsTUFaSjtHQVpvQixDQUF0Qjs7Z0JBMkJjalUsS0FBZCxDQUFvQkYsT0FBcEIsR0FBOEIsSUFBOUI7T0FDS3FWLGlCQUFMO2tEQUNvRGMsYUFEcEQ7U0FFT0EsY0FBY2pXLEtBQXJCO0NBdkNGOzs7Ozs7OztBQWlEQStTLG1CQUFtQjdhLFNBQW5CLENBQTZCb2Usa0JBQTdCLEdBQWtELFVBQVNuWSxLQUFULEVBQWdCO01BQzVELEtBQUs4VSxNQUFMLEtBQWdCRixtQkFBbUJHLE1BQW5CLENBQTBCcUQsT0FBOUMsRUFBdUQ7VUFDL0MsSUFBSTlpQixLQUFKLENBQVUsb0NBQVYsQ0FBTjs7T0FFR3dmLE1BQUwsR0FBY0YsbUJBQW1CRyxNQUFuQixDQUEwQkMsT0FBeEM7T0FDS08sUUFBTCxDQUFjWCxtQkFBbUJHLE1BQW5CLENBQTBCUyxTQUF4QyxFQUFtRHhWLEtBQW5EO0NBTEY7Ozs7Ozs7O0FBZUE0VSxtQkFBbUI3YSxTQUFuQixDQUE2QnNlLGlCQUE3QixHQUFpRCxVQUFTNUMsTUFBVCxFQUFpQjtNQUM1RCxLQUFLWCxNQUFMLEtBQWdCRixtQkFBbUJHLE1BQW5CLENBQTBCcUQsT0FBOUMsRUFBdUQ7VUFDL0MsSUFBSTlpQixLQUFKLENBQVUsb0NBQVYsQ0FBTjs7T0FFR3dmLE1BQUwsR0FBY0YsbUJBQW1CRyxNQUFuQixDQUEwQkMsT0FBeEM7T0FDS08sUUFBTCxDQUFjWCxtQkFBbUJHLE1BQW5CLENBQTBCVyxRQUF4QyxFQUFrREQsTUFBbEQ7Q0FMRjs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQTBCQWIsbUJBQW1CN2EsU0FBbkIsQ0FBNkJ3YixRQUE3QixHQUF3QyxVQUFTK0MsS0FBVCxFQUFnQjlZLENBQWhCLEVBQW1CO01BQ3JELEtBQUtzVixNQUFMLEtBQWdCRixtQkFBbUJHLE1BQW5CLENBQTBCQyxPQUE5QyxFQUF1RDs7OztNQUluRCxTQUFTeFYsQ0FBYixFQUFnQjtZQUNOb1YsbUJBQW1CRyxNQUFuQixDQUEwQlcsUUFBbEM7UUFDSSxJQUFJcFYsU0FBSixDQUFjLDZDQUFkLENBQUo7R0FGRixNQUlPLElBQUkrVCxTQUFTSSxlQUFULENBQXlCalYsQ0FBekIsQ0FBSixFQUFpQztnQ0FDUkEsQ0FBOUI7U0FDS3NWLE1BQUwsR0FBY0YsbUJBQW1CRyxNQUFuQixDQUEwQnFELE9BQXhDO01BQ0U3ZixJQUFGLENBQU8sS0FBSzRmLGtCQUFaLEVBQWdDLEtBQUtFLGlCQUFyQyxFQUF3RCxJQUF4RDs7R0FISyxNQU1BLElBQUlqZ0IsU0FBU29ILENBQVQsQ0FBSixFQUFpQjtRQUNsQjtVQUNFakgsT0FBT2lILEVBQUVqSCxJQUFiO1VBQ0lOLFdBQVdNLElBQVgsQ0FBSixFQUFzQjthQUNmZ2dCLFFBQUwsQ0FBYy9ZLENBQWQsRUFBaUJqSCxJQUFqQjs7O0tBSEosQ0FNRSxPQUFPNkMsQ0FBUCxFQUFVO2NBQ0Z3WixtQkFBbUJHLE1BQW5CLENBQTBCVyxRQUFsQztVQUNJdGEsQ0FBSjs7OztPQUlDNlosT0FBTCxHQUFlelYsQ0FBZjtPQUNLc1YsTUFBTCxHQUFjd0QsS0FBZDtPQUNLTixrQkFBTDs7TUFFSU0sVUFBVTFELG1CQUFtQkcsTUFBbkIsQ0FBMEJXLFFBQXBDLElBQWdELENBQUNsVyxFQUFFK1gscUJBQXZELEVBQThFO3VCQUN6RGlCLHNCQUFuQixDQUEwQyxJQUExQyxFQUFnRGhaLENBQWhEOztDQWpDSjs7Ozs7Ozs7Ozs7Ozs7OztBQW9EQW9WLG1CQUFtQjdhLFNBQW5CLENBQTZCd2UsUUFBN0IsR0FBd0MsVUFBU0UsUUFBVCxFQUFtQmxnQixJQUFuQixFQUF5QjtPQUMxRHVjLE1BQUwsR0FBY0YsbUJBQW1CRyxNQUFuQixDQUEwQnFELE9BQXhDO01BQ0lsQyxVQUFVLElBQWQ7TUFDSXdDLFNBQVMsS0FBYjs7TUFFSTlDLFVBQVUsU0FBVkEsT0FBVSxDQUFTNVYsS0FBVCxFQUFnQjtRQUN4QixDQUFDMFksTUFBTCxFQUFhO2VBQ0YsSUFBVDtjQUNRUCxrQkFBUixDQUEyQm5ZLEtBQTNCOztHQUhKOztNQU9JOFYsU0FBUyxTQUFUQSxNQUFTLENBQVNMLE1BQVQsRUFBaUI7UUFDeEIsQ0FBQ2lELE1BQUwsRUFBYTtlQUNGLElBQVQ7Y0FDUUwsaUJBQVIsQ0FBMEI1QyxNQUExQjs7R0FISjs7TUFPSTtTQUNHeGIsSUFBTCxDQUFVd2UsUUFBVixFQUFvQjdDLE9BQXBCLEVBQTZCRSxNQUE3QjtHQURGLENBRUUsT0FBTzFhLENBQVAsRUFBVTtXQUNIQSxDQUFQOztDQXRCSjs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBMkNBd1osbUJBQW1CN2EsU0FBbkIsQ0FBNkJpZSxrQkFBN0IsR0FBa0QsWUFBVztNQUN2RCxDQUFDLEtBQUs3QyxVQUFWLEVBQXNCO1NBQ2ZBLFVBQUwsR0FBa0IsSUFBbEI7VUFDTXphLEdBQU4sQ0FBVSxLQUFLaWUsaUJBQWYsRUFBa0MsSUFBbEM7O0NBSEo7Ozs7Ozs7QUFhQS9ELG1CQUFtQjdhLFNBQW5CLENBQTZCNGUsaUJBQTdCLEdBQWlELFlBQVc7U0FDbkQsS0FBS3pELGdCQUFMLElBQXlCLEtBQUtBLGdCQUFMLENBQXNCL2IsTUFBdEQsRUFBOEQ7UUFDeER5ZixVQUFVLEtBQUsxRCxnQkFBbkI7U0FDS0EsZ0JBQUwsR0FBd0IsRUFBeEI7O1NBRUssSUFBSTliLElBQUksQ0FBYixFQUFnQkEsSUFBSXdmLFFBQVF6ZixNQUE1QixFQUFvQ0MsR0FBcEMsRUFBeUM7V0FDbEMyZSxnQkFBTCxDQUFzQmEsUUFBUXhmLENBQVIsQ0FBdEIsRUFBa0MsS0FBSzBiLE1BQXZDLEVBQStDLEtBQUtHLE9BQXBEOzs7T0FHQ0UsVUFBTCxHQUFrQixLQUFsQjtDQVRGOzs7Ozs7Ozs7Ozs7O0FBd0JBUCxtQkFBbUI3YSxTQUFuQixDQUE2QmdlLGdCQUE3QixHQUFnRCxVQUNoREQsYUFEZ0QsRUFDakNRLEtBRGlDLEVBQzFCSixNQUQwQixFQUNsQjtNQUN4QkksVUFBVTFELG1CQUFtQkcsTUFBbkIsQ0FBMEJTLFNBQXhDLEVBQW1EO2tCQUNuQ3lDLFdBQWQsQ0FBMEJDLE1BQTFCO0dBREYsTUFFTztTQUNBVyx5QkFBTDtrQkFDYzNCLFVBQWQsQ0FBeUJnQixNQUF6Qjs7Q0FOSjs7Ozs7Ozs7O0FBa0JBdEQsbUJBQW1CN2EsU0FBbkIsQ0FBNkI4ZSx5QkFBN0IsR0FBeUQsWUFBVztNQUM5RGhKLENBQUo7TUFDSStFLG1CQUFtQlEseUJBQW5CLEdBQStDLENBQW5ELEVBQXNEO1NBQy9DdkYsSUFBSSxJQUFULEVBQWVBLEtBQUtBLEVBQUV3RixxQkFBdEIsRUFBNkN4RixJQUFJQSxFQUFFbE8sT0FBbkQsRUFBNEQ7bUJBQzdDa08sRUFBRXdGLHFCQUFmO1FBQ0VBLHFCQUFGLEdBQTBCLENBQTFCOztHQUhKLE1BS08sSUFBSVQsbUJBQW1CUSx5QkFBbkIsS0FBaUQsQ0FBckQsRUFBd0Q7U0FDeER2RixJQUFJLElBQVQsRUFBZUEsS0FBS0EsRUFBRXlGLHNCQUF0QixFQUE4Q3pGLElBQUlBLEVBQUVsTyxPQUFwRCxFQUE2RDtRQUN6RDJULHNCQUFGLEdBQTJCLEtBQTNCOzs7Q0FUTjs7Ozs7Ozs7Ozs7OztBQTBCQVYsbUJBQW1CNEQsc0JBQW5CLEdBQTRDLFVBQVN0QyxPQUFULEVBQWtCVCxNQUFsQixFQUEwQjtNQUNoRWIsbUJBQW1CUSx5QkFBbkIsR0FBK0MsQ0FBbkQsRUFBc0Q7WUFDNUNDLHFCQUFSLEdBQWdDeUQsV0FBVyxZQUFXO3lCQUNqQy9CLGdCQUFuQixDQUFvQzljLElBQXBDLENBQXlDLElBQXpDLEVBQStDd2IsTUFBL0M7S0FEOEIsRUFFN0JiLG1CQUFtQlEseUJBRlUsQ0FBaEM7R0FERixNQUtPLElBQUlSLG1CQUFtQlEseUJBQW5CLEtBQWlELENBQXJELEVBQXdEO1lBQ3JERSxzQkFBUixHQUFpQyxJQUFqQztVQUNNNWEsR0FBTixDQUFVLFlBQVc7VUFDZndiLFFBQVFaLHNCQUFaLEVBQW9DOzJCQUNmeUIsZ0JBQW5CLENBQW9DOWMsSUFBcEMsQ0FBeUMsSUFBekMsRUFBK0N3YixNQUEvQzs7S0FGSjs7Q0FSSjs7Ozs7Ozs7QUF1QkFiLG1CQUFtQm1DLGdCQUFuQixHQUFzQ3pjLE1BQU1DLGNBQTVDOzs7Ozs7Ozs7Ozs7OztBQWVBcWEsbUJBQW1CbUUsNEJBQW5CLEdBQWtELFVBQVMvUSxPQUFULEVBQWtCO3FCQUMvQytPLGdCQUFuQixHQUFzQy9PLE9BQXRDO0NBREY7Ozs7Ozs7Ozs7QUFjQTRNLG1CQUFtQjBDLGlCQUFuQjs7O2tCQUNjRCxXQUFaLEVBQXlCOzs7K0dBQ2hCQSxXQURnQjs7UUFHbEJBLFdBQUosRUFBaUI7WUFDVnphLE9BQUwsR0FBZXlhLFdBQWY7Ozs7OztFQUw4Qy9oQixLQUFyRDs7O0FBV0FzZixtQkFBbUIwQyxpQkFBbkIsQ0FBcUN2ZCxTQUFyQyxDQUErQzdELElBQS9DLEdBQXNELFFBQXREOztBQ3A3QkE7Ozs7Ozs7QUFNQSxTQUFTOGlCLFFBQVQsQ0FBa0IvaUIsRUFBbEIsRUFBc0JnakIsS0FBdEIsRUFBNkI7UUFDckIsU0FBU0MsU0FBVCxHQUFxQjtNQUN2QnBRLE9BQU8xSyxTQUFYO2lCQUNlOGEsU0FBZjtZQUNVN2hCLEVBQVYsR0FBZXloQixXQUFXLFlBQVc7TUFDakN2UCxLQUFILENBQVMsSUFBVCxFQUFlVCxJQUFmO0dBRGMsRUFFWm1RLEtBRlksQ0FBZjtFQUhEOzs7Ozs7QUFZRCxTQUFTRSxjQUFULENBQXdCRCxTQUF4QixFQUFtQztjQUNyQkEsVUFBVTdoQixFQUF2Qjs7O0FDbEJELElBQU0raEIsUUFBUSxtRkFBZDs7Ozs7OztBQU9BLFNBQVNDLG1CQUFULENBQTZCckosT0FBN0IsRUFBc0M7UUFDOUI7U0FDQ0EsUUFBUSxDQUFSLENBREQ7VUFFRUEsUUFBUSxDQUFSLENBRkY7UUFHQUEsUUFBUSxDQUFSLENBSEE7Z0JBSVFBLFFBQVEsQ0FBUixDQUpSO2tCQUtVQSxRQUFRLENBQVIsQ0FMVjtZQU1JQSxRQUFRLENBQVI7RUFOWDs7Ozs7Ozs7QUFlRCxTQUFTc0osb0JBQVQsQ0FBOEJDLE1BQTlCLEVBQXNDO0tBQ2pDQyxRQUFRLEVBQVo7TUFDSyxJQUFJcGdCLElBQUksQ0FBYixFQUFnQkEsSUFBSW1nQixPQUFPcGdCLE1BQTNCLEVBQW1DQyxHQUFuQyxFQUF3QztNQUNuQ3FnQixPQUFLamhCLFFBQUwsQ0FBYytnQixPQUFPbmdCLENBQVAsQ0FBZCxDQUFKLEVBQThCO1lBQ3BCc2dCLE9BQU9ILE9BQU9uZ0IsQ0FBUCxDQUFQLENBQVQ7R0FERCxNQUVPO09BQ0Z1Z0IsVUFBVUMseUJBQXlCTCxPQUFPbmdCLENBQVAsRUFBVXlnQixPQUFuQyxDQUFkO09BQ0lOLE9BQU9uZ0IsQ0FBUCxFQUFVMGdCLE1BQWQsRUFBc0I7ZUFDVkYseUJBQXlCLFFBQVFELE9BQWpDLElBQTRDLEdBQXZEOzthQUVTRCxPQUFPSCxPQUFPbmdCLENBQVAsRUFBVTJnQixNQUFqQixXQUErQkosT0FBL0IsT0FBVjtPQUNJSixPQUFPbmdCLENBQVAsRUFBVTRnQixRQUFkLEVBQXdCO1FBQ25CLENBQUNULE9BQU9uZ0IsQ0FBUCxFQUFVc2IsT0FBZixFQUF3QjtlQUNia0YseUJBQXlCRCxPQUF6QixDQUFWOztlQUVVLEdBQVg7O1lBRVFBLE9BQVQ7OztRQUdLLElBQUlNLE1BQUosQ0FBVyxNQUFNQywwQkFBMEJWLEtBQTFCLENBQU4sR0FBeUMsR0FBcEQsQ0FBUDs7Ozs7Ozs7QUFRRCxTQUFTSSx3QkFBVCxDQUFrQ0MsT0FBbEMsRUFBMkM7Z0JBQzdCQSxPQUFiOzs7Ozs7OztBQVFELFNBQVNILE1BQVQsQ0FBZ0J2akIsR0FBaEIsRUFBcUI7UUFDYkEsSUFBSW9KLE9BQUosQ0FBWSw0QkFBWixFQUEwQyxNQUExQyxDQUFQOzs7Ozs7OztBQVFELFNBQVMyYSx5QkFBVCxDQUFtQ1YsS0FBbkMsRUFBMEM7S0FDckMsTUFBTW5aLElBQU4sQ0FBV21aLEtBQVgsQ0FBSixFQUF1QjtXQUNiLEdBQVQ7RUFERCxNQUVPO1dBQ0csTUFBVDs7UUFFTUEsS0FBUDs7Ozs7Ozs7OztBQVVELEFBQU8sU0FBUzNZLE9BQVQsQ0FBZXNaLGFBQWYsRUFBOEI7S0FDaEMsQ0FBQ1YsT0FBS2poQixRQUFMLENBQWMyaEIsYUFBZCxDQUFMLEVBQW1DO1NBQzNCQSxhQUFQOzs7S0FHS0MsUUFBUUQsYUFBZDtLQUNJRSxlQUFlLENBQW5CO0tBQ01kLFNBQVMsRUFBZjtLQUNJZSxXQUFXLEVBQWY7S0FDSW5ZLFFBQVEsQ0FBWjs7S0FFSTZOLFVBQVVvSixNQUFNbUIsSUFBTixDQUFXSCxLQUFYLENBQWQ7UUFDT3BLLE9BQVAsRUFBZ0I7TUFDVDlTLE9BQU9tYyxvQkFBb0JySixPQUFwQixDQUFiOzthQUVXb0ssTUFBTS9WLEtBQU4sQ0FBWWxDLEtBQVosRUFBbUI2TixRQUFRN04sS0FBM0IsQ0FBWDtVQUNRNk4sUUFBUTdOLEtBQVIsR0FBZ0JqRixLQUFLMlEsS0FBTCxDQUFXMVUsTUFBbkM7U0FDT1EsSUFBUCxDQUFZMmdCLFFBQVo7O1NBRU8zZ0IsSUFBUCxDQUFZO1NBQ0x1RCxLQUFLaEgsSUFBTCxHQUFZZ0gsS0FBS2hILElBQWpCLEdBQXdCLEtBQUtta0IsY0FEeEI7WUFFRkQsTUFBTWpZLEtBQU4sS0FBZ0JpWSxNQUFNalksS0FBTixNQUFpQmpGLEtBQUs2YyxNQUZwQztXQUdIN2MsS0FBSzZjLE1BQUwsSUFBZSxFQUhaO1lBSUY3YyxLQUFLc2QsWUFBTCxJQUFxQnRkLEtBQUt1ZCxjQUExQixJQUE0QyxTQUoxQztXQUtIdmQsS0FBS3dkLFFBQUwsS0FBa0IsR0FBbEIsSUFBeUJ4ZCxLQUFLd2QsUUFBTCxLQUFrQixHQUx4QzthQU1EeGQsS0FBS3dkLFFBQUwsS0FBa0IsR0FBbEIsSUFBeUJ4ZCxLQUFLd2QsUUFBTCxLQUFrQjtHQU50RDs7WUFTVXRCLE1BQU1tQixJQUFOLENBQVdILEtBQVgsQ0FBVjs7O0tBR0dqWSxRQUFRaVksTUFBTWpoQixNQUFsQixFQUEwQjtTQUNsQlEsSUFBUCxDQUFZeWdCLE1BQU0zVCxNQUFOLENBQWF0RSxLQUFiLENBQVo7O1FBRU1vWCxNQUFQOzs7Ozs7Ozs7O0FBVUQsQUFBTyxTQUFTb0IsT0FBVCxDQUFpQlIsYUFBakIsRUFBZ0M7UUFDL0JiLHFCQUFxQnpZLFFBQU1zWixhQUFOLENBQXJCLENBQVA7Ozs7Ozs7Ozs7O0FBV0QsQUFBTyxTQUFTUyxXQUFULENBQXFCVCxhQUFyQixFQUFvQ2hWLElBQXBDLEVBQTBDO0tBQzFDakksT0FBTyxFQUFiO0tBQ01xYyxTQUFTMVksUUFBTXNaLGFBQU4sQ0FBZjtLQUNNdE0sUUFBUTFJLEtBQUswSSxLQUFMLENBQVd5TCxxQkFBcUJDLE1BQXJCLENBQVgsQ0FBZDs7S0FFSSxDQUFDMUwsS0FBTCxFQUFZO1NBQ0osSUFBUDs7O0tBR0dnTixhQUFhLENBQWpCO01BQ0ssSUFBSXpoQixJQUFJLENBQWIsRUFBZ0JBLElBQUltZ0IsT0FBT3BnQixNQUEzQixFQUFtQ0MsR0FBbkMsRUFBd0M7TUFDbkMsQ0FBQ3FnQixPQUFLamhCLFFBQUwsQ0FBYytnQixPQUFPbmdCLENBQVAsQ0FBZCxDQUFMLEVBQStCO09BQzFCNEcsUUFBUTZOLE1BQU1nTixZQUFOLENBQVo7T0FDSXBCLE9BQUsvaEIsS0FBTCxDQUFXc0ksS0FBWCxDQUFKLEVBQXVCO1FBQ2xCdVosT0FBT25nQixDQUFQLEVBQVUwZ0IsTUFBZCxFQUFzQjthQUNiOVosTUFBTXpCLEtBQU4sQ0FBWSxHQUFaLENBQVI7O1NBRUlnYixPQUFPbmdCLENBQVAsRUFBVWxELElBQWYsSUFBdUI4SixLQUF2Qjs7OztRQUlJOUMsSUFBUDs7O0lDaktLNGQ7Ozs7Ozs7O2dCQVFPM1YsSUFBWixFQUFrQjZDLE9BQWxCLEVBQTJCOzs7TUFDdEIsQ0FBQ3JRLGdCQUFnQndOLElBQWhCLENBQUwsRUFBNEI7U0FDckIsSUFBSTdQLEtBQUosQ0FBVSwyQkFBVixDQUFOOztNQUVHLENBQUMyQyxXQUFXK1AsT0FBWCxDQUFMLEVBQTBCO1NBQ25CLElBQUkxUyxLQUFKLENBQVUsa0NBQVYsQ0FBTjs7Ozs7Ozs7O09BU0kwUyxPQUFMLEdBQWVBLE9BQWY7Ozs7Ozs7T0FPSzdDLElBQUwsR0FBWUEsSUFBWjs7Ozs7Ozs7Ozs7O3FDQVFrQjtPQUNkLENBQUMsS0FBSzRWLFdBQVYsRUFBdUI7UUFDbEJ4QixTQUFTMVksUUFBTSxLQUFLc0UsSUFBWCxDQUFiO1FBQ0lxVSxRQUFRbUIsUUFBUXBCLE1BQVIsQ0FBWjtTQUNLd0IsV0FBTCxHQUFtQjtpQkFBQTs7S0FBbkI7O1VBS00sS0FBS0EsV0FBWjs7Ozs7Ozs7Ozs7O2dDQVNhNVYsTUFBTTtPQUNmM00sU0FBUyxLQUFLMk0sSUFBZCxDQUFKLEVBQXlCO1dBQ2pCeVYsWUFBWSxLQUFLSSxnQkFBTCxHQUF3QnpCLE1BQXBDLEVBQTRDcFUsSUFBNUMsQ0FBUDs7VUFFTSxFQUFQOzs7Ozs7Ozs7OytCQU9ZO1VBQ0wsS0FBSzZDLE9BQVo7Ozs7Ozs7Ozs7NEJBT1M7VUFDRixLQUFLN0MsSUFBWjs7Ozs7Ozs7Ozs7OEJBUVduRixPQUFPO09BQ2RtRixPQUFPLEtBQUtBLElBQWhCOztPQUVJbE4sV0FBV2tOLElBQVgsQ0FBSixFQUFzQjtXQUNkQSxLQUFLbkYsS0FBTCxDQUFQOztPQUVHeEgsU0FBUzJNLElBQVQsQ0FBSixFQUFvQjtXQUNaLEtBQUs2VixnQkFBTCxHQUF3QnhCLEtBQS9COztPQUVHclUsZ0JBQWdCOFUsTUFBcEIsRUFBNEI7V0FDcEJqYSxNQUFNVyxNQUFOLENBQWF3RSxJQUFiLElBQXFCLENBQUMsQ0FBN0I7OztVQUdNLEtBQVA7Ozs7OztJQ2pHSThWOzs7Ozs7O3NCQU1TOzs7Ozs7Ozs7OztRQVNSQyxLQUFMLEdBQWEsSUFBYjs7Ozs7Ozs7UUFRS0MsU0FBTCxHQUFpQixLQUFqQjs7Ozs7Ozs7Ozs7OzsyQkFRUUMsU0FBUztPQUNiLEtBQUtELFNBQVQsRUFBb0I7U0FDZEQsS0FBTCxHQUFhRSxPQUFiOztVQUVNLElBQVA7Ozs7Ozs7Ozs7K0JBT1k7UUFDUEYsS0FBTCxHQUFhLElBQWI7VUFDTyxJQUFQOzs7Ozs7Ozs7O29DQU9pQjtRQUNaRyxVQUFMOzs7Ozs7Ozs7Ozs2QkFRVTtVQUNILEtBQUtILEtBQVo7Ozs7Ozs7Ozs7Z0NBT2E7VUFDTixLQUFLQyxTQUFaOzs7Ozs7Ozs7OytCQU9ZQSxXQUFXO09BQ25CLENBQUNBLFNBQUwsRUFBZ0I7U0FDVkUsVUFBTDs7UUFFSUYsU0FBTCxHQUFpQkEsU0FBakI7Ozs7RUFoRnNCdGQ7O0lDR2xCeWQ7Ozs7Ozs7Ozs7bUJBU1M7Ozs7Ozs7Ozs7UUFRUmprQixFQUFMLEdBQVUsTUFBS2trQixPQUFMLENBQWFya0IsUUFBYixDQUFWOzs7Ozs7Ozs7UUFTS3NrQixLQUFMLEdBQWEsSUFBYjs7Ozs7Ozs7Ozs7OzZCQU9VO1dBQ0ZDLEdBQVIsQ0FBWSxhQUFhLElBQWIsR0FBb0IsWUFBaEM7Ozs7Ozs7Ozs7Ozs7bUNBVWdCO1dBQ1JBLEdBQVIsQ0FBWSxhQUFhLElBQWIsR0FBb0Isa0JBQWhDOzs7Ozs7Ozs7Ozs7OztxQ0FXa0I7V0FDVkEsR0FBUixDQUFZLGFBQWEsSUFBYixHQUFvQixvQkFBaEM7Ozs7Ozs7Ozs7OzBDQVF1QnRXLE1BQU07VUFDdEJBLElBQVA7Ozs7Ozs7Ozs7OzJDQVF3Qm1ULE9BQU87VUFDeEJBLEtBQVA7Ozs7Ozs7Ozs7OytCQVFZO1dBQ0ptRCxHQUFSLENBQVksYUFBYSxJQUFiLEdBQW9CLGNBQWhDOzs7Ozs7Ozs7OztvQ0FRaUI7O1dBRVRBLEdBQVIsQ0FBWSxhQUFhLElBQWIsR0FBb0IsV0FBaEM7Ozs7Ozs7Ozs7Ozs7a0NBVWVDLFVBQVU7VUFDbEIvYyxJQUFQLENBQVkrYyxRQUFaLEVBQXNCN1ksT0FBdEIsQ0FBOEIsZUFBTztRQUNoQzZZLFNBQVNDLEdBQVQsRUFBY0MsV0FBbEIsRUFBK0I7Z0JBQ25CQyxtQkFBWCxDQUErQkgsU0FBU0MsR0FBVCxFQUFjQyxXQUE3Qzs7SUFGRjtVQUtPaEgsbUJBQW1CZ0IsT0FBbkIsRUFBUDs7Ozs7Ozs7Ozs7OzttQ0FVZ0I7VUFDVGhCLG1CQUFtQmdCLE9BQW5CLEVBQVA7Ozs7Ozs7Ozs7Ozs7dUJBVUk4RixVQUFVOzs7V0FDTkQsR0FBUixDQUFZLGFBQWEsSUFBYixHQUFvQixRQUFoQzs7T0FFSUssY0FBYyxFQUFsQjs7VUFFT25kLElBQVAsQ0FBWStjLFFBQVosRUFBc0I3WSxPQUF0QixDQUE4QixlQUFPO1FBQ2hDa1osVUFBVUwsU0FBU0MsR0FBVCxDQUFkO1FBQ0lLLFdBQVdELFFBQVFFLElBQVIsQ0FBYSxPQUFLNWtCLEVBQWxCLENBQWY7Z0JBQ1lzQyxJQUFaLENBQWlCcWlCLFFBQWpCO0lBSEQ7O1VBTU9wSCxtQkFBbUJ1QixHQUFuQixDQUF1QjJGLFdBQXZCLENBQVA7Ozs7Ozs7Ozs7MEJBT087VUFDQSxLQUFLemtCLEVBQVo7Ozs7Ozs7Ozs7Ozs7Ozs7c0NBYW1CO1dBQ1hva0IsR0FBUixDQUFZLGFBQWEsSUFBYixHQUFvQixxQkFBaEM7Ozs7Ozs7Ozs7NkJBT1U7VUFDSCxLQUFLRCxLQUFaOzs7Ozs7Ozs7Ozs7Ozs7eUJBWU07V0FDRUMsR0FBUixDQUFZLGFBQWEsSUFBYixHQUFvQixRQUFoQztVQUNPN0csbUJBQW1CZ0IsT0FBbkIsRUFBUDs7Ozs7Ozs7Ozs7OzBCQVNPdmUsSUFBSTtVQUNKLFlBQVlBLEVBQW5COzs7Ozs7Ozs7O3dCQU9LQSxJQUFJO1FBQ0pBLEVBQUwsR0FBVUEsRUFBVjs7Ozs7Ozs7OzsyQkFPUW1rQixPQUFPO1FBQ1ZBLEtBQUwsR0FBYUEsS0FBYjs7Ozs7Ozs7OzZCQU1VO1VBQ0gsS0FBS25rQixFQUFaOzs7O0VBM05tQjRqQjs7Ozs7Ozs7O0FBcU9yQkssT0FBTzdHLGVBQVAsR0FBeUIsVUFBU3pXLFNBQVQsRUFBaUI7UUFDbENBLHFCQUFrQnNkLE1BQXpCO0NBREQ7O0lDck9NWTs7Ozs7Ozs7O2tCQVFPN2tCLEVBQVosRUFBZ0I7Ozs7O01BR1gsQ0FBQ0EsRUFBTCxFQUFTO1NBQ0YsSUFBSS9CLEtBQUosQ0FBVSwwRUFBVixDQUFOOzs7Ozs7Ozs7UUFTSXNtQixXQUFMLEdBQW1CLElBQW5COzs7Ozs7OztRQVFLTyxZQUFMLEdBQW9CLElBQXBCOzs7Ozs7Ozs7UUFTS3JWLE9BQUwsR0FBZSxJQUFmOzs7Ozs7OztRQVFLelAsRUFBTCxHQUFVQSxFQUFWOzs7Ozs7OztRQVFLK2tCLFlBQUwsR0FBb0IsSUFBcEI7O1FBRUtELFlBQUwsR0FBb0IsTUFBS0UsUUFBTCxDQUFjSCxRQUFRSSxPQUF0QixDQUFwQjtRQUNLQywwQkFBTDtRQUNLWCxXQUFMLEdBQW1CLE1BQUtPLFlBQXhCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7NkJBYVVLLFVBQVVDLGFBQWE7T0FDN0I1YSxRQUFRLEtBQUtzYSxZQUFqQjs7T0FFSXhrQixnQkFBZ0I4a0IsV0FBaEIsQ0FBSixFQUFrQztZQUN6QixLQUFLSixRQUFMLENBQWNHLFFBQWQsQ0FBUjtRQUNJM2EsS0FBSixFQUFXO29CQUNLQSxLQUFmO0tBREQsTUFFTzthQUNFLEtBQUs2YSxXQUFMLENBQWlCRixRQUFqQixDQUFSO1VBQ0tHLFVBQUwsQ0FBZ0I5YSxLQUFoQixFQUF1QixJQUF2Qjs7V0FFTUEsS0FBUCxFQUFjNGEsV0FBZDs7O09BR0czVixVQUFVLEtBQUs4VixVQUFMLEVBQWQ7O09BRUk5VixXQUFXakYsS0FBZixFQUFzQjtXQUNkaUYsT0FBUCxFQUFnQmpGLEtBQWhCOzs7VUFHTUEsS0FBUDs7Ozs7Ozs7Ozs7OEJBUVcyYSxVQUFVO09BQ2pCM2EsUUFBUWhOLFFBQVFFLFFBQVIsQ0FBaUJpSCxhQUFqQixDQUErQixLQUEvQixDQUFaO1NBQ00ySixZQUFOLENBQW1CLElBQW5CLEVBQXlCLEtBQUs0VixPQUFMLENBQWFpQixRQUFiLENBQXpCO1VBQ08zYSxLQUFQOzs7Ozs7Ozs7OzsyQkFRUTJhLFVBQVU7VUFDWDNuQixRQUFRRSxRQUFSLENBQWlCOG5CLGNBQWpCLENBQWdDLEtBQUt0QixPQUFMLENBQWFpQixRQUFiLENBQWhDLENBQVA7Ozs7Ozs7Ozs7OzsrQkFTWTtPQUNSLEtBQUsxVixPQUFULEVBQWtCO1dBQ1YsS0FBS0EsT0FBWjs7UUFFSUEsT0FBTCxHQUFlalMsUUFBUUUsUUFBUixDQUFpQjhuQixjQUFqQixDQUFnQyxLQUFLeGxCLEVBQXJDLENBQWY7VUFDTyxLQUFLeVAsT0FBWjs7Ozs7Ozs7OzswQkFPTztVQUNBLEtBQUt6UCxFQUFaOzs7Ozs7Ozs7OztvQ0FRaUI7VUFDVixLQUFLK2tCLFlBQVo7Ozs7Ozs7Ozs7OzswQkFTT0ksVUFBVTtVQUNWLEtBQUtubEIsRUFBTCxHQUFVLEdBQVYsR0FBZ0JtbEIsUUFBdkI7Ozs7Ozs7Ozs7OzsrQ0FTNEI7T0FDeEIxVixVQUFVLEtBQUs4VixVQUFMLEVBQWQ7T0FDSTlWLFdBQVcsQ0FBQyxLQUFLcVYsWUFBckIsRUFBbUM7UUFDOUI3TixXQUFXelosUUFBUUUsUUFBUixDQUFpQndaLHNCQUFqQixFQUFmO1dBQ096SCxRQUFRdUgsVUFBZixFQUEyQjtjQUNqQmhTLFdBQVQsQ0FBcUJ5SyxRQUFRdUgsVUFBN0I7O1NBRUk4TixZQUFMLEdBQW9CLEtBQUtXLFVBQUwsQ0FBZ0JaLFFBQVFJLE9BQXhCLEVBQWlDaE8sUUFBakMsQ0FBcEI7U0FDS3FPLFVBQUwsQ0FBZ0IsSUFBaEIsRUFBc0IsS0FBS1IsWUFBM0I7Ozs7Ozs7Ozs7O3dCQVFJOWtCLElBQUk7UUFDSkEsRUFBTCxHQUFVQSxFQUFWOzs7Ozs7Ozs7OztrQ0FRZStrQixjQUFjO1FBQ3hCQSxZQUFMLEdBQW9CQSxZQUFwQjs7Ozs7Ozs7Ozs7dUJBUUlJLFVBQVU7T0FDVk8sT0FBTyxLQUFLbkIsV0FBaEI7T0FDSW9CLEtBQUssS0FBS1gsUUFBTCxDQUFjRyxRQUFkLENBQVQ7T0FDSSxDQUFDUSxFQUFMLEVBQVM7U0FDSCxLQUFLYixZQUFWOztRQUVJUCxXQUFMLEdBQW1Cb0IsRUFBbkI7VUFDTyxLQUFLTCxVQUFMLENBQWdCSSxJQUFoQixFQUFzQkMsRUFBdEIsRUFBMEJuRyxVQUExQixDQUFxQyxZQUFNO1FBQzdDa0csUUFBUUEsU0FBU0MsRUFBckIsRUFBeUI7a0JBQ1hELElBQWI7O0lBRkssQ0FBUDs7Ozs7Ozs7Ozt5QkFXTVAsVUFBVTtPQUNaM2EsUUFBUSxLQUFLd2EsUUFBTCxDQUFjRyxRQUFkLENBQVo7T0FDSTNhLEtBQUosRUFBVztpQkFDR0EsS0FBYjs7Ozs7Ozs7Ozs2QkFPUztVQUNILEtBQUt4SyxFQUFaOzs7Ozs7Ozs7Ozs7OzZCQVVVMGxCLE1BQU1DLElBQUk7T0FDaEJaLGVBQWUsS0FBS0EsWUFBTCxJQUFxQkYsUUFBUWUsaUJBQWhEO1VBQ09ySSxtQkFBbUJnQixPQUFuQixDQUEyQndHLGFBQWFuaUIsSUFBYixDQUFrQixJQUFsQixFQUF3QjhpQixJQUF4QixFQUE4QkMsRUFBOUIsQ0FBM0IsQ0FBUDs7OztFQTVPb0JuZjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFvUXRCcWUsUUFBUUksT0FBUixHQUFrQixTQUFsQjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUEwQkFKLFFBQVFlLGlCQUFSLEdBQTRCLFVBQVNGLElBQVQsRUFBZUMsRUFBZixFQUFtQjtLQUMxQ0QsSUFBSixFQUFVO09BQ0o5Z0IsS0FBTCxDQUFXQyxPQUFYLEdBQXFCLE1BQXJCO09BQ0srUSxTQUFMLENBQWV4SyxNQUFmLENBQXNCLFNBQXRCOztLQUVHdWEsRUFBSixFQUFRO0tBQ0ovZ0IsS0FBSCxDQUFTQyxPQUFULEdBQW1CLE9BQW5CO0tBQ0crUSxTQUFILENBQWF6SixHQUFiLENBQWlCLFNBQWpCOztDQVBGOztJQ3ZSTTBaOzs7Ozs7OztnQkFPUzs7Ozs7Ozs7OztRQVFSQyxZQUFMLEdBQW9CLElBQXBCOzs7Ozs7O1FBT0tDLFVBQUwsR0FBa0IsSUFBbEI7Ozs7Ozs7O1FBUUtDLG9CQUFMLEdBQTRCLElBQTVCOzs7Ozs7OztRQVFLcFksUUFBTCxHQUFnQixFQUFoQjs7Ozs7Ozs7UUFRS3FZLHlCQUFMLEdBQWlDOVgsTUFBTUksZ0NBQU4sRUFBakM7Ozs7Ozs7O1FBUUsyWCxvQ0FBTCxHQUE0QyxJQUE1Qzs7Ozs7Ozs7UUFRS0MsWUFBTCxHQUFvQjNvQixRQUFRRSxRQUFSLENBQWlCeW1CLEtBQXJDOzs7Ozs7OztRQVFLaUMsWUFBTCxHQUFvQiwyREFBcEI7Ozs7Ozs7O1FBUUtDLDhCQUFMLEdBQXNDLEtBQXRDOzs7Ozs7OztRQVFLQyxZQUFMLEdBQW9CLGdEQUFwQjs7Ozs7Ozs7UUFRS0MsZUFBTCxHQUF1QixlQUF2Qjs7Ozs7Ozs7Ozs7Ozs7O1FBZUtDLGdDQUFMLEdBQXlDLHVCQUF1QmhwQixRQUFRQyxNQUFSLENBQWVzUixPQUEvRTs7Ozs7Ozs7O1FBU0swWCxtQkFBTCxHQUEyQixLQUEzQjs7Ozs7Ozs7UUFRS0MsZUFBTCxHQUF1QixJQUF2Qjs7Ozs7Ozs7O1FBU0tDLGtCQUFMLEdBQTBCLENBQTFCOzs7Ozs7Ozs7UUFTS0MsaUJBQUwsR0FBeUIsQ0FBekI7Ozs7Ozs7UUFPS0MsWUFBTCxHQUFvQixJQUFwQjs7Ozs7Ozs7UUFRS0MsTUFBTCxHQUFjLEVBQWQ7Ozs7Ozs7O1FBUUtDLE9BQUwsR0FBZSxFQUFmOzs7Ozs7Ozs7O1FBVUtDLGdCQUFMLEdBQXdCLEtBQXhCOzs7Ozs7OztRQVFLM0MsUUFBTCxHQUFnQixFQUFoQjs7Ozs7Ozs7OztRQVVLNEMsb0JBQUwsR0FBNEIsSUFBNUI7O1FBRUtDLGlCQUFMLEdBQXlCLElBQUk1UyxZQUFKLEVBQXpCOztRQUVLNFMsaUJBQUwsQ0FBdUIvYSxHQUF2QixDQUNDMEgsR0FBR3JXLFFBQVFDLE1BQVgsRUFBbUIsUUFBbkIsRUFBNkJra0IsU0FBUyxNQUFLd0YsU0FBTCxDQUFlbGpCLElBQWYsT0FBVCxFQUFvQyxHQUFwQyxDQUE3QixDQURELEVBRUM0UCxHQUFHclcsUUFBUUMsTUFBWCxFQUFtQixNQUFuQixFQUEyQixNQUFLMnBCLE9BQUwsQ0FBYW5qQixJQUFiLE9BQTNCLENBRkQsRUFHQzRQLEdBQUdyVyxRQUFRQyxNQUFYLEVBQW1CLFVBQW5CLEVBQStCLE1BQUs0cEIsV0FBTCxDQUFpQnBqQixJQUFqQixPQUEvQixDQUhEOztRQU1LNFAsRUFBTCxDQUFRLGVBQVIsRUFBeUIsTUFBS3lULGdCQUE5QjtRQUNLelQsRUFBTCxDQUFRLGdCQUFSLEVBQTBCLE1BQUswVCxpQkFBL0I7UUFDSzFULEVBQUwsQ0FBUSxnQkFBUixFQUEwQixNQUFLMlQsd0JBQS9CLEVBQXlELElBQXpEO1FBQ0szVCxFQUFMLENBQVEsY0FBUixFQUF3QixNQUFLNFQsc0JBQTdCOztRQUVLQyxlQUFMLENBQXFCLE1BQUtwQixZQUExQjtRQUNLcUIsZUFBTCxDQUFxQixNQUFLdkIsWUFBMUI7O1FBRUt3QiwwQkFBTDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzRCQXNCU2QsUUFBUTs7O09BQ2IsQ0FBQzNrQixNQUFNQyxPQUFOLENBQWMwa0IsTUFBZCxDQUFMLEVBQTRCO2FBQ2xCLENBQUNBLE1BQUQsQ0FBVDs7VUFFTXRiLE9BQVAsQ0FBZSxVQUFDdVgsS0FBRCxFQUFXO1FBQ3JCLEVBQUVBLGlCQUFpQlUsS0FBbkIsQ0FBSixFQUErQjthQUN0QixJQUFJQSxLQUFKLENBQVVWLE1BQU1qVixJQUFoQixFQUFzQmlWLE1BQU1wUyxPQUE1QixDQUFSOztXQUVJbVcsTUFBTCxDQUFZeGtCLElBQVosQ0FBaUJ5Z0IsS0FBakI7SUFKRDtVQU1PLElBQVA7Ozs7Ozs7Ozs7Ozs7OzhCQVdXc0IsVUFBVTs7O09BQ2pCLENBQUNsaUIsTUFBTUMsT0FBTixDQUFjaWlCLFFBQWQsQ0FBTCxFQUE4QjtlQUNsQixDQUFDQSxRQUFELENBQVg7O1lBRVE3WSxPQUFULENBQWlCLFVBQUNrWixPQUFELEVBQWE7UUFDekJ2akIsU0FBU3VqQixPQUFULENBQUosRUFBdUI7ZUFDWixJQUFJRyxPQUFKLENBQVlILE9BQVosQ0FBVjs7V0FFSUwsUUFBTCxDQUFjSyxRQUFRbUQsS0FBUixFQUFkLElBQWlDbkQsT0FBakM7SUFKRDtVQU1PLElBQVA7Ozs7Ozs7Ozs7OzhCQVFXaGIsS0FBSztPQUNWaUYsTUFBTVIsTUFBTTJaLFFBQU4sQ0FBZXBlLEdBQWYsQ0FBWjs7T0FFSSxDQUFDaUYsR0FBTCxFQUFVO1dBQ0YsS0FBUDs7O09BR0tiLE9BQU9LLE1BQU1XLFVBQU4sQ0FBaUJwRixHQUFqQixDQUFiOztPQUVJLENBQUMsS0FBS3FlLGlCQUFMLENBQXVCcFosSUFBSWxDLE9BQUosRUFBdkIsQ0FBTCxFQUE0QztZQUNuQzJYLEdBQVIsQ0FBWSxzQkFBWjtXQUNPLEtBQVA7O09BRUcsQ0FBQyxLQUFLNEQsZUFBTCxDQUFxQmxhLElBQXJCLENBQUwsRUFBaUM7WUFDeEJzVyxHQUFSLENBQVksdUNBQVo7V0FDTyxLQUFQOzs7T0FHR3pWLElBQUlqQixPQUFKLE1BQWlCUyxNQUFNOFosb0JBQU4sQ0FBMkJuYSxJQUEzQixDQUFyQixFQUF1RDtXQUMvQyxLQUFQOztPQUVHLENBQUMsS0FBS29hLFNBQUwsQ0FBZXBhLElBQWYsQ0FBTCxFQUEyQjtZQUNsQnNXLEdBQVIsQ0FBWSxrQkFBa0J0VyxJQUE5QjtXQUNPLEtBQVA7OztVQUdNLElBQVA7Ozs7Ozs7Ozs7c0NBT21COzs7VUFDWnhHLElBQVAsQ0FBWSxLQUFLeWYsT0FBakIsRUFBMEJ2YixPQUExQixDQUFrQyxVQUFDc0MsSUFBRCxFQUFVO1FBQ3ZDQSxTQUFTLE9BQUtpWSxVQUFsQixFQUE4QjtZQUN4QkQsWUFBTCxDQUFrQjlCLFVBQWxCO0tBREQsTUFFTztZQUNEbUUsWUFBTCxDQUFrQnJhLElBQWxCOztJQUpGOzs7Ozs7Ozs7Ozt1Q0Fjb0JBLE1BQU1pVixPQUFPO09BQzdCLENBQUMsS0FBSzJELGVBQU4sSUFBeUI1WSxTQUFTLEtBQUtpWSxVQUEzQyxFQUF1RDtZQUM5QzNCLEdBQVIsQ0FBWSw0Q0FBWjtXQUNPLEtBQUswQixZQUFaOzs7T0FHR3NDLFNBQVMsS0FBS3JCLE9BQUwsQ0FBYWpaLElBQWIsQ0FBYjtPQUNJLENBQUNzYSxNQUFMLEVBQWE7UUFDUnpYLFVBQVVvUyxNQUFNc0YsVUFBTixFQUFkO1FBQ0kxWCxZQUFZc1QsTUFBWixJQUFzQkEsT0FBTzdHLGVBQVAsQ0FBdUJ6TSxRQUFRak8sU0FBL0IsQ0FBMUIsRUFBcUU7Y0FDM0QsSUFBSWlPLE9BQUosRUFBVDtLQURELE1BRU87Y0FDR0EsUUFBUW9TLEtBQVIsS0FBa0IsSUFBSWtCLE1BQUosRUFBM0I7O1lBRU9HLEdBQVIsQ0FBWSx3QkFBd0J0VyxJQUF4QixHQUErQixLQUEvQixHQUF1Q3NhLE1BQXZDLEdBQWdELEdBQTVEOztVQUVNQSxNQUFQOzs7Ozs7Ozs7b0NBTWlCO09BQ2IsS0FBS3RDLFlBQVQsRUFBdUI7U0FDakJxQyxZQUFMLENBQWtCLEtBQUtwQyxVQUF2Qjs7UUFFSXVDLGlCQUFMO1FBQ0tDLGlCQUFMLENBQXVCcFksY0FBdkI7UUFDS3FZLGlCQUFMLENBQXVCclksY0FBdkI7UUFDSytXLGlCQUFMLENBQXVCdUIsa0JBQXZCOzs7Ozs7Ozs7Ozs7NkJBU1U7VUFDSCxLQUFLQyxRQUFMLENBQWN2YSxNQUFNd2EscUJBQU4sRUFBZCxFQUE2QyxJQUE3QyxDQUFQOzs7Ozs7Ozs7Ozs7OEJBU1c3YSxNQUFNOGEsb0JBQW9COzs7T0FDakM3RixRQUFRLEtBQUttRixTQUFMLENBQWVwYSxJQUFmLENBQVo7T0FDSSxDQUFDaVYsS0FBTCxFQUFZO1NBQ04yRCxlQUFMLEdBQXVCbkosbUJBQW1Ca0IsTUFBbkIsQ0FBMEIsSUFBSWxCLG1CQUFtQjBDLGlCQUF2QixDQUF5QyxrQkFBa0JuUyxJQUEzRCxDQUExQixDQUF2QjtXQUNPLEtBQUs0WSxlQUFaOzs7V0FHT3RDLEdBQVIsQ0FBWSxrQkFBa0J0VyxJQUFsQixHQUF5QixHQUFyQzs7UUFFSythLG9CQUFMO1FBQ0twQyxtQkFBTCxHQUEyQixJQUEzQjs7T0FFSXFDLGFBQWEsS0FBS0Msb0JBQUwsQ0FBMEJqYixJQUExQixFQUFnQ2lWLEtBQWhDLENBQWpCOztVQUVPLEtBQUtpRyx1QkFBTCxHQUNMOW5CLElBREssQ0FDQTtXQUFNLE9BQUsrbkIscUJBQUwsQ0FBMkJILFVBQTNCLENBQU47SUFEQSxFQUVMNW5CLElBRkssQ0FFQTtXQUFNNG5CLFdBQVdJLElBQVgsQ0FBZ0JwYixJQUFoQixDQUFOO0lBRkEsRUFHTDVNLElBSEssQ0FHQSxZQUFNO1FBQ1AsT0FBSzRrQixZQUFULEVBQXVCO1lBQ2pCQSxZQUFMLENBQWtCcUQsVUFBbEI7O1dBRUlDLHVCQUFMLENBQTZCdGIsSUFBN0IsRUFBbUNnYixVQUFuQyxFQUErQ0Ysa0JBQS9DO1dBQ0tTLHdCQUFMLENBQ0NQLFVBREQsRUFFQyxPQUFLekUsUUFGTixFQUdDLE9BQUtpRixhQUFMLENBQW1CdkcsS0FBbkIsRUFBMEJqVixJQUExQixDQUhEO0lBUkssRUFjTDVNLElBZEssQ0FjQTtXQUFNNG5CLFdBQVdTLGNBQVgsQ0FBMEIsT0FBS2xGLFFBQS9CLENBQU47SUFkQSxFQWVMbmpCLElBZkssQ0FlQTtXQUFNNG5CLFdBQVdVLElBQVgsQ0FBZ0IsT0FBS25GLFFBQXJCLENBQU47SUFmQSxFQWdCTG5qQixJQWhCSyxDQWdCQTtXQUFNNG5CLFdBQVdXLGVBQVgsQ0FBMkIsT0FBS3BGLFFBQWhDLENBQU47SUFoQkEsRUFpQkxuakIsSUFqQkssQ0FpQkE7V0FBTSxPQUFLd29CLCtCQUFMLEVBQU47SUFqQkEsRUFrQkx4b0IsSUFsQkssQ0FrQkE7V0FBTSxPQUFLeW9CLGdDQUFMLEVBQU47SUFsQkEsRUFtQkx6b0IsSUFuQkssQ0FtQkE7V0FBTSxPQUFLMG9CLGlCQUFMLENBQXVCOWIsSUFBdkIsRUFBNkJnYixVQUE3QixDQUFOO0lBbkJBLEVBb0JMNW5CLElBcEJLLENBb0JBO1dBQU0sT0FBSzBtQiwwQkFBTCxFQUFOO0lBcEJBLEVBcUJMOUgsS0FyQkssQ0FxQkMsVUFBQzFCLE1BQUQsRUFBWTtXQUNicUksbUJBQUwsR0FBMkIsS0FBM0I7V0FDS29ELG9CQUFMLENBQTBCL2IsSUFBMUIsRUFBZ0NnYixVQUFoQyxFQUE0QzFLLE1BQTVDO1VBQ01BLE1BQU47SUF4QkssQ0FBUDs7Ozs7Ozs7Ozs7O2dDQWtDYTJFLE9BQU9qVixNQUFNO1VBQ25CaVYsTUFBTXVHLGFBQU4sQ0FBb0IsS0FBS1EsWUFBTCxDQUFrQmhjLElBQWxCLENBQXBCLENBQVA7Ozs7Ozs7Ozs7OztvQ0FTaUJBLE1BQU1nYixZQUFZO2NBQ3hCaUIsUUFBWDs7T0FFSSxLQUFLakUsWUFBTCxJQUFxQixDQUFDLEtBQUtBLFlBQUwsQ0FBa0JrRSxXQUFsQixFQUExQixFQUEyRDtRQUN0RCxLQUFLbEUsWUFBTCxLQUFzQmdELFVBQTFCLEVBQXNDO1VBQ2hDWCxZQUFMLENBQWtCLEtBQUtwQyxVQUF2Qjs7OztRQUlHQSxVQUFMLEdBQWtCalksSUFBbEI7UUFDS2dZLFlBQUwsR0FBb0JnRCxVQUFwQjtRQUNLN0MseUJBQUwsR0FBaUM5WCxNQUFNSSxnQ0FBTixFQUFqQztRQUNLd1ksT0FBTCxDQUFhalosSUFBYixJQUFxQmdiLFVBQXJCO1FBQ0tyQyxtQkFBTCxHQUEyQixLQUEzQjtRQUNLQyxlQUFMLEdBQXVCLElBQXZCO1dBQ1F1RCxtQkFBUixHQUE4QixJQUE5QjtXQUNRQyx5QkFBUixHQUFvQyxJQUFwQztXQUNROUYsR0FBUixDQUFZLGlCQUFaOzs7Ozs7Ozs7Ozs7OzRCQVVTdFcsTUFBTTtVQUNSLEtBQUtnYyxZQUFMLENBQWtCaGMsSUFBbEIsQ0FBUDtRQUNLLElBQUkvTCxJQUFJLENBQWIsRUFBZ0JBLElBQUksS0FBSytrQixNQUFMLENBQVlobEIsTUFBaEMsRUFBd0NDLEdBQXhDLEVBQTZDO1FBQ3hDZ2hCLFFBQVEsS0FBSytELE1BQUwsQ0FBWS9rQixDQUFaLENBQVo7UUFDSWdoQixNQUFNb0gsV0FBTixDQUFrQnJjLElBQWxCLENBQUosRUFBNkI7WUFDckJpVixLQUFQOzs7O1VBSUssSUFBUDs7Ozs7Ozs7Ozs0Q0FPeUI7VUFDbEIsS0FBS2lELG9CQUFaOzs7Ozs7Ozs7O2dDQU9hO1VBQ04sS0FBS3BZLFFBQVo7Ozs7Ozs7Ozs7b0NBT2lCO1VBQ1YsS0FBS3VZLFlBQVo7Ozs7Ozs7Ozs7b0NBT2lCO1VBQ1YsS0FBS0MsWUFBWjs7Ozs7Ozs7OztzREFPbUM7VUFDNUIsS0FBS0MsOEJBQVo7Ozs7Ozs7Ozs7b0NBT2lCO1VBQ1YsS0FBS0MsWUFBWjs7Ozs7Ozs7Ozt1Q0FPb0I7VUFDYixLQUFLQyxlQUFaOzs7Ozs7Ozs7Ozs7OytCQVVZelksTUFBTTtPQUNkLEtBQUtzYyxpQ0FBTCxFQUFKLEVBQThDO1dBQ3RDamMsTUFBTWtjLDhCQUFOLENBQXFDdmMsSUFBckMsQ0FBUDtXQUNPSyxNQUFNa2MsOEJBQU4sQ0FBcUN2YyxLQUFLc0IsTUFBTCxDQUFZLEtBQUt4QixRQUFMLENBQWM5TCxNQUExQixDQUFyQyxDQUFQOzs7VUFHTXFNLE1BQU1VLHFCQUFOLENBQTRCZixJQUE1QixDQUFQO1VBQ09LLE1BQU1VLHFCQUFOLENBQTRCZixLQUFLc0IsTUFBTCxDQUFZLEtBQUt4QixRQUFMLENBQWM5TCxNQUExQixDQUE1QixDQUFQOzs7Ozs7Ozs7OzRDQU95QjtVQUNsQixLQUFLbWxCLG9CQUFaOzs7Ozs7Ozs7Ozs7O3VDQVVvQm5aLE1BQU1nYixZQUFZNVosT0FBTzs7O1dBQ3JDa1YsR0FBUixDQUFZLDJCQUEyQjBFLFVBQTNCLEdBQXdDLEtBQXhDLEdBQWdENVosS0FBaEQsR0FBd0QsR0FBcEU7UUFDSzZFLElBQUwsQ0FBVSxpQkFBVixFQUE2QjtnQkFBQTswQkFBQTs7SUFBN0I7T0FLSSxDQUFDNUYsTUFBTThaLG9CQUFOLENBQTJCbmEsSUFBM0IsQ0FBTCxFQUF1QztRQUNsQyxLQUFLMlksbUJBQUwsSUFBNEIsS0FBS0MsZUFBckMsRUFBc0Q7VUFDaERBLGVBQUwsQ0FBcUJsSCxVQUFyQixDQUFnQzthQUFNLE9BQUsySSxZQUFMLENBQWtCcmEsSUFBbEIsQ0FBTjtNQUFoQyxFQUErRCxJQUEvRDtLQURELE1BRU87VUFDRHFhLFlBQUwsQ0FBa0JyYSxJQUFsQjs7Ozs7Ozs7Ozs7OzhCQVNTO1VBQ0osS0FBS2daLE1BQUwsQ0FBWWhsQixNQUFaLEdBQXFCLENBQTVCOzs7Ozs7Ozs7Ozs7O29DQVVpQjZELE1BQU07VUFDaEJBLFNBQVNuSSxRQUFRQyxNQUFSLENBQWVnSSxRQUFmLENBQXdCRSxJQUF4Qzs7Ozs7Ozs7Ozs7O2tDQVNlbUksTUFBTTtVQUNkQSxLQUFLN08sT0FBTCxDQUFhLEtBQUsyTyxRQUFsQixNQUFnQyxDQUF2Qzs7Ozs7Ozs7Ozs7OytDQVM0QjtPQUN4QnFULFFBQVF6akIsUUFBUUMsTUFBUixDQUFlc1IsT0FBZixDQUF1QmtTLEtBQW5DO09BQ0ksQ0FBQ0EsS0FBTCxFQUFZOzs7Ozs7Ozs7OztPQVdScUosU0FBUyxLQUFiO09BQ0lDLDJCQUEyQixTQUEzQkEsd0JBQTJCLEdBQVc7WUFDakM3c0IsUUFBUixDQUFpQnVYLG1CQUFqQixDQUFxQyxRQUFyQyxFQUErQ3NWLHdCQUEvQyxFQUF5RSxLQUF6RTtRQUNJLENBQUNELE1BQUwsRUFBYTthQUNKN3NCLE1BQVIsQ0FBZStzQixRQUFmLENBQXdCdkosTUFBTXdKLFVBQTlCLEVBQTBDeEosTUFBTXlKLFNBQWhEO2NBQ1MsSUFBVDs7SUFKRjtTQU9NdG5CLFFBQU4sQ0FBZW1uQix3QkFBZjtXQUNRN3NCLFFBQVIsQ0FBaUIrRyxnQkFBakIsQ0FBa0MsUUFBbEMsRUFBNEM4bEIsd0JBQTVDLEVBQXNFLEtBQXRFOzs7Ozs7Ozs7O3dEQU9xQztPQUNqQyxLQUFLL0QsZ0NBQVQsRUFBMkM7U0FDckNtRSx3QkFBTCxHQUFnQ250QixRQUFRQyxNQUFSLENBQWVzUixPQUFmLENBQXVCNmIsaUJBQXZEO1lBQ1FudEIsTUFBUixDQUFlc1IsT0FBZixDQUF1QjZiLGlCQUF2QixHQUEyQyxRQUEzQzs7Ozs7Ozs7Ozs7O2lDQVNhN2hCLE1BQU0rRyxPQUFPO09BQ3ZCLENBQUMsS0FBSythLFdBQUwsQ0FBaUI5aEIsSUFBakIsQ0FBTCxFQUE2Qjs7OztXQUlyQmtoQixtQkFBUixHQUE4Qm5hLE1BQU1tYSxtQkFBcEM7V0FDUUMseUJBQVIsR0FBb0NwYSxNQUFNb2EseUJBQTFDOztPQUVJWSxpQkFBaUIsS0FBckI7T0FDSTtTQUNFcEMsUUFBTCxDQUFjdmEsTUFBTVcsVUFBTixDQUFpQi9GLElBQWpCLENBQWQsRUFBc0MsS0FBdEMsRUFBNkMrRyxLQUE3QztJQURELENBRUUsT0FBT2IsR0FBUCxFQUFZOztxQkFFSSxJQUFqQjs7O09BR0csQ0FBQzZiLGNBQUwsRUFBcUI7VUFDZEMsY0FBTjs7Ozs7Ozs7Ozs7Ozs7OytDQVkyQjs7O09BQ3hCLGVBQWUsT0FBT3R0QixPQUFPdXRCLGNBQWpDLEVBQWlEO1dBQ3pDQyxlQUFQLEdBQXlCeHRCLE9BQU91dEIsY0FBaEM7O1dBRU9BLGNBQVAsR0FBd0IsaUJBQVM7WUFDM0JqWCxJQUFMLENBQVUsY0FBVixFQUEwQmpFLEtBQTFCO1NBQ0lBLFNBQVNBLE1BQU1zSyxnQkFBbkIsRUFBcUM7YUFDN0IsSUFBUDs7S0FIRjs7O1dBUU80USxjQUFQLENBQXNCRSxXQUF0QixHQUFvQyxJQUFwQzs7Ozs7Ozs7Ozs7Ozt3Q0FVb0JwQyxZQUFZOzs7VUFDMUJ2TCxtQkFBbUJnQixPQUFuQixHQUNMcmQsSUFESyxDQUNBLFlBQU07V0FDSjRuQixXQUFXcUMsY0FBWCxFQUFQO0lBRkssRUFJTGpxQixJQUpLLENBSUEsbUJBQVc7UUFDWmtxQixPQUFKLEVBQWE7WUFDUDFFLGVBQUwsR0FBdUJuSixtQkFBbUJrQixNQUFuQixDQUEwQixJQUFJbEIsbUJBQW1CMEMsaUJBQXZCLENBQXlDLDBCQUF6QyxDQUExQixDQUF2QjtZQUNPLE9BQUt5RyxlQUFaOztJQVBJLENBQVA7Ozs7Ozs7Ozs7OzRDQWlCeUI7OztVQUNsQm5KLG1CQUFtQmdCLE9BQW5CLEdBQ0xyZCxJQURLLENBQ0EsWUFBTTtRQUNQLE9BQUs0a0IsWUFBVCxFQUF1QjtZQUNmLE9BQUtBLFlBQUwsQ0FBa0J1RixnQkFBbEIsRUFBUDs7SUFISSxFQU1MbnFCLElBTkssQ0FNQSxtQkFBVztRQUNaa3FCLE9BQUosRUFBYTtZQUNQMUUsZUFBTCxHQUF1Qm5KLG1CQUFtQmtCLE1BQW5CLENBQTBCLElBQUlsQixtQkFBbUIwQyxpQkFBdkIsQ0FBeUMsNEJBQXpDLENBQTFCLENBQXZCO1lBQ08sT0FBS3lHLGVBQVo7O0lBVEksQ0FBUDs7Ozs7Ozs7O3dEQWlCcUM7T0FDL0JsZSxPQUFPaEwsUUFBUUMsTUFBUixDQUFlZ0ksUUFBZixDQUF3QitDLElBQXJDO09BQ0lBLElBQUosRUFBVTtRQUNMOGlCLGdCQUFnQjl0QixRQUFRRSxRQUFSLENBQWlCOG5CLGNBQWpCLENBQWdDaGQsS0FBS3hKLFNBQUwsQ0FBZSxDQUFmLENBQWhDLENBQXBCO1FBQ0lzc0IsYUFBSixFQUFtQjtnQ0FDY25kLE1BQU1vZCxhQUFOLENBQW9CRCxhQUFwQixDQURkO1NBQ1g5YyxVQURXLHdCQUNYQSxVQURXO1NBQ0NDLFNBREQsd0JBQ0NBLFNBREQ7O2FBRVZoUixNQUFSLENBQWUrc0IsUUFBZixDQUF3QmhjLFVBQXhCLEVBQW9DQyxTQUFwQzs7Ozs7Ozs7Ozs7O3dEQVNtQztPQUNqQyxLQUFLK1gsZ0NBQUwsSUFBeUMsS0FBS21FLHdCQUFsRCxFQUE0RTtZQUNuRWx0QixNQUFSLENBQWVzUixPQUFmLENBQXVCNmIsaUJBQXZCLEdBQTJDLEtBQUtELHdCQUFoRDs7Ozs7Ozs7Ozs7Ozs7O2dEQVk0QjdjLE1BQU0rWSxjQUFjcmUsTUFBTTtPQUNuRHFlLGlCQUFpQjFZLE1BQU1VLHFCQUFOLENBQTRCZixJQUE1QixDQUFyQixFQUF3RDtXQUNoRCtZLGVBQWVyZSxJQUF0Qjs7VUFFTXFlLFlBQVA7Ozs7Ozs7Ozs7b0RBT2lDO09BQzdCcmUsT0FBT2hMLFFBQVFDLE1BQVIsQ0FBZWdJLFFBQWYsQ0FBd0IrQyxJQUFuQztPQUNJOGlCLGdCQUFnQjl0QixRQUFRRSxRQUFSLENBQWlCOG5CLGNBQWpCLENBQWdDaGQsS0FBS3hKLFNBQUwsQ0FBZSxDQUFmLENBQWhDLENBQXBCO09BQ0lzc0IsYUFBSixFQUFtQjtnQ0FDY25kLE1BQU1vZCxhQUFOLENBQW9CRCxhQUFwQixDQURkO1FBQ1g5YyxVQURXLHlCQUNYQSxVQURXO1FBQ0NDLFNBREQseUJBQ0NBLFNBREQ7O1NBRWIrYyxxQ0FBTCxDQUEyQy9jLFNBQTNDLEVBQXNERCxVQUF0RDs7Ozs7Ozs7Ozs7Ozs7MkJBV09WLE1BQU04YSxvQkFBb0I2QyxXQUFXO09BQ3pDLENBQUN0ZCxNQUFNdWQsdUJBQU4sRUFBTCxFQUFzQztVQUMvQixJQUFJenRCLEtBQUosQ0FBVSxzRUFBVixDQUFOOzs7OztPQUtHNlAsU0FBUyxLQUFLaVksVUFBbEIsRUFBOEI7eUJBQ1IsSUFBckI7OztRQUdJaFMsSUFBTCxDQUFVLGdCQUFWLEVBQTRCO1dBQ3BCMFgsU0FEb0I7VUFFckIzZCxJQUZxQjtvQkFHWCxDQUFDLENBQUM4YTtJQUhuQjs7VUFNTyxLQUFLbEMsZUFBWjs7Ozs7Ozs7Ozs7O29DQVNpQjVXLE9BQU87T0FDcEJ0UyxRQUFReXNCLG1CQUFaLEVBQWlDO1VBQzFCMEIsSUFBTixHQUFhbnVCLFFBQVF5c0IsbUJBQXJCOzs7Ozs7Ozs7Ozs7OzJDQVV1Qm5hLE9BQU87T0FDM0IsS0FBSzRXLGVBQVQsRUFBMEI7UUFDckIsS0FBS0EsZUFBTCxDQUFxQjVZLElBQXJCLEtBQThCZ0MsTUFBTWhDLElBQXhDLEVBQThDO2FBQ3JDc1csR0FBUixDQUFZLFlBQVo7Ozs7O1FBS0dyUSxJQUFMLENBQVUsY0FBVixFQUEwQmpFLEtBQTFCOztRQUVLaUUsSUFBTCxDQUFVLGVBQVYsRUFBMkI7VUFDcEJqRSxNQUFNNmIsSUFEYztVQUVwQjdiLE1BQU1oQyxJQUZjO29CQUdWZ0MsTUFBTThiO0lBSHZCOzs7Ozs7Ozs7Ozs7eUNBYXNCOWIsT0FBTztPQUN6QitiLE9BQU9wdUIsT0FBT3d0QixlQUFsQjtPQUNJWSxRQUFRLENBQUNBLEtBQUtYLFdBQWQsSUFBNkJXLE1BQWpDLEVBQXlDO1VBQ2xDZCxjQUFOOzs7Ozs7Ozs7Ozs7O3NDQVVrQmpiLE9BQU87T0FDdEJBLE1BQU1nYyxNQUFOLElBQWdCaGMsTUFBTWljLE9BQXRCLElBQWlDamMsTUFBTWtjLE9BQXZDLElBQWtEbGMsTUFBTW1jLFFBQXhELElBQW9FbmMsTUFBTThILE1BQTlFLEVBQXNGO1lBQzdFd00sR0FBUixDQUFZLGlFQUFaOzs7UUFHSThILGNBQUwsQ0FBb0JwYyxNQUFNeUksY0FBTixDQUFxQnhQLElBQXpDLEVBQStDK0csS0FBL0M7Ozs7Ozs7Ozs7Ozt1Q0FTb0JBLE9BQU87T0FDdkI2YixPQUFPN2IsTUFBTXlJLGNBQWpCO09BQ0lvVCxLQUFLUSxNQUFMLEtBQWdCLEtBQXBCLEVBQTJCO1lBQ2xCL0gsR0FBUixDQUFZLDBCQUFaOzs7U0FHSzZGLG1CQUFOLEdBQTRCMEIsSUFBNUI7T0FDTVMsaUJBQWlCLDJEQUF2QjtPQUNJNVYsTUFBTWhaLFFBQVFFLFFBQVIsQ0FBaUIydUIsYUFBdkIsRUFBc0NELGNBQXRDLENBQUosRUFBMkQ7VUFDcERsQyx5QkFBTixHQUFrQzFzQixRQUFRRSxRQUFSLENBQWlCMnVCLGFBQW5EO0lBREQsTUFFTztVQUNBbkMseUJBQU4sR0FBa0N5QixLQUFLVyxhQUFMLENBQW1CRixjQUFuQixDQUFsQzs7UUFFSUYsY0FBTCxDQUFvQlAsS0FBS1ksTUFBekIsRUFBaUN6YyxLQUFqQzs7Ozs7Ozs7Ozs7OzRCQVNTOzs7UUFDSmtYLGdCQUFMLEdBQXdCLElBQXhCO2NBQ1csWUFBTTs7O1lBR1hBLGdCQUFMLEdBQXdCLEtBQXhCO0lBSEQsRUFJRyxDQUpIOztRQU1Ld0YsbUNBQUw7Ozs7Ozs7Ozs7Ozs7Ozs4QkFZVzFjLE9BQU87T0FDZCxLQUFLa1gsZ0JBQVQsRUFBMkI7Ozs7O09BS3ZCN1ksTUFBTThaLG9CQUFOLENBQTJCLEtBQUtoQyx5QkFBaEMsQ0FBSixFQUFnRTtTQUMxRHVHLG1DQUFMOzs7O09BSUd2TCxRQUFRblIsTUFBTW1SLEtBQWxCOztPQUVJLENBQUNBLEtBQUwsRUFBWTtRQUNQempCLFFBQVFDLE1BQVIsQ0FBZWdJLFFBQWYsQ0FBd0IrQyxJQUE1QixFQUFrQzs7Ozs7U0FLN0IsS0FBS3FlLFlBQUwsSUFBcUIsQ0FBQzFZLE1BQU04WixvQkFBTixDQUEyQixLQUFLcEIsWUFBaEMsQ0FBMUIsRUFBeUU7V0FDbkU0RixVQUFMOzs7O1VBSUlELG1DQUFMO0tBVkQsTUFXTztVQUNEQyxVQUFMOzs7OztPQUtFeEwsTUFBTXlMLEtBQVYsRUFBaUI7WUFDUnRJLEdBQVIsQ0FBWSw0QkFBNEJuRCxNQUFNblQsSUFBbEMsR0FBeUMsR0FBckQ7U0FDSzhZLGlCQUFMLEdBQXlCM0YsTUFBTXlKLFNBQS9CO1NBQ0svRCxrQkFBTCxHQUEwQjFGLE1BQU13SixVQUFoQztRQUNJLENBQUMsS0FBS2pFLGdDQUFWLEVBQTRDO1VBQ3RDbUcsMEJBQUw7O1NBRUluVCxJQUFMLENBQVUsYUFBVixFQUF5QixZQUFNO1NBQzFCeUgsTUFBTTVSLFFBQVYsRUFBb0I7WUFDYnVkLFdBQU4sQ0FBa0IzTCxNQUFNNVIsUUFBeEI7O0tBRkY7U0FLS3FaLFFBQUwsQ0FBY3pILE1BQU1uVCxJQUFwQixFQUEwQixJQUExQjs7Ozs7Ozs7Ozs7OzhCQVNVO09BQ1AsS0FBS29ZLG9DQUFULEVBQStDO1NBQ3pDc0YscUNBQUwsQ0FBMkNodUIsUUFBUUMsTUFBUixDQUFlb3ZCLFdBQTFELEVBQXVFcnZCLFFBQVFDLE1BQVIsQ0FBZXF2QixXQUF0Rjs7Ozs7Ozs7Ozs7OzttQ0FVZWhkLE9BQU87OztRQUNsQmlkLG1DQUFMO1FBQ0s3RyxvQ0FBTCxHQUE0QyxLQUE1QztjQUNXMW9CLFFBQVFFLFFBQVIsQ0FBaUJxSCxlQUE1QixFQUE2QyxLQUFLd2hCLGVBQWxEOztPQUVJeUcscUJBQXFCO1VBQ2xCbGQsTUFBTTZiLElBRFk7VUFFbEI3YixNQUFNaEM7SUFGYjs7UUFLSzRZLGVBQUwsR0FBdUIsS0FBS3VHLFdBQUwsQ0FBaUJuZCxNQUFNaEMsSUFBdkIsRUFBNkJnQyxNQUFNOGIsY0FBbkMsRUFDckI5TCxLQURxQixDQUNmLFVBQUMxQixNQUFELEVBQVk7dUJBQ0NsUCxLQUFuQixHQUEyQmtQLE1BQTNCO1VBQ01BLE1BQU47SUFIcUIsRUFLckJvQixVQUxxQixDQUtWLFlBQU07UUFDYixDQUFDLFFBQUtrSCxlQUFWLEVBQTJCO21CQUNabHBCLFFBQVFFLFFBQVIsQ0FBaUJxSCxlQUEvQixFQUFnRCxRQUFLd2hCLGVBQXJEO2FBQ0syRyxtQ0FBTDthQUNLaEgsb0NBQUwsR0FBNEMsSUFBNUM7O1lBRUluUyxJQUFMLENBQVUsYUFBVixFQUF5QmlaLGtCQUF6QjtJQVhxQixDQUF2Qjs7UUFjS3RHLGVBQUwsQ0FBcUI1WSxJQUFyQixHQUE0QmdDLE1BQU1oQyxJQUFsQzs7Ozs7Ozs7Ozs7MkJBUVFBLE1BQU07OztPQUNWaVYsUUFBUSxLQUFLbUYsU0FBTCxDQUFlcGEsSUFBZixDQUFaO09BQ0ksQ0FBQ2lWLEtBQUwsRUFBWTtXQUNKeEYsbUJBQW1Ca0IsTUFBbkIsQ0FBMEIsSUFBSWxCLG1CQUFtQjBDLGlCQUF2QixDQUF5QyxrQkFBa0JuUyxJQUEzRCxDQUExQixDQUFQOzs7V0FHT3NXLEdBQVIsQ0FBWSxrQkFBa0J0VyxJQUFsQixHQUF5QixHQUFyQzs7T0FFSWdiLGFBQWEsS0FBS0Msb0JBQUwsQ0FBMEJqYixJQUExQixFQUFnQ2lWLEtBQWhDLENBQWpCOztVQUVPK0YsV0FBV0ksSUFBWCxDQUFnQnBiLElBQWhCLEVBQ0w1TSxJQURLLENBQ0E7V0FBTSxRQUFLNmxCLE9BQUwsQ0FBYWpaLElBQWIsSUFBcUJnYixVQUEzQjtJQURBLEVBRUxoSixLQUZLLENBRUMsVUFBQzFCLE1BQUQsRUFBWTtZQUNieUwsb0JBQUwsQ0FBMEIvYixJQUExQixFQUFnQ2diLFVBQWhDLEVBQTRDMUssTUFBNUM7VUFDTUEsTUFBTjtJQUpLLENBQVA7Ozs7Ozs7Ozs7OzswQ0FjdUJ0USxNQUFNZ2IsWUFBWUYsb0JBQW9CO09BQ3pEekUsUUFBUTJFLFdBQVdxRSxRQUFYLEVBQVo7T0FDSSxDQUFDaHNCLFNBQVNnakIsS0FBVCxDQUFMLEVBQXNCO1lBQ2IsS0FBS2lKLGVBQUwsRUFBUjs7T0FFR3ZHLGVBQWVpQyxXQUFXdUUsdUJBQVgsQ0FBbUN2ZixJQUFuQyxDQUFuQjtPQUNNd2YsZUFBZTtVQUNkaHRCLGdCQUFnQjlDLFFBQVF5c0IsbUJBQXhCLENBRGM7Y0FBQTs4QkFBQTtnQkFJUixDQUpRO2VBS1QsQ0FMUztXQU1iO0lBTlI7T0FRSXJCLGtCQUFKLEVBQXdCO2lCQUNWOEIsU0FBYixHQUF5QixLQUFLOUQsaUJBQTlCO2lCQUNhNkQsVUFBYixHQUEwQixLQUFLOUQsa0JBQS9COztPQUVLbmUsT0FBTyxJQUFJb0QsR0FBSixDQUFRa0MsSUFBUixFQUFjSixPQUFkLEVBQWI7a0JBQ2UsS0FBSzZmLDZCQUFMLENBQW1DemYsSUFBbkMsRUFBeUMrWSxZQUF6QyxFQUF1RHJlLElBQXZELENBQWY7UUFDS2dsQixjQUFMLENBQW9CckosS0FBcEIsRUFBMkIwQyxZQUEzQixFQUF5Q2lDLFdBQVcyRSx3QkFBWCxDQUFvQ0gsWUFBcEMsQ0FBekMsRUFBNEYxRSxrQkFBNUY7UUFDSy9CLFlBQUwsR0FBb0JBLFlBQXBCOzs7Ozs7Ozs7Ozs7MkNBU3dCaUMsWUFBWXpFLFVBQVVxSixRQUFRO1VBQy9DcG1CLElBQVAsQ0FBWStjLFFBQVosRUFBc0I3WSxPQUF0QixDQUE4QixVQUFDeEwsRUFBRCxFQUFRO1FBQ2pDMnRCLGlCQUFpQjdFLFdBQVc4RSxpQkFBWCxDQUE2QjV0QixFQUE3QixFQUFpQzB0QixNQUFqQyxDQUFyQjthQUNTMXRCLEVBQVQsRUFBYXlsQixVQUFiLENBQXdCcUQsV0FBV2pCLEtBQVgsRUFBeEIsRUFBNEM4RixjQUE1QztZQUNRdkosR0FBUixDQUFZLGFBQWEwRSxXQUFXakIsS0FBWCxFQUFiLEdBQWtDLDJCQUFsQyxHQUNYLEdBRFcsR0FDTHhELFNBQVNya0IsRUFBVCxDQURLLEdBQ1UsS0FEVixJQUNtQk0sZ0JBQWdCcXRCLGNBQWhCLElBQWtDLEtBQWxDLEdBQTBDLE9BRDdELElBQ3dFLEdBRHBGO0lBSEQ7Ozs7Ozs7OzsrQkFXWTtXQUNKbHdCLE1BQVIsQ0FBZWdJLFFBQWYsQ0FBd0Jvb0IsTUFBeEI7Ozs7Ozs7Ozs7OzhCQVFXOUssT0FBTztVQUNYcGhCLE1BQU15SixNQUFOLENBQWEsS0FBSzBiLE1BQWxCLEVBQTBCL0QsS0FBMUIsQ0FBUDs7Ozs7Ozs7OzsrQkFPWWpWLE1BQU07OztPQUNkc2EsU0FBUyxLQUFLckIsT0FBTCxDQUFhalosSUFBYixDQUFiO09BQ0lzYSxNQUFKLEVBQVk7V0FDSjlnQixJQUFQLENBQVksS0FBSytjLFFBQWpCLEVBQTJCN1ksT0FBM0IsQ0FBbUMsVUFBQ3NpQixTQUFEO1lBQWUsUUFBS3pKLFFBQUwsQ0FBY3lKLFNBQWQsRUFBeUIxaUIsTUFBekIsQ0FBZ0NnZCxPQUFPUCxLQUFQLEVBQWhDLENBQWY7S0FBbkM7V0FDT2tHLE9BQVA7V0FDTyxLQUFLaEgsT0FBTCxDQUFhalosSUFBYixDQUFQOzs7Ozs7Ozs7Ozs7d0RBU29DNGMsV0FBV0QsWUFBWTtPQUN4RHhKLFFBQVF6akIsUUFBUUMsTUFBUixDQUFlc1IsT0FBZixDQUF1QmtTLEtBQW5DO09BQ0lBLFNBQVNBLE1BQU15TCxLQUFuQixFQUEwQjtlQUNhLENBQUNoQyxTQUFELEVBQVlELFVBQVosQ0FEYjtVQUNsQkMsU0FEa0I7VUFDREQsVUFEQzs7WUFFakJodEIsTUFBUixDQUFlc1IsT0FBZixDQUF1QmlmLFlBQXZCLENBQW9DL00sS0FBcEMsRUFBMkMsSUFBM0MsRUFBaUQsSUFBakQ7Ozs7Ozs7Ozs7OzBDQVFzQitFLHNCQUFzQjtRQUN4Q0Esb0JBQUwsR0FBNEJBLG9CQUE1Qjs7Ozs7Ozs7Ozs4QkFPV3BZLFVBQVU7UUFDaEJBLFFBQUwsR0FBZ0JPLE1BQU04Zix1QkFBTixDQUE4QnJnQixRQUE5QixDQUFoQjs7Ozs7Ozs7OztrQ0FPZXVZLGNBQWM7UUFDeEJBLFlBQUwsR0FBb0JBLFlBQXBCOzs7Ozs7Ozs7O2tDQU9lQyxjQUFjO1FBQ3hCQSxZQUFMLEdBQW9CQSxZQUFwQjtPQUNJLEtBQUttQyxpQkFBVCxFQUE0QjtTQUN0QkEsaUJBQUwsQ0FBdUJwWSxjQUF2Qjs7UUFFSW9ZLGlCQUFMLEdBQXlCbFIsU0FBUzNaLFFBQVQsRUFBbUIsUUFBbkIsRUFBNkIsS0FBSzBvQixZQUFsQyxFQUFnRCxLQUFLOEgsb0JBQUwsQ0FBMEJqcUIsSUFBMUIsQ0FBK0IsSUFBL0IsQ0FBaEQsRUFBc0YsS0FBSytoQixvQkFBM0YsQ0FBekI7Ozs7Ozs7Ozs7b0RBT2lDSyxnQ0FBZ0M7UUFDNURBLDhCQUFMLEdBQXNDQSw4QkFBdEM7Ozs7Ozs7Ozs7a0NBT2VDLGNBQWM7UUFDeEJBLFlBQUwsR0FBb0JBLFlBQXBCO09BQ0ksS0FBS2tDLGlCQUFULEVBQTRCO1NBQ3RCQSxpQkFBTCxDQUF1QnJZLGNBQXZCOztRQUVJcVksaUJBQUwsR0FBeUJuUixTQUFTM1osUUFBVCxFQUFtQixPQUFuQixFQUE0QixLQUFLNG9CLFlBQWpDLEVBQStDLEtBQUs2SCxtQkFBTCxDQUF5QmxxQixJQUF6QixDQUE4QixJQUE5QixDQUEvQyxFQUFvRixLQUFLK2hCLG9CQUF6RixDQUF6Qjs7Ozs7Ozs7OztxQ0FPa0JPLGlCQUFpQjtRQUM5QkEsZUFBTCxHQUF1QkEsZUFBdkI7Ozs7Ozs7Ozs7MENBT3VCVSxzQkFBc0I7UUFDeENBLG9CQUFMLEdBQTRCQSxvQkFBNUI7Ozs7Ozs7Ozs7eUNBT3NCO09BQ2xCLEtBQUtQLGVBQVQsRUFBMEI7U0FDcEJBLGVBQUwsQ0FBcUIzRyxNQUFyQixDQUE0QiwyQkFBNUI7U0FDSzJHLGVBQUwsR0FBdUIsSUFBdkI7Ozs7Ozs7Ozs7Ozs7O3FEQVdpQzs7O09BQzlCekYsUUFBUXpqQixRQUFRQyxNQUFSLENBQWVzUixPQUFmLENBQXVCa1MsS0FBbkM7T0FDSSxDQUFDQSxLQUFMLEVBQVk7Ozs7T0FJUnlKLFlBQVl6SixNQUFNeUosU0FBdEI7T0FDSUQsYUFBYXhKLE1BQU13SixVQUF2Qjs7T0FFSTJELE9BQU8sU0FBUEEsSUFBTyxHQUFNO1FBQ1osUUFBS25ILG9CQUFULEVBQStCO2FBQ3RCeHBCLE1BQVIsQ0FBZStzQixRQUFmLENBQXdCQyxVQUF4QixFQUFvQ0MsU0FBcEM7O0lBRkY7O1VBTU8sSUFBSW5OLGtCQUFKLENBQXVCLFVBQUNnQixPQUFEO1dBQWE2UCxTQUFTbnJCLE1BQU1HLFFBQU4sQ0FBZTtZQUFNZ3JCLFNBQVM3UCxTQUFmO0tBQWYsQ0FBdEI7SUFBdkIsQ0FBUDs7Ozs7Ozs7Ozs7Ozs7aUNBV2M0RixPQUFPclcsTUFBTW1ULE9BQU8ySCxvQkFBb0I7T0FDaER2WixXQUFXN1IsUUFBUUMsTUFBUixDQUFlZ0ksUUFBZixDQUF3QnNELElBQXpDOztPQUVJa1ksS0FBSixFQUFXO1VBQ0o1UixRQUFOLEdBQWlCQSxRQUFqQjs7O09BR0d1WixrQkFBSixFQUF3QjtZQUNmbnJCLE1BQVIsQ0FBZXNSLE9BQWYsQ0FBdUJpZixZQUF2QixDQUFvQy9NLEtBQXBDLEVBQTJDa0QsS0FBM0MsRUFBa0RyVyxJQUFsRDtJQURELE1BRU87WUFDRXJRLE1BQVIsQ0FBZXNSLE9BQWYsQ0FBdUJDLFNBQXZCLENBQWlDaVMsS0FBakMsRUFBd0NrRCxLQUF4QyxFQUErQ3JXLElBQS9DOzs7U0FHSzhlLFdBQU4sQ0FBa0J2ZCxRQUFsQjs7T0FFSWdmLFlBQVk3d0IsUUFBUUUsUUFBUixDQUFpQjR1QixhQUFqQixDQUErQixPQUEvQixDQUFoQjtPQUNJK0IsU0FBSixFQUFlO2NBQ0p0WCxTQUFWLEdBQXNCb04sS0FBdEI7SUFERCxNQUVPO1lBQ0V6bUIsUUFBUixDQUFpQnltQixLQUFqQixHQUF5QkEsS0FBekI7Ozs7O0VBeHVDZTdUOztJQ1JaZ2U7Ozs7Ozs7Ozs7Ozs7Ozs7Ozt1Q0FXdUJDLFlBQVk7T0FDbkNDLFVBQVUsRUFBZDtPQUNJLENBQUNELFVBQUwsRUFBaUI7V0FDVEMsT0FBUDs7T0FFR0MsUUFBUUYsV0FBV3JuQixLQUFYLENBQWlCLE1BQWpCLENBQVo7UUFDSyxJQUFJbkYsSUFBSSxDQUFiLEVBQWdCQSxJQUFJMHNCLE1BQU0zc0IsTUFBMUIsRUFBa0NDLEdBQWxDLEVBQXVDO1FBQ2xDK0ksUUFBUTJqQixNQUFNMXNCLENBQU4sRUFBUzlDLE9BQVQsQ0FBaUIsSUFBakIsQ0FBWjtRQUNJNkwsUUFBUSxDQUFaLEVBQWU7U0FDVmpNLE9BQU80dkIsTUFBTTFzQixDQUFOLEVBQVMvQyxTQUFULENBQW1CLENBQW5CLEVBQXNCOEwsS0FBdEIsQ0FBWDtTQUNJbkMsUUFBUThsQixNQUFNMXNCLENBQU4sRUFBUy9DLFNBQVQsQ0FBbUI4TCxRQUFRLENBQTNCLENBQVo7YUFDUXhJLElBQVIsQ0FBYTtZQUNOekQsSUFETTthQUVMOEo7TUFGUjs7O1VBTUs2bEIsT0FBUDs7Ozs7Ozs7Ozs7Ozs7Ozs7OzswQkFnQmM5a0IsS0FBS3lpQixRQUFRdUMsTUFBTUMsYUFBYUMsWUFBWUMsYUFBYUMsVUFBVUMscUJBQXFCO1NBQ2hHcmxCLE9BQU8sRUFBYjtZQUNTeWlCLFVBQVUsS0FBbkI7O09BRUk2QyxVQUFVLElBQUlDLGNBQUosRUFBZDtPQUNJQyxxQkFBcUIsQ0FBekI7O09BRUlyUSxVQUFVLElBQUlzUSxrQkFBSixDQUFZLFVBQVM1USxPQUFULEVBQWtCRSxNQUFsQixFQUEwQjtZQUMzQzJRLE1BQVIsR0FBaUIsWUFBVztTQUN2QkosUUFBUUssT0FBWixFQUFxQjtjQUNaQyxPQUFSOzs7YUFHT04sT0FBUjtLQUxEO1lBT1Ezb0Isa0JBQVIsR0FBNkIsWUFBVztTQUNuQzZvQixzQkFBc0JBLHFCQUFxQixDQUEzQyxJQUFnRCxNQUFNRixRQUFRTyxVQUFsRSxFQUE4RTtjQUNyRUMscUJBQVIsR0FBZ0MsSUFBaEM7OzBCQUVvQlIsUUFBUU8sVUFBN0I7S0FKRDtZQU1RRCxPQUFSLEdBQWtCLFlBQVc7U0FDeEIvcEIsVUFBVSxlQUFkO1NBQ0l5cEIsUUFBUVEscUJBQVosRUFBbUM7Z0JBQ3hCLGdDQUFWOztTQUVHdGdCLFFBQVEsSUFBSWpSLEtBQUosQ0FBVXNILE9BQVYsQ0FBWjtXQUNNeXBCLE9BQU4sR0FBZ0JBLE9BQWhCO1lBQ085ZixLQUFQO0tBUEQ7SUFkYSxFQXVCWDBRLFNBdkJXLENBdUJELFVBQVN4QixNQUFULEVBQWlCO1lBQ3JCcVIsS0FBUjtVQUNNclIsTUFBTjtJQXpCYSxFQTBCWG9CLFVBMUJXLENBMEJBLFlBQVc7aUJBQ1hrUSxPQUFiO0lBM0JhLENBQWQ7O1NBOEJNLElBQUk5akIsR0FBSixDQUFRbEMsR0FBUixDQUFOOztPQUVJa2xCLFVBQUosRUFBZ0I7UUFDWGUseUJBQUosQ0FBOEJmLFVBQTlCLEVBQTBDN3ZCLFFBQTFDOzs7U0FHSzJLLElBQUkzSyxRQUFKLEVBQU47O1dBRVFxRyxJQUFSLENBQWErbUIsTUFBYixFQUFxQnppQixHQUFyQixFQUEwQixDQUFDb2xCLFFBQTNCOztPQUVJQyxtQkFBSixFQUF5QjtZQUNoQmEsZUFBUixHQUEwQixJQUExQjs7O09BR0dqQixXQUFKLEVBQWlCO2dCQUNKM2tCLEtBQVosR0FBb0J3QixPQUFwQixDQUE0QixVQUFTM00sSUFBVCxFQUFlO2FBQ2xDZ3hCLGdCQUFSLENBQXlCaHhCLElBQXpCLEVBQStCOHZCLFlBQVk1aUIsTUFBWixDQUFtQmxOLElBQW5CLEVBQXlCbVAsSUFBekIsQ0FBOEIsSUFBOUIsQ0FBL0I7S0FERDs7O1dBS084aEIsSUFBUixDQUFhenZCLE1BQU1xdUIsSUFBTixJQUFjQSxJQUFkLEdBQXFCLElBQWxDOztPQUVJcHVCLGdCQUFnQnV1QixXQUFoQixDQUFKLEVBQWtDO1FBQzdCYSxVQUFVak8sV0FBVyxZQUFXO2FBQzNCMUIsTUFBUixDQUFlLGlCQUFmO0tBRGEsRUFFWDhPLFdBRlcsQ0FBZDs7O1VBS01oUSxPQUFQOzs7Ozs7QUNqSEY7Ozs7O0lBSU1rUjs7Ozs7Ozs7Ozs7QUFRTkEsT0FBT0MsY0FBUCxHQUF3QixxQkFBeEI7Ozs7Ozs7QUFPQUQsT0FBT0UsYUFBUCxHQUF1QixlQUF2Qjs7Ozs7OztBQU9BRixPQUFPRyxlQUFQLEdBQXlCLGlCQUF6Qjs7Ozs7OztBQU9BSCxPQUFPSSw2QkFBUCxHQUF1QyxnQ0FBdkM7O0FDakNBOzs7Ozs7OztJQU9NQzs7Ozs7Ozs7Ozs7Ozs7Ozt1Q0FTdUI7T0FDdkJDLFlBQVlELEdBQUc1eUIsT0FBSCxDQUFXQyxNQUFYLENBQWtCNHlCLFNBQWxDO09BQ0lBLFNBQUosRUFBZTtRQUNWQyxZQUFZRCxVQUFVQyxTQUExQjtRQUNJQSxTQUFKLEVBQWU7WUFDUEEsU0FBUDs7O1VBR0ssRUFBUDs7Ozs7Ozs7Ozs7Ozs7c0NBVzBCO09BQ3RCRCxZQUFZRCxHQUFHNXlCLE9BQUgsQ0FBV0MsTUFBWCxDQUFrQjR5QixTQUFsQztPQUNJQSxTQUFKLEVBQWU7UUFDVkUsV0FBV0YsVUFBVUUsUUFBekI7UUFDSUEsUUFBSixFQUFjO1lBQ05BLFFBQVA7OztVQUdLLEVBQVA7Ozs7Ozs7Ozs7Ozs7Z0NBVW9CenhCLEtBQUs7VUFDbEJzeEIsR0FBR0csUUFBSCxDQUFZdHhCLE9BQVosQ0FBb0JILEdBQXBCLE1BQTZCLENBQUMsQ0FBckM7Ozs7Ozs7Ozs7Ozs7aUNBVXFCQSxLQUFLO1VBQ25Cc3hCLEdBQUdFLFNBQUgsQ0FBYXJ4QixPQUFiLENBQXFCSCxHQUFyQixNQUE4QixDQUFDLENBQXRDOzs7Ozs7Ozs7OztrQ0FRbUQ7T0FBL0J3eEIsU0FBK0IsdUVBQW5CLEVBQW1CO09BQWZDLFFBQWUsdUVBQUosRUFBSTs7Ozs7OztNQU1oREQsU0FBSCxHQUFlQSxTQUFmOzs7Ozs7O01BT0dDLFFBQUgsR0FBY0EsUUFBZDs7Ozs7OztNQU9HQyxLQUFILEdBQVdKLEdBQUdLLGFBQUgsQ0FBaUIsS0FBakIsQ0FBWDs7Ozs7OztNQU9HQyxLQUFILEdBQVdOLEdBQUdLLGFBQUgsQ0FBaUIsS0FBakIsQ0FBWDs7Ozs7OztNQU9HRSxPQUFILEdBQWFQLEdBQUdRLGNBQUgsQ0FBa0IsT0FBbEIsS0FBOEJSLEdBQUdRLGNBQUgsQ0FBa0IsS0FBbEIsQ0FBM0M7Ozs7Ozs7TUFPR0MsSUFBSCxHQUFVVCxHQUFHUSxjQUFILENBQWtCLFNBQWxCLEtBQWdDUixHQUFHUSxjQUFILENBQWtCLE1BQWxCLENBQTFDOzs7Ozs7O01BT0dFLE1BQUgsR0FBWVYsR0FBR1EsY0FBSCxDQUFrQixNQUFsQixDQUFaOzs7Ozs7O01BT0dHLFVBQUgsR0FBZ0JYLEdBQUdTLElBQUgsSUFBV1QsR0FBR1UsTUFBOUI7Ozs7Ozs7TUFPR0UsUUFBSCxHQUFjLENBQUNaLEdBQUdRLGNBQUgsQ0FBa0IsUUFBbEIsS0FBK0JSLEdBQUdRLGNBQUgsQ0FBa0IsT0FBbEIsQ0FBaEMsS0FBK0QsQ0FBQ1IsR0FBR08sT0FBbkUsSUFBOEUsQ0FBQ1AsR0FBR1UsTUFBaEc7Ozs7Ozs7TUFPR0csUUFBSCxHQUFjYixHQUFHUSxjQUFILENBQWtCLFFBQWxCLEtBQStCLEVBQUVSLEdBQUdZLFFBQUgsSUFBZVosR0FBR08sT0FBbEIsSUFBNkJQLEdBQUdVLE1BQWxDLENBQTdDOzs7Ozs7O01BT0dJLFNBQUgsR0FBZWQsR0FBR1EsY0FBSCxDQUFrQixTQUFsQixDQUFmOzs7Ozs7Ozs7Ozs7O0FBU0ZSLEdBQUc1eUIsT0FBSCxHQUFhO1NBQ0pDO0NBRFQ7O0FBSUEyeUIsR0FBR2UsYUFBSCxDQUFpQmYsR0FBR2dCLGtCQUFILEVBQWpCLEVBQTBDaEIsR0FBR2lCLGlCQUFILEVBQTFDOztJQ3ZKTUM7Ozs7Ozs7OzswQkFRUzs7Ozs7Ozs7O1FBT1J4TixTQUFMLEdBQWlCLElBQWpCOzs7Ozs7Ozs7OztRQVdLeU4sV0FBTCxHQUFtQjthQUNSLE1BRFE7dUJBRUU7R0FGckI7Ozs7Ozs7O1FBV0tDLFVBQUwsR0FBa0JGLGNBQWNHLEdBQWhDOzs7Ozs7OztRQVFLekMsT0FBTCxHQUFlLElBQWY7Ozs7Ozs7O1FBUUtVLE9BQUwsR0FBZSxLQUFmOzs7Ozs7Ozs7Ozs7O2dEQVE2QmdDLFFBQVE7T0FDakMsQ0FBQyxLQUFLQyx5QkFBTCxDQUErQkQsTUFBL0IsQ0FBTCxFQUE2QztRQUN4Q3hpQixRQUFRLElBQUlqUixLQUFKLENBQVU4eEIsT0FBT0MsY0FBakIsQ0FBWjtVQUNNNEIsYUFBTixHQUFzQixJQUF0QjtVQUNNQyxVQUFOLEdBQW1CSCxNQUFuQjtVQUNNeGlCLEtBQU47Ozs7Ozs7Ozs7MENBT3NCcEIsTUFBTTtPQUN6QitZLGVBQWUsS0FBS2lMLGNBQUwsRUFBbkI7T0FDSWpMLGdCQUFnQkEsaUJBQWlCL1ksSUFBckMsRUFBMkM7V0FDbkMrWSxZQUFQOztVQUVNL1ksSUFBUDs7Ozs7Ozs7OzJDQU13Qm1ULE9BQU87Ozs7T0FJM0JBLE1BQU15TCxLQUFOLElBQWV6TCxNQUFNMEssSUFBckIsSUFBNkIxSyxNQUFNNEYsWUFBTixLQUF1QjVGLE1BQU1uVCxJQUE5RCxFQUFvRTtXQUM1RCxJQUFQOztVQUVNbVQsS0FBUDs7Ozs7Ozs7Ozs7O2lDQVNjblQsTUFBTTtPQUNoQmEsTUFBTSxJQUFJL0MsR0FBSixDQUFRa0MsSUFBUixDQUFWOztPQUVJaWtCLFdBQUosQ0FBZ0J2MEIsUUFBUUMsTUFBUixDQUFlZ0ksUUFBZixDQUF3QnlELFFBQXhDO09BQ0k4b0IsV0FBSixDQUFnQngwQixRQUFRQyxNQUFSLENBQWVnSSxRQUFmLENBQXdCQyxRQUF4Qzs7T0FFSWxJLFFBQVFDLE1BQVIsQ0FBZWdJLFFBQWYsQ0FBd0I0RCxJQUE1QixFQUFrQztRQUM3QjRvQixPQUFKLENBQVl6MEIsUUFBUUMsTUFBUixDQUFlZ0ksUUFBZixDQUF3QjRELElBQXBDOzs7T0FHRyttQixHQUFHVyxVQUFILElBQWlCLEtBQUtTLFVBQUwsS0FBb0JGLGNBQWNHLEdBQXZELEVBQTREO1dBQ3BEOWlCLElBQUl1akIsVUFBSixHQUFpQm56QixRQUFqQixFQUFQOzs7VUFHTTRQLElBQUk1UCxRQUFKLEVBQVA7Ozs7Ozs7Ozs7bUNBT2dCO1VBQ1QsS0FBS3d5QixXQUFaOzs7Ozs7Ozs7O2tDQU9lO1VBQ1IsS0FBS0MsVUFBWjs7Ozs7Ozs7OzttQ0FPZ0I7T0FDWnhDLFVBQVUsS0FBS21ELFVBQUwsRUFBZDtPQUNJbkQsT0FBSixFQUFhO1FBQ1JvRCxjQUFjcEQsUUFBUW9ELFdBQTFCO1FBQ0lDLGNBQWMsS0FBS0Msa0NBQUwsQ0FBd0N0RCxPQUF4QyxDQUFsQjtRQUNJcUQsV0FBSixFQUFpQjttQkFDRkEsV0FBZDs7UUFFR2pDLEdBQUdXLFVBQUgsSUFBaUIsS0FBS1MsVUFBTCxLQUFvQkYsY0FBY0csR0FBdkQsRUFBNEQ7bUJBQzdDLElBQUk3bEIsR0FBSixDQUFRd21CLFdBQVIsRUFBcUJHLFlBQXJCLEdBQW9DeHpCLFFBQXBDLEVBQWQ7O1dBRU1vUCxNQUFNVyxVQUFOLENBQWlCc2pCLFdBQWpCLENBQVA7O1VBRU0sSUFBUDs7Ozs7Ozs7OzsrQkFPWTtVQUNMLEtBQUtwRCxPQUFaOzs7Ozs7Ozs7OytCQU9ZO1VBQ0wsS0FBS1UsT0FBWjs7Ozs7Ozs7Ozs7NENBUXlCbUMsWUFBWTtVQUM5QkEsY0FBYyxHQUFkLElBQXFCQSxjQUFjLEdBQTFDOzs7Ozs7Ozs7dUJBTUkvakIsTUFBTTs7O09BQ0orVixRQUFRLEtBQUsyTyxRQUFMLEVBQWQ7T0FDSWx5QixnQkFBZ0J1akIsS0FBaEIsQ0FBSixFQUE0QjtXQUNwQnRHLG1CQUFtQmdCLE9BQW5CLENBQTJCc0YsS0FBM0IsQ0FBUDs7T0FFRzZLLE9BQU8sSUFBWDtPQUNJOEMsYUFBYSxLQUFLQSxVQUF0QjtPQUNNaEQsVUFBVSxJQUFJNWtCLFFBQUosRUFBaEI7VUFDT3RDLElBQVAsQ0FBWSxLQUFLaXFCLFdBQWpCLEVBQThCL2xCLE9BQTlCLENBQXNDO1dBQVVnakIsUUFBUXJpQixHQUFSLENBQVlzbUIsTUFBWixFQUFvQixPQUFLbEIsV0FBTCxDQUFpQmtCLE1BQWpCLENBQXBCLENBQVY7SUFBdEM7T0FDSWoxQixRQUFReXNCLG1CQUFaLEVBQWlDO1NBQzNCeUksb0JBQUw7V0FDTyxJQUFJQyxRQUFKLENBQWFuMUIsUUFBUXlzQixtQkFBckIsQ0FBUDtTQUNLMkksNkJBQUwsQ0FBbUNsRSxJQUFuQztpQkFDYTRDLGNBQWN1QixJQUEzQjtRQUNJekMsR0FBR1csVUFBUCxFQUFtQjthQUNWNWtCLEdBQVIsQ0FBWSxlQUFaLEVBQTZCLEtBQTdCOzs7T0FHSWltQixjQUFjLEtBQUtVLGNBQUwsQ0FBb0JobEIsSUFBcEIsQ0FBcEI7VUFDT3dnQixLQUNMVSxPQURLLENBQ0dvRCxXQURILEVBQ2dCWixVQURoQixFQUM0QjlDLElBRDVCLEVBQ2tDRixPQURsQyxFQUMyQyxJQUQzQyxFQUNpRCxLQUFLa0IsT0FEdEQsRUFFTHh1QixJQUZLLENBRUEsZUFBTztXQUNQNnhCLHVCQUFMO1dBQ0tDLFVBQUwsQ0FBZ0JDLEdBQWhCO1dBQ0tDLDZCQUFMLENBQW1DRCxJQUFJdkIsTUFBdkM7UUFDSUYsZUFBZUYsY0FBY0csR0FBN0IsSUFBb0MsT0FBS3pILFdBQUwsRUFBeEMsRUFBNEQ7WUFDdERtSixRQUFMLENBQWNGLElBQUlHLFlBQWxCOztRQUVHaEIsV0FBSixHQUFrQkEsV0FBbEI7V0FDT2EsSUFBSUcsWUFBWDtJQVZLLEVBWUx0VCxLQVpLLENBWUMsVUFBQzFCLE1BQUQsRUFBWTtXQUNiMlUsdUJBQUw7WUFDUTNVLE9BQU83WSxPQUFmO1VBQ013cUIsT0FBT0csZUFBWjthQUNRUixPQUFQLEdBQWlCLElBQWpCOztVQUVJSyxPQUFPRSxhQUFaO2FBQ1FvRCxZQUFQLEdBQXNCLElBQXRCOztVQUVJdEQsT0FBT0ksNkJBQVo7YUFDUWtELFlBQVAsR0FBc0IsSUFBdEI7YUFDT0MsMkJBQVAsR0FBcUMsSUFBckM7OztVQUdJbFYsTUFBTjtJQTFCSyxDQUFQOzs7Ozs7Ozs7Ozs7Z0RBb0M2QnNRLE1BQU07T0FDN0I5VyxTQUFTcGEsUUFBUTBzQix5QkFBdkI7T0FDSXRTLFVBQVVBLE9BQU8vWSxJQUFyQixFQUEyQjtTQUNyQjRYLE1BQUwsQ0FBWW1CLE9BQU8vWSxJQUFuQixFQUF5QitZLE9BQU9qUCxLQUFoQzs7Ozs7Ozs7Ozs7Ozs7Ozs7O3FEQWVpQ3FtQixTQUFTO09BQ3ZDcUQsY0FBY3JELFFBQVF1RSxXQUExQjtPQUNJbEIsV0FBSixFQUFpQjtXQUNUQSxXQUFQOztVQUVNckQsUUFBUXdFLGlCQUFSLENBQTBCbEMsY0FBY21DLG9CQUF4QyxDQUFQOzs7Ozs7Ozs7Ozs7Ozt5Q0FXc0I7T0FDbEJqMkIsUUFBUXlzQixtQkFBUixJQUErQm1HLEdBQUdhLFFBQXRDLEVBQWdEO1FBQzNDeUMsU0FBU2wyQixRQUFReXNCLG1CQUFSLENBQTRCL1EsZ0JBQTVCLENBQTZDLG9DQUE3QyxDQUFiO1NBQ0ssSUFBSXBPLFFBQVEsQ0FBakIsRUFBb0JBLFFBQVE0b0IsT0FBTzV4QixNQUFuQyxFQUEyQ2dKLE9BQTNDLEVBQW9EO1NBQy9DNm9CLFFBQVFELE9BQU81b0IsS0FBUCxDQUFaO1NBQ0k2b0IsTUFBTUMsS0FBTixDQUFZOXhCLE1BQVosR0FBcUIsQ0FBekIsRUFBNEI7OztXQUd0QndNLFlBQU4sQ0FBbUIsMkJBQW5CLEVBQWdELE1BQWhEO1dBQ01BLFlBQU4sQ0FBbUIsVUFBbkIsRUFBK0IsRUFBL0I7Ozs7Ozs7Ozs7Ozs7Ozs0Q0FZdUI7T0FDckI5USxRQUFReXNCLG1CQUFSLElBQStCbUcsR0FBR2EsUUFBdEMsRUFBZ0Q7UUFDM0N5QyxTQUFTbDJCLFFBQVF5c0IsbUJBQVIsQ0FBNEIvUSxnQkFBNUIsQ0FBNkMsK0NBQTdDLENBQWI7U0FDSyxJQUFJcE8sUUFBUSxDQUFqQixFQUFvQkEsUUFBUTRvQixPQUFPNXhCLE1BQW5DLEVBQTJDZ0osT0FBM0MsRUFBb0Q7U0FDN0M2b0IsUUFBUUQsT0FBTzVvQixLQUFQLENBQWQ7V0FDTXFFLGVBQU4sQ0FBc0IsMkJBQXRCO1dBQ01BLGVBQU4sQ0FBc0IsVUFBdEI7Ozs7Ozs7Ozs7OztpQ0FTWW9pQixhQUFhO1FBQ3RCQSxXQUFMLEdBQW1CQSxXQUFuQjs7Ozs7Ozs7OztnQ0FPYUMsWUFBWTtRQUNwQkEsVUFBTCxHQUFrQkEsV0FBV3hwQixXQUFYLEVBQWxCOzs7Ozs7Ozs7OzZCQU9VZ25CLFNBQVM7UUFDZEEsT0FBTCxHQUFlQSxPQUFmOzs7Ozs7Ozs7OzZCQU9VVSxTQUFTO1FBQ2RBLE9BQUwsR0FBZUEsT0FBZjs7OztFQTNVMEJ6TDs7Ozs7Ozs7OztBQXNWNUJxTixjQUFjRyxHQUFkLEdBQW9CLEtBQXBCOzs7Ozs7OztBQVFBSCxjQUFjdUIsSUFBZCxHQUFxQixNQUFyQjs7Ozs7Ozs7QUFRQXZCLGNBQWNtQyxvQkFBZCxHQUFxQyxlQUFyQzs7SUN2V01JOzs7Ozs7Ozs7dUJBUVM7Ozs7Ozs7Ozs7OztRQVVSQyxhQUFMLEdBQXFCLE9BQXJCOzs7Ozs7Ozs7Ozs2QkFNVTs7UUFFTEMsc0JBQUw7UUFDS0MsYUFBTCxHQUFxQixJQUFyQjs7Ozs7Ozs7Ozs7b0RBUWlDbmQsWUFBWTtPQUN6QyxDQUFDLEtBQUtvZCxlQUFWLEVBQTJCO1NBQ3JCQSxlQUFMLEdBQXVCejJCLFFBQVFFLFFBQVIsQ0FBaUJpSCxhQUFqQixDQUErQixNQUEvQixDQUF2Qjs7O1FBR0l1dkIsOEJBQUwsQ0FBb0NyZCxVQUFwQyxFQUFnRCxLQUFLb2QsZUFBckQ7O1FBRUtBLGVBQUwsQ0FBcUJsZCxTQUFyQixHQUFpQ0YsVUFBakM7Ozs7Ozs7Ozs7OzsyQ0FTd0JzZCxVQUFVO09BQzlCQyxtQkFBbUI1ZCxNQUFNMmQsUUFBTixFQUFnQk4sV0FBV2hmLFNBQVgsQ0FBcUJ3ZixlQUFyQyxDQUF2QjtPQUNJRCxnQkFBSixFQUFzQjtTQUNoQkosYUFBTCxDQUFtQjF4QixJQUFuQixDQUF3QjZ4QixRQUF4Qjs7T0FFR0EsU0FBU24wQixFQUFiLEVBQWlCO1FBQ1pzMEIsYUFBYTkyQixRQUFRRSxRQUFSLENBQWlCOG5CLGNBQWpCLENBQWdDMk8sU0FBU24wQixFQUF6QyxDQUFqQjtRQUNJczBCLFVBQUosRUFBZ0I7Z0JBQ0podUIsVUFBWCxDQUFzQml1QixZQUF0QixDQUFtQ0osUUFBbkMsRUFBNkNHLFdBQVdFLFdBQXhEOzs7O1dBSU05MkIsUUFBUixDQUFpQnVJLElBQWpCLENBQXNCakIsV0FBdEIsQ0FBa0NtdkIsUUFBbEM7Ozs7Ozs7Ozs7c0RBT21DO09BQy9CTSxjQUFjLEtBQUtSLGVBQUwsQ0FBcUIzSCxhQUFyQixDQUFtQyxNQUFuQyxDQUFsQjtPQUNJLENBQUM5dUIsUUFBUUUsUUFBUixDQUFpQmd4QixJQUFqQixDQUFzQjF1QixFQUEzQixFQUErQjtZQUN0QnRDLFFBQVIsQ0FBaUJneEIsSUFBakIsQ0FBc0IxdUIsRUFBdEIsR0FBMkIsbUJBQW1CSCxRQUE5Qzs7T0FFRzQwQixXQUFKLEVBQWlCO2dCQUNKejBCLEVBQVosR0FBaUJ4QyxRQUFRRSxRQUFSLENBQWlCZ3hCLElBQWpCLENBQXNCMXVCLEVBQXZDOzs7Ozs7Ozs7O2lEQU82QitqQixTQUFTclosTUFBTTthQUNuQ3FaLFFBQVE3YixPQUFSLENBQWdCLGNBQWhCLEVBQWdDLFFBQWhDLENBQVY7YUFDVTZiLFFBQVE3YixPQUFSLENBQWdCLGVBQWhCLEVBQWlDLFNBQWpDLENBQVY7UUFDSzZPLFNBQUwsR0FBaUJnTixPQUFqQjtPQUNJMlEsY0FBY2hxQixLQUFLNGhCLGFBQUwsQ0FBbUIsT0FBbkIsQ0FBbEI7T0FDSW9JLFdBQUosRUFBaUI7VUFDVkMsbUJBQU4sQ0FBMEJqcUIsSUFBMUI7VUFDTWtxQixrQkFBTixDQUF5QkYsV0FBekIsRUFBc0NocUIsSUFBdEM7Ozs7Ozs7Ozs7b0NBT2dCO1FBQ1ptcUIsb0JBQUw7Ozs7Ozs7Ozs7eUNBT3NCO09BQ2xCLEtBQUtiLGFBQVQsRUFBd0I7U0FDbEJBLGFBQUwsQ0FBbUJ4b0IsT0FBbkIsQ0FBMkIsVUFBQzVHLEtBQUQ7WUFBV29ULGFBQWFwVCxLQUFiLENBQVg7S0FBM0I7Ozs7Ozs7Ozs7a0NBT2N5ZixVQUFVOzs7T0FDckJ5USx5QkFBeUIsS0FBS0MseUJBQUwsQ0FDNUJwWixXQUFXNkksbUJBRGlCLEVBQ0lxUCxXQUFXaGYsU0FBWCxDQUFxQm1ILE9BRHpCLEVBRTVCNlgsV0FBV2hmLFNBQVgsQ0FBcUJtZ0IsZ0JBRk8sRUFFV25CLFdBQVdoZixTQUFYLENBQXFCb2dCLGdCQUZoQyxDQUE3Qjs7VUFJT0gsdUJBQXVCNXpCLElBQXZCLENBQTRCO3NJQUE0Qm1qQixRQUE1QjtJQUE1QixDQUFQOzs7Ozs7Ozs7aUNBTWNBLFVBQVU7OztRQUNuQjJQLGFBQUwsR0FBcUIsRUFBckI7T0FDSWtCLHdCQUF3QixLQUFLSCx5QkFBTCxDQUMzQjNZLGlCQUFpQitZLGtCQURVLEVBQ1V0QixXQUFXaGYsU0FBWCxDQUFxQjBILE1BRC9CLEVBRTNCc1gsV0FBV2hmLFNBQVgsQ0FBcUJ3ZixlQUZNLEVBRVdSLFdBQVdoZixTQUFYLENBQXFCdWdCLGVBRmhDLEVBRzNCLEtBQUtDLHdCQUFMLENBQThCcHhCLElBQTlCLENBQW1DLElBQW5DLENBSDJCLENBQTVCOztVQUtPaXhCLHNCQUFzQmgwQixJQUF0QixDQUEyQjtxSUFBMkJtakIsUUFBM0I7SUFBM0IsQ0FBUDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzRDQWtCeUJpUixhQUFhMWdCLFVBQVUyZ0IsbUJBQW1CQyxtQkFBbUJDLHNCQUFzQjs7O09BQ3hHQyxVQUFVLEtBQUtDLHdCQUFMLENBQThCL2dCLFFBQTlCLENBQWQ7T0FDSWdoQixtQkFBbUIsS0FBS0MsaUJBQUwsQ0FBdUJOLGlCQUF2QixDQUF2QjtPQUNJTyxrQkFBa0IsS0FBS0QsaUJBQUwsQ0FBdUJMLGlCQUF2QixDQUF0Qjs7O21CQUdnQmhxQixPQUFoQixDQUF3QixVQUFDdXFCLFFBQUQsRUFBYztRQUNqQ0MsY0FBYyxPQUFLQyxlQUFMLENBQXFCRixRQUFyQixDQUFsQjtRQUNJQyxXQUFKLEVBQWlCO2dCQUNMRSx1QkFBWCxDQUFtQ0YsV0FBbkMsSUFBa0QsSUFBbEQ7O0lBSEY7O09BT0lHLE9BQU96ZixlQUFYO1dBQ1FsTCxPQUFSLENBQWdCLFVBQUN1cUIsUUFBRCxFQUFjO1FBQ3pCQyxjQUFjLE9BQUtDLGVBQUwsQ0FBcUJGLFFBQXJCLENBQWxCOztRQUVJLENBQUNsQyxXQUFXcUMsdUJBQVgsQ0FBbUNGLFdBQW5DLENBQUwsRUFBc0Q7VUFDaERoeEIsV0FBTCxDQUFpQit3QixRQUFqQjs7O1FBR0dDLGVBQWV4ZixNQUFNdWYsUUFBTixFQUFnQlAsaUJBQWhCLENBQW5CLEVBQXVEO2dCQUMzQ1UsdUJBQVgsQ0FBbUNGLFdBQW5DLElBQWtELElBQWxEOztJQVJGOztVQVlPLElBQUl6WSxrQkFBSixDQUF1QixVQUFDZ0IsT0FBRCxFQUFhO2dCQUM5QjRYLElBQVosRUFBa0IsWUFBTTtzQkFDTjNxQixPQUFqQixDQUF5QixVQUFDdXFCLFFBQUQ7YUFBYy9kLGFBQWErZCxRQUFiLENBQWQ7TUFBekI7O0tBREQsRUFHR04sb0JBSEg7SUFETSxDQUFQOzs7Ozs7Ozs7dUJBV0lwUixVQUFVOzs7VUFDUHZKLDRHQUFXdUosUUFBWCxFQUFxQm5qQixJQUFyQixDQUEwQixZQUFNO1VBQ2hDeXpCLG1CQUFOLENBQTBCajNCLFNBQVNxSCxlQUFuQztVQUNNNnZCLGtCQUFOLENBQXlCLE9BQUtYLGVBQTlCLEVBQStDdjJCLFNBQVNxSCxlQUF4RDtJQUZNLENBQVA7Ozs7Ozs7Ozs7OztrQ0FZZWd4QixVQUFVO1VBQ2xCQSxTQUFTLzFCLEVBQVQsSUFBZSsxQixTQUFTaHRCLElBQXhCLElBQWdDZ3RCLFNBQVNqeEIsR0FBekMsSUFBZ0QsRUFBdkQ7Ozs7Ozs7OztvQ0FNaUJncEIsV0FBVztPQUN4QnBKLFVBQVUsS0FBS3VQLGVBQUwsQ0FBcUIzSCxhQUFyQixDQUFtQyxNQUFNd0IsU0FBekMsQ0FBZDtPQUNJcEosT0FBSixFQUFhO1FBQ1JJLGVBQWVKLFFBQVE0SCxhQUFSLENBQXNCLE1BQU13QixTQUFOLEdBQWtCLEdBQWxCLEdBQXdCakosUUFBUUksT0FBdEQsQ0FBbkI7UUFDSUgsWUFBSixFQUFrQjtZQUNWQSxhQUFhL04sU0FBcEI7O1dBRU0yTixRQUFRM04sU0FBZixDQUxZOzs7Ozs7Ozs7OztxQ0FhSztVQUNYLEtBQUsrYyxhQUFaOzs7Ozs7Ozs7dUJBTUlobUIsTUFBTTs7O1VBQ0hnTiw0R0FBV2hOLElBQVgsRUFDTDVNLElBREssQ0FDQSxtQkFBVztXQUNYazFCLGlDQUFMLENBQXVDclMsT0FBdkM7V0FDS3NTLCtCQUFMO1dBQ0tDLGlDQUFMO1FBQ0lsRyxHQUFHUyxJQUFQLEVBQWE7WUFDUDBGLCtCQUFMOztXQUVNeFMsT0FBUDtJQVJLLENBQVA7Ozs7Ozs7Ozs7O29EQWlCaUM7OztPQUM3QjZSLG1CQUFtQixLQUFLRCx3QkFBTCxDQUE4QjlCLFdBQVdoZixTQUFYLENBQXFCd2YsZUFBbkQsQ0FBdkI7b0JBQ2lCN29CLE9BQWpCLENBQXlCLFVBQUM1RyxLQUFEO1dBQVcsT0FBSzR4QiwwQkFBTCxDQUFnQzV4QixLQUFoQyxDQUFYO0lBQXpCOzs7Ozs7Ozs7OzZDQU8wQkEsT0FBTztPQUM3QkEsTUFBTW1FLElBQVYsRUFBZ0I7UUFDWG9yQixXQUFXMzJCLFFBQVFFLFFBQVIsQ0FBaUJpSCxhQUFqQixDQUErQkMsTUFBTWtULE9BQXJDLENBQWY7VUFDTS9PLElBQU4sR0FBYSxJQUFJNkMsR0FBSixDQUFRaEgsTUFBTW1FLElBQWQsRUFBb0JtcEIsVUFBcEIsR0FBaUNuekIsUUFBakMsRUFBYjtVQUNNNjFCLGtCQUFOLENBQXlCaHdCLEtBQXpCLEVBQWdDdXZCLFFBQWhDO1VBQ003dEIsVUFBTixDQUFpQm13QixZQUFqQixDQUE4QnRDLFFBQTlCLEVBQXdDdnZCLEtBQXhDO1VBQ01tVCxRQUFOLEdBQWlCLElBQWpCOzs7Ozs7Ozs7Ozs7MkNBU3VCbkQsVUFBVTtVQUMzQnpTLE1BQU1PLFNBQU4sQ0FBZ0JzSyxLQUFoQixDQUFzQnBLLElBQXRCLENBQTJCLEtBQUtxeEIsZUFBTCxDQUFxQi9hLGdCQUFyQixDQUFzQ3RFLFFBQXRDLENBQTNCLENBQVA7Ozs7Ozs7Ozs7O29DQVFpQkEsVUFBVTtVQUNwQnpTLE1BQU1PLFNBQU4sQ0FBZ0JzSyxLQUFoQixDQUFzQnBLLElBQXRCLENBQTJCcEYsUUFBUUUsUUFBUixDQUFpQndiLGdCQUFqQixDQUFrQ3RFLFFBQWxDLENBQTNCLENBQVA7Ozs7Ozs7OzsyQ0FNd0I7UUFDbkJxZixlQUFMLEdBQXVCLElBQXZCOzs7Ozs7Ozs7b0RBTWlDO09BQzdCOVAsUUFBUSxLQUFLOFAsZUFBTCxDQUFxQjNILGFBQXJCLENBQW1DLEtBQUt3SCxhQUF4QyxDQUFaO09BQ0kzUCxLQUFKLEVBQVc7U0FDTHVTLFFBQUwsQ0FBY3ZTLE1BQU13UyxXQUFOLENBQWtCNWMsSUFBbEIsRUFBZDs7Ozs7Ozs7Ozs7bUNBUWUrWixlQUFlO1FBQzFCQSxhQUFMLEdBQXFCQSxhQUFyQjs7OztFQWxUdUJ4Qzs7Ozs7Ozs7OztBQTZUekJ1QyxXQUFXaGYsU0FBWCxHQUF1QjtVQUNiLDBCQURhO21CQUVKLHNDQUZJO21CQUdKLHNDQUhJO1NBSWQsZ0RBSmM7a0JBS0wsd0VBTEs7a0JBTUw7Q0FObEI7Ozs7Ozs7O0FBZUFnZixXQUFXcUMsdUJBQVgsR0FBcUMsRUFBckM7O0lDL1VNVTs7Ozs7OztvQ0FNUzs7Ozs7Ozs7OztRQVFSQyxHQUFMLEdBQVcsSUFBWDs7Ozs7Ozs7O1FBU0tDLFdBQUwsR0FBbUIsSUFBbkI7Ozs7Ozs7Ozs7OzJCQU1RO09BQ0osQ0FBQ24yQixVQUFVLEtBQUttMkIsV0FBZixDQUFMLEVBQWtDO1VBQzNCLElBQUk3NEIsS0FBSixDQUFVLCtDQUNmLHVEQURlLEdBRWYsb0NBRkssQ0FBTjs7O09BS0csQ0FBQyxLQUFLNjRCLFdBQUwsQ0FBaUJDLFlBQWpCLENBQThCQyxlQUFldEssS0FBN0MsQ0FBTCxFQUEwRDtZQUNqRHRJLEdBQVIsQ0FBWSxxREFDWCxnRUFEVyxHQUVYLGdEQUZEOzs7O09BTUcsS0FBS3lTLEdBQVQsRUFBYztVQUNQLElBQUk1NEIsS0FBSixDQUFVLG9DQUFWLENBQU47OztXQUdPbW1CLEdBQVIsQ0FBWSx3Q0FBWjs7UUFFS3lTLEdBQUwsR0FBVyxJQUFJaFIsS0FBSixFQUFYO1FBQ0tvUixlQUFMO1FBQ0tDLGlCQUFMO1FBQ0tDLGlCQUFMO1FBQ0tDLHFCQUFMO1FBQ0tDLHdCQUFMO1FBQ0tDLDZCQUFMO1FBQ0tDLGNBQUw7Ozs7Ozs7Ozs7b0NBT2lCO09BQ2IsS0FBS1YsR0FBVCxFQUFjO1NBQ1JBLEdBQUwsQ0FBUzlJLE9BQVQ7Ozs7Ozs7Ozs7OzJCQVFPO1VBQ0QsS0FBSzhJLEdBQVo7Ozs7Ozs7Ozs7bUNBT2dCO1VBQ1QsS0FBS0MsV0FBWjs7Ozs7Ozs7O29DQU1pQjs7O09BQ2JVLGlCQUFpQix5QkFBckI7UUFDS0Msd0JBQUwsQ0FBOEJELGNBQTlCLEVBQThDaHNCLE9BQTlDLENBQXNELFVBQUMxQyxJQUFEO1dBQVUsT0FBSzR1QixvQkFBTCxDQUEwQjV1QixJQUExQixDQUFWO0lBQXREO09BQ0ksQ0FBQyxLQUFLK3RCLEdBQUwsQ0FBU2MsU0FBVCxFQUFMLEVBQTJCO1NBQ3JCZCxHQUFMLENBQVNlLFNBQVQsQ0FBbUIsSUFBSW5VLEtBQUosQ0FBVSxJQUFWLEVBQWdCb1EsVUFBaEIsQ0FBbkI7WUFDUXpQLEdBQVIsQ0FBWSxtREFBWjs7Ozs7Ozs7OztzQ0FPa0I7OztPQUNmeVQsbUJBQW1CLE1BQU1iLGVBQWV0UyxPQUFyQixHQUErQixHQUF0RDtRQUNLK1Msd0JBQUwsQ0FBOEJJLGdCQUE5QixFQUFnRHJzQixPQUFoRCxDQUF3RCxVQUFDc3NCLGNBQUQsRUFBb0I7V0FDdEVDLGdDQUFMLENBQXNDRCxjQUF0QztXQUNLakIsR0FBTCxDQUFTbUIsV0FBVCxDQUFxQkYsZUFBZTkzQixFQUFwQztJQUZEOzs7Ozs7Ozs7bUNBU2dCO09BQ1osS0FBSzgyQixXQUFMLENBQWlCQyxZQUFqQixDQUE4QkMsZUFBZWlCLFFBQTdDLENBQUosRUFBNEQ7U0FDdERwQixHQUFMLENBQVNvQixRQUFUOzs7Ozs7Ozs7Ozs7dUNBU21CbnZCLE1BQU07T0FDdEJpYSxRQUFRLElBQUlVLEtBQUosQ0FBVSxLQUFLeVUsd0JBQUwsQ0FBOEJwdkIsSUFBOUIsQ0FBVixFQUErQyxLQUFLcXZCLDJCQUFMLENBQWlDcnZCLElBQWpDLENBQS9DLENBQVo7UUFDSyt0QixHQUFMLENBQVNlLFNBQVQsQ0FBbUI3VSxLQUFuQjtXQUNRcUIsR0FBUixDQUFZLHlCQUF5QnJCLE1BQU1xVixPQUFOLEVBQXJDOzs7Ozs7Ozs7Ozs4Q0FRMkJ0dkIsTUFBTTtPQUM3QjZILFVBQVU3SCxLQUFLdXZCLFlBQUwsQ0FBa0IsTUFBbEIsQ0FBZDtPQUNJLzNCLGdCQUFnQnFRLE9BQWhCLENBQUosRUFBOEI7Y0FDbkJoSyxPQUFPMnhCLGVBQVAsQ0FBdUIzbkIsT0FBdkIsQ0FBVjs7VUFFTUEsT0FBUDs7Ozs7Ozs7Ozs7MkNBUXdCN0gsTUFBTTtPQUMxQmdGLE9BQU9oRixLQUFLdXZCLFlBQUwsQ0FBa0IsTUFBbEIsQ0FBWDtPQUNJLzNCLGdCQUFnQndOLElBQWhCLENBQUosRUFBMkI7UUFDdEJBLEtBQUs3TyxPQUFMLENBQWEsUUFBYixNQUEyQixDQUEvQixFQUFrQztZQUMxQixJQUFJMmpCLE1BQUosQ0FBVzlVLEtBQUs5TyxTQUFMLENBQWUsQ0FBZixDQUFYLENBQVA7OztVQUdLOE8sSUFBUDs7Ozs7Ozs7O3NDQU1tQjtPQUNmRixXQUFXLEtBQUtrcEIsV0FBTCxDQUFpQnVCLFlBQWpCLENBQThCckIsZUFBZXBwQixRQUE3QyxDQUFmO09BQ0l0TixnQkFBZ0JzTixRQUFoQixDQUFKLEVBQStCO1NBQ3pCaXBCLEdBQUwsQ0FBUzBCLFdBQVQsQ0FBcUIzcUIsUUFBckI7WUFDUXdXLEdBQVIsQ0FBWSw2QkFBNkJ4VyxRQUF6Qzs7Ozs7Ozs7Ozs7MENBUXNCO09BQ25CMFksZUFBZSxLQUFLd1EsV0FBTCxDQUFpQnVCLFlBQWpCLENBQThCckIsZUFBZTFRLFlBQTdDLENBQW5CO09BQ0lobUIsZ0JBQWdCZ21CLFlBQWhCLENBQUosRUFBbUM7U0FDN0J1USxHQUFMLENBQVNuUCxlQUFULENBQXlCcEIsWUFBekI7WUFDUWxDLEdBQVIsQ0FBWSxpQ0FBaUNrQyxZQUE3Qzs7Ozs7Ozs7Ozs7NkNBUXlCO09BQ3RCQyxrQkFBa0IsS0FBS3VRLFdBQUwsQ0FBaUJ1QixZQUFqQixDQUE4QnJCLGVBQWV6USxlQUE3QyxDQUF0QjtPQUNJam1CLGdCQUFnQmltQixlQUFoQixDQUFKLEVBQXNDO1NBQ2hDc1EsR0FBTCxDQUFTMkIsa0JBQVQsQ0FBNEJqUyxlQUE1QjtZQUNRbkMsR0FBUixDQUFZLHFDQUFxQ21DLGVBQWpEOzs7Ozs7Ozs7OztrREFROEI7T0FDM0JVLHVCQUF1QixLQUFLNlAsV0FBTCxDQUFpQnVCLFlBQWpCLENBQThCckIsZUFBZS9QLG9CQUE3QyxDQUEzQjtPQUNJM21CLGdCQUFnQjJtQixvQkFBaEIsQ0FBSixFQUEyQztRQUN0Q0EseUJBQXlCLE9BQTdCLEVBQXNDO1VBQ2hDNFAsR0FBTCxDQUFTNEIsdUJBQVQsQ0FBaUMsS0FBakM7S0FERCxNQUVPO1VBQ0Q1QixHQUFMLENBQVM0Qix1QkFBVCxDQUFpQyxJQUFqQzs7WUFFT3JVLEdBQVIsQ0FBWSwwQ0FBMEM2QyxvQkFBdEQ7Ozs7Ozs7Ozs7OzsyQ0FTdUJyUyxVQUFVO1VBQzNCelMsTUFBTU8sU0FBTixDQUFnQnNLLEtBQWhCLENBQXNCcEssSUFBdEIsQ0FBMkJwRixRQUFRRSxRQUFSLENBQWlCd2IsZ0JBQWpCLENBQWtDdEUsUUFBbEMsQ0FBM0IsQ0FBUDs7Ozs7Ozs7Ozs7O21EQVNnQ25GLFNBQVM7T0FDckMsQ0FBQ0EsUUFBUXpQLEVBQVQsSUFBZXlQLFlBQVlqUyxRQUFRRSxRQUFSLENBQWlCZ3hCLElBQWhELEVBQXNEO1lBQzdDMXVCLEVBQVIsR0FBYSxtQkFBbUJILFFBQWhDOzs7Ozs7Ozs7OztpQ0FRYWkzQixhQUFhO1FBQ3RCQSxXQUFMLEdBQW1CQSxXQUFuQjs7OztFQXpPb0N0d0I7O0FDSnRDOzs7O0FBSUEsSUFBSWt5Qix1QkFBdUIsSUFBSTlCLHVCQUFKLEVBQTNCOztBQUVBcDVCLFFBQVFFLFFBQVIsQ0FBaUIrRyxnQkFBakIsQ0FBa0Msa0JBQWxDLEVBQXNELFlBQVc7dUJBQzNDazBCLGNBQXJCLENBQW9DbjdCLFFBQVFFLFFBQVIsQ0FBaUJneEIsSUFBckQ7dUJBQ3FCa0ssTUFBckI7Q0FGRDs7QUNYQTs7O0FBR0EsY0FBZSxnQkFBZjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7In0="}